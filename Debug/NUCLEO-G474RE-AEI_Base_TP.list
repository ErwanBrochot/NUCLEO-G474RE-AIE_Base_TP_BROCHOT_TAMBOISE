
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800c988  0800c988  0001c988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d17c  0800d17c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d184  0800d184  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001dc  0800d368  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800d368  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d25e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ff  00000000  00000000  0003d46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00040d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00042408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aab5  00000000  00000000  00043918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b938  00000000  00000000  0006e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011409d  00000000  00000000  00089d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019dda2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  0019ddf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c96c 	.word	0x0800c96c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800c96c 	.word	0x0800c96c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fce3 	bl	80099a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fe4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_ADC1_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001010:	2201      	movs	r2, #1
 8001012:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001016:	2201      	movs	r2, #1
 8001018:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_ADC1_Init+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001024:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0xec>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_ADC1_Init+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_ADC1_Init+0xec>)
 800104a:	f001 fcff 	bl	8002a4c <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001054:	f000 facc 	bl	80015f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001064:	f002 fde6 	bl	8003c34 <HAL_ADCEx_MultiModeConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800106e:	f000 fabf 	bl	80015f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_ADC1_Init+0xf0>)
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001076:	2306      	movs	r3, #6
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107e:	237f      	movs	r3, #127	; 0x7f
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001082:	2304      	movs	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001090:	f001 ff86 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800109a:	f000 faa9 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000022c 	.word	0x2000022c
 80010ac:	04300002 	.word	0x04300002

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09e      	sub	sp, #120	; 0x78
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2254      	movs	r2, #84	; 0x54
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f008 fc65 	bl	80099a0 <memset>
  if(adcHandle->Instance==ADC1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010de:	d15f      	bne.n	80011a0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fa9f 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010fc:	f000 fa78 	bl	80015f0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001130:	2301      	movs	r3, #1
 8001132:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 fa8f 	bl	8004668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0x100>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001152:	2205      	movs	r2, #5
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001176:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001186:	f002 ff3d 	bl	8004004 <HAL_DMA_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001190:	f000 fa2e 	bl	80015f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3778      	adds	r7, #120	; 0x78
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	20000298 	.word	0x20000298
 80011b0:	40020008 	.word	0x40020008

080011b4 <HAL_ADC_ConvCpltCallback>:
/*
 * void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 * Met le flag a 1 quand le buffer est remli
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_ADC_ConvCpltCallback+0x24>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d102      	bne.n	80011ca <HAL_ADC_ConvCpltCallback+0x16>
  {
	  adcDMAflag=1;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_ADC_ConvCpltCallback+0x28>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
  }

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000022c 	.word	0x2000022c
 80011dc:	20000220 	.word	0x20000220

080011e0 <meanADCValue>:
 * OFFSET_DEFAULT_ADC: A définir dans adc.h pour compenser une erreur d'offset dans l'ADC
 * HALL_GAIN: défini dans adc.h selon la datasheet du convertisseur.
 * VOLTAGE_HALL_OC: Tension dans le hall en circuit ouvert, définit dans adc.h selon la datasheet du convertisseur
 */
void meanADCValue (void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	int i;
	int sum=0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
	if (adcDMAflag==1)
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <meanADCValue+0xd8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d158      	bne.n	80012a4 <meanADCValue+0xc4>
	{
		adcDMAflag=0;
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <meanADCValue+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	e009      	b.n	8001212 <meanADCValue+0x32>
		{
			sum=sum+ adcBuffer[i];
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <meanADCValue+0xdc>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	603b      	str	r3, [r7, #0]
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b09      	cmp	r3, #9
 8001216:	ddf2      	ble.n	80011fe <meanADCValue+0x1e>
		}

		hallVoltageValue= ((sum/ADC_HALL_BUFFER)*3.3/4096.0)+OFFSET_DEFAULT_ADC;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4a29      	ldr	r2, [pc, #164]	; (80012c0 <meanADCValue+0xe0>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1092      	asrs	r2, r2, #2
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9b4 	bl	8000594 <__aeabi_i2d>
 800122c:	a320      	add	r3, pc, #128	; (adr r3, 80012b0 <meanADCValue+0xd0>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff fa19 	bl	8000668 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <meanADCValue+0xe4>)
 8001244:	f7ff fb3a 	bl	80008bc <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <meanADCValue+0xe8>)
 8001256:	f7ff f851 	bl	80002fc <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fcd9 	bl	8000c18 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <meanADCValue+0xec>)
 800126a:	6013      	str	r3, [r2, #0]
		hallCurrentValue= (hallVoltageValue-VOLTAGE_HALL_OC)*HALL_GAIN;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <meanADCValue+0xec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f9a1 	bl	80005b8 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <meanADCValue+0xf0>)
 800127c:	f7ff f83c 	bl	80002f8 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <meanADCValue+0xf4>)
 800128e:	f7ff f9eb 	bl	8000668 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fcbd 	bl	8000c18 <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <meanADCValue+0xf8>)
 80012a2:	6013      	str	r3, [r2, #0]

	}
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	66666666 	.word	0x66666666
 80012b4:	400a6666 	.word	0x400a6666
 80012b8:	20000220 	.word	0x20000220
 80012bc:	200001f8 	.word	0x200001f8
 80012c0:	66666667 	.word	0x66666667
 80012c4:	40b00000 	.word	0x40b00000
 80012c8:	3fd00000 	.word	0x3fd00000
 80012cc:	20000224 	.word	0x20000224
 80012d0:	40040000 	.word	0x40040000
 80012d4:	40280000 	.word	0x40280000
 80012d8:	20000228 	.word	0x20000228

080012dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_DMA_Init+0x50>)
 80012e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <MX_DMA_Init+0x50>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6493      	str	r3, [r2, #72]	; 0x48
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_DMA_Init+0x50>)
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_DMA_Init+0x50>)
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <MX_DMA_Init+0x50>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6493      	str	r3, [r2, #72]	; 0x48
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_DMA_Init+0x50>)
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	200b      	movs	r0, #11
 8001318:	f002 fe4c 	bl	8003fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800131c:	200b      	movs	r0, #11
 800131e:	f002 fe63 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <MX_GPIO_Init+0xe4>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <MX_GPIO_Init+0xe4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a26      	ldr	r2, [pc, #152]	; (8001414 <MX_GPIO_Init+0xe4>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_GPIO_Init+0xe4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2108      	movs	r1, #8
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <MX_GPIO_Init+0xe8>)
 8001394:	f003 faea 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2120      	movs	r1, #32
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f003 fae4 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4619      	mov	r1, r3
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <MX_GPIO_Init+0xe8>)
 80013bc:	f003 f954 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 80013c0:	2308      	movs	r3, #8
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <MX_GPIO_Init+0xe8>)
 80013d8:	f003 f946 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f003 f937 	bl	8004668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2028      	movs	r0, #40	; 0x28
 8001400:	f002 fdd8 	bl	8003fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001404:	2028      	movs	r0, #40	; 0x28
 8001406:	f002 fdef 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	48000800 	.word	0x48000800

0800141c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001420:	f001 f873 	bl	800250a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001424:	f000 f854 	bl	80014d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001428:	f7ff ff82 	bl	8001330 <MX_GPIO_Init>
	MX_DMA_Init();
 800142c:	f7ff ff56 	bl	80012dc <MX_DMA_Init>
	MX_TIM1_Init();
 8001430:	f000 fcf4 	bl	8001e1c <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001434:	f000 ff82 	bl	800233c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001438:	f7ff fdc0 	bl	8000fbc <MX_ADC1_Init>
	MX_TIM2_Init();
 800143c:	f000 fdae 	bl	8001f9c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001440:	f000 fdfa 	bl	8002038 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001444:	f000 fe4e 	bl	80020e4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001448:	2201      	movs	r2, #1
 800144a:	4918      	ldr	r1, [pc, #96]	; (80014ac <main+0x90>)
 800144c:	4818      	ldr	r0, [pc, #96]	; (80014b0 <main+0x94>)
 800144e:	f006 fae9 	bl	8007a24 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f001 f890 	bl	8002578 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <main+0x98>)
 800145a:	f004 fb91 	bl	8005b80 <HAL_TIM_Base_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800145e:	217f      	movs	r1, #127	; 0x7f
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <main+0x9c>)
 8001462:	f002 fb85 	bl	8003b70 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_HALL_BUFFER);
 8001466:	220a      	movs	r2, #10
 8001468:	4914      	ldr	r1, [pc, #80]	; (80014bc <main+0xa0>)
 800146a:	4813      	ldr	r0, [pc, #76]	; (80014b8 <main+0x9c>)
 800146c:	f001 fcb0 	bl	8002dd0 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0xa4>)
 8001474:	f004 fe86 	bl	8006184 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <main+0xa8>)
 800147a:	f004 fbf1 	bl	8005c60 <HAL_TIM_Base_Start_IT>
	TIM4->CNT=32767;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0xac>)
 8001480:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
	shellInit();
 8001486:	f000 f92d 	bl	80016e4 <shellInit>
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <main+0xb0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0fb      	beq.n	800148a <main+0x6e>
			if(shellGetChar()){
 8001492:	f000 f95f 	bl	8001754 <shellGetChar>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <main+0x88>
				shellExec();
 800149c:	f000 f9ce 	bl	800183c <shellExec>
				shellPrompt();
 80014a0:	f000 f938 	bl	8001714 <shellPrompt>
			}
			uartRxReceived = 0;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <main+0xb0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 80014aa:	e7ee      	b.n	800148a <main+0x6e>
 80014ac:	200004ec 	.word	0x200004ec
 80014b0:	20000534 	.word	0x20000534
 80014b4:	20000404 	.word	0x20000404
 80014b8:	2000022c 	.word	0x2000022c
 80014bc:	200001f8 	.word	0x200001f8
 80014c0:	20000450 	.word	0x20000450
 80014c4:	2000049c 	.word	0x2000049c
 80014c8:	40000800 	.word	0x40000800
 80014cc:	200004e8 	.word	0x200004e8

080014d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2238      	movs	r2, #56	; 0x38
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 fa5e 	bl	80099a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f003 fa84 	bl	8004a00 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001500:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	2303      	movs	r3, #3
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800150a:	2306      	movs	r3, #6
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800150e:	2355      	movs	r3, #85	; 0x55
 8001510:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001516:	2302      	movs	r3, #2
 8001518:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fb20 	bl	8004b68 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800152e:	f000 f85f 	bl	80015f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2303      	movs	r3, #3
 8001538:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2104      	movs	r1, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fe24 	bl	8005198 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8001556:	f000 f84b 	bl	80015f0 <Error_Handler>
	}
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	; 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin== BUTTON_Pin)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0x16>
	{
		motorPowerOn();
 8001574:	f000 f842 	bl	80015fc <motorPowerOn>
	}

}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	int oldCodeurValue=0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
	int codeurValue=0;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d102      	bne.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_IncTick();
 800159a:	f000 ffcf 	bl	800253c <HAL_IncTick>
		oldCodeurValue=codeurValue;
		codeurValue= TIM4->CNT;
		speed=(codeurValue-oldCodeurValue)*FREQ_ECH_SPEED*60/NUMBER_OF_POINT;
	}
	/* USER CODE END Callback 1 */
}
 800159e:	e01c      	b.n	80015da <HAL_TIM_PeriodElapsedCallback+0x5a>
	else if (htim->Instance == TIM4){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d117      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x5a>
		oldCodeurValue=codeurValue;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	60fb      	str	r3, [r7, #12]
		codeurValue= TIM4->CNT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	60bb      	str	r3, [r7, #8]
		speed=(codeurValue-oldCodeurValue)*FREQ_ECH_SPEED*60/NUMBER_OF_POINT;
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da01      	bge.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x4a>
 80015c6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015ca:	131b      	asrs	r3, r3, #12
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40001000 	.word	0x40001000
 80015e8:	40000800 	.word	0x40000800
 80015ec:	200002f8 	.word	0x200002f8

080015f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001602:	2120      	movs	r1, #32
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f003 f9c8 	bl	800499c <HAL_GPIO_TogglePin>
	//Phase de démarage//
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET );
 800160c:	2201      	movs	r2, #1
 800160e:	2108      	movs	r1, #8
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <motorPowerOn+0x64>)
 8001612:	f003 f9ab 	bl	800496c <HAL_GPIO_WritePin>
	setAlpha(50);
 8001616:	2032      	movs	r0, #50	; 0x32
 8001618:	f000 f83c 	bl	8001694 <setAlpha>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800161c:	2100      	movs	r1, #0
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <motorPowerOn+0x68>)
 8001620:	f004 fbf8 	bl	8005e14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001624:	2100      	movs	r1, #0
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <motorPowerOn+0x68>)
 8001628:	f005 fea0 	bl	800736c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2 );
 800162c:	2104      	movs	r1, #4
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <motorPowerOn+0x68>)
 8001630:	f004 fbf0 	bl	8005e14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001634:	2104      	movs	r1, #4
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <motorPowerOn+0x68>)
 8001638:	f005 fe98 	bl	800736c <HAL_TIMEx_PWMN_Start>


	int i=0;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
	while (i<33)
 8001640:	e002      	b.n	8001648 <motorPowerOn+0x4c>
	{
		i++;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
	while (i<33)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b20      	cmp	r3, #32
 800164c:	ddf9      	ble.n	8001642 <motorPowerOn+0x46>
	}
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2108      	movs	r1, #8
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <motorPowerOn+0x64>)
 8001654:	f003 f98a 	bl	800496c <HAL_GPIO_WritePin>

}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	48000800 	.word	0x48000800
 8001664:	200003b8 	.word	0x200003b8

08001668 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800166c:	2120      	movs	r1, #32
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f003 f993 	bl	800499c <HAL_GPIO_TogglePin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001682:	2120      	movs	r1, #32
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f003 f988 	bl	800499c <HAL_GPIO_TogglePin>

}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <setAlpha>:
  * @brief  Set the dutyCycle
  * @param  alpha : target alpha of the Transitors
  * @retval None
  */
void setAlpha(int alpha)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	TIM1->CCR1=alpha*(TIM1->ARR)/100;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <setAlpha+0x48>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <setAlpha+0x48>)
 80016a8:	490d      	ldr	r1, [pc, #52]	; (80016e0 <setAlpha+0x4c>)
 80016aa:	fba1 1303 	umull	r1, r3, r1, r3
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=(100-alpha)*(TIM1->ARR)/100;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <setAlpha+0x48>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <setAlpha+0x48>)
 80016c4:	4906      	ldr	r1, [pc, #24]	; (80016e0 <setAlpha+0x4c>)
 80016c6:	fba1 1303 	umull	r1, r3, r1, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	51eb851f 	.word	0x51eb851f

080016e4 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	226c      	movs	r2, #108	; 0x6c
 80016ee:	4906      	ldr	r1, [pc, #24]	; (8001708 <shellInit+0x24>)
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <shellInit+0x28>)
 80016f2:	f006 f900 	bl	80078f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	221a      	movs	r2, #26
 80016fc:	4904      	ldr	r1, [pc, #16]	; (8001710 <shellInit+0x2c>)
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <shellInit+0x28>)
 8001700:	f006 f8f9 	bl	80078f6 <HAL_UART_Transmit>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	0800ca0c 	.word	0x0800ca0c
 800170c:	20000534 	.word	0x20000534
 8001710:	0800c9f0 	.word	0x0800c9f0

08001714 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	221a      	movs	r2, #26
 800171e:	4903      	ldr	r1, [pc, #12]	; (800172c <shellPrompt+0x18>)
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <shellPrompt+0x1c>)
 8001722:	f006 f8e8 	bl	80078f6 <HAL_UART_Transmit>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800c9f0 	.word	0x0800c9f0
 8001730:	20000534 	.word	0x20000534

08001734 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	2214      	movs	r2, #20
 800173e:	4903      	ldr	r1, [pc, #12]	; (800174c <shellCmdNotFound+0x18>)
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <shellCmdNotFound+0x1c>)
 8001742:	f006 f8d8 	bl	80078f6 <HAL_UART_Transmit>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	0800ccec 	.word	0x0800ccec
 8001750:	20000534 	.word	0x20000534

08001754 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <shellGetChar+0xc8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b0d      	cmp	r3, #13
 8001764:	d002      	beq.n	800176c <shellGetChar+0x18>
 8001766:	2b7f      	cmp	r3, #127	; 0x7f
 8001768:	d02f      	beq.n	80017ca <shellGetChar+0x76>
 800176a:	e040      	b.n	80017ee <shellGetChar+0x9a>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2203      	movs	r2, #3
 8001772:	492b      	ldr	r1, [pc, #172]	; (8001820 <shellGetChar+0xcc>)
 8001774:	482b      	ldr	r0, [pc, #172]	; (8001824 <shellGetChar+0xd0>)
 8001776:	f006 f8be 	bl	80078f6 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <shellGetChar+0xd4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <shellGetChar+0xd8>)
 8001782:	2100      	movs	r1, #0
 8001784:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <shellGetChar+0xdc>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 800178c:	4929      	ldr	r1, [pc, #164]	; (8001834 <shellGetChar+0xe0>)
 800178e:	4827      	ldr	r0, [pc, #156]	; (800182c <shellGetChar+0xd8>)
 8001790:	f008 fdac 	bl	800a2ec <strtok>
 8001794:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001796:	e00f      	b.n	80017b8 <shellGetChar+0x64>
			argv[argc++] = token;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <shellGetChar+0xdc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	b2d1      	uxtb	r1, r2
 80017a0:	4a23      	ldr	r2, [pc, #140]	; (8001830 <shellGetChar+0xdc>)
 80017a2:	7011      	strb	r1, [r2, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4a24      	ldr	r2, [pc, #144]	; (8001838 <shellGetChar+0xe4>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80017ae:	4921      	ldr	r1, [pc, #132]	; (8001834 <shellGetChar+0xe0>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f008 fd9b 	bl	800a2ec <strtok>
 80017b6:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ec      	bne.n	8001798 <shellGetChar+0x44>
		}

		idxCmd = 0;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <shellGetChar+0xd4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	71fb      	strb	r3, [r7, #7]
		break;
 80017c8:	e023      	b.n	8001812 <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <shellGetChar+0xd4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	b2d1      	uxtb	r1, r2
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <shellGetChar+0xd4>)
 80017d4:	7011      	strb	r1, [r2, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <shellGetChar+0xd8>)
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	2201      	movs	r2, #1
 80017e4:	490d      	ldr	r1, [pc, #52]	; (800181c <shellGetChar+0xc8>)
 80017e6:	480f      	ldr	r0, [pc, #60]	; (8001824 <shellGetChar+0xd0>)
 80017e8:	f006 f885 	bl	80078f6 <HAL_UART_Transmit>
		break;
 80017ec:	e011      	b.n	8001812 <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <shellGetChar+0xd4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	b2d1      	uxtb	r1, r2
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <shellGetChar+0xd4>)
 80017f8:	7011      	strb	r1, [r2, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <shellGetChar+0xc8>)
 80017fe:	7819      	ldrb	r1, [r3, #0]
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <shellGetChar+0xd8>)
 8001802:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	2201      	movs	r2, #1
 800180a:	4904      	ldr	r1, [pc, #16]	; (800181c <shellGetChar+0xc8>)
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <shellGetChar+0xd0>)
 800180e:	f006 f872 	bl	80078f6 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001812:	79fb      	ldrb	r3, [r7, #7]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200004ec 	.word	0x200004ec
 8001820:	0800ca78 	.word	0x0800ca78
 8001824:	20000534 	.word	0x20000534
 8001828:	2000033c 	.word	0x2000033c
 800182c:	200002fc 	.word	0x200002fc
 8001830:	20000364 	.word	0x20000364
 8001834:	0800c988 	.word	0x0800c988
 8001838:	20000340 	.word	0x20000340

0800183c <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8001840:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <shellExec+0x1f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	497c      	ldr	r1, [pc, #496]	; (8001a38 <shellExec+0x1fc>)
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fcea 	bl	8000220 <strcmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8083 	bne.w	800195a <shellExec+0x11e>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001854:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <shellExec+0x1f8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4978      	ldr	r1, [pc, #480]	; (8001a3c <shellExec+0x200>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fce0 	bl	8000220 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d137      	bne.n	80018d6 <shellExec+0x9a>
 8001866:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <shellExec+0x1f8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4975      	ldr	r1, [pc, #468]	; (8001a40 <shellExec+0x204>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fcd7 	bl	8000220 <strcmp>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <shellExec+0x4e>
 8001878:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <shellExec+0x1f8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4971      	ldr	r1, [pc, #452]	; (8001a44 <shellExec+0x208>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fcce 	bl	8000220 <strcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d125      	bne.n	80018d6 <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <shellExec+0x1f8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4618      	mov	r0, r3
 8001890:	f008 f858 	bl	8009944 <atoi>
 8001894:	4603      	mov	r3, r0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	2120      	movs	r1, #32
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f003 f864 	bl	800496c <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80018a4:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <shellExec+0x1f8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 f84b 	bl	8009944 <atoi>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <shellExec+0x20c>)
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4865      	ldr	r0, [pc, #404]	; (8001a4c <shellExec+0x210>)
 80018b6:	f008 fce5 	bl	800a284 <sniprintf>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <shellExec+0x214>)
 80018c0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <shellExec+0x214>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	495f      	ldr	r1, [pc, #380]	; (8001a4c <shellExec+0x210>)
 80018ce:	4861      	ldr	r0, [pc, #388]	; (8001a54 <shellExec+0x218>)
 80018d0:	f006 f811 	bl	80078f6 <HAL_UART_Transmit>
 80018d4:	e0ac      	b.n	8001a30 <shellExec+0x1f4>
		}
		else if(strcmp(argv[1],"speed")==0){
 80018d6:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <shellExec+0x1f8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	495f      	ldr	r1, [pc, #380]	; (8001a58 <shellExec+0x21c>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fc9f 	bl	8000220 <strcmp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d122      	bne.n	800192e <shellExec+0xf2>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <shellExec+0x1f8>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f008 f829 	bl	8009944 <atoi>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d110      	bne.n	800191a <shellExec+0xde>
 80018f8:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <shellExec+0x1f8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4950      	ldr	r1, [pc, #320]	; (8001a40 <shellExec+0x204>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc8e 	bl	8000220 <strcmp>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <shellExec+0xde>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	2230      	movs	r2, #48	; 0x30
 8001910:	4952      	ldr	r1, [pc, #328]	; (8001a5c <shellExec+0x220>)
 8001912:	4850      	ldr	r0, [pc, #320]	; (8001a54 <shellExec+0x218>)
 8001914:	f005 ffef 	bl	80078f6 <HAL_UART_Transmit>
 8001918:	e08a      	b.n	8001a30 <shellExec+0x1f4>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <shellExec+0x1f8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4618      	mov	r0, r3
 8001920:	f008 f810 	bl	8009944 <atoi>
 8001924:	4603      	mov	r3, r0
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fea7 	bl	800167a <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 800192c:	e080      	b.n	8001a30 <shellExec+0x1f4>
		else if(strcmp(argv[1],"alpha")==0){
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <shellExec+0x1f8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	494b      	ldr	r1, [pc, #300]	; (8001a60 <shellExec+0x224>)
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fc73 	bl	8000220 <strcmp>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <shellExec+0x118>
			setAlpha(atoi(argv[2]));
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <shellExec+0x1f8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f007 fffd 	bl	8009944 <atoi>
 800194a:	4603      	mov	r3, r0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fea1 	bl	8001694 <setAlpha>
}
 8001952:	e06d      	b.n	8001a30 <shellExec+0x1f4>
			shellCmdNotFound();
 8001954:	f7ff feee 	bl	8001734 <shellCmdNotFound>
}
 8001958:	e06a      	b.n	8001a30 <shellExec+0x1f4>
	else if (strcmp(argv[0],"measure")==0)
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <shellExec+0x1f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4941      	ldr	r1, [pc, #260]	; (8001a64 <shellExec+0x228>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc5d 	bl	8000220 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <shellExec+0x136>
		uartPrintADCValue();
 800196c:	f000 fd92 	bl	8002494 <uartPrintADCValue>
}
 8001970:	e05e      	b.n	8001a30 <shellExec+0x1f4>
	else if(strcmp(argv[0],"help")==0)
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <shellExec+0x1f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	493c      	ldr	r1, [pc, #240]	; (8001a68 <shellExec+0x22c>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fc51 	bl	8000220 <strcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <shellExec+0x15a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <shellExec+0x230>)
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <shellExec+0x218>)
 8001990:	f005 ffb1 	bl	80078f6 <HAL_UART_Transmit>
}
 8001994:	e04c      	b.n	8001a30 <shellExec+0x1f4>
	else if(strcmp(argv[0],"pinout")==0)
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <shellExec+0x1f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4935      	ldr	r1, [pc, #212]	; (8001a70 <shellExec+0x234>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fc3f 	bl	8000220 <strcmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d108      	bne.n	80019ba <shellExec+0x17e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 80019b0:	4930      	ldr	r1, [pc, #192]	; (8001a74 <shellExec+0x238>)
 80019b2:	4828      	ldr	r0, [pc, #160]	; (8001a54 <shellExec+0x218>)
 80019b4:	f005 ff9f 	bl	80078f6 <HAL_UART_Transmit>
}
 80019b8:	e03a      	b.n	8001a30 <shellExec+0x1f4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <shellExec+0x1f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	492e      	ldr	r1, [pc, #184]	; (8001a78 <shellExec+0x23c>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fc2d 	bl	8000220 <strcmp>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <shellExec+0x1b6>
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <shellExec+0x1f8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	492a      	ldr	r1, [pc, #168]	; (8001a7c <shellExec+0x240>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc24 	bl	8000220 <strcmp>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <shellExec+0x1b6>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	221a      	movs	r2, #26
 80019e4:	4926      	ldr	r1, [pc, #152]	; (8001a80 <shellExec+0x244>)
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <shellExec+0x218>)
 80019e8:	f005 ff85 	bl	80078f6 <HAL_UART_Transmit>
		motorPowerOn();
 80019ec:	f7ff fe06 	bl	80015fc <motorPowerOn>
 80019f0:	e01e      	b.n	8001a30 <shellExec+0x1f4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <shellExec+0x1f8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4920      	ldr	r1, [pc, #128]	; (8001a78 <shellExec+0x23c>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc11 	bl	8000220 <strcmp>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d112      	bne.n	8001a2a <shellExec+0x1ee>
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <shellExec+0x1f8>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	491e      	ldr	r1, [pc, #120]	; (8001a84 <shellExec+0x248>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fc08 	bl	8000220 <strcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <shellExec+0x1ee>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	221b      	movs	r2, #27
 8001a1c:	491a      	ldr	r1, [pc, #104]	; (8001a88 <shellExec+0x24c>)
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <shellExec+0x218>)
 8001a20:	f005 ff69 	bl	80078f6 <HAL_UART_Transmit>
		motorPowerOff();
 8001a24:	f7ff fe20 	bl	8001668 <motorPowerOff>
 8001a28:	e002      	b.n	8001a30 <shellExec+0x1f4>
		shellCmdNotFound();
 8001a2a:	f7ff fe83 	bl	8001734 <shellCmdNotFound>
}
 8001a2e:	e7ff      	b.n	8001a30 <shellExec+0x1f4>
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000340 	.word	0x20000340
 8001a38:	0800c98c 	.word	0x0800c98c
 8001a3c:	0800c990 	.word	0x0800c990
 8001a40:	0800c994 	.word	0x0800c994
 8001a44:	0800c998 	.word	0x0800c998
 8001a48:	0800c99c 	.word	0x0800c99c
 8001a4c:	200004f0 	.word	0x200004f0
 8001a50:	20000530 	.word	0x20000530
 8001a54:	20000534 	.word	0x20000534
 8001a58:	0800c9b8 	.word	0x0800c9b8
 8001a5c:	0800ccbc 	.word	0x0800ccbc
 8001a60:	0800c9c0 	.word	0x0800c9c0
 8001a64:	0800c9c8 	.word	0x0800c9c8
 8001a68:	0800c9d0 	.word	0x0800c9d0
 8001a6c:	0800ca7c 	.word	0x0800ca7c
 8001a70:	0800c9d8 	.word	0x0800c9d8
 8001a74:	0800cb80 	.word	0x0800cb80
 8001a78:	0800c9e0 	.word	0x0800c9e0
 8001a7c:	0800c9e8 	.word	0x0800c9e8
 8001a80:	0800cc84 	.word	0x0800cc84
 8001a84:	0800c9ec 	.word	0x0800c9ec
 8001a88:	0800cca0 	.word	0x0800cca0

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ac2:	f003 f841 	bl	8004b48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_InitTick+0xcc>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <HAL_InitTick+0xcc>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_InitTick+0xcc>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b02:	f107 020c 	add.w	r2, r7, #12
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fd19 	bl	8005544 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b12:	f003 fceb 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8001b16:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_InitTick+0xd0>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	3b01      	subs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_InitTick+0xd8>)
 8001b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001b46:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b48:	f003 ffc2 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11b      	bne.n	8001b92 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b5a:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <HAL_InitTick+0xd4>)
 8001b5c:	f004 f880 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d111      	bne.n	8001b92 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b6e:	2036      	movs	r0, #54	; 0x36
 8001b70:	f002 fa3a 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d808      	bhi.n	8001b8c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	2036      	movs	r0, #54	; 0x36
 8001b80:	f002 fa18 	bl	8003fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_InitTick+0xdc>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e002      	b.n	8001b92 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3730      	adds	r7, #48	; 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	20000368 	.word	0x20000368
 8001bac:	40001000 	.word	0x40001000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <DMA1_Channel1_IRQHandler+0x10>)
 8001c12:	f002 fbda 	bl	80043ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000298 	.word	0x20000298

08001c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM4_IRQHandler+0x10>)
 8001c26:	f004 fb3b 	bl	80062a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000049c 	.word	0x2000049c

08001c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART2_IRQHandler+0x10>)
 8001c3a:	f005 ff49 	bl	8007ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000534 	.word	0x20000534

08001c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c50:	f002 febe 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM6_DAC_IRQHandler+0x10>)
 8001c5e:	f004 fb1f 	bl	80062a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000368 	.word	0x20000368

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c86:	f007 fe61 	bl	800994c <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cae:	e7fe      	b.n	8001cae <_exit+0x12>

08001cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00a      	b.n	8001cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cc2:	f3af 8000 	nop.w
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	b2ca      	uxtb	r2, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbf0      	blt.n	8001cc2 <_read+0x12>
	}

return len;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf1      	blt.n	8001cfc <_write+0x12>
	}
	return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_close>:

int _close(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
	return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_isatty>:

int _isatty(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return 1;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f007 fdc6 	bl	800994c <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	200003b4 	.word	0x200003b4
 8001df4:	200005d8 	.word	0x200005d8

08001df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09c      	sub	sp, #112	; 0x70
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2234      	movs	r2, #52	; 0x34
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fda2 	bl	80099a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e5e:	4a4e      	ldr	r2, [pc, #312]	; (8001f98 <MX_TIM1_Init+0x17c>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e70:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8001e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e88:	4842      	ldr	r0, [pc, #264]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001e8a:	f003 fe21 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e94:	f7ff fbac 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	483b      	ldr	r0, [pc, #236]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001ea6:	f004 fc8f 	bl	80067c8 <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001eb0:	f7ff fb9e 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb4:	4837      	ldr	r0, [pc, #220]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001eb6:	f003 ff4b 	bl	8005d50 <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ec0:	f7ff fb96 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	482f      	ldr	r0, [pc, #188]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001ed8:	f005 fb0a 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ee2:	f7ff fb85 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2360      	movs	r3, #96	; 0x60
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8001eea:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4821      	ldr	r0, [pc, #132]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001f0e:	f004 fb47 	bl	80065a0 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f18:	f7ff fb6a 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.Pulse = 2655;
 8001f1c:	f640 235f 	movw	r3, #2655	; 0xa5f
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f26:	2204      	movs	r2, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481a      	ldr	r0, [pc, #104]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001f2c:	f004 fb38 	bl	80065a0 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001f36:	f7ff fb5b 	bl	80015f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 8001f46:	23cd      	movs	r3, #205	; 0xcd
 8001f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001f78:	f005 fb50 	bl	800761c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8001f82:	f7ff fb35 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f86:	4803      	ldr	r0, [pc, #12]	; (8001f94 <MX_TIM1_Init+0x178>)
 8001f88:	f000 f98a 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 8001f8c:	bf00      	nop
 8001f8e:	3770      	adds	r7, #112	; 0x70
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200003b8 	.word	0x200003b8
 8001f98:	40012c00 	.word	0x40012c00

08001f9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1062;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fd0:	f240 4226 	movw	r2, #1062	; 0x426
 8001fd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe2:	4814      	ldr	r0, [pc, #80]	; (8002034 <MX_TIM2_Init+0x98>)
 8001fe4:	f003 fd74 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fee:	f7ff faff 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480d      	ldr	r0, [pc, #52]	; (8002034 <MX_TIM2_Init+0x98>)
 8002000:	f004 fbe2 	bl	80067c8 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800200a:	f7ff faf1 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800200e:	2320      	movs	r3, #32
 8002010:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	; (8002034 <MX_TIM2_Init+0x98>)
 800201c:	f005 fa68 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002026:	f7ff fae3 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000404 	.word	0x20000404

08002038 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f007 fcaa 	bl	80099a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <MX_TIM3_Init+0xa4>)
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <MX_TIM3_Init+0xa8>)
 800205a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <MX_TIM3_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <MX_TIM3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <MX_TIM3_Init+0xa4>)
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_TIM3_Init+0xa4>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <MX_TIM3_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800207c:	2301      	movs	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002084:	2301      	movs	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002094:	2301      	movs	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	480d      	ldr	r0, [pc, #52]	; (80020dc <MX_TIM3_Init+0xa4>)
 80020a8:	f003 ffc6 	bl	8006038 <HAL_TIM_Encoder_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020b2:	f7ff fa9d 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020be:	463b      	mov	r3, r7
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <MX_TIM3_Init+0xa4>)
 80020c4:	f005 fa14 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020ce:	f7ff fa8f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000450 	.word	0x20000450
 80020e0:	40000400 	.word	0x40000400

080020e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_TIM4_Init+0x98>)
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <MX_TIM4_Init+0x9c>)
 8002106:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 258;
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_TIM4_Init+0x98>)
 800210a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800210e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM4_Init+0x98>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_TIM4_Init+0x98>)
 8002118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_TIM4_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM4_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800212a:	4814      	ldr	r0, [pc, #80]	; (800217c <MX_TIM4_Init+0x98>)
 800212c:	f003 fcd0 	bl	8005ad0 <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002136:	f7ff fa5b 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_TIM4_Init+0x98>)
 8002148:	f004 fb3e 	bl	80067c8 <HAL_TIM_ConfigClockSource>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002152:	f7ff fa4d 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_TIM4_Init+0x98>)
 8002164:	f005 f9c4 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800216e:	f7ff fa3f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000049c 	.word	0x2000049c
 8002180:	40000800 	.word	0x40000800

08002184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_TIM_Base_MspInit+0x8c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10c      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 800219c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a0:	6613      	str	r3, [r2, #96]	; 0x60
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021ae:	e02a      	b.n	8002206 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d10c      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
}
 80021d2:	e018      	b.n	8002206 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_TIM_Base_MspInit+0x94>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_TIM_Base_MspInit+0x90>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	201e      	movs	r0, #30
 80021fc:	f001 feda 	bl	8003fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002200:	201e      	movs	r0, #30
 8002202:	f001 fef1 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40000800 	.word	0x40000800

0800221c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_TIM_Encoder_MspInit+0x7c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d128      	bne.n	8002290 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_TIM_Encoder_MspInit+0x80>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800226e:	2350      	movs	r3, #80	; 0x50
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800227e:	2302      	movs	r3, #2
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228c:	f002 f9ec 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40000400 	.word	0x40000400
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11d      	bne.n	80022fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80022da:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80022de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022ec:	2306      	movs	r3, #6
 80022ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f002 f9b5 	bl	8004668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_UART_RxCpltCallback+0x20>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800231e:	2201      	movs	r2, #1
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <HAL_UART_RxCpltCallback+0x24>)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_RxCpltCallback+0x28>)
 8002324:	f005 fb7e 	bl	8007a24 <HAL_UART_Receive_IT>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200004e8 	.word	0x200004e8
 8002334:	200004ec 	.word	0x200004ec
 8002338:	20000534 	.word	0x20000534

0800233c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002342:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <MX_USART2_UART_Init+0x94>)
 8002344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800234c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <MX_USART2_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <MX_USART2_UART_Init+0x90>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_USART2_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002384:	4811      	ldr	r0, [pc, #68]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002386:	f005 fa66 	bl	8007856 <HAL_UART_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002390:	f7ff f92e 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002394:	2100      	movs	r1, #0
 8002396:	480d      	ldr	r0, [pc, #52]	; (80023cc <MX_USART2_UART_Init+0x90>)
 8002398:	f007 fa09 	bl	80097ae <HAL_UARTEx_SetTxFifoThreshold>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80023a2:	f7ff f925 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a6:	2100      	movs	r1, #0
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <MX_USART2_UART_Init+0x90>)
 80023aa:	f007 fa3e 	bl	800982a <HAL_UARTEx_SetRxFifoThreshold>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80023b4:	f7ff f91c 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_USART2_UART_Init+0x90>)
 80023ba:	f007 f9bf 	bl	800973c <HAL_UARTEx_DisableFifoMode>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80023c4:	f7ff f914 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000534 	.word	0x20000534
 80023d0:	40004400 	.word	0x40004400

080023d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09e      	sub	sp, #120	; 0x78
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	2254      	movs	r2, #84	; 0x54
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f007 fad3 	bl	80099a0 <memset>
  if(uartHandle->Instance==USART2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_UART_MspInit+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d13e      	bne.n	8002482 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002404:	2302      	movs	r3, #2
 8002406:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f003 f90f 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800241c:	f7ff f8e8 	bl	80015f0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_UART_MspInit+0xbc>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_UART_MspInit+0xbc>)
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0xbc>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0xbc>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_UART_MspInit+0xbc>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0xbc>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002450:	230c      	movs	r3, #12
 8002452:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002460:	2307      	movs	r3, #7
 8002462:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f002 f8fb 	bl	8004668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2026      	movs	r0, #38	; 0x26
 8002478:	f001 fd9c 	bl	8003fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800247c:	2026      	movs	r0, #38	; 0x26
 800247e:	f001 fdb3 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	3778      	adds	r7, #120	; 0x78
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40004400 	.word	0x40004400
 8002490:	40021000 	.word	0x40021000

08002494 <uartPrintADCValue>:
/* USER CODE BEGIN 1 */
/*
 *  Permet d'afficher la tension dans le capteur a effet hall et le courant dans le moteur
 */
void uartPrintADCValue(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	meanADCValue();
 8002498:	f7fe fea2 	bl	80011e0 <meanADCValue>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	4903      	ldr	r1, [pc, #12]	; (80024b0 <uartPrintADCValue+0x1c>)
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <uartPrintADCValue+0x20>)
 80024a6:	f005 fa26 	bl	80078f6 <HAL_UART_Transmit>

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200004f0 	.word	0x200004f0
 80024b4:	20000534 	.word	0x20000534

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c0:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d4:	4c0b      	ldr	r4, [pc, #44]	; (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff fc89 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f007 fa37 	bl	8009958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7fe ff97 	bl	800141c <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   r0, =_estack
 80024f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024fc:	0800d18c 	.word	0x0800d18c
  ldr r2, =_sbss
 8002500:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002504:	200005d8 	.word	0x200005d8

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>

0800250a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f001 fd42 	bl	8003f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251a:	200f      	movs	r0, #15
 800251c:	f7ff fada 	bl	8001ad4 <HAL_InitTick>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	e001      	b.n	8002530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800252c:	f7ff faae 	bl	8001a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002530:	79fb      	ldrb	r3, [r7, #7]

}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_IncTick+0x1c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_IncTick+0x20>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4413      	add	r3, r2
 800254a:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_IncTick+0x1c>)
 800254c:	6013      	str	r3, [r2, #0]
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	200005c4 	.word	0x200005c4
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetTick+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200005c4 	.word	0x200005c4

08002578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff ffee 	bl	8002560 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d004      	beq.n	800259c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_Delay+0x40>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259c:	bf00      	nop
 800259e:	f7ff ffdf 	bl	8002560 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d8f7      	bhi.n	800259e <HAL_Delay+0x26>
  {
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000008 	.word	0x20000008

080025bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3360      	adds	r3, #96	; 0x60
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <LL_ADC_SetOffset+0x44>)
 8002646:	4013      	ands	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	03fff000 	.word	0x03fff000

0800266c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3360      	adds	r3, #96	; 0x60
 800267a:	461a      	mov	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3360      	adds	r3, #96	; 0x60
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	615a      	str	r2, [r3, #20]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002786:	b480      	push	{r7}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3330      	adds	r3, #48	; 0x30
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	211f      	movs	r1, #31
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 011f 	and.w	r1, r3, #31
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3314      	adds	r3, #20
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0e5b      	lsrs	r3, r3, #25
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2107      	movs	r1, #7
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	0d1b      	lsrs	r3, r3, #20
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	431a      	orrs	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10a      	bne.n	800285e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800285c:	e00a      	b.n	8002874 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	43db      	mvns	r3, r3
 800286c:	401a      	ands	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	407f0000 	.word	0x407f0000

08002884 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 031f 	and.w	r3, r3, #31
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6093      	str	r3, [r2, #8]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002928:	d101      	bne.n	800292e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800294c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <LL_ADC_IsEnabled+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_ADC_IsEnabled+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsDisableOngoing+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsDisableOngoing+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d101      	bne.n	8002a18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d101      	bne.n	8002a3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1af      	b.n	8002dc6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe fb1b 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff19 	bl	80028c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff feff 	bl	80028a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff34 	bl	8002914 <LL_ADC_IsInternalRegulatorEnabled>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d115      	bne.n	8002ade <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff18 	bl	80028ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002abc:	4b9f      	ldr	r3, [pc, #636]	; (8002d3c <HAL_ADC_Init+0x2f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	4a9f      	ldr	r2, [pc, #636]	; (8002d40 <HAL_ADC_Init+0x2f4>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f9      	bne.n	8002ad2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff16 	bl	8002914 <LL_ADC_IsInternalRegulatorEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff76 	bl	8002a00 <LL_ADC_REG_IsConversionOngoing>
 8002b14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8148 	bne.w	8002db4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 8144 	bne.w	8002db4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b34:	f043 0202 	orr.w	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff23 	bl	800298c <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d141      	bne.n	8002bd0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b54:	d004      	beq.n	8002b60 <HAL_ADC_Init+0x114>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7a      	ldr	r2, [pc, #488]	; (8002d44 <HAL_ADC_Init+0x2f8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10f      	bne.n	8002b80 <HAL_ADC_Init+0x134>
 8002b60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b64:	f7ff ff12 	bl	800298c <LL_ADC_IsEnabled>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	4876      	ldr	r0, [pc, #472]	; (8002d44 <HAL_ADC_Init+0x2f8>)
 8002b6c:	f7ff ff0e 	bl	800298c <LL_ADC_IsEnabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4323      	orrs	r3, r4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_ADC_Init+0x15a>
 8002b80:	4871      	ldr	r0, [pc, #452]	; (8002d48 <HAL_ADC_Init+0x2fc>)
 8002b82:	f7ff ff03 	bl	800298c <LL_ADC_IsEnabled>
 8002b86:	4604      	mov	r4, r0
 8002b88:	4870      	ldr	r0, [pc, #448]	; (8002d4c <HAL_ADC_Init+0x300>)
 8002b8a:	f7ff feff 	bl	800298c <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	431c      	orrs	r4, r3
 8002b92:	486f      	ldr	r0, [pc, #444]	; (8002d50 <HAL_ADC_Init+0x304>)
 8002b94:	f7ff fefa 	bl	800298c <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb2:	d004      	beq.n	8002bbe <HAL_ADC_Init+0x172>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a62      	ldr	r2, [pc, #392]	; (8002d44 <HAL_ADC_Init+0x2f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_Init+0x176>
 8002bbe:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_ADC_Init+0x308>)
 8002bc0:	e000      	b.n	8002bc4 <HAL_ADC_Init+0x178>
 8002bc2:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_ADC_Init+0x30c>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f7ff fcf6 	bl	80025bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7f5b      	ldrb	r3, [r3, #29]
 8002bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d106      	bne.n	8002c0c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	045b      	lsls	r3, r3, #17
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <HAL_ADC_Init+0x310>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fed2 	bl	8002a00 <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fedf 	bl	8002a26 <LL_ADC_INJ_IsConversionOngoing>
 8002c68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d17f      	bne.n	8002d70 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d17c      	bne.n	8002d70 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c92:	f023 0302 	bic.w	r3, r3, #2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6911      	ldr	r1, [r2, #16]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cd6:	e013      	b.n	8002d00 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ce6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12a      	bne.n	8002d60 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e019      	b.n	8002d70 <HAL_ADC_Init+0x324>
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	053e2d63 	.word	0x053e2d63
 8002d44:	50000100 	.word	0x50000100
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	50000500 	.word	0x50000500
 8002d50:	50000600 	.word	0x50000600
 8002d54:	50000300 	.word	0x50000300
 8002d58:	50000700 	.word	0x50000700
 8002d5c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10c      	bne.n	8002d92 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f023 010f 	bic.w	r1, r3, #15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d90:	e007      	b.n	8002da2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 020f 	bic.w	r2, r2, #15
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db2:	e007      	b.n	8002dc4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_Start_DMA+0x20>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5a      	ldr	r2, [pc, #360]	; (8002f54 <HAL_ADC_Start_DMA+0x184>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_Start_DMA+0x24>
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_ADC_Start_DMA+0x188>)
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_Start_DMA+0x26>
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_ADC_Start_DMA+0x18c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fd44 	bl	8002884 <LL_ADC_GetMultimode>
 8002dfc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fdfc 	bl	8002a00 <LL_ADC_REG_IsConversionOngoing>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 809b 	bne.w	8002f46 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x4e>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e096      	b.n	8002f4c <HAL_ADC_Start_DMA+0x17c>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_ADC_Start_DMA+0x190>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d002      	beq.n	8002e42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d17a      	bne.n	8002f38 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fcec 	bl	8003820 <ADC_Enable>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d16d      	bne.n	8002f2e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_ADC_Start_DMA+0x184>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_ADC_Start_DMA+0xb4>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_ADC_Start_DMA+0x194>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d002      	beq.n	8002e80 <HAL_ADC_Start_DMA+0xb0>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_Start_DMA+0xb8>
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_ADC_Start_DMA+0x198>)
 8002e82:	e001      	b.n	8002e88 <HAL_ADC_Start_DMA+0xb8>
 8002e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d002      	beq.n	8002e96 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	f023 0206 	bic.w	r2, r3, #6
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60
 8002eba:	e002      	b.n	8002ec2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_ADC_Start_DMA+0x19c>)
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_ADC_Start_DMA+0x1a0>)
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_ADC_Start_DMA+0x1a4>)
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	221c      	movs	r2, #28
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0210 	orr.w	r2, r2, #16
 8002ef8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3340      	adds	r3, #64	; 0x40
 8002f14:	4619      	mov	r1, r3
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f001 f91b 	bl	8004154 <HAL_DMA_Start_IT>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd56 	bl	80029d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f2c:	e00d      	b.n	8002f4a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002f36:	e008      	b.n	8002f4a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f44:	e001      	b.n	8002f4a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	50000100 	.word	0x50000100
 8002f58:	50000300 	.word	0x50000300
 8002f5c:	50000700 	.word	0x50000700
 8002f60:	50000600 	.word	0x50000600
 8002f64:	50000500 	.word	0x50000500
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	080039a3 	.word	0x080039a3
 8002f70:	08003a7b 	.word	0x08003a7b
 8002f74:	08003a97 	.word	0x08003a97

08002f78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0b6      	sub	sp, #216	; 0xd8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x24>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f000 bc13 	b.w	80037ea <HAL_ADC_ConfigChannel+0x84a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fd15 	bl	8002a00 <LL_ADC_REG_IsConversionOngoing>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 83f3 	bne.w	80037c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7ff fbcb 	bl	8002786 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd03 	bl	8002a00 <LL_ADC_REG_IsConversionOngoing>
 8002ffa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd0f 	bl	8002a26 <LL_ADC_INJ_IsConversionOngoing>
 8003008:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 81d9 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 81d4 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003028:	d10f      	bne.n	800304a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	f7ff fbd2 	bl	80027de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fb79 	bl	800273a <LL_ADC_SetSamplingTimeCommonConfig>
 8003048:	e00e      	b.n	8003068 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	461a      	mov	r2, r3
 8003058:	f7ff fbc1 	bl	80027de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fb69 	bl	800273a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d022      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800309a:	f7ff fac3 	bl	8002624 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6919      	ldr	r1, [r3, #16]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f7ff fb0f 	bl	80026ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6919      	ldr	r1, [r3, #16]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	7f1b      	ldrb	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x126>
 80030c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x128>
 80030c6:	2300      	movs	r3, #0
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff fb1b 	bl	8002704 <LL_ADC_SetOffsetSaturation>
 80030ce:	e17b      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fac8 	bl	800266c <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x15c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fabd 	bl	800266c <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e01e      	b.n	800313a <HAL_ADC_ConfigChannel+0x19a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fab2 	bl	800266c <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800311a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800311e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x1b2>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	e018      	b.n	8003184 <HAL_ADC_ConfigChannel+0x1e4>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800316e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800317a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa81 	bl	8002698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fa65 	bl	800266c <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x222>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fa5a 	bl	800266c <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	e01e      	b.n	8003200 <HAL_ADC_ConfigChannel+0x260>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fa4f 	bl	800266c <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e004      	b.n	80031fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x278>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	e018      	b.n	800324a <HAL_ADC_ConfigChannel+0x2aa>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800322c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e004      	b.n	800324a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800324a:	429a      	cmp	r2, r3
 800324c:	d106      	bne.n	800325c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fa1e 	bl	8002698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fa02 	bl	800266c <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x2e8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f9f7 	bl	800266c <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	e01e      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x326>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9ec 	bl	800266c <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e004      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_ADC_ConfigChannel+0x33e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	e016      	b.n	800330c <HAL_ADC_ConfigChannel+0x36c>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e004      	b.n	800330c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800330c:	429a      	cmp	r2, r3
 800330e:	d106      	bne.n	800331e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f9bd 	bl	8002698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2103      	movs	r1, #3
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9a1 	bl	800266c <LL_ADC_GetOffsetChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <HAL_ADC_ConfigChannel+0x3aa>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2103      	movs	r1, #3
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f996 	bl	800266c <LL_ADC_GetOffsetChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	e017      	b.n	800337a <HAL_ADC_ConfigChannel+0x3da>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2103      	movs	r1, #3
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f98b 	bl	800266c <LL_ADC_GetOffsetChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003364:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x3f2>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	e011      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x416>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d106      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	2103      	movs	r1, #3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f968 	bl	8002698 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fadd 	bl	800298c <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 813d 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7ff fa24 	bl	8002834 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4aa2      	ldr	r2, [pc, #648]	; (800367c <HAL_ADC_ConfigChannel+0x6dc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 812e 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x480>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b09      	cmp	r3, #9
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e019      	b.n	8003454 <HAL_ADC_ConfigChannel+0x4b4>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800343c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2b09      	cmp	r3, #9
 800344c:	bf94      	ite	ls
 800344e:	2301      	movls	r3, #1
 8003450:	2300      	movhi	r3, #0
 8003452:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003454:	2b00      	cmp	r3, #0
 8003456:	d079      	beq.n	800354c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x4d4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	3301      	adds	r3, #1
 800346c:	069b      	lsls	r3, r3, #26
 800346e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003472:	e015      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x500>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003484:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800348c:	2320      	movs	r3, #32
 800348e:	e003      	b.n	8003498 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	069b      	lsls	r3, r3, #26
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x520>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	3301      	adds	r3, #1
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	e017      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x550>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	ea42 0103 	orr.w	r1, r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x576>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	3301      	adds	r3, #1
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	051b      	lsls	r3, r3, #20
 8003514:	e018      	b.n	8003548 <HAL_ADC_ConfigChannel+0x5a8>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e003      	b.n	800353a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003548:	430b      	orrs	r3, r1
 800354a:	e07e      	b.n	800364a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x5c8>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	069b      	lsls	r3, r3, #26
 8003562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003566:	e015      	b.n	8003594 <HAL_ADC_ConfigChannel+0x5f4>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x614>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	e017      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x644>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	61fb      	str	r3, [r7, #28]
  return result;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035cc:	2320      	movs	r3, #32
 80035ce:	e003      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x670>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	3301      	adds	r3, #1
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	3b1e      	subs	r3, #30
 8003608:	051b      	lsls	r3, r3, #20
 800360a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360e:	e01b      	b.n	8003648 <HAL_ADC_ConfigChannel+0x6a8>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	613b      	str	r3, [r7, #16]
  return result;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 021f 	and.w	r2, r3, #31
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	051b      	lsls	r3, r3, #20
 8003644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003648:	430b      	orrs	r3, r1
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	4619      	mov	r1, r3
 8003650:	f7ff f8c5 	bl	80027de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_ADC_ConfigChannel+0x6e0>)
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80be 	beq.w	80037de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366a:	d004      	beq.n	8003676 <HAL_ADC_ConfigChannel+0x6d6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_ADC_ConfigChannel+0x6e4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10a      	bne.n	800368c <HAL_ADC_ConfigChannel+0x6ec>
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_ADC_ConfigChannel+0x6e8>)
 8003678:	e009      	b.n	800368e <HAL_ADC_ConfigChannel+0x6ee>
 800367a:	bf00      	nop
 800367c:	407f0000 	.word	0x407f0000
 8003680:	80080000 	.word	0x80080000
 8003684:	50000100 	.word	0x50000100
 8003688:	50000300 	.word	0x50000300
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe ffba 	bl	8002608 <LL_ADC_GetCommonPathInternalCh>
 8003694:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a56      	ldr	r2, [pc, #344]	; (80037f8 <HAL_ADC_ConfigChannel+0x858>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x70c>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_ADC_ConfigChannel+0x85c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d13a      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d134      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d005      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x72e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_ADC_ConfigChannel+0x860>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	f040 8085 	bne.w	80037d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x742>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x746>
 80036e2:	4a49      	ldr	r2, [pc, #292]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x748>
 80036e6:	4a43      	ldr	r2, [pc, #268]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 80036e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe ff75 	bl	80025e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036f8:	4b44      	ldr	r3, [pc, #272]	; (800380c <HAL_ADC_ConfigChannel+0x86c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	4a44      	ldr	r2, [pc, #272]	; (8003810 <HAL_ADC_ConfigChannel+0x870>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003712:	e002      	b.n	800371a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3b01      	subs	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003720:	e05a      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <HAL_ADC_ConfigChannel+0x874>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d125      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x7d8>
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11f      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d104      	bne.n	800374c <HAL_ADC_ConfigChannel+0x7ac>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_ADC_ConfigChannel+0x878>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d047      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d004      	beq.n	8003760 <HAL_ADC_ConfigChannel+0x7c0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x7c4>
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 8003762:	e000      	b.n	8003766 <HAL_ADC_ConfigChannel+0x7c6>
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe ff36 	bl	80025e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003776:	e031      	b.n	80037dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_ADC_ConfigChannel+0x87c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d12d      	bne.n	80037de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d127      	bne.n	80037de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a0:	d004      	beq.n	80037ac <HAL_ADC_ConfigChannel+0x80c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x810>
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 80037ae:	e000      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x812>
 80037b0:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 80037b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7fe ff10 	bl	80025e2 <LL_ADC_SetCommonPathInternalCh>
 80037c2:	e00c      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037d6:	e002      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	37d8      	adds	r7, #216	; 0xd8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	50000700 	.word	0x50000700
 80037f8:	c3210000 	.word	0xc3210000
 80037fc:	90c00010 	.word	0x90c00010
 8003800:	50000600 	.word	0x50000600
 8003804:	50000100 	.word	0x50000100
 8003808:	50000300 	.word	0x50000300
 800380c:	20000000 	.word	0x20000000
 8003810:	053e2d63 	.word	0x053e2d63
 8003814:	c7520000 	.word	0xc7520000
 8003818:	50000500 	.word	0x50000500
 800381c:	cb840000 	.word	0xcb840000

08003820 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f8ad 	bl	800298c <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d14d      	bne.n	80038d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <ADC_Enable+0xc0>)
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e039      	b.n	80038d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f868 	bl	800293c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800386c:	f7fe fe78 	bl	8002560 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003872:	e028      	b.n	80038c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f887 	bl	800298c <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f857 	bl	800293c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388e:	f7fe fe67 	bl	8002560 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d914      	bls.n	80038c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d00d      	beq.n	80038c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d1cf      	bne.n	8003874 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	8000003f 	.word	0x8000003f

080038e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f85e 	bl	80029b2 <LL_ADC_IsDisableOngoing>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f845 	bl	800298c <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d047      	beq.n	8003998 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d144      	bne.n	8003998 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030d 	and.w	r3, r3, #13
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f81f 	bl	8002964 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392e:	f7fe fe17 	bl	8002560 <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003934:	e029      	b.n	800398a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e023      	b.n	800399a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003952:	f7fe fe05 	bl	8002560 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d914      	bls.n	800398a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1dc      	bne.n	8003952 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d14b      	bne.n	8003a54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fec0 	bl	8002760 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d032      	beq.n	8003a4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d12b      	bne.n	8003a4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11f      	bne.n	8003a4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a18:	e018      	b.n	8003a4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7fd fbb1 	bl	80011b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a52:	e00e      	b.n	8003a72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff fa93 	bl	8002f8c <HAL_ADC_ErrorCallback>
}
 8003a66:	e004      	b.n	8003a72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff fa75 	bl	8002f78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff fa65 	bl	8002f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <LL_ADC_IsEnabled>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <LL_ADC_IsEnabled+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_ADC_IsEnabled+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_StartCalibration>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b36:	d101      	bne.n	8003b3c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_ADCEx_Calibration_Start+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e04d      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fea5 	bl	80038e4 <ADC_Disable>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d136      	bne.n	8003c12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff96 	bl	8003af0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bc4:	e014      	b.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d90d      	bls.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f023 0312 	bic.w	r3, r3, #18
 8003bdc:	f043 0210 	orr.w	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01b      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff94 	bl	8003b22 <LL_ADC_IsCalibrationOnGoing>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e2      	bne.n	8003bc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c10:	e005      	b.n	8003c1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	0004de01 	.word	0x0004de01

08003c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b0a1      	sub	sp, #132	; 0x84
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0e7      	b.n	8003e22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6a:	d102      	bne.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	e009      	b.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d102      	bne.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003c7c:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	e001      	b.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0be      	b.n	8003e22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff4f 	bl	8003b4a <LL_ADC_REG_IsConversionOngoing>
 8003cac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff49 	bl	8003b4a <LL_ADC_REG_IsConversionOngoing>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 80a0 	bne.w	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 809c 	bne.w	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd0:	d004      	beq.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a55      	ldr	r2, [pc, #340]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003cdc:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003cde:	e000      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ce0:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ce2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d04b      	beq.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cfe:	035b      	lsls	r3, r3, #13
 8003d00:	430b      	orrs	r3, r1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d004      	beq.n	8003d1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a45      	ldr	r2, [pc, #276]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10f      	bne.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d20:	f7ff fed3 	bl	8003aca <LL_ADC_IsEnabled>
 8003d24:	4604      	mov	r4, r0
 8003d26:	4841      	ldr	r0, [pc, #260]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d28:	f7ff fecf 	bl	8003aca <LL_ADC_IsEnabled>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4323      	orrs	r3, r4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e012      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d3c:	483c      	ldr	r0, [pc, #240]	; (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d3e:	f7ff fec4 	bl	8003aca <LL_ADC_IsEnabled>
 8003d42:	4604      	mov	r4, r0
 8003d44:	483b      	ldr	r0, [pc, #236]	; (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d46:	f7ff fec0 	bl	8003aca <LL_ADC_IsEnabled>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	431c      	orrs	r4, r3
 8003d4e:	483c      	ldr	r0, [pc, #240]	; (8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d50:	f7ff febb 	bl	8003aca <LL_ADC_IsEnabled>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4323      	orrs	r3, r4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d056      	beq.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d6e:	f023 030f 	bic.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	6892      	ldr	r2, [r2, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d82:	e047      	b.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d004      	beq.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10f      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003da4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003da8:	f7ff fe8f 	bl	8003aca <LL_ADC_IsEnabled>
 8003dac:	4604      	mov	r4, r0
 8003dae:	481f      	ldr	r0, [pc, #124]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003db0:	f7ff fe8b 	bl	8003aca <LL_ADC_IsEnabled>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4323      	orrs	r3, r4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e012      	b.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003dc4:	481a      	ldr	r0, [pc, #104]	; (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dc6:	f7ff fe80 	bl	8003aca <LL_ADC_IsEnabled>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4819      	ldr	r0, [pc, #100]	; (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dce:	f7ff fe7c 	bl	8003aca <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	431c      	orrs	r4, r3
 8003dd6:	481a      	ldr	r0, [pc, #104]	; (8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003dd8:	f7ff fe77 	bl	8003aca <LL_ADC_IsEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4323      	orrs	r3, r4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d012      	beq.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dfc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfe:	e009      	b.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e12:	e000      	b.n	8003e16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3784      	adds	r7, #132	; 0x84
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	50000100 	.word	0x50000100
 8003e30:	50000400 	.word	0x50000400
 8003e34:	50000500 	.word	0x50000500
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	50000700 	.word	0x50000700
 8003e40:	50000600 	.word	0x50000600

08003e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e76:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	60d3      	str	r3, [r2, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 0307 	and.w	r3, r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db0b      	blt.n	8003ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <__NVIC_EnableIRQ+0x38>)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2001      	movs	r0, #1
 8003eca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	; (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	; (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
         );
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	; 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff4c 	bl	8003e44 <__NVIC_SetPriorityGrouping>
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc2:	f7ff ff63 	bl	8003e8c <__NVIC_GetPriorityGrouping>
 8003fc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	6978      	ldr	r0, [r7, #20]
 8003fce:	f7ff ffb3 	bl	8003f38 <NVIC_EncodePriority>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff82 	bl	8003ee4 <__NVIC_SetPriority>
}
 8003fe0:	bf00      	nop
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff56 	bl	8003ea8 <__NVIC_EnableIRQ>
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e08d      	b.n	8004132 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_DMA_Init+0x138>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d80f      	bhi.n	8004042 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	4b45      	ldr	r3, [pc, #276]	; (8004140 <HAL_DMA_Init+0x13c>)
 800402a:	4413      	add	r3, r2
 800402c:	4a45      	ldr	r2, [pc, #276]	; (8004144 <HAL_DMA_Init+0x140>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	009a      	lsls	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a42      	ldr	r2, [pc, #264]	; (8004148 <HAL_DMA_Init+0x144>)
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
 8004040:	e00e      	b.n	8004060 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_DMA_Init+0x148>)
 800404a:	4413      	add	r3, r2
 800404c:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <HAL_DMA_Init+0x140>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	009a      	lsls	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a3c      	ldr	r2, [pc, #240]	; (8004150 <HAL_DMA_Init+0x14c>)
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa76 	bl	80045a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c0:	d102      	bne.n	80040c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_DMA_Init+0x104>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d80c      	bhi.n	8004108 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa96 	bl	8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	e008      	b.n	800411a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40020407 	.word	0x40020407
 8004140:	bffdfff8 	.word	0xbffdfff8
 8004144:	cccccccd 	.word	0xcccccccd
 8004148:	40020000 	.word	0x40020000
 800414c:	bffdfbf8 	.word	0xbffdfbf8
 8004150:	40020400 	.word	0x40020400

08004154 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_DMA_Start_IT+0x20>
 8004170:	2302      	movs	r3, #2
 8004172:	e066      	b.n	8004242 <HAL_DMA_Start_IT+0xee>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d155      	bne.n	8004234 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f9bb 	bl	8004528 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 020e 	orr.w	r2, r2, #14
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e00f      	b.n	80041ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 020a 	orr.w	r2, r2, #10
 80041ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e005      	b.n	8004240 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d005      	beq.n	800426e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e037      	b.n	80042de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 020e 	bic.w	r2, r2, #14
 800427c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f003 021f 	and.w	r2, r3, #31
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2101      	movs	r1, #1
 80042ac:	fa01 f202 	lsl.w	r2, r1, r2
 80042b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00c      	beq.n	80042de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d00d      	beq.n	8004330 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2204      	movs	r2, #4
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e047      	b.n	80043c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020e 	bic.w	r2, r2, #14
 800433e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800437c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800439e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
    }
  }
  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2204      	movs	r2, #4
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d026      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d021      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 021f 	and.w	r2, r3, #31
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2104      	movs	r1, #4
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b00      	cmp	r3, #0
 8004438:	d071      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004442:	e06c      	b.n	800451e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2202      	movs	r2, #2
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02e      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d029      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 020a 	bic.w	r2, r2, #10
 800447e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2102      	movs	r1, #2
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d038      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044b4:	e033      	b.n	800451e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2208      	movs	r2, #8
 80044c0:	409a      	lsls	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02a      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d025      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020e 	bic.w	r2, r2, #14
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800451e:	bf00      	nop
 8004520:	bf00      	nop
}
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800453e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f003 021f 	and.w	r2, r3, #31
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f202 	lsl.w	r2, r1, r2
 8004564:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b10      	cmp	r3, #16
 8004574:	d108      	bne.n	8004588 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004586:	e007      	b.n	8004598 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d802      	bhi.n	80045be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e001      	b.n	80045c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3b08      	subs	r3, #8
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4413      	add	r3, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a0b      	ldr	r2, [pc, #44]	; (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2201      	movs	r2, #1
 80045f8:	409a      	lsls	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40020407 	.word	0x40020407
 8004610:	40020800 	.word	0x40020800
 8004614:	40020820 	.word	0x40020820
 8004618:	cccccccd 	.word	0xcccccccd
 800461c:	40020880 	.word	0x40020880

08004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a08      	ldr	r2, [pc, #32]	; (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004642:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	409a      	lsls	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	1000823f 	.word	0x1000823f
 8004664:	40020940 	.word	0x40020940

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004676:	e15a      	b.n	800492e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 814c 	beq.w	8004928 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d005      	beq.n	80046a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d130      	bne.n	800470a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046de:	2201      	movs	r2, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f003 0201 	and.w	r2, r3, #1
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d017      	beq.n	8004746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d123      	bne.n	800479a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	08da      	lsrs	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3208      	adds	r2, #8
 800475a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	220f      	movs	r2, #15
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	6939      	ldr	r1, [r7, #16]
 8004796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0203 	and.w	r2, r3, #3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a6 	beq.w	8004928 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047dc:	4b5b      	ldr	r3, [pc, #364]	; (800494c <HAL_GPIO_Init+0x2e4>)
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	4a5a      	ldr	r2, [pc, #360]	; (800494c <HAL_GPIO_Init+0x2e4>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6613      	str	r3, [r2, #96]	; 0x60
 80047e8:	4b58      	ldr	r3, [pc, #352]	; (800494c <HAL_GPIO_Init+0x2e4>)
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f4:	4a56      	ldr	r2, [pc, #344]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	220f      	movs	r2, #15
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800481e:	d01f      	beq.n	8004860 <HAL_GPIO_Init+0x1f8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a4c      	ldr	r2, [pc, #304]	; (8004954 <HAL_GPIO_Init+0x2ec>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d019      	beq.n	800485c <HAL_GPIO_Init+0x1f4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a4b      	ldr	r2, [pc, #300]	; (8004958 <HAL_GPIO_Init+0x2f0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_GPIO_Init+0x1f0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a4a      	ldr	r2, [pc, #296]	; (800495c <HAL_GPIO_Init+0x2f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00d      	beq.n	8004854 <HAL_GPIO_Init+0x1ec>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a49      	ldr	r2, [pc, #292]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <HAL_GPIO_Init+0x1e8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a48      	ldr	r2, [pc, #288]	; (8004964 <HAL_GPIO_Init+0x2fc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_GPIO_Init+0x1e4>
 8004848:	2305      	movs	r3, #5
 800484a:	e00a      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 800484c:	2306      	movs	r3, #6
 800484e:	e008      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 8004850:	2304      	movs	r3, #4
 8004852:	e006      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 8004854:	2303      	movs	r3, #3
 8004856:	e004      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 8004858:	2302      	movs	r3, #2
 800485a:	e002      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_GPIO_Init+0x1fa>
 8004860:	2300      	movs	r3, #0
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	f002 0203 	and.w	r2, r2, #3
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	4093      	lsls	r3, r2
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004872:	4937      	ldr	r1, [pc, #220]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_GPIO_Init+0x300>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	43db      	mvns	r3, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048a4:	4a30      	ldr	r2, [pc, #192]	; (8004968 <HAL_GPIO_Init+0x300>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048aa:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_GPIO_Init+0x300>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048ce:	4a26      	ldr	r2, [pc, #152]	; (8004968 <HAL_GPIO_Init+0x300>)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <HAL_GPIO_Init+0x300>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	43db      	mvns	r3, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048f8:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <HAL_GPIO_Init+0x300>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_GPIO_Init+0x300>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004922:	4a11      	ldr	r2, [pc, #68]	; (8004968 <HAL_GPIO_Init+0x300>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	3301      	adds	r3, #1
 800492c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	f47f ae9d 	bne.w	8004678 <HAL_GPIO_Init+0x10>
  }
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40021000 	.word	0x40021000
 8004950:	40010000 	.word	0x40010000
 8004954:	48000400 	.word	0x48000400
 8004958:	48000800 	.word	0x48000800
 800495c:	48000c00 	.word	0x48000c00
 8004960:	48001000 	.word	0x48001000
 8004964:	48001400 	.word	0x48001400
 8004968:	40010400 	.word	0x40010400

0800496c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	807b      	strh	r3, [r7, #2]
 8004978:	4613      	mov	r3, r2
 800497a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800497c:	787b      	ldrb	r3, [r7, #1]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004988:	e002      	b.n	8004990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4013      	ands	r3, r2
 80049b4:	041a      	lsls	r2, r3, #16
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	43d9      	mvns	r1, r3
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	400b      	ands	r3, r1
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e6:	4a05      	ldr	r2, [pc, #20]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fdb7 	bl	8001562 <HAL_GPIO_EXTI_Callback>
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010400 	.word	0x40010400

08004a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d141      	bne.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a0e:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d131      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a1c:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a22:	4a46      	ldr	r2, [pc, #280]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a34:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2232      	movs	r2, #50	; 0x32
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	0c9b      	lsrs	r3, r3, #18
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a52:	e002      	b.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d102      	bne.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f2      	bne.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a6e:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d158      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e057      	b.n	8004b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a86:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a90:	e04d      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d141      	bne.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d131      	bne.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aae:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2232      	movs	r2, #50	; 0x32
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0c9b      	lsrs	r3, r3, #18
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ade:	e002      	b.n	8004ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	d102      	bne.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f2      	bne.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d112      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e011      	b.n	8004b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b1c:	e007      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	20000000 	.word	0x20000000
 8004b44:	431bde83 	.word	0x431bde83

08004b48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b56:	6093      	str	r3, [r2, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40007000 	.word	0x40007000

08004b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e306      	b.n	8005188 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d075      	beq.n	8004c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b86:	4b97      	ldr	r3, [pc, #604]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b90:	4b94      	ldr	r3, [pc, #592]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3e>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d002      	beq.n	8004bac <HAL_RCC_OscConfig+0x44>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	4b8d      	ldr	r3, [pc, #564]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05b      	beq.n	8004c70 <HAL_RCC_OscConfig+0x108>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d157      	bne.n	8004c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e2e1      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCC_OscConfig+0x74>
 8004bce:	4b85      	ldr	r3, [pc, #532]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a84      	ldr	r2, [pc, #528]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xb0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x98>
 8004be6:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a7e      	ldr	r2, [pc, #504]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b7c      	ldr	r3, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7b      	ldr	r2, [pc, #492]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xb0>
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b75      	ldr	r3, [pc, #468]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a74      	ldr	r2, [pc, #464]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fc9e 	bl	8002560 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fd fc9a 	bl	8002560 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e2a6      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xc0>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc8a 	bl	8002560 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fd fc86 	bl	8002560 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e292      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c62:	4b60      	ldr	r3, [pc, #384]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0xe8>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d075      	beq.n	8004d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c88:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_OscConfig+0x136>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x13c>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d11f      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca4:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x154>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e265      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	4946      	ldr	r1, [pc, #280]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fc fefd 	bl	8001ad4 <HAL_InitTick>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d043      	beq.n	8004d68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e251      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d023      	beq.n	8004d34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cec:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd fc32 	bl	8002560 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fd fc2e 	bl	8002560 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e23a      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d12:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	061b      	lsls	r3, r3, #24
 8004d2c:	492d      	ldr	r1, [pc, #180]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]
 8004d32:	e01a      	b.n	8004d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d34:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2a      	ldr	r2, [pc, #168]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fc0e 	bl	8002560 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fd fc0a 	bl	8002560 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e216      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d5a:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1e0>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d041      	beq.n	8004dfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01c      	beq.n	8004db8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d84:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fbe7 	bl	8002560 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d96:	f7fd fbe3 	bl	8002560 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1ef      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ef      	beq.n	8004d96 <HAL_RCC_OscConfig+0x22e>
 8004db6:	e020      	b.n	8004dfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fbca 	bl	8002560 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dce:	e00d      	b.n	8004dec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fd fbc6 	bl	8002560 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d906      	bls.n	8004dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1d2      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dec:	4b8c      	ldr	r3, [pc, #560]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ea      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a6 	beq.w	8004f54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e0c:	4b84      	ldr	r3, [pc, #528]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2b4>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x2b6>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4b7f      	ldr	r3, [pc, #508]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	4a7e      	ldr	r2, [pc, #504]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e2e:	4b7c      	ldr	r3, [pc, #496]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3e:	4b79      	ldr	r3, [pc, #484]	; (8005024 <HAL_RCC_OscConfig+0x4bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e4a:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCC_OscConfig+0x4bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a75      	ldr	r2, [pc, #468]	; (8005024 <HAL_RCC_OscConfig+0x4bc>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fd fb83 	bl	8002560 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fd fb7f 	bl	8002560 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e18b      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e70:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <HAL_RCC_OscConfig+0x4bc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d108      	bne.n	8004e96 <HAL_RCC_OscConfig+0x32e>
 8004e84:	4b66      	ldr	r3, [pc, #408]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a65      	ldr	r2, [pc, #404]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e94:	e024      	b.n	8004ee0 <HAL_RCC_OscConfig+0x378>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d110      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x358>
 8004e9e:	4b60      	ldr	r3, [pc, #384]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	4a5e      	ldr	r2, [pc, #376]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eae:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	4a5a      	ldr	r2, [pc, #360]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ebe:	e00f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x378>
 8004ec0:	4b57      	ldr	r3, [pc, #348]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d016      	beq.n	8004f16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fd fb3a 	bl	8002560 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fd fb36 	bl	8002560 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e140      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ed      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x388>
 8004f14:	e015      	b.n	8004f42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fd fb23 	bl	8002560 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fd fb1f 	bl	8002560 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e129      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f34:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ed      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	4a34      	ldr	r2, [pc, #208]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d03c      	beq.n	8004fda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6e:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd faf2 	bl	8002560 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f80:	f7fd faee 	bl	8002560 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0fa      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <HAL_RCC_OscConfig+0x418>
 8004fa0:	e01b      	b.n	8004fda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb2:	f7fd fad5 	bl	8002560 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fba:	f7fd fad1 	bl	8002560 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0dd      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fcc:	4b14      	ldr	r3, [pc, #80]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ef      	bne.n	8004fba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80d1 	beq.w	8005186 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	f000 808b 	beq.w	8005108 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d15e      	bne.n	80050b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd faab 	bl	8002560 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800500c:	e00c      	b.n	8005028 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500e:	f7fd faa7 	bl	8002560 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d905      	bls.n	8005028 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0b3      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
 8005020:	40021000 	.word	0x40021000
 8005024:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ec      	bne.n	800500e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005034:	4b56      	ldr	r3, [pc, #344]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4b56      	ldr	r3, [pc, #344]	; (8005194 <HAL_RCC_OscConfig+0x62c>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6a11      	ldr	r1, [r2, #32]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005044:	3a01      	subs	r2, #1
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800504e:	0212      	lsls	r2, r2, #8
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005056:	0852      	lsrs	r2, r2, #1
 8005058:	3a01      	subs	r2, #1
 800505a:	0552      	lsls	r2, r2, #21
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005062:	0852      	lsrs	r2, r2, #1
 8005064:	3a01      	subs	r2, #1
 8005066:	0652      	lsls	r2, r2, #25
 8005068:	4311      	orrs	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800506e:	06d2      	lsls	r2, r2, #27
 8005070:	430a      	orrs	r2, r1
 8005072:	4947      	ldr	r1, [pc, #284]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	4b45      	ldr	r3, [pc, #276]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a44      	ldr	r2, [pc, #272]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005084:	4b42      	ldr	r3, [pc, #264]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 800508a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800508e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fd fa66 	bl	8002560 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fd fa62 	bl	8002560 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e06e      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x530>
 80050b6:	e066      	b.n	8005186 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b35      	ldr	r3, [pc, #212]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a34      	ldr	r2, [pc, #208]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a31      	ldr	r2, [pc, #196]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd fa3e 	bl	8002560 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fd fa3a 	bl	8002560 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e046      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fa:	4b25      	ldr	r3, [pc, #148]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x580>
 8005106:	e03e      	b.n	8005186 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e039      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_RCC_OscConfig+0x628>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	429a      	cmp	r2, r3
 8005126:	d12c      	bne.n	8005182 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	3b01      	subs	r3, #1
 8005134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d123      	bne.n	8005182 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11b      	bne.n	8005182 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d113      	bne.n	8005182 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	3b01      	subs	r3, #1
 8005168:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d109      	bne.n	8005182 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	3b01      	subs	r3, #1
 800517c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d001      	beq.n	8005186 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	019f800c 	.word	0x019f800c

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e11e      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b91      	ldr	r3, [pc, #580]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b8e      	ldr	r3, [pc, #568]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	498c      	ldr	r1, [pc, #560]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b8a      	ldr	r3, [pc, #552]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e106      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d073      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d129      	bne.n	8005248 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f4:	4b81      	ldr	r3, [pc, #516]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0f4      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005204:	f000 f9d0 	bl	80055a8 <RCC_GetSysClockFreqFromPLLSource>
 8005208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <HAL_RCC_ClockConfig+0x268>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d93f      	bls.n	8005292 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005212:	4b7a      	ldr	r3, [pc, #488]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	d033      	beq.n	8005292 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800522e:	2b00      	cmp	r3, #0
 8005230:	d12f      	bne.n	8005292 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005232:	4b72      	ldr	r3, [pc, #456]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	4a70      	ldr	r2, [pc, #448]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 800523c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005240:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e024      	b.n	8005292 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005250:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0c6      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005260:	4b66      	ldr	r3, [pc, #408]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0be      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005270:	f000 f8ce 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8005274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4a61      	ldr	r2, [pc, #388]	; (8005400 <HAL_RCC_ClockConfig+0x268>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d909      	bls.n	8005292 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800527e:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005286:	4a5d      	ldr	r2, [pc, #372]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005292:	4b5a      	ldr	r3, [pc, #360]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4957      	ldr	r1, [pc, #348]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fd f95c 	bl	8002560 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fd f958 	bl	8002560 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e095      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 020c 	and.w	r2, r3, #12
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d1eb      	bne.n	80052ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d023      	beq.n	8005328 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a42      	ldr	r2, [pc, #264]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80052f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005304:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800530c:	4a3b      	ldr	r2, [pc, #236]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 800530e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005312:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b39      	ldr	r3, [pc, #228]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4936      	ldr	r1, [pc, #216]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
 8005326:	e008      	b.n	800533a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d105      	bne.n	800533a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800532e:	4b33      	ldr	r3, [pc, #204]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4a32      	ldr	r2, [pc, #200]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005338:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800533a:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d21d      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005348:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 020f 	bic.w	r2, r3, #15
 8005350:	4929      	ldr	r1, [pc, #164]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005358:	f7fd f902 	bl	8002560 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fd f8fe 	bl	8002560 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e03b      	b.n	80053ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCC_ClockConfig+0x260>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d1ed      	bne.n	8005360 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4917      	ldr	r1, [pc, #92]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490f      	ldr	r1, [pc, #60]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053c2:	f000 f825 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <HAL_RCC_ClockConfig+0x264>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490c      	ldr	r1, [pc, #48]	; (8005404 <HAL_RCC_ClockConfig+0x26c>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x270>)
 80053e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x274>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fc fb74 	bl	8001ad4 <HAL_InitTick>
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40021000 	.word	0x40021000
 8005400:	04c4b400 	.word	0x04c4b400
 8005404:	0800cd00 	.word	0x0800cd00
 8005408:	20000000 	.word	0x20000000
 800540c:	20000004 	.word	0x20000004

08005410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005416:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b04      	cmp	r3, #4
 8005420:	d102      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e047      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005428:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b08      	cmp	r3, #8
 8005432:	d102      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e03e      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d136      	bne.n	80054b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	3301      	adds	r3, #1
 800545c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d10c      	bne.n	800547e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005464:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800546e:	68d2      	ldr	r2, [r2, #12]
 8005470:	0a12      	lsrs	r2, r2, #8
 8005472:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	617b      	str	r3, [r7, #20]
      break;
 800547c:	e00c      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005488:	68d2      	ldr	r2, [r2, #12]
 800548a:	0a12      	lsrs	r2, r2, #8
 800548c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
      break;
 8005496:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	0e5b      	lsrs	r3, r3, #25
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e001      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054b8:	693b      	ldr	r3, [r7, #16]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	016e3600 	.word	0x016e3600

080054d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000000 	.word	0x20000000

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4904      	ldr	r1, [pc, #16]	; (8005514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000
 8005514:	0800cd10 	.word	0x0800cd10

08005518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800551c:	f7ff ffda 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0adb      	lsrs	r3, r3, #11
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4904      	ldr	r1, [pc, #16]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	0800cd10 	.word	0x0800cd10

08005544 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	220f      	movs	r2, #15
 8005552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0203 	and.w	r2, r3, #3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_RCC_GetClockConfig+0x5c>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_GetClockConfig+0x5c>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCC_GetClockConfig+0x60>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 020f 	and.w	r2, r3, #15
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40022000 	.word	0x40022000

080055a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b8:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d10c      	bne.n	80055e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055d6:	68d2      	ldr	r2, [r2, #12]
 80055d8:	0a12      	lsrs	r2, r2, #8
 80055da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	617b      	str	r3, [r7, #20]
    break;
 80055e4:	e00c      	b.n	8005600 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055f0:	68d2      	ldr	r2, [r2, #12]
 80055f2:	0a12      	lsrs	r2, r2, #8
 80055f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
 80055fc:	617b      	str	r3, [r7, #20]
    break;
 80055fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	0e5b      	lsrs	r3, r3, #25
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800561a:	687b      	ldr	r3, [r7, #4]
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40021000 	.word	0x40021000
 800562c:	016e3600 	.word	0x016e3600
 8005630:	00f42400 	.word	0x00f42400

08005634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800563c:	2300      	movs	r3, #0
 800563e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005640:	2300      	movs	r3, #0
 8005642:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8098 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005656:	4b43      	ldr	r3, [pc, #268]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005662:	4b40      	ldr	r3, [pc, #256]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	4a3f      	ldr	r2, [pc, #252]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566c:	6593      	str	r3, [r2, #88]	; 0x58
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567a:	2301      	movs	r3, #1
 800567c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800567e:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a39      	ldr	r2, [pc, #228]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800568a:	f7fc ff69 	bl	8002560 <HAL_GetTick>
 800568e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005690:	e009      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005692:	f7fc ff65 	bl	8002560 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d902      	bls.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	74fb      	strb	r3, [r7, #19]
        break;
 80056a4:	e005      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ef      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d159      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01e      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d019      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056d4:	4b23      	ldr	r3, [pc, #140]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056f0:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d016      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fc ff25 	bl	8002560 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005718:	e00b      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fc ff21 	bl	8002560 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d902      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	74fb      	strb	r3, [r7, #19]
            break;
 8005730:	e006      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ec      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005740:	7cfb      	ldrb	r3, [r7, #19]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800575c:	e008      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800575e:	7cfb      	ldrb	r3, [r7, #19]
 8005760:	74bb      	strb	r3, [r7, #18]
 8005762:	e005      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005764:	40021000 	.word	0x40021000
 8005768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005770:	7c7b      	ldrb	r3, [r7, #17]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005776:	4ba7      	ldr	r3, [pc, #668]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	4aa6      	ldr	r2, [pc, #664]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800578e:	4ba1      	ldr	r3, [pc, #644]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f023 0203 	bic.w	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	499d      	ldr	r1, [pc, #628]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057b0:	4b98      	ldr	r3, [pc, #608]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f023 020c 	bic.w	r2, r3, #12
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	4995      	ldr	r1, [pc, #596]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057d2:	4b90      	ldr	r3, [pc, #576]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	498c      	ldr	r1, [pc, #560]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057f4:	4b87      	ldr	r3, [pc, #540]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4984      	ldr	r1, [pc, #528]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005816:	4b7f      	ldr	r3, [pc, #508]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	497b      	ldr	r1, [pc, #492]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005838:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	4973      	ldr	r1, [pc, #460]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800585a:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	496a      	ldr	r1, [pc, #424]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800587c:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4962      	ldr	r1, [pc, #392]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800589e:	4b5d      	ldr	r3, [pc, #372]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	4959      	ldr	r1, [pc, #356]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058c0:	4b54      	ldr	r3, [pc, #336]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c6:	f023 0203 	bic.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	4951      	ldr	r1, [pc, #324]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058e2:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4948      	ldr	r1, [pc, #288]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	4940      	ldr	r1, [pc, #256]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d105      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005924:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	2b00      	cmp	r3, #0
 800593a:	d015      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800593c:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	4932      	ldr	r1, [pc, #200]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595a:	d105      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800595c:	4b2d      	ldr	r3, [pc, #180]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005966:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	4924      	ldr	r1, [pc, #144]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005992:	d105      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	4916      	ldr	r1, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ca:	d105      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4908      	ldr	r1, [pc, #32]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a02:	d109      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a02      	ldr	r2, [pc, #8]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0e:	60d3      	str	r3, [r2, #12]
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a24:	4b29      	ldr	r3, [pc, #164]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	4926      	ldr	r1, [pc, #152]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d105      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a20      	ldr	r2, [pc, #128]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	4918      	ldr	r1, [pc, #96]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a12      	ldr	r2, [pc, #72]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d015      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e049      	b.n	8005b76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fb44 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 ff98 	bl	8006a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e04c      	b.n	8005c32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <HAL_TIM_Base_Start+0xc0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d022      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <HAL_TIM_Base_Start+0xc4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d018      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <HAL_TIM_Base_Start+0xc8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <HAL_TIM_Base_Start+0xcc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <HAL_TIM_Base_Start+0xd0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_TIM_Base_Start+0xd4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_TIM_Base_Start+0x70>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_TIM_Base_Start+0xd8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d115      	bne.n	8005c1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_TIM_Base_Start+0xdc>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d015      	beq.n	8005c2e <HAL_TIM_Base_Start+0xae>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c08:	d011      	beq.n	8005c2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	e008      	b.n	8005c2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e000      	b.n	8005c30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40015000 	.word	0x40015000
 8005c5c:	00010007 	.word	0x00010007

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e054      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_TIM_Base_Start_IT+0xe0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d115      	bne.n	8005d0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_TIM_Base_Start_IT+0xec>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d015      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d011      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e008      	b.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40015000 	.word	0x40015000
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e049      	b.n	8005df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f841 	bl	8005dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fe58 	bl	8006a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e03c      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e02f      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d109      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x72>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e015      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x8c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0a6      	b.n	8006008 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xe6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xf6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fa00 	bl	8007320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <HAL_TIM_PWM_Start+0x1fc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x148>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a39      	ldr	r2, [pc, #228]	; (8006014 <HAL_TIM_PWM_Start+0x200>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x148>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a37      	ldr	r2, [pc, #220]	; (8006018 <HAL_TIM_PWM_Start+0x204>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x148>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a36      	ldr	r2, [pc, #216]	; (800601c <HAL_TIM_PWM_Start+0x208>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x148>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a34      	ldr	r2, [pc, #208]	; (8006020 <HAL_TIM_PWM_Start+0x20c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x148>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a33      	ldr	r2, [pc, #204]	; (8006024 <HAL_TIM_PWM_Start+0x210>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIM_PWM_Start+0x14c>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <HAL_TIM_PWM_Start+0x14e>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a25      	ldr	r2, [pc, #148]	; (8006010 <HAL_TIM_PWM_Start+0x1fc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f88:	d01d      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a26      	ldr	r2, [pc, #152]	; (8006028 <HAL_TIM_PWM_Start+0x214>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a24      	ldr	r2, [pc, #144]	; (800602c <HAL_TIM_PWM_Start+0x218>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_TIM_PWM_Start+0x21c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <HAL_TIM_PWM_Start+0x200>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_TIM_PWM_Start+0x204>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIM_PWM_Start+0x1b2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <HAL_TIM_PWM_Start+0x210>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d115      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_TIM_PWM_Start+0x220>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d015      	beq.n	8006004 <HAL_TIM_PWM_Start+0x1f0>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fde:	d011      	beq.n	8006004 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	e008      	b.n	8006004 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e000      	b.n	8006006 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	40015000 	.word	0x40015000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	00010007 	.word	0x00010007

08006038 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e097      	b.n	800617c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fc f8db 	bl	800221c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3304      	adds	r3, #4
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 fcd9 	bl	8006a44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	4313      	orrs	r3, r2
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060d8:	f023 030c 	bic.w	r3, r3, #12
 80060dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	4313      	orrs	r3, r2
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	011a      	lsls	r2, r3, #4
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	031b      	lsls	r3, r3, #12
 8006108:	4313      	orrs	r3, r2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	4313      	orrs	r3, r2
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006194:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800619c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d110      	bne.n	80061d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d102      	bne.n	80061c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061ba:	7b7b      	ldrb	r3, [r7, #13]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d001      	beq.n	80061c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e069      	b.n	8006298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d4:	e031      	b.n	800623a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d110      	bne.n	80061fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d102      	bne.n	80061e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e2:	7b3b      	ldrb	r3, [r7, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e055      	b.n	8006298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	e01d      	b.n	800623a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d108      	bne.n	8006216 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d105      	bne.n	8006216 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800620a:	7b7b      	ldrb	r3, [r7, #13]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d102      	bne.n	8006216 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006210:	7b3b      	ldrb	r3, [r7, #12]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d001      	beq.n	800621a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e03e      	b.n	8006298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_TIM_Encoder_Start+0xc4>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b04      	cmp	r3, #4
 8006244:	d008      	beq.n	8006258 <HAL_TIM_Encoder_Start+0xd4>
 8006246:	e00f      	b.n	8006268 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f865 	bl	8007320 <TIM_CCxChannelCmd>
      break;
 8006256:	e016      	b.n	8006286 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2201      	movs	r2, #1
 800625e:	2104      	movs	r1, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f001 f85d 	bl	8007320 <TIM_CCxChannelCmd>
      break;
 8006266:	e00e      	b.n	8006286 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f001 f855 	bl	8007320 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	2104      	movs	r1, #4
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f84e 	bl	8007320 <TIM_CCxChannelCmd>
      break;
 8006284:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0202 	mvn.w	r2, #2
 80062cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fb90 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fb82 	bl	80069f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb93 	bl	8006a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0204 	mvn.w	r2, #4
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb66 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb58 	bl	80069f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb69 	bl	8006a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b08      	cmp	r3, #8
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b08      	cmp	r3, #8
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0208 	mvn.w	r2, #8
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2204      	movs	r2, #4
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fb3c 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fb2e 	bl	80069f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fb3f 	bl	8006a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d122      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d11b      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0210 	mvn.w	r2, #16
 80063c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2208      	movs	r2, #8
 80063ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb12 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fb04 	bl	80069f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb15 	bl	8006a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0201 	mvn.w	r2, #1
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb f8ae 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d10e      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d107      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f9a2 	bl	8007794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645e:	d10e      	bne.n	800647e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b80      	cmp	r3, #128	; 0x80
 800646c:	d107      	bne.n	800647e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 f995 	bl	80077a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d10e      	bne.n	80064aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d107      	bne.n	80064aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fac3 	bl	8006a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d10e      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d107      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f06f 0220 	mvn.w	r2, #32
 80064ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 f955 	bl	8007780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e4:	d10f      	bne.n	8006506 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f4:	d107      	bne.n	8006506 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 f95b 	bl	80077bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006514:	d10f      	bne.n	8006536 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006524:	d107      	bne.n	8006536 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800652e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f94d 	bl	80077d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006544:	d10f      	bne.n	8006566 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f93f 	bl	80077e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006574:	d10f      	bne.n	8006596 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 f931 	bl	80077f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e0ff      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b14      	cmp	r3, #20
 80065ca:	f200 80f0 	bhi.w	80067ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	08006629 	.word	0x08006629
 80065d8:	080067af 	.word	0x080067af
 80065dc:	080067af 	.word	0x080067af
 80065e0:	080067af 	.word	0x080067af
 80065e4:	08006669 	.word	0x08006669
 80065e8:	080067af 	.word	0x080067af
 80065ec:	080067af 	.word	0x080067af
 80065f0:	080067af 	.word	0x080067af
 80065f4:	080066ab 	.word	0x080066ab
 80065f8:	080067af 	.word	0x080067af
 80065fc:	080067af 	.word	0x080067af
 8006600:	080067af 	.word	0x080067af
 8006604:	080066eb 	.word	0x080066eb
 8006608:	080067af 	.word	0x080067af
 800660c:	080067af 	.word	0x080067af
 8006610:	080067af 	.word	0x080067af
 8006614:	0800672d 	.word	0x0800672d
 8006618:	080067af 	.word	0x080067af
 800661c:	080067af 	.word	0x080067af
 8006620:	080067af 	.word	0x080067af
 8006624:	0800676d 	.word	0x0800676d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fab0 	bl	8006b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0208 	orr.w	r2, r2, #8
 8006642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0204 	bic.w	r2, r2, #4
 8006652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6999      	ldr	r1, [r3, #24]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	619a      	str	r2, [r3, #24]
      break;
 8006666:	e0a5      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fb2a 	bl	8006cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6999      	ldr	r1, [r3, #24]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	619a      	str	r2, [r3, #24]
      break;
 80066a8:	e084      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fb9d 	bl	8006df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0208 	orr.w	r2, r2, #8
 80066c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0204 	bic.w	r2, r2, #4
 80066d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69d9      	ldr	r1, [r3, #28]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	61da      	str	r2, [r3, #28]
      break;
 80066e8:	e064      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc0f 	bl	8006f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69d9      	ldr	r1, [r3, #28]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	021a      	lsls	r2, r3, #8
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	61da      	str	r2, [r3, #28]
      break;
 800672a:	e043      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fc82 	bl	800703c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0208 	orr.w	r2, r2, #8
 8006746:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0204 	bic.w	r2, r2, #4
 8006756:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800676a:	e023      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fccc 	bl	8007110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006786:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006796:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80067ac:	e002      	b.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
      break;
 80067b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop

080067c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_TIM_ConfigClockSource+0x1c>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e0f6      	b.n	80069d2 <HAL_TIM_ConfigClockSource+0x20a>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800680e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a6f      	ldr	r2, [pc, #444]	; (80069dc <HAL_TIM_ConfigClockSource+0x214>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f000 80c1 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006824:	4a6d      	ldr	r2, [pc, #436]	; (80069dc <HAL_TIM_ConfigClockSource+0x214>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f200 80c6 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800682c:	4a6c      	ldr	r2, [pc, #432]	; (80069e0 <HAL_TIM_ConfigClockSource+0x218>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f000 80b9 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006834:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_TIM_ConfigClockSource+0x218>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f200 80be 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800683c:	4a69      	ldr	r2, [pc, #420]	; (80069e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f000 80b1 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006844:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f200 80b6 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800684c:	4a66      	ldr	r2, [pc, #408]	; (80069e8 <HAL_TIM_ConfigClockSource+0x220>)
 800684e:	4293      	cmp	r3, r2
 8006850:	f000 80a9 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006854:	4a64      	ldr	r2, [pc, #400]	; (80069e8 <HAL_TIM_ConfigClockSource+0x220>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f200 80ae 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800685c:	4a63      	ldr	r2, [pc, #396]	; (80069ec <HAL_TIM_ConfigClockSource+0x224>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f000 80a1 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006864:	4a61      	ldr	r2, [pc, #388]	; (80069ec <HAL_TIM_ConfigClockSource+0x224>)
 8006866:	4293      	cmp	r3, r2
 8006868:	f200 80a6 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800686c:	4a60      	ldr	r2, [pc, #384]	; (80069f0 <HAL_TIM_ConfigClockSource+0x228>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f000 8099 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006874:	4a5e      	ldr	r2, [pc, #376]	; (80069f0 <HAL_TIM_ConfigClockSource+0x228>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f200 809e 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800687c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006880:	f000 8091 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006888:	f200 8096 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800688c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006890:	f000 8089 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006898:	f200 808e 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d03e      	beq.n	8006920 <HAL_TIM_ConfigClockSource+0x158>
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	f200 8087 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	f000 8086 	beq.w	80069be <HAL_TIM_ConfigClockSource+0x1f6>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d87f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068b8:	2b70      	cmp	r3, #112	; 0x70
 80068ba:	d01a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x12a>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d87b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c0:	2b60      	cmp	r3, #96	; 0x60
 80068c2:	d050      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x19e>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d877      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c8:	2b50      	cmp	r3, #80	; 0x50
 80068ca:	d03c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x17e>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d873      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d058      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x1be>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d86f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d8:	2b30      	cmp	r3, #48	; 0x30
 80068da:	d064      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d86b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d060      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d867      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05c      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d05a      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x1de>
 80068f0:	e062      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6899      	ldr	r1, [r3, #8]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f000 fced 	bl	80072e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
      break;
 800691e:	e04f      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6899      	ldr	r1, [r3, #8]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f000 fcd6 	bl	80072e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006942:	609a      	str	r2, [r3, #8]
      break;
 8006944:	e03c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	461a      	mov	r2, r3
 8006954:	f000 fc48 	bl	80071e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2150      	movs	r1, #80	; 0x50
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fca1 	bl	80072a6 <TIM_ITRx_SetConfig>
      break;
 8006964:	e02c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	461a      	mov	r2, r3
 8006974:	f000 fc67 	bl	8007246 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2160      	movs	r1, #96	; 0x60
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fc91 	bl	80072a6 <TIM_ITRx_SetConfig>
      break;
 8006984:	e01c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fc28 	bl	80071e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2140      	movs	r1, #64	; 0x40
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fc81 	bl	80072a6 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e00c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f000 fc78 	bl	80072a6 <TIM_ITRx_SetConfig>
      break;
 80069b6:	e003      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
      break;
 80069bc:	e000      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80069be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	00100070 	.word	0x00100070
 80069e0:	00100060 	.word	0x00100060
 80069e4:	00100050 	.word	0x00100050
 80069e8:	00100040 	.word	0x00100040
 80069ec:	00100030 	.word	0x00100030
 80069f0:	00100020 	.word	0x00100020

080069f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a46      	ldr	r2, [pc, #280]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d017      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a62:	d013      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a43      	ldr	r2, [pc, #268]	; (8006b74 <TIM_Base_SetConfig+0x130>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a42      	ldr	r2, [pc, #264]	; (8006b78 <TIM_Base_SetConfig+0x134>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a41      	ldr	r2, [pc, #260]	; (8006b7c <TIM_Base_SetConfig+0x138>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <TIM_Base_SetConfig+0x13c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x48>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <TIM_Base_SetConfig+0x140>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d108      	bne.n	8006a9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a33      	ldr	r2, [pc, #204]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d023      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d01f      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a30      	ldr	r2, [pc, #192]	; (8006b74 <TIM_Base_SetConfig+0x130>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01b      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2f      	ldr	r2, [pc, #188]	; (8006b78 <TIM_Base_SetConfig+0x134>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d017      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2e      	ldr	r2, [pc, #184]	; (8006b7c <TIM_Base_SetConfig+0x138>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2d      	ldr	r2, [pc, #180]	; (8006b80 <TIM_Base_SetConfig+0x13c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00f      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	; (8006b88 <TIM_Base_SetConfig+0x144>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00b      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <TIM_Base_SetConfig+0x148>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d007      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <TIM_Base_SetConfig+0x14c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d003      	beq.n	8006aee <TIM_Base_SetConfig+0xaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <TIM_Base_SetConfig+0x140>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d108      	bne.n	8006b00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a12      	ldr	r2, [pc, #72]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <TIM_Base_SetConfig+0x110>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <TIM_Base_SetConfig+0x13c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0x110>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <TIM_Base_SetConfig+0x144>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0x110>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <TIM_Base_SetConfig+0x148>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0x110>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <TIM_Base_SetConfig+0x14c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0x110>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <TIM_Base_SetConfig+0x140>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40015000 	.word	0x40015000
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800

08006b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0201 	bic.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0302 	bic.w	r3, r3, #2
 8006be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a30      	ldr	r2, [pc, #192]	; (8006cb0 <TIM_OC1_SetConfig+0x11c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <TIM_OC1_SetConfig+0x88>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a2f      	ldr	r2, [pc, #188]	; (8006cb4 <TIM_OC1_SetConfig+0x120>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00f      	beq.n	8006c1c <TIM_OC1_SetConfig+0x88>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a2e      	ldr	r2, [pc, #184]	; (8006cb8 <TIM_OC1_SetConfig+0x124>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_OC1_SetConfig+0x88>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2d      	ldr	r2, [pc, #180]	; (8006cbc <TIM_OC1_SetConfig+0x128>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_OC1_SetConfig+0x88>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <TIM_OC1_SetConfig+0x12c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_OC1_SetConfig+0x88>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <TIM_OC1_SetConfig+0x130>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10c      	bne.n	8006c36 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0308 	bic.w	r3, r3, #8
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 0304 	bic.w	r3, r3, #4
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <TIM_OC1_SetConfig+0x11c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <TIM_OC1_SetConfig+0xd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <TIM_OC1_SetConfig+0x120>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_OC1_SetConfig+0xd2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <TIM_OC1_SetConfig+0x124>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_OC1_SetConfig+0xd2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <TIM_OC1_SetConfig+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_OC1_SetConfig+0xd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <TIM_OC1_SetConfig+0x12c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_OC1_SetConfig+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <TIM_OC1_SetConfig+0x130>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d111      	bne.n	8006c8a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40015000 	.word	0x40015000

08006cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0210 	bic.w	r2, r3, #16
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f023 0320 	bic.w	r3, r3, #32
 8006d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <TIM_OC2_SetConfig+0x110>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_OC2_SetConfig+0x74>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2b      	ldr	r2, [pc, #172]	; (8006ddc <TIM_OC2_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_OC2_SetConfig+0x74>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <TIM_OC2_SetConfig+0x118>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10d      	bne.n	8006d58 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <TIM_OC2_SetConfig+0x110>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <TIM_OC2_SetConfig+0xc0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <TIM_OC2_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC2_SetConfig+0xc0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <TIM_OC2_SetConfig+0x11c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC2_SetConfig+0xc0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <TIM_OC2_SetConfig+0x120>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC2_SetConfig+0xc0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <TIM_OC2_SetConfig+0x124>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <TIM_OC2_SetConfig+0x118>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40015000 	.word	0x40015000
 8006de4:	40014000 	.word	0x40014000
 8006de8:	40014400 	.word	0x40014400
 8006dec:	40014800 	.word	0x40014800

08006df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <TIM_OC3_SetConfig+0x10c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_OC3_SetConfig+0x72>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <TIM_OC3_SetConfig+0x110>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_OC3_SetConfig+0x72>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <TIM_OC3_SetConfig+0x114>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d10d      	bne.n	8006e7e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <TIM_OC3_SetConfig+0x10c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <TIM_OC3_SetConfig+0xbe>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1d      	ldr	r2, [pc, #116]	; (8006f00 <TIM_OC3_SetConfig+0x110>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00f      	beq.n	8006eae <TIM_OC3_SetConfig+0xbe>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1d      	ldr	r2, [pc, #116]	; (8006f08 <TIM_OC3_SetConfig+0x118>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00b      	beq.n	8006eae <TIM_OC3_SetConfig+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <TIM_OC3_SetConfig+0x11c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d007      	beq.n	8006eae <TIM_OC3_SetConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <TIM_OC3_SetConfig+0x120>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d003      	beq.n	8006eae <TIM_OC3_SetConfig+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <TIM_OC3_SetConfig+0x114>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d113      	bne.n	8006ed6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40015000 	.word	0x40015000
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800

08006f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	031b      	lsls	r3, r3, #12
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <TIM_OC4_SetConfig+0x110>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_OC4_SetConfig+0x74>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <TIM_OC4_SetConfig+0x114>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_OC4_SetConfig+0x74>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a2a      	ldr	r2, [pc, #168]	; (800702c <TIM_OC4_SetConfig+0x118>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d10d      	bne.n	8006fa4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <TIM_OC4_SetConfig+0x110>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <TIM_OC4_SetConfig+0xc0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <TIM_OC4_SetConfig+0x114>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_OC4_SetConfig+0xc0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <TIM_OC4_SetConfig+0x11c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_OC4_SetConfig+0xc0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <TIM_OC4_SetConfig+0x120>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_OC4_SetConfig+0xc0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1c      	ldr	r2, [pc, #112]	; (8007038 <TIM_OC4_SetConfig+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC4_SetConfig+0xc0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <TIM_OC4_SetConfig+0x118>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d113      	bne.n	8006ffc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fda:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	019b      	lsls	r3, r3, #6
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	019b      	lsls	r3, r3, #6
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40015000 	.word	0x40015000
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800

0800703c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <TIM_OC5_SetConfig+0xbc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <TIM_OC5_SetConfig+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <TIM_OC5_SetConfig+0xc0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00f      	beq.n	80070be <TIM_OC5_SetConfig+0x82>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <TIM_OC5_SetConfig+0xc4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00b      	beq.n	80070be <TIM_OC5_SetConfig+0x82>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a16      	ldr	r2, [pc, #88]	; (8007104 <TIM_OC5_SetConfig+0xc8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d007      	beq.n	80070be <TIM_OC5_SetConfig+0x82>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a15      	ldr	r2, [pc, #84]	; (8007108 <TIM_OC5_SetConfig+0xcc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_OC5_SetConfig+0x82>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a14      	ldr	r2, [pc, #80]	; (800710c <TIM_OC5_SetConfig+0xd0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d109      	bne.n	80070d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800
 800710c:	40015000 	.word	0x40015000

08007110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	051b      	lsls	r3, r3, #20
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a1a      	ldr	r2, [pc, #104]	; (80071d0 <TIM_OC6_SetConfig+0xc0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <TIM_OC6_SetConfig+0x84>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a19      	ldr	r2, [pc, #100]	; (80071d4 <TIM_OC6_SetConfig+0xc4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00f      	beq.n	8007194 <TIM_OC6_SetConfig+0x84>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <TIM_OC6_SetConfig+0xc8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00b      	beq.n	8007194 <TIM_OC6_SetConfig+0x84>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a17      	ldr	r2, [pc, #92]	; (80071dc <TIM_OC6_SetConfig+0xcc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_OC6_SetConfig+0x84>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <TIM_OC6_SetConfig+0xd0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC6_SetConfig+0x84>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <TIM_OC6_SetConfig+0xd4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d109      	bne.n	80071a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800
 80071e4:	40015000 	.word	0x40015000

080071e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f023 030a 	bic.w	r3, r3, #10
 8007224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007246:	b480      	push	{r7}
 8007248:	b087      	sub	sp, #28
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0210 	bic.w	r2, r3, #16
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f043 0307 	orr.w	r3, r3, #7
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	021a      	lsls	r2, r3, #8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	431a      	orrs	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4313      	orrs	r3, r2
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2201      	movs	r2, #1
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	43db      	mvns	r3, r3
 8007342:	401a      	ands	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	fa01 f303 	lsl.w	r3, r1, r3
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d109      	bne.n	8007390 <HAL_TIMEx_PWMN_Start+0x24>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	e022      	b.n	80073d6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d109      	bne.n	80073aa <HAL_TIMEx_PWMN_Start+0x3e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b01      	cmp	r3, #1
 80073a0:	bf14      	ite	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	2300      	moveq	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	e015      	b.n	80073d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d109      	bne.n	80073c4 <HAL_TIMEx_PWMN_Start+0x58>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	bf14      	ite	ne
 80073bc:	2301      	movne	r3, #1
 80073be:	2300      	moveq	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	e008      	b.n	80073d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e073      	b.n	80074c6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <HAL_TIMEx_PWMN_Start+0x82>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ec:	e013      	b.n	8007416 <HAL_TIMEx_PWMN_Start+0xaa>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d104      	bne.n	80073fe <HAL_TIMEx_PWMN_Start+0x92>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073fc:	e00b      	b.n	8007416 <HAL_TIMEx_PWMN_Start+0xaa>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b08      	cmp	r3, #8
 8007402:	d104      	bne.n	800740e <HAL_TIMEx_PWMN_Start+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800740c:	e003      	b.n	8007416 <HAL_TIMEx_PWMN_Start+0xaa>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2204      	movs	r2, #4
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f9f4 	bl	800780c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007432:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <HAL_TIMEx_PWMN_Start+0x164>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d022      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d01d      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_TIMEx_PWMN_Start+0x168>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d018      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <HAL_TIMEx_PWMN_Start+0x170>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00e      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <HAL_TIMEx_PWMN_Start+0x174>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1b      	ldr	r2, [pc, #108]	; (80074e4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d004      	beq.n	8007484 <HAL_TIMEx_PWMN_Start+0x118>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1a      	ldr	r2, [pc, #104]	; (80074e8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d115      	bne.n	80074b0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <HAL_TIMEx_PWMN_Start+0x180>)
 800748c:	4013      	ands	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b06      	cmp	r3, #6
 8007494:	d015      	beq.n	80074c2 <HAL_TIMEx_PWMN_Start+0x156>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749c:	d011      	beq.n	80074c2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ae:	e008      	b.n	80074c2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e000      	b.n	80074c4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800
 80074dc:	40000c00 	.word	0x40000c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40015000 	.word	0x40015000
 80074ec:	00010007 	.word	0x00010007

080074f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007504:	2302      	movs	r3, #2
 8007506:	e074      	b.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a34      	ldr	r2, [pc, #208]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d009      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a33      	ldr	r2, [pc, #204]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a31      	ldr	r2, [pc, #196]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800754c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d01d      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a15      	ldr	r2, [pc, #84]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a11      	ldr	r2, [pc, #68]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10c      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40015000 	.word	0x40015000
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40014000 	.word	0x40014000

0800761c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007634:	2302      	movs	r3, #2
 8007636:	e096      	b.n	8007766 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a2f      	ldr	r2, [pc, #188]	; (8007774 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2d      	ldr	r2, [pc, #180]	; (8007778 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	; (800777c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d106      	bne.n	80076de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a24      	ldr	r2, [pc, #144]	; (8007774 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a22      	ldr	r2, [pc, #136]	; (8007778 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	; (800777c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d12b      	bne.n	8007754 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	051b      	lsls	r3, r3, #20
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4313      	orrs	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a11      	ldr	r2, [pc, #68]	; (8007774 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d004      	beq.n	8007746 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0e      	ldr	r2, [pc, #56]	; (800777c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d106      	bne.n	8007754 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40015000 	.word	0x40015000

08007780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2204      	movs	r2, #4
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1a      	ldr	r2, [r3, #32]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	43db      	mvns	r3, r3
 800782e:	401a      	ands	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1a      	ldr	r2, [r3, #32]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	fa01 f303 	lsl.w	r3, r1, r3
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e042      	b.n	80078ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa fdaa 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	; 0x24
 8007884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc51 	bl	8008140 <UART_SetConfig>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e022      	b.n	80078ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff41 	bl	8008738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 ffc8 	bl	800887c <UART_CheckIdleState>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b08a      	sub	sp, #40	; 0x28
 80078fa:	af02      	add	r7, sp, #8
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	2b20      	cmp	r3, #32
 800790e:	f040 8083 	bne.w	8007a18 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_UART_Transmit+0x28>
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e07b      	b.n	8007a1a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_UART_Transmit+0x3a>
 800792c:	2302      	movs	r3, #2
 800792e:	e074      	b.n	8007a1a <HAL_UART_Transmit+0x124>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2221      	movs	r2, #33	; 0x21
 8007944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007948:	f7fa fe0a 	bl	8002560 <HAL_GetTick>
 800794c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d108      	bne.n	800797a <HAL_UART_Transmit+0x84>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e003      	b.n	8007982 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800798a:	e02c      	b.n	80079e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2200      	movs	r2, #0
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 ffbb 	bl	8008912 <UART_WaitOnFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e039      	b.n	8007a1a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	3302      	adds	r3, #2
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	e007      	b.n	80079d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	3301      	adds	r3, #1
 80079d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1cc      	bne.n	800798c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2140      	movs	r1, #64	; 0x40
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 ff88 	bl	8008912 <UART_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e006      	b.n	8007a1a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d142      	bne.n	8007ac2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <HAL_UART_Receive_IT+0x24>
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e03b      	b.n	8007ac4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_UART_Receive_IT+0x36>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e034      	b.n	8007ac4 <HAL_UART_Receive_IT+0xa0>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_UART_Receive_IT+0xa8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01f      	beq.n	8007ab2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d018      	beq.n	8007ab2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	623b      	str	r3, [r7, #32]
 8007aa0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69f9      	ldr	r1, [r7, #28]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e6      	bne.n	8007a80 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fff3 	bl	8008aa4 <UART_Start_Receive_IT>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	e000      	b.n	8007ac4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ac2:	2302      	movs	r3, #2
  }
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3728      	adds	r7, #40	; 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40008000 	.word	0x40008000

08007ad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b0ba      	sub	sp, #232	; 0xe8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007af6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007afa:	f640 030f 	movw	r3, #2063	; 0x80f
 8007afe:	4013      	ands	r3, r2
 8007b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11b      	bne.n	8007b44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d015      	beq.n	8007b44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 82d6 	beq.w	80080e6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
      }
      return;
 8007b42:	e2d0      	b.n	80080e6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 811f 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b52:	4b8b      	ldr	r3, [pc, #556]	; (8007d80 <HAL_UART_IRQHandler+0x2b0>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b5e:	4b89      	ldr	r3, [pc, #548]	; (8007d84 <HAL_UART_IRQHandler+0x2b4>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 8112 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d011      	beq.n	8007b98 <HAL_UART_IRQHandler+0xc8>
 8007b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d011      	beq.n	8007bc8 <HAL_UART_IRQHandler+0xf8>
 8007ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bbe:	f043 0204 	orr.w	r2, r3, #4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d011      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x128>
 8007bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2204      	movs	r2, #4
 8007be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d017      	beq.n	8007c34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c14:	4b5a      	ldr	r3, [pc, #360]	; (8007d80 <HAL_UART_IRQHandler+0x2b0>)
 8007c16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2a:	f043 0208 	orr.w	r2, r3, #8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d012      	beq.n	8007c66 <HAL_UART_IRQHandler+0x196>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 823c 	beq.w	80080ea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d013      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d005      	beq.n	8007cca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d04f      	beq.n	8007d6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f814 	bl	8008cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d141      	bne.n	8007d62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1d9      	bne.n	8007cde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d013      	beq.n	8007d5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d36:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <HAL_UART_IRQHandler+0x2b8>)
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fc fadc 	bl	80042fc <HAL_DMA_Abort_IT>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d017      	beq.n	8007d7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	e00f      	b.n	8007d7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f9da 	bl	8008114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d60:	e00b      	b.n	8007d7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f9d6 	bl	8008114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	e007      	b.n	8007d7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9d2 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007d78:	e1b7      	b.n	80080ea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7a:	bf00      	nop
    return;
 8007d7c:	e1b5      	b.n	80080ea <HAL_UART_IRQHandler+0x61a>
 8007d7e:	bf00      	nop
 8007d80:	10000001 	.word	0x10000001
 8007d84:	04000120 	.word	0x04000120
 8007d88:	08008dc5 	.word	0x08008dc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f040 814a 	bne.w	800802a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8143 	beq.w	800802a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 813c 	beq.w	800802a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	f040 80b5 	bne.w	8007f34 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8187 	beq.w	80080ee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dea:	429a      	cmp	r2, r3
 8007dec:	f080 817f 	bcs.w	80080ee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007df6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 8086 	bne.w	8007f18 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1da      	bne.n	8007e0c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e1      	bne.n	8007e56 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e3      	bne.n	8007e92 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee8:	f023 0310 	bic.w	r3, r3, #16
 8007eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007efc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e4      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fc f999 	bl	800424a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f8fb 	bl	8008128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f32:	e0dc      	b.n	80080ee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80ce 	beq.w	80080f2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80c9 	beq.w	80080f2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f82:	647b      	str	r3, [r7, #68]	; 0x44
 8007f84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e4      	bne.n	8007f60 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e1      	bne.n	8007f96 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	69b9      	ldr	r1, [r7, #24]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	617b      	str	r3, [r7, #20]
   return(result);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e4      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800801c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f880 	bl	8008128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008028:	e063      	b.n	80080f2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00e      	beq.n	8008054 <HAL_UART_IRQHandler+0x584>
 8008036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d008      	beq.n	8008054 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800804a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fb57 	bl	8009700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008052:	e051      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800806c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807c:	2b00      	cmp	r3, #0
 800807e:	d03a      	beq.n	80080f6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
    }
    return;
 8008088:	e035      	b.n	80080f6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <HAL_UART_IRQHandler+0x5da>
 8008096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fea4 	bl	8008df0 <UART_EndTransmit_IT>
    return;
 80080a8:	e026      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <HAL_UART_IRQHandler+0x5fa>
 80080b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fb30 	bl	8009728 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080c8:	e016      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <HAL_UART_IRQHandler+0x628>
 80080d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0c      	bge.n	80080f8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fb18 	bl	8009714 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080e4:	e008      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
      return;
 80080e6:	bf00      	nop
 80080e8:	e006      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
    return;
 80080ea:	bf00      	nop
 80080ec:	e004      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
      return;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
      return;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_UART_IRQHandler+0x628>
    return;
 80080f6:	bf00      	nop
  }
}
 80080f8:	37e8      	adds	r7, #232	; 0xe8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop

08008100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008144:	b08c      	sub	sp, #48	; 0x30
 8008146:	af00      	add	r7, sp, #0
 8008148:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	431a      	orrs	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	431a      	orrs	r2, r3
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	4313      	orrs	r3, r2
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4baa      	ldr	r3, [pc, #680]	; (8008418 <UART_SetConfig+0x2d8>)
 8008170:	4013      	ands	r3, r2
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008178:	430b      	orrs	r3, r1
 800817a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a9f      	ldr	r2, [pc, #636]	; (800841c <UART_SetConfig+0x2dc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c0:	430b      	orrs	r3, r1
 80081c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	f023 010f 	bic.w	r1, r3, #15
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a90      	ldr	r2, [pc, #576]	; (8008420 <UART_SetConfig+0x2e0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d125      	bne.n	8008230 <UART_SetConfig+0xf0>
 80081e4:	4b8f      	ldr	r3, [pc, #572]	; (8008424 <UART_SetConfig+0x2e4>)
 80081e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d81a      	bhi.n	8008228 <UART_SetConfig+0xe8>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <UART_SetConfig+0xb8>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	08008209 	.word	0x08008209
 80081fc:	08008219 	.word	0x08008219
 8008200:	08008211 	.word	0x08008211
 8008204:	08008221 	.word	0x08008221
 8008208:	2301      	movs	r3, #1
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e116      	b.n	800843e <UART_SetConfig+0x2fe>
 8008210:	2302      	movs	r3, #2
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e112      	b.n	800843e <UART_SetConfig+0x2fe>
 8008218:	2304      	movs	r3, #4
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e10e      	b.n	800843e <UART_SetConfig+0x2fe>
 8008220:	2308      	movs	r3, #8
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008226:	e10a      	b.n	800843e <UART_SetConfig+0x2fe>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822e:	e106      	b.n	800843e <UART_SetConfig+0x2fe>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a7c      	ldr	r2, [pc, #496]	; (8008428 <UART_SetConfig+0x2e8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d138      	bne.n	80082ac <UART_SetConfig+0x16c>
 800823a:	4b7a      	ldr	r3, [pc, #488]	; (8008424 <UART_SetConfig+0x2e4>)
 800823c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008240:	f003 030c 	and.w	r3, r3, #12
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d82d      	bhi.n	80082a4 <UART_SetConfig+0x164>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x110>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008285 	.word	0x08008285
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082a5 	.word	0x080082a5
 800825c:	080082a5 	.word	0x080082a5
 8008260:	08008295 	.word	0x08008295
 8008264:	080082a5 	.word	0x080082a5
 8008268:	080082a5 	.word	0x080082a5
 800826c:	080082a5 	.word	0x080082a5
 8008270:	0800828d 	.word	0x0800828d
 8008274:	080082a5 	.word	0x080082a5
 8008278:	080082a5 	.word	0x080082a5
 800827c:	080082a5 	.word	0x080082a5
 8008280:	0800829d 	.word	0x0800829d
 8008284:	2300      	movs	r3, #0
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e0d8      	b.n	800843e <UART_SetConfig+0x2fe>
 800828c:	2302      	movs	r3, #2
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008292:	e0d4      	b.n	800843e <UART_SetConfig+0x2fe>
 8008294:	2304      	movs	r3, #4
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829a:	e0d0      	b.n	800843e <UART_SetConfig+0x2fe>
 800829c:	2308      	movs	r3, #8
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a2:	e0cc      	b.n	800843e <UART_SetConfig+0x2fe>
 80082a4:	2310      	movs	r3, #16
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082aa:	e0c8      	b.n	800843e <UART_SetConfig+0x2fe>
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a5e      	ldr	r2, [pc, #376]	; (800842c <UART_SetConfig+0x2ec>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d125      	bne.n	8008302 <UART_SetConfig+0x1c2>
 80082b6:	4b5b      	ldr	r3, [pc, #364]	; (8008424 <UART_SetConfig+0x2e4>)
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082c0:	2b30      	cmp	r3, #48	; 0x30
 80082c2:	d016      	beq.n	80082f2 <UART_SetConfig+0x1b2>
 80082c4:	2b30      	cmp	r3, #48	; 0x30
 80082c6:	d818      	bhi.n	80082fa <UART_SetConfig+0x1ba>
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d00a      	beq.n	80082e2 <UART_SetConfig+0x1a2>
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d814      	bhi.n	80082fa <UART_SetConfig+0x1ba>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <UART_SetConfig+0x19a>
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d008      	beq.n	80082ea <UART_SetConfig+0x1aa>
 80082d8:	e00f      	b.n	80082fa <UART_SetConfig+0x1ba>
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e0:	e0ad      	b.n	800843e <UART_SetConfig+0x2fe>
 80082e2:	2302      	movs	r3, #2
 80082e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e8:	e0a9      	b.n	800843e <UART_SetConfig+0x2fe>
 80082ea:	2304      	movs	r3, #4
 80082ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f0:	e0a5      	b.n	800843e <UART_SetConfig+0x2fe>
 80082f2:	2308      	movs	r3, #8
 80082f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f8:	e0a1      	b.n	800843e <UART_SetConfig+0x2fe>
 80082fa:	2310      	movs	r3, #16
 80082fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008300:	e09d      	b.n	800843e <UART_SetConfig+0x2fe>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a4a      	ldr	r2, [pc, #296]	; (8008430 <UART_SetConfig+0x2f0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d125      	bne.n	8008358 <UART_SetConfig+0x218>
 800830c:	4b45      	ldr	r3, [pc, #276]	; (8008424 <UART_SetConfig+0x2e4>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008316:	2bc0      	cmp	r3, #192	; 0xc0
 8008318:	d016      	beq.n	8008348 <UART_SetConfig+0x208>
 800831a:	2bc0      	cmp	r3, #192	; 0xc0
 800831c:	d818      	bhi.n	8008350 <UART_SetConfig+0x210>
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d00a      	beq.n	8008338 <UART_SetConfig+0x1f8>
 8008322:	2b80      	cmp	r3, #128	; 0x80
 8008324:	d814      	bhi.n	8008350 <UART_SetConfig+0x210>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <UART_SetConfig+0x1f0>
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d008      	beq.n	8008340 <UART_SetConfig+0x200>
 800832e:	e00f      	b.n	8008350 <UART_SetConfig+0x210>
 8008330:	2300      	movs	r3, #0
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e082      	b.n	800843e <UART_SetConfig+0x2fe>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e07e      	b.n	800843e <UART_SetConfig+0x2fe>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e07a      	b.n	800843e <UART_SetConfig+0x2fe>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e076      	b.n	800843e <UART_SetConfig+0x2fe>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e072      	b.n	800843e <UART_SetConfig+0x2fe>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a35      	ldr	r2, [pc, #212]	; (8008434 <UART_SetConfig+0x2f4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d12a      	bne.n	80083b8 <UART_SetConfig+0x278>
 8008362:	4b30      	ldr	r3, [pc, #192]	; (8008424 <UART_SetConfig+0x2e4>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800836c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008370:	d01a      	beq.n	80083a8 <UART_SetConfig+0x268>
 8008372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008376:	d81b      	bhi.n	80083b0 <UART_SetConfig+0x270>
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d00c      	beq.n	8008398 <UART_SetConfig+0x258>
 800837e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008382:	d815      	bhi.n	80083b0 <UART_SetConfig+0x270>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <UART_SetConfig+0x250>
 8008388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838c:	d008      	beq.n	80083a0 <UART_SetConfig+0x260>
 800838e:	e00f      	b.n	80083b0 <UART_SetConfig+0x270>
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e052      	b.n	800843e <UART_SetConfig+0x2fe>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e04e      	b.n	800843e <UART_SetConfig+0x2fe>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e04a      	b.n	800843e <UART_SetConfig+0x2fe>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e046      	b.n	800843e <UART_SetConfig+0x2fe>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b6:	e042      	b.n	800843e <UART_SetConfig+0x2fe>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a17      	ldr	r2, [pc, #92]	; (800841c <UART_SetConfig+0x2dc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d13a      	bne.n	8008438 <UART_SetConfig+0x2f8>
 80083c2:	4b18      	ldr	r3, [pc, #96]	; (8008424 <UART_SetConfig+0x2e4>)
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083d0:	d01a      	beq.n	8008408 <UART_SetConfig+0x2c8>
 80083d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083d6:	d81b      	bhi.n	8008410 <UART_SetConfig+0x2d0>
 80083d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083dc:	d00c      	beq.n	80083f8 <UART_SetConfig+0x2b8>
 80083de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e2:	d815      	bhi.n	8008410 <UART_SetConfig+0x2d0>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <UART_SetConfig+0x2b0>
 80083e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ec:	d008      	beq.n	8008400 <UART_SetConfig+0x2c0>
 80083ee:	e00f      	b.n	8008410 <UART_SetConfig+0x2d0>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e022      	b.n	800843e <UART_SetConfig+0x2fe>
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e01e      	b.n	800843e <UART_SetConfig+0x2fe>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e01a      	b.n	800843e <UART_SetConfig+0x2fe>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840e:	e016      	b.n	800843e <UART_SetConfig+0x2fe>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008416:	e012      	b.n	800843e <UART_SetConfig+0x2fe>
 8008418:	cfff69f3 	.word	0xcfff69f3
 800841c:	40008000 	.word	0x40008000
 8008420:	40013800 	.word	0x40013800
 8008424:	40021000 	.word	0x40021000
 8008428:	40004400 	.word	0x40004400
 800842c:	40004800 	.word	0x40004800
 8008430:	40004c00 	.word	0x40004c00
 8008434:	40005000 	.word	0x40005000
 8008438:	2310      	movs	r3, #16
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4aae      	ldr	r2, [pc, #696]	; (80086fc <UART_SetConfig+0x5bc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	f040 8097 	bne.w	8008578 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800844a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800844e:	2b08      	cmp	r3, #8
 8008450:	d823      	bhi.n	800849a <UART_SetConfig+0x35a>
 8008452:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <UART_SetConfig+0x318>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	0800847d 	.word	0x0800847d
 800845c:	0800849b 	.word	0x0800849b
 8008460:	08008485 	.word	0x08008485
 8008464:	0800849b 	.word	0x0800849b
 8008468:	0800848b 	.word	0x0800848b
 800846c:	0800849b 	.word	0x0800849b
 8008470:	0800849b 	.word	0x0800849b
 8008474:	0800849b 	.word	0x0800849b
 8008478:	08008493 	.word	0x08008493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800847c:	f7fd f836 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8008480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008482:	e010      	b.n	80084a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008484:	4b9e      	ldr	r3, [pc, #632]	; (8008700 <UART_SetConfig+0x5c0>)
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008488:	e00d      	b.n	80084a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800848a:	f7fc ffc1 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 800848e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008490:	e009      	b.n	80084a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008498:	e005      	b.n	80084a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8130 	beq.w	800870e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	4a94      	ldr	r2, [pc, #592]	; (8008704 <UART_SetConfig+0x5c4>)
 80084b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	4413      	add	r3, r2
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d305      	bcc.n	80084de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d903      	bls.n	80084e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084e4:	e113      	b.n	800870e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2200      	movs	r2, #0
 80084ea:	60bb      	str	r3, [r7, #8]
 80084ec:	60fa      	str	r2, [r7, #12]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	4a84      	ldr	r2, [pc, #528]	; (8008704 <UART_SetConfig+0x5c4>)
 80084f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2200      	movs	r2, #0
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008504:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008508:	f7f8 fbd6 	bl	8000cb8 <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	020b      	lsls	r3, r1, #8
 800851e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008522:	0202      	lsls	r2, r0, #8
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	6849      	ldr	r1, [r1, #4]
 8008528:	0849      	lsrs	r1, r1, #1
 800852a:	2000      	movs	r0, #0
 800852c:	460c      	mov	r4, r1
 800852e:	4605      	mov	r5, r0
 8008530:	eb12 0804 	adds.w	r8, r2, r4
 8008534:	eb43 0905 	adc.w	r9, r3, r5
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	469a      	mov	sl, r3
 8008540:	4693      	mov	fp, r2
 8008542:	4652      	mov	r2, sl
 8008544:	465b      	mov	r3, fp
 8008546:	4640      	mov	r0, r8
 8008548:	4649      	mov	r1, r9
 800854a:	f7f8 fbb5 	bl	8000cb8 <__aeabi_uldivmod>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4613      	mov	r3, r2
 8008554:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855c:	d308      	bcc.n	8008570 <UART_SetConfig+0x430>
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008564:	d204      	bcs.n	8008570 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6a3a      	ldr	r2, [r7, #32]
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	e0ce      	b.n	800870e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008576:	e0ca      	b.n	800870e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008580:	d166      	bne.n	8008650 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008586:	2b08      	cmp	r3, #8
 8008588:	d827      	bhi.n	80085da <UART_SetConfig+0x49a>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x450>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085b5 	.word	0x080085b5
 8008594:	080085bd 	.word	0x080085bd
 8008598:	080085c5 	.word	0x080085c5
 800859c:	080085db 	.word	0x080085db
 80085a0:	080085cb 	.word	0x080085cb
 80085a4:	080085db 	.word	0x080085db
 80085a8:	080085db 	.word	0x080085db
 80085ac:	080085db 	.word	0x080085db
 80085b0:	080085d3 	.word	0x080085d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b4:	f7fc ff9a 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80085b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085ba:	e014      	b.n	80085e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085bc:	f7fc ffac 	bl	8005518 <HAL_RCC_GetPCLK2Freq>
 80085c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085c2:	e010      	b.n	80085e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085c4:	4b4e      	ldr	r3, [pc, #312]	; (8008700 <UART_SetConfig+0x5c0>)
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c8:	e00d      	b.n	80085e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ca:	f7fc ff21 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80085ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085d0:	e009      	b.n	80085e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085d8:	e005      	b.n	80085e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8090 	beq.w	800870e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	4a44      	ldr	r2, [pc, #272]	; (8008704 <UART_SetConfig+0x5c4>)
 80085f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008600:	005a      	lsls	r2, r3, #1
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	441a      	add	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008612:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	2b0f      	cmp	r3, #15
 8008618:	d916      	bls.n	8008648 <UART_SetConfig+0x508>
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008620:	d212      	bcs.n	8008648 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f023 030f 	bic.w	r3, r3, #15
 800862a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	085b      	lsrs	r3, r3, #1
 8008630:	b29b      	uxth	r3, r3
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	b29a      	uxth	r2, r3
 8008638:	8bfb      	ldrh	r3, [r7, #30]
 800863a:	4313      	orrs	r3, r2
 800863c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	8bfa      	ldrh	r2, [r7, #30]
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	e062      	b.n	800870e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800864e:	e05e      	b.n	800870e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008654:	2b08      	cmp	r3, #8
 8008656:	d828      	bhi.n	80086aa <UART_SetConfig+0x56a>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <UART_SetConfig+0x520>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008685 	.word	0x08008685
 8008664:	0800868d 	.word	0x0800868d
 8008668:	08008695 	.word	0x08008695
 800866c:	080086ab 	.word	0x080086ab
 8008670:	0800869b 	.word	0x0800869b
 8008674:	080086ab 	.word	0x080086ab
 8008678:	080086ab 	.word	0x080086ab
 800867c:	080086ab 	.word	0x080086ab
 8008680:	080086a3 	.word	0x080086a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008684:	f7fc ff32 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8008688:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800868a:	e014      	b.n	80086b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800868c:	f7fc ff44 	bl	8005518 <HAL_RCC_GetPCLK2Freq>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008692:	e010      	b.n	80086b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008694:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <UART_SetConfig+0x5c0>)
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008698:	e00d      	b.n	80086b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800869a:	f7fc feb9 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086a0:	e009      	b.n	80086b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a8:	e005      	b.n	80086b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086b4:	bf00      	nop
    }

    if (pclk != 0U)
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d028      	beq.n	800870e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	4a10      	ldr	r2, [pc, #64]	; (8008704 <UART_SetConfig+0x5c4>)
 80086c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	441a      	add	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	fbb2 f3f3 	udiv	r3, r2, r3
 80086de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2b0f      	cmp	r3, #15
 80086e4:	d910      	bls.n	8008708 <UART_SetConfig+0x5c8>
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ec:	d20c      	bcs.n	8008708 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60da      	str	r2, [r3, #12]
 80086f8:	e009      	b.n	800870e <UART_SetConfig+0x5ce>
 80086fa:	bf00      	nop
 80086fc:	40008000 	.word	0x40008000
 8008700:	00f42400 	.word	0x00f42400
 8008704:	0800cd18 	.word	0x0800cd18
      }
      else
      {
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2201      	movs	r2, #1
 8008712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2201      	movs	r2, #1
 800871a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2200      	movs	r2, #0
 8008728:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800872a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800872e:	4618      	mov	r0, r3
 8008730:	3730      	adds	r7, #48	; 0x30
 8008732:	46bd      	mov	sp, r7
 8008734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	f003 0308 	and.w	r3, r3, #8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	f003 0310 	and.w	r3, r3, #16
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01a      	beq.n	800884e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008836:	d10a      	bne.n	800884e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	605a      	str	r2, [r3, #4]
  }
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af02      	add	r7, sp, #8
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800888c:	f7f9 fe68 	bl	8002560 <HAL_GetTick>
 8008890:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d10e      	bne.n	80088be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f82f 	bl	8008912 <UART_WaitOnFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e025      	b.n	800890a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d10e      	bne.n	80088ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f819 	bl	8008912 <UART_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e00f      	b.n	800890a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b09c      	sub	sp, #112	; 0x70
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008922:	e0a9      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	f000 80a5 	beq.w	8008a78 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800892e:	f7f9 fe17 	bl	8002560 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800893a:	429a      	cmp	r2, r3
 800893c:	d302      	bcc.n	8008944 <UART_WaitOnFlagUntilTimeout+0x32>
 800893e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008940:	2b00      	cmp	r3, #0
 8008942:	d140      	bne.n	80089c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008958:	667b      	str	r3, [r7, #100]	; 0x64
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008964:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e6      	bne.n	8008944 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	663b      	str	r3, [r7, #96]	; 0x60
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008996:	64ba      	str	r2, [r7, #72]	; 0x48
 8008998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800899c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e5      	bne.n	8008976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e069      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d051      	beq.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e2:	d149      	bne.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e6      	bne.n	80089ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a40:	623a      	str	r2, [r7, #32]
 8008a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	69f9      	ldr	r1, [r7, #28]
 8008a46:	6a3a      	ldr	r2, [r7, #32]
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e5      	bne.n	8008a20 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e010      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69da      	ldr	r2, [r3, #28]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4013      	ands	r3, r2
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f43f af46 	beq.w	8008924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3770      	adds	r7, #112	; 0x70
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b0a3      	sub	sp, #140	; 0x8c
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d10e      	bne.n	8008af6 <UART_Start_Receive_IT+0x52>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d105      	bne.n	8008aec <UART_Start_Receive_IT+0x48>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aea:	e02d      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	22ff      	movs	r2, #255	; 0xff
 8008af0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008af4:	e028      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10d      	bne.n	8008b1a <UART_Start_Receive_IT+0x76>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <UART_Start_Receive_IT+0x6c>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	22ff      	movs	r2, #255	; 0xff
 8008b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b0e:	e01b      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	227f      	movs	r2, #127	; 0x7f
 8008b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b18:	e016      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b22:	d10d      	bne.n	8008b40 <UART_Start_Receive_IT+0x9c>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <UART_Start_Receive_IT+0x92>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	227f      	movs	r2, #127	; 0x7f
 8008b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b34:	e008      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	223f      	movs	r2, #63	; 0x3f
 8008b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b3e:	e003      	b.n	8008b48 <UART_Start_Receive_IT+0xa4>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2222      	movs	r2, #34	; 0x22
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b7c:	673a      	str	r2, [r7, #112]	; 0x70
 8008b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008b82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e3      	bne.n	8008b58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b98:	d153      	bne.n	8008c42 <UART_Start_Receive_IT+0x19e>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ba0:	88fa      	ldrh	r2, [r7, #6]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d34d      	bcc.n	8008c42 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d107      	bne.n	8008bc0 <UART_Start_Receive_IT+0x11c>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a4b      	ldr	r2, [pc, #300]	; (8008ce8 <UART_Start_Receive_IT+0x244>)
 8008bbc:	671a      	str	r2, [r3, #112]	; 0x70
 8008bbe:	e002      	b.n	8008bc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a4a      	ldr	r2, [pc, #296]	; (8008cec <UART_Start_Receive_IT+0x248>)
 8008bc4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01a      	beq.n	8008c0c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e4      	bne.n	8008bd6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_Start_Receive_IT+0x168>
 8008c40:	e04a      	b.n	8008cd8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c4a:	d107      	bne.n	8008c5c <UART_Start_Receive_IT+0x1b8>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d103      	bne.n	8008c5c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <UART_Start_Receive_IT+0x24c>)
 8008c58:	671a      	str	r2, [r3, #112]	; 0x70
 8008c5a:	e002      	b.n	8008c62 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4a25      	ldr	r2, [pc, #148]	; (8008cf4 <UART_Start_Receive_IT+0x250>)
 8008c60:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d019      	beq.n	8008ca6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c86:	677b      	str	r3, [r7, #116]	; 0x74
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e6      	bne.n	8008c72 <UART_Start_Receive_IT+0x1ce>
 8008ca4:	e018      	b.n	8008cd8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	e853 3f00 	ldrex	r3, [r3]
 8008cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f043 0320 	orr.w	r3, r3, #32
 8008cba:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	69f9      	ldr	r1, [r7, #28]
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e6      	bne.n	8008ca6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	378c      	adds	r7, #140	; 0x8c
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	08009401 	.word	0x08009401
 8008cec:	08009109 	.word	0x08009109
 8008cf0:	08008fa7 	.word	0x08008fa7
 8008cf4:	08008e47 	.word	0x08008e47

08008cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b095      	sub	sp, #84	; 0x54
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e3      	bne.n	8008d32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d118      	bne.n	8008da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f023 0310 	bic.w	r3, r3, #16
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6979      	ldr	r1, [r7, #20]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008db8:	bf00      	nop
 8008dba:	3754      	adds	r7, #84	; 0x54
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff f996 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de8:	bf00      	nop
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	613b      	str	r3, [r7, #16]
   return(result);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e6      	bne.n	8008df8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff f961 	bl	8008100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3e:	bf00      	nop
 8008e40:	3720      	adds	r7, #32
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b096      	sub	sp, #88	; 0x58
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5e:	2b22      	cmp	r3, #34	; 0x22
 8008e60:	f040 8095 	bne.w	8008f8e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e6e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008e72:	b2d9      	uxtb	r1, r3
 8008e74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7e:	400a      	ands	r2, r1
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d178      	bne.n	8008f9e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eca:	647b      	str	r3, [r7, #68]	; 0x44
 8008ecc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e6      	bne.n	8008eac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	623b      	str	r3, [r7, #32]
   return(result);
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008efe:	633a      	str	r2, [r7, #48]	; 0x30
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e5      	bne.n	8008ede <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d12e      	bne.n	8008f86 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0310 	bic.w	r3, r3, #16
 8008f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4c:	61fb      	str	r3, [r7, #28]
 8008f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	69b9      	ldr	r1, [r7, #24]
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	617b      	str	r3, [r7, #20]
   return(result);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e6      	bne.n	8008f2e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d103      	bne.n	8008f76 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2210      	movs	r2, #16
 8008f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff f8d2 	bl	8008128 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f84:	e00b      	b.n	8008f9e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f9 f9c2 	bl	8002310 <HAL_UART_RxCpltCallback>
}
 8008f8c:	e007      	b.n	8008f9e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0208 	orr.w	r2, r2, #8
 8008f9c:	619a      	str	r2, [r3, #24]
}
 8008f9e:	bf00      	nop
 8008fa0:	3758      	adds	r7, #88	; 0x58
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b096      	sub	sp, #88	; 0x58
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fbe:	2b22      	cmp	r3, #34	; 0x22
 8008fc0:	f040 8095 	bne.w	80090ee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fd4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008fd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fdc:	4013      	ands	r3, r2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe8:	1c9a      	adds	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d178      	bne.n	80090fe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	643b      	str	r3, [r7, #64]	; 0x40
 800902c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e6      	bne.n	800900c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	61fb      	str	r3, [r7, #28]
   return(result);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	64bb      	str	r3, [r7, #72]	; 0x48
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800905e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e5      	bne.n	800903e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d12e      	bne.n	80090e6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	60bb      	str	r3, [r7, #8]
   return(result);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f023 0310 	bic.w	r3, r3, #16
 80090a2:	647b      	str	r3, [r7, #68]	; 0x44
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6979      	ldr	r1, [r7, #20]
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e6      	bne.n	800908e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	f003 0310 	and.w	r3, r3, #16
 80090ca:	2b10      	cmp	r3, #16
 80090cc:	d103      	bne.n	80090d6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2210      	movs	r2, #16
 80090d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff f822 	bl	8008128 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090e4:	e00b      	b.n	80090fe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f9 f912 	bl	8002310 <HAL_UART_RxCpltCallback>
}
 80090ec:	e007      	b.n	80090fe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0208 	orr.w	r2, r2, #8
 80090fc:	619a      	str	r2, [r3, #24]
}
 80090fe:	bf00      	nop
 8009100:	3758      	adds	r7, #88	; 0x58
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b0a6      	sub	sp, #152	; 0x98
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009116:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913e:	2b22      	cmp	r3, #34	; 0x22
 8009140:	f040 814f 	bne.w	80093e2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800914a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800914e:	e0f6      	b.n	800933e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800915a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800915e:	b2d9      	uxtb	r1, r3
 8009160:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916a:	400a      	ands	r2, r1
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d053      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d011      	beq.n	80091d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80091ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00b      	beq.n	80091d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2201      	movs	r2, #1
 80091c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c8:	f043 0201 	orr.w	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d011      	beq.n	8009202 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2202      	movs	r2, #2
 80091f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f8:	f043 0204 	orr.w	r2, r3, #4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d011      	beq.n	8009232 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800920e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2204      	movs	r2, #4
 8009220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009228:	f043 0202 	orr.w	r2, r3, #2
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d006      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7fe ff69 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d173      	bne.n	800933e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800926a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009278:	66bb      	str	r3, [r7, #104]	; 0x68
 800927a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800927e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e4      	bne.n	8009256 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3308      	adds	r3, #8
 8009292:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800929c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092a2:	f023 0301 	bic.w	r3, r3, #1
 80092a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3308      	adds	r3, #8
 80092ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092b0:	657a      	str	r2, [r7, #84]	; 0x54
 80092b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e3      	bne.n	800928c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d12e      	bne.n	8009338 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	f023 0310 	bic.w	r3, r3, #16
 80092f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fe:	643b      	str	r3, [r7, #64]	; 0x40
 8009300:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e6      	bne.n	80092e0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b10      	cmp	r3, #16
 800931e:	d103      	bne.n	8009328 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2210      	movs	r2, #16
 8009326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7fe fef9 	bl	8008128 <HAL_UARTEx_RxEventCallback>
 8009336:	e002      	b.n	800933e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7f8 ffe9 	bl	8002310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800933e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b00      	cmp	r3, #0
 8009350:	f47f aefe 	bne.w	8009150 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800935a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800935e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009362:	2b00      	cmp	r3, #0
 8009364:	d045      	beq.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800936c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009370:	429a      	cmp	r2, r3
 8009372:	d23e      	bcs.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	61fb      	str	r3, [r7, #28]
   return(result);
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800938a:	673b      	str	r3, [r7, #112]	; 0x70
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800939a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e5      	bne.n	8009374 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a14      	ldr	r2, [pc, #80]	; (80093fc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80093ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f043 0320 	orr.w	r3, r3, #32
 80093c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6979      	ldr	r1, [r7, #20]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	613b      	str	r3, [r7, #16]
   return(result);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093e0:	e007      	b.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0208 	orr.w	r2, r2, #8
 80093f0:	619a      	str	r2, [r3, #24]
}
 80093f2:	bf00      	nop
 80093f4:	3798      	adds	r7, #152	; 0x98
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	08008e47 	.word	0x08008e47

08009400 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b0a8      	sub	sp, #160	; 0xa0
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800940e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009436:	2b22      	cmp	r3, #34	; 0x22
 8009438:	f040 8153 	bne.w	80096e2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009442:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009446:	e0fa      	b.n	800963e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800945a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800945e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009462:	4013      	ands	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800946a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009470:	1c9a      	adds	r2, r3, #2
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b00      	cmp	r3, #0
 800949c:	d053      	beq.n	8009546 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800949e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80094aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00b      	beq.n	80094ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	f043 0201 	orr.w	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d011      	beq.n	80094fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2202      	movs	r2, #2
 80094ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f4:	f043 0204 	orr.w	r2, r3, #4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009502:	f003 0304 	and.w	r3, r3, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	d011      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800950a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00b      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2204      	movs	r2, #4
 800951c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009524:	f043 0202 	orr.w	r2, r3, #2
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fe fdeb 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d175      	bne.n	800963e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009574:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009576:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800957a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e4      	bne.n	8009552 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3308      	adds	r3, #8
 800958e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3308      	adds	r3, #8
 80095ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80095b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e1      	bne.n	8009588 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d12e      	bne.n	8009638 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009600:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800960c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e6      	bne.n	80095e0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b10      	cmp	r3, #16
 800961e:	d103      	bne.n	8009628 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2210      	movs	r2, #16
 8009626:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fe fd79 	bl	8008128 <HAL_UARTEx_RxEventCallback>
 8009636:	e002      	b.n	800963e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7f8 fe69 	bl	8002310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800963e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b00      	cmp	r3, #0
 8009650:	f47f aefa 	bne.w	8009448 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800965a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800965e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009662:	2b00      	cmp	r3, #0
 8009664:	d045      	beq.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800966c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009670:	429a      	cmp	r2, r3
 8009672:	d23e      	bcs.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3308      	adds	r3, #8
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	623b      	str	r3, [r7, #32]
   return(result);
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800968a:	677b      	str	r3, [r7, #116]	; 0x74
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009694:	633a      	str	r2, [r7, #48]	; 0x30
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800969a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e5      	bne.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a14      	ldr	r2, [pc, #80]	; (80096fc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80096ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f043 0320 	orr.w	r3, r3, #32
 80096c2:	673b      	str	r3, [r7, #112]	; 0x70
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	69b9      	ldr	r1, [r7, #24]
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	617b      	str	r3, [r7, #20]
   return(result);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e6      	bne.n	80096ae <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096e0:	e007      	b.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0208 	orr.w	r2, r2, #8
 80096f0:	619a      	str	r2, [r3, #24]
}
 80096f2:	bf00      	nop
 80096f4:	37a0      	adds	r7, #160	; 0xa0
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08008fa7 	.word	0x08008fa7

08009700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_UARTEx_DisableFifoMode+0x16>
 800974e:	2302      	movs	r3, #2
 8009750:	e027      	b.n	80097a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	; 0x24
 800975e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e02d      	b.n	8009822 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2224      	movs	r2, #36	; 0x24
 80097d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0201 	bic.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f850 	bl	80098a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800983e:	2302      	movs	r3, #2
 8009840:	e02d      	b.n	800989e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2224      	movs	r2, #36	; 0x24
 800984e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f812 	bl	80098a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d108      	bne.n	80098ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098c8:	e031      	b.n	800992e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ca:	2308      	movs	r3, #8
 80098cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098ce:	2308      	movs	r3, #8
 80098d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	0e5b      	lsrs	r3, r3, #25
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	0f5b      	lsrs	r3, r3, #29
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	7b3a      	ldrb	r2, [r7, #12]
 80098f6:	4911      	ldr	r1, [pc, #68]	; (800993c <UARTEx_SetNbDataToProcess+0x94>)
 80098f8:	5c8a      	ldrb	r2, [r1, r2]
 80098fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098fe:	7b3a      	ldrb	r2, [r7, #12]
 8009900:	490f      	ldr	r1, [pc, #60]	; (8009940 <UARTEx_SetNbDataToProcess+0x98>)
 8009902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009904:	fb93 f3f2 	sdiv	r3, r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	7b7a      	ldrb	r2, [r7, #13]
 8009914:	4909      	ldr	r1, [pc, #36]	; (800993c <UARTEx_SetNbDataToProcess+0x94>)
 8009916:	5c8a      	ldrb	r2, [r1, r2]
 8009918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800991c:	7b7a      	ldrb	r2, [r7, #13]
 800991e:	4908      	ldr	r1, [pc, #32]	; (8009940 <UARTEx_SetNbDataToProcess+0x98>)
 8009920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009922:	fb93 f3f2 	sdiv	r3, r3, r2
 8009926:	b29a      	uxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800992e:	bf00      	nop
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	0800cd30 	.word	0x0800cd30
 8009940:	0800cd38 	.word	0x0800cd38

08009944 <atoi>:
 8009944:	220a      	movs	r2, #10
 8009946:	2100      	movs	r1, #0
 8009948:	f000 bdae 	b.w	800a4a8 <strtol>

0800994c <__errno>:
 800994c:	4b01      	ldr	r3, [pc, #4]	; (8009954 <__errno+0x8>)
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	2000000c 	.word	0x2000000c

08009958 <__libc_init_array>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	4d0d      	ldr	r5, [pc, #52]	; (8009990 <__libc_init_array+0x38>)
 800995c:	4c0d      	ldr	r4, [pc, #52]	; (8009994 <__libc_init_array+0x3c>)
 800995e:	1b64      	subs	r4, r4, r5
 8009960:	10a4      	asrs	r4, r4, #2
 8009962:	2600      	movs	r6, #0
 8009964:	42a6      	cmp	r6, r4
 8009966:	d109      	bne.n	800997c <__libc_init_array+0x24>
 8009968:	4d0b      	ldr	r5, [pc, #44]	; (8009998 <__libc_init_array+0x40>)
 800996a:	4c0c      	ldr	r4, [pc, #48]	; (800999c <__libc_init_array+0x44>)
 800996c:	f002 fffe 	bl	800c96c <_init>
 8009970:	1b64      	subs	r4, r4, r5
 8009972:	10a4      	asrs	r4, r4, #2
 8009974:	2600      	movs	r6, #0
 8009976:	42a6      	cmp	r6, r4
 8009978:	d105      	bne.n	8009986 <__libc_init_array+0x2e>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009980:	4798      	blx	r3
 8009982:	3601      	adds	r6, #1
 8009984:	e7ee      	b.n	8009964 <__libc_init_array+0xc>
 8009986:	f855 3b04 	ldr.w	r3, [r5], #4
 800998a:	4798      	blx	r3
 800998c:	3601      	adds	r6, #1
 800998e:	e7f2      	b.n	8009976 <__libc_init_array+0x1e>
 8009990:	0800d184 	.word	0x0800d184
 8009994:	0800d184 	.word	0x0800d184
 8009998:	0800d184 	.word	0x0800d184
 800999c:	0800d188 	.word	0x0800d188

080099a0 <memset>:
 80099a0:	4402      	add	r2, r0
 80099a2:	4603      	mov	r3, r0
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d100      	bne.n	80099aa <memset+0xa>
 80099a8:	4770      	bx	lr
 80099aa:	f803 1b01 	strb.w	r1, [r3], #1
 80099ae:	e7f9      	b.n	80099a4 <memset+0x4>

080099b0 <__cvt>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	ec55 4b10 	vmov	r4, r5, d0
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	460e      	mov	r6, r1
 80099bc:	4619      	mov	r1, r3
 80099be:	462b      	mov	r3, r5
 80099c0:	bfbb      	ittet	lt
 80099c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099c6:	461d      	movlt	r5, r3
 80099c8:	2300      	movge	r3, #0
 80099ca:	232d      	movlt	r3, #45	; 0x2d
 80099cc:	700b      	strb	r3, [r1, #0]
 80099ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099d4:	4691      	mov	r9, r2
 80099d6:	f023 0820 	bic.w	r8, r3, #32
 80099da:	bfbc      	itt	lt
 80099dc:	4622      	movlt	r2, r4
 80099de:	4614      	movlt	r4, r2
 80099e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099e4:	d005      	beq.n	80099f2 <__cvt+0x42>
 80099e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099ea:	d100      	bne.n	80099ee <__cvt+0x3e>
 80099ec:	3601      	adds	r6, #1
 80099ee:	2102      	movs	r1, #2
 80099f0:	e000      	b.n	80099f4 <__cvt+0x44>
 80099f2:	2103      	movs	r1, #3
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	ab02      	add	r3, sp, #8
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	ec45 4b10 	vmov	d0, r4, r5
 8009a00:	4653      	mov	r3, sl
 8009a02:	4632      	mov	r2, r6
 8009a04:	f000 fe04 	bl	800a610 <_dtoa_r>
 8009a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	d102      	bne.n	8009a16 <__cvt+0x66>
 8009a10:	f019 0f01 	tst.w	r9, #1
 8009a14:	d022      	beq.n	8009a5c <__cvt+0xac>
 8009a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a1a:	eb07 0906 	add.w	r9, r7, r6
 8009a1e:	d110      	bne.n	8009a42 <__cvt+0x92>
 8009a20:	783b      	ldrb	r3, [r7, #0]
 8009a22:	2b30      	cmp	r3, #48	; 0x30
 8009a24:	d10a      	bne.n	8009a3c <__cvt+0x8c>
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7f7 f883 	bl	8000b38 <__aeabi_dcmpeq>
 8009a32:	b918      	cbnz	r0, 8009a3c <__cvt+0x8c>
 8009a34:	f1c6 0601 	rsb	r6, r6, #1
 8009a38:	f8ca 6000 	str.w	r6, [sl]
 8009a3c:	f8da 3000 	ldr.w	r3, [sl]
 8009a40:	4499      	add	r9, r3
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f7 f875 	bl	8000b38 <__aeabi_dcmpeq>
 8009a4e:	b108      	cbz	r0, 8009a54 <__cvt+0xa4>
 8009a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a54:	2230      	movs	r2, #48	; 0x30
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	454b      	cmp	r3, r9
 8009a5a:	d307      	bcc.n	8009a6c <__cvt+0xbc>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a60:	1bdb      	subs	r3, r3, r7
 8009a62:	4638      	mov	r0, r7
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	b004      	add	sp, #16
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	1c59      	adds	r1, r3, #1
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	e7f0      	b.n	8009a56 <__cvt+0xa6>

08009a74 <__exponent>:
 8009a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a76:	4603      	mov	r3, r0
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	bfb8      	it	lt
 8009a7c:	4249      	neglt	r1, r1
 8009a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a82:	bfb4      	ite	lt
 8009a84:	222d      	movlt	r2, #45	; 0x2d
 8009a86:	222b      	movge	r2, #43	; 0x2b
 8009a88:	2909      	cmp	r1, #9
 8009a8a:	7042      	strb	r2, [r0, #1]
 8009a8c:	dd2a      	ble.n	8009ae4 <__exponent+0x70>
 8009a8e:	f10d 0407 	add.w	r4, sp, #7
 8009a92:	46a4      	mov	ip, r4
 8009a94:	270a      	movs	r7, #10
 8009a96:	46a6      	mov	lr, r4
 8009a98:	460a      	mov	r2, r1
 8009a9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a9e:	fb07 1516 	mls	r5, r7, r6, r1
 8009aa2:	3530      	adds	r5, #48	; 0x30
 8009aa4:	2a63      	cmp	r2, #99	; 0x63
 8009aa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009aaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009aae:	4631      	mov	r1, r6
 8009ab0:	dcf1      	bgt.n	8009a96 <__exponent+0x22>
 8009ab2:	3130      	adds	r1, #48	; 0x30
 8009ab4:	f1ae 0502 	sub.w	r5, lr, #2
 8009ab8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009abc:	1c44      	adds	r4, r0, #1
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4561      	cmp	r1, ip
 8009ac2:	d30a      	bcc.n	8009ada <__exponent+0x66>
 8009ac4:	f10d 0209 	add.w	r2, sp, #9
 8009ac8:	eba2 020e 	sub.w	r2, r2, lr
 8009acc:	4565      	cmp	r5, ip
 8009ace:	bf88      	it	hi
 8009ad0:	2200      	movhi	r2, #0
 8009ad2:	4413      	add	r3, r2
 8009ad4:	1a18      	subs	r0, r3, r0
 8009ad6:	b003      	add	sp, #12
 8009ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ade:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ae2:	e7ed      	b.n	8009ac0 <__exponent+0x4c>
 8009ae4:	2330      	movs	r3, #48	; 0x30
 8009ae6:	3130      	adds	r1, #48	; 0x30
 8009ae8:	7083      	strb	r3, [r0, #2]
 8009aea:	70c1      	strb	r1, [r0, #3]
 8009aec:	1d03      	adds	r3, r0, #4
 8009aee:	e7f1      	b.n	8009ad4 <__exponent+0x60>

08009af0 <_printf_float>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	ed2d 8b02 	vpush	{d8}
 8009af8:	b08d      	sub	sp, #52	; 0x34
 8009afa:	460c      	mov	r4, r1
 8009afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b00:	4616      	mov	r6, r2
 8009b02:	461f      	mov	r7, r3
 8009b04:	4605      	mov	r5, r0
 8009b06:	f001 fb83 	bl	800b210 <_localeconv_r>
 8009b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7f6 fb90 	bl	8000234 <strlen>
 8009b14:	2300      	movs	r3, #0
 8009b16:	930a      	str	r3, [sp, #40]	; 0x28
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b24:	3307      	adds	r3, #7
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	f8c8 2000 	str.w	r2, [r8]
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b48:	ee08 0a10 	vmov	s16, r0
 8009b4c:	4b9f      	ldr	r3, [pc, #636]	; (8009dcc <_printf_float+0x2dc>)
 8009b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	f7f7 f821 	bl	8000b9c <__aeabi_dcmpun>
 8009b5a:	bb88      	cbnz	r0, 8009bc0 <_printf_float+0xd0>
 8009b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b60:	4b9a      	ldr	r3, [pc, #616]	; (8009dcc <_printf_float+0x2dc>)
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	f7f6 fffb 	bl	8000b60 <__aeabi_dcmple>
 8009b6a:	bb48      	cbnz	r0, 8009bc0 <_printf_float+0xd0>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	f7f6 ffea 	bl	8000b4c <__aeabi_dcmplt>
 8009b78:	b110      	cbz	r0, 8009b80 <_printf_float+0x90>
 8009b7a:	232d      	movs	r3, #45	; 0x2d
 8009b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b80:	4b93      	ldr	r3, [pc, #588]	; (8009dd0 <_printf_float+0x2e0>)
 8009b82:	4894      	ldr	r0, [pc, #592]	; (8009dd4 <_printf_float+0x2e4>)
 8009b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b88:	bf94      	ite	ls
 8009b8a:	4698      	movls	r8, r3
 8009b8c:	4680      	movhi	r8, r0
 8009b8e:	2303      	movs	r3, #3
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	9b05      	ldr	r3, [sp, #20]
 8009b94:	f023 0204 	bic.w	r2, r3, #4
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	9700      	str	r7, [sp, #0]
 8009ba0:	4633      	mov	r3, r6
 8009ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 f9d8 	bl	8009f5c <_printf_common>
 8009bac:	3001      	adds	r0, #1
 8009bae:	f040 8090 	bne.w	8009cd2 <_printf_float+0x1e2>
 8009bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb6:	b00d      	add	sp, #52	; 0x34
 8009bb8:	ecbd 8b02 	vpop	{d8}
 8009bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 ffe8 	bl	8000b9c <__aeabi_dcmpun>
 8009bcc:	b140      	cbz	r0, 8009be0 <_printf_float+0xf0>
 8009bce:	464b      	mov	r3, r9
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfbc      	itt	lt
 8009bd4:	232d      	movlt	r3, #45	; 0x2d
 8009bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bda:	487f      	ldr	r0, [pc, #508]	; (8009dd8 <_printf_float+0x2e8>)
 8009bdc:	4b7f      	ldr	r3, [pc, #508]	; (8009ddc <_printf_float+0x2ec>)
 8009bde:	e7d1      	b.n	8009b84 <_printf_float+0x94>
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009be6:	9206      	str	r2, [sp, #24]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	d13f      	bne.n	8009c6c <_printf_float+0x17c>
 8009bec:	2306      	movs	r3, #6
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	6861      	ldr	r1, [r4, #4]
 8009bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8009bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c02:	ab09      	add	r3, sp, #36	; 0x24
 8009c04:	ec49 8b10 	vmov	d0, r8, r9
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c10:	4628      	mov	r0, r5
 8009c12:	f7ff fecd 	bl	80099b0 <__cvt>
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c1a:	2b47      	cmp	r3, #71	; 0x47
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	d108      	bne.n	8009c32 <_printf_float+0x142>
 8009c20:	1cc8      	adds	r0, r1, #3
 8009c22:	db02      	blt.n	8009c2a <_printf_float+0x13a>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	4299      	cmp	r1, r3
 8009c28:	dd41      	ble.n	8009cae <_printf_float+0x1be>
 8009c2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c36:	d820      	bhi.n	8009c7a <_printf_float+0x18a>
 8009c38:	3901      	subs	r1, #1
 8009c3a:	465a      	mov	r2, fp
 8009c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c40:	9109      	str	r1, [sp, #36]	; 0x24
 8009c42:	f7ff ff17 	bl	8009a74 <__exponent>
 8009c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c48:	1813      	adds	r3, r2, r0
 8009c4a:	2a01      	cmp	r2, #1
 8009c4c:	4681      	mov	r9, r0
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	dc02      	bgt.n	8009c58 <_printf_float+0x168>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	07d2      	lsls	r2, r2, #31
 8009c56:	d501      	bpl.n	8009c5c <_printf_float+0x16c>
 8009c58:	3301      	adds	r3, #1
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d09c      	beq.n	8009b9e <_printf_float+0xae>
 8009c64:	232d      	movs	r3, #45	; 0x2d
 8009c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6a:	e798      	b.n	8009b9e <_printf_float+0xae>
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	2a47      	cmp	r2, #71	; 0x47
 8009c70:	d1be      	bne.n	8009bf0 <_printf_float+0x100>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1bc      	bne.n	8009bf0 <_printf_float+0x100>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7b9      	b.n	8009bee <_printf_float+0xfe>
 8009c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c7e:	d118      	bne.n	8009cb2 <_printf_float+0x1c2>
 8009c80:	2900      	cmp	r1, #0
 8009c82:	6863      	ldr	r3, [r4, #4]
 8009c84:	dd0b      	ble.n	8009c9e <_printf_float+0x1ae>
 8009c86:	6121      	str	r1, [r4, #16]
 8009c88:	b913      	cbnz	r3, 8009c90 <_printf_float+0x1a0>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	07d0      	lsls	r0, r2, #31
 8009c8e:	d502      	bpl.n	8009c96 <_printf_float+0x1a6>
 8009c90:	3301      	adds	r3, #1
 8009c92:	440b      	add	r3, r1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	e7de      	b.n	8009c5c <_printf_float+0x16c>
 8009c9e:	b913      	cbnz	r3, 8009ca6 <_printf_float+0x1b6>
 8009ca0:	6822      	ldr	r2, [r4, #0]
 8009ca2:	07d2      	lsls	r2, r2, #31
 8009ca4:	d501      	bpl.n	8009caa <_printf_float+0x1ba>
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	e7f4      	b.n	8009c94 <_printf_float+0x1a4>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e7f2      	b.n	8009c94 <_printf_float+0x1a4>
 8009cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	db05      	blt.n	8009cc4 <_printf_float+0x1d4>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	6121      	str	r1, [r4, #16]
 8009cbc:	07d8      	lsls	r0, r3, #31
 8009cbe:	d5ea      	bpl.n	8009c96 <_printf_float+0x1a6>
 8009cc0:	1c4b      	adds	r3, r1, #1
 8009cc2:	e7e7      	b.n	8009c94 <_printf_float+0x1a4>
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	bfd4      	ite	le
 8009cc8:	f1c1 0202 	rsble	r2, r1, #2
 8009ccc:	2201      	movgt	r2, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	e7e0      	b.n	8009c94 <_printf_float+0x1a4>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	055a      	lsls	r2, r3, #21
 8009cd6:	d407      	bmi.n	8009ce8 <_printf_float+0x1f8>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	4642      	mov	r2, r8
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d12c      	bne.n	8009d40 <_printf_float+0x250>
 8009ce6:	e764      	b.n	8009bb2 <_printf_float+0xc2>
 8009ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cec:	f240 80e0 	bls.w	8009eb0 <_printf_float+0x3c0>
 8009cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f7f6 ff1e 	bl	8000b38 <__aeabi_dcmpeq>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d034      	beq.n	8009d6a <_printf_float+0x27a>
 8009d00:	4a37      	ldr	r2, [pc, #220]	; (8009de0 <_printf_float+0x2f0>)
 8009d02:	2301      	movs	r3, #1
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af51 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d14:	429a      	cmp	r2, r3
 8009d16:	db02      	blt.n	8009d1e <_printf_float+0x22e>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07d8      	lsls	r0, r3, #31
 8009d1c:	d510      	bpl.n	8009d40 <_printf_float+0x250>
 8009d1e:	ee18 3a10 	vmov	r3, s16
 8009d22:	4652      	mov	r2, sl
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f af41 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d30:	f04f 0800 	mov.w	r8, #0
 8009d34:	f104 091a 	add.w	r9, r4, #26
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	4543      	cmp	r3, r8
 8009d3e:	dc09      	bgt.n	8009d54 <_printf_float+0x264>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	079b      	lsls	r3, r3, #30
 8009d44:	f100 8105 	bmi.w	8009f52 <_printf_float+0x462>
 8009d48:	68e0      	ldr	r0, [r4, #12]
 8009d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4c:	4298      	cmp	r0, r3
 8009d4e:	bfb8      	it	lt
 8009d50:	4618      	movlt	r0, r3
 8009d52:	e730      	b.n	8009bb6 <_printf_float+0xc6>
 8009d54:	2301      	movs	r3, #1
 8009d56:	464a      	mov	r2, r9
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f43f af27 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d64:	f108 0801 	add.w	r8, r8, #1
 8009d68:	e7e6      	b.n	8009d38 <_printf_float+0x248>
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dc39      	bgt.n	8009de4 <_printf_float+0x2f4>
 8009d70:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <_printf_float+0x2f0>)
 8009d72:	2301      	movs	r3, #1
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af19 	beq.w	8009bb2 <_printf_float+0xc2>
 8009d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d102      	bne.n	8009d8e <_printf_float+0x29e>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d5d8      	bpl.n	8009d40 <_printf_float+0x250>
 8009d8e:	ee18 3a10 	vmov	r3, s16
 8009d92:	4652      	mov	r2, sl
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af09 	beq.w	8009bb2 <_printf_float+0xc2>
 8009da0:	f04f 0900 	mov.w	r9, #0
 8009da4:	f104 0a1a 	add.w	sl, r4, #26
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	425b      	negs	r3, r3
 8009dac:	454b      	cmp	r3, r9
 8009dae:	dc01      	bgt.n	8009db4 <_printf_float+0x2c4>
 8009db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db2:	e792      	b.n	8009cda <_printf_float+0x1ea>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4652      	mov	r2, sl
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f aef7 	beq.w	8009bb2 <_printf_float+0xc2>
 8009dc4:	f109 0901 	add.w	r9, r9, #1
 8009dc8:	e7ee      	b.n	8009da8 <_printf_float+0x2b8>
 8009dca:	bf00      	nop
 8009dcc:	7fefffff 	.word	0x7fefffff
 8009dd0:	0800cd44 	.word	0x0800cd44
 8009dd4:	0800cd48 	.word	0x0800cd48
 8009dd8:	0800cd50 	.word	0x0800cd50
 8009ddc:	0800cd4c 	.word	0x0800cd4c
 8009de0:	0800cd54 	.word	0x0800cd54
 8009de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009de8:	429a      	cmp	r2, r3
 8009dea:	bfa8      	it	ge
 8009dec:	461a      	movge	r2, r3
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	4691      	mov	r9, r2
 8009df2:	dc37      	bgt.n	8009e64 <_printf_float+0x374>
 8009df4:	f04f 0b00 	mov.w	fp, #0
 8009df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfc:	f104 021a 	add.w	r2, r4, #26
 8009e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	eba3 0309 	sub.w	r3, r3, r9
 8009e08:	455b      	cmp	r3, fp
 8009e0a:	dc33      	bgt.n	8009e74 <_printf_float+0x384>
 8009e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e10:	429a      	cmp	r2, r3
 8009e12:	db3b      	blt.n	8009e8c <_printf_float+0x39c>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d438      	bmi.n	8009e8c <_printf_float+0x39c>
 8009e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1c:	9a05      	ldr	r2, [sp, #20]
 8009e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e20:	1a9a      	subs	r2, r3, r2
 8009e22:	eba3 0901 	sub.w	r9, r3, r1
 8009e26:	4591      	cmp	r9, r2
 8009e28:	bfa8      	it	ge
 8009e2a:	4691      	movge	r9, r2
 8009e2c:	f1b9 0f00 	cmp.w	r9, #0
 8009e30:	dc35      	bgt.n	8009e9e <_printf_float+0x3ae>
 8009e32:	f04f 0800 	mov.w	r8, #0
 8009e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e3a:	f104 0a1a 	add.w	sl, r4, #26
 8009e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	eba3 0309 	sub.w	r3, r3, r9
 8009e48:	4543      	cmp	r3, r8
 8009e4a:	f77f af79 	ble.w	8009d40 <_printf_float+0x250>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4652      	mov	r2, sl
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f43f aeaa 	beq.w	8009bb2 <_printf_float+0xc2>
 8009e5e:	f108 0801 	add.w	r8, r8, #1
 8009e62:	e7ec      	b.n	8009e3e <_printf_float+0x34e>
 8009e64:	4613      	mov	r3, r2
 8009e66:	4631      	mov	r1, r6
 8009e68:	4642      	mov	r2, r8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d1c0      	bne.n	8009df4 <_printf_float+0x304>
 8009e72:	e69e      	b.n	8009bb2 <_printf_float+0xc2>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	9205      	str	r2, [sp, #20]
 8009e7c:	47b8      	blx	r7
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f43f ae97 	beq.w	8009bb2 <_printf_float+0xc2>
 8009e84:	9a05      	ldr	r2, [sp, #20]
 8009e86:	f10b 0b01 	add.w	fp, fp, #1
 8009e8a:	e7b9      	b.n	8009e00 <_printf_float+0x310>
 8009e8c:	ee18 3a10 	vmov	r3, s16
 8009e90:	4652      	mov	r2, sl
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d1be      	bne.n	8009e1a <_printf_float+0x32a>
 8009e9c:	e689      	b.n	8009bb2 <_printf_float+0xc2>
 8009e9e:	9a05      	ldr	r2, [sp, #20]
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4442      	add	r2, r8
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1c1      	bne.n	8009e32 <_printf_float+0x342>
 8009eae:	e680      	b.n	8009bb2 <_printf_float+0xc2>
 8009eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb2:	2a01      	cmp	r2, #1
 8009eb4:	dc01      	bgt.n	8009eba <_printf_float+0x3ca>
 8009eb6:	07db      	lsls	r3, r3, #31
 8009eb8:	d538      	bpl.n	8009f2c <_printf_float+0x43c>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f43f ae74 	beq.w	8009bb2 <_printf_float+0xc2>
 8009eca:	ee18 3a10 	vmov	r3, s16
 8009ece:	4652      	mov	r2, sl
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f ae6b 	beq.w	8009bb2 <_printf_float+0xc2>
 8009edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f7f6 fe28 	bl	8000b38 <__aeabi_dcmpeq>
 8009ee8:	b9d8      	cbnz	r0, 8009f22 <_printf_float+0x432>
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	f108 0201 	add.w	r2, r8, #1
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d10e      	bne.n	8009f1a <_printf_float+0x42a>
 8009efc:	e659      	b.n	8009bb2 <_printf_float+0xc2>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4652      	mov	r2, sl
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f43f ae52 	beq.w	8009bb2 <_printf_float+0xc2>
 8009f0e:	f108 0801 	add.w	r8, r8, #1
 8009f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4543      	cmp	r3, r8
 8009f18:	dcf1      	bgt.n	8009efe <_printf_float+0x40e>
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f20:	e6dc      	b.n	8009cdc <_printf_float+0x1ec>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 0a1a 	add.w	sl, r4, #26
 8009f2a:	e7f2      	b.n	8009f12 <_printf_float+0x422>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4642      	mov	r2, r8
 8009f30:	e7df      	b.n	8009ef2 <_printf_float+0x402>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae38 	beq.w	8009bb2 <_printf_float+0xc2>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4a:	1a5b      	subs	r3, r3, r1
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	dcf0      	bgt.n	8009f32 <_printf_float+0x442>
 8009f50:	e6fa      	b.n	8009d48 <_printf_float+0x258>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f104 0919 	add.w	r9, r4, #25
 8009f5a:	e7f4      	b.n	8009f46 <_printf_float+0x456>

08009f5c <_printf_common>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	4616      	mov	r6, r2
 8009f62:	4699      	mov	r9, r3
 8009f64:	688a      	ldr	r2, [r1, #8]
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	bfb8      	it	lt
 8009f70:	4613      	movlt	r3, r2
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f78:	4607      	mov	r7, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_printf_common+0x26>
 8009f7e:	3301      	adds	r3, #1
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	0699      	lsls	r1, r3, #26
 8009f86:	bf42      	ittt	mi
 8009f88:	6833      	ldrmi	r3, [r6, #0]
 8009f8a:	3302      	addmi	r3, #2
 8009f8c:	6033      	strmi	r3, [r6, #0]
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	f015 0506 	ands.w	r5, r5, #6
 8009f94:	d106      	bne.n	8009fa4 <_printf_common+0x48>
 8009f96:	f104 0a19 	add.w	sl, r4, #25
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	6832      	ldr	r2, [r6, #0]
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	dc26      	bgt.n	8009ff2 <_printf_common+0x96>
 8009fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fa8:	1e13      	subs	r3, r2, #0
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	bf18      	it	ne
 8009fae:	2301      	movne	r3, #1
 8009fb0:	0692      	lsls	r2, r2, #26
 8009fb2:	d42b      	bmi.n	800a00c <_printf_common+0xb0>
 8009fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4638      	mov	r0, r7
 8009fbc:	47c0      	blx	r8
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d01e      	beq.n	800a000 <_printf_common+0xa4>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	68e5      	ldr	r5, [r4, #12]
 8009fc6:	6832      	ldr	r2, [r6, #0]
 8009fc8:	f003 0306 	and.w	r3, r3, #6
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	bf08      	it	eq
 8009fd0:	1aad      	subeq	r5, r5, r2
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	bf0c      	ite	eq
 8009fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fdc:	2500      	movne	r5, #0
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	bfc4      	itt	gt
 8009fe2:	1a9b      	subgt	r3, r3, r2
 8009fe4:	18ed      	addgt	r5, r5, r3
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	341a      	adds	r4, #26
 8009fea:	42b5      	cmp	r5, r6
 8009fec:	d11a      	bne.n	800a024 <_printf_common+0xc8>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e008      	b.n	800a004 <_printf_common+0xa8>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	47c0      	blx	r8
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d103      	bne.n	800a008 <_printf_common+0xac>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	3501      	adds	r5, #1
 800a00a:	e7c6      	b.n	8009f9a <_printf_common+0x3e>
 800a00c:	18e1      	adds	r1, r4, r3
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	2030      	movs	r0, #48	; 0x30
 800a012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a016:	4422      	add	r2, r4
 800a018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a01c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a020:	3302      	adds	r3, #2
 800a022:	e7c7      	b.n	8009fb4 <_printf_common+0x58>
 800a024:	2301      	movs	r3, #1
 800a026:	4622      	mov	r2, r4
 800a028:	4649      	mov	r1, r9
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c0      	blx	r8
 800a02e:	3001      	adds	r0, #1
 800a030:	d0e6      	beq.n	800a000 <_printf_common+0xa4>
 800a032:	3601      	adds	r6, #1
 800a034:	e7d9      	b.n	8009fea <_printf_common+0x8e>
	...

0800a038 <_printf_i>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	7e0f      	ldrb	r7, [r1, #24]
 800a03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a040:	2f78      	cmp	r7, #120	; 0x78
 800a042:	4691      	mov	r9, r2
 800a044:	4680      	mov	r8, r0
 800a046:	460c      	mov	r4, r1
 800a048:	469a      	mov	sl, r3
 800a04a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a04e:	d807      	bhi.n	800a060 <_printf_i+0x28>
 800a050:	2f62      	cmp	r7, #98	; 0x62
 800a052:	d80a      	bhi.n	800a06a <_printf_i+0x32>
 800a054:	2f00      	cmp	r7, #0
 800a056:	f000 80d8 	beq.w	800a20a <_printf_i+0x1d2>
 800a05a:	2f58      	cmp	r7, #88	; 0x58
 800a05c:	f000 80a3 	beq.w	800a1a6 <_printf_i+0x16e>
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a068:	e03a      	b.n	800a0e0 <_printf_i+0xa8>
 800a06a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a06e:	2b15      	cmp	r3, #21
 800a070:	d8f6      	bhi.n	800a060 <_printf_i+0x28>
 800a072:	a101      	add	r1, pc, #4	; (adr r1, 800a078 <_printf_i+0x40>)
 800a074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a078:	0800a0d1 	.word	0x0800a0d1
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a061 	.word	0x0800a061
 800a084:	0800a061 	.word	0x0800a061
 800a088:	0800a061 	.word	0x0800a061
 800a08c:	0800a061 	.word	0x0800a061
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a061 	.word	0x0800a061
 800a098:	0800a061 	.word	0x0800a061
 800a09c:	0800a061 	.word	0x0800a061
 800a0a0:	0800a061 	.word	0x0800a061
 800a0a4:	0800a1f1 	.word	0x0800a1f1
 800a0a8:	0800a115 	.word	0x0800a115
 800a0ac:	0800a1d3 	.word	0x0800a1d3
 800a0b0:	0800a061 	.word	0x0800a061
 800a0b4:	0800a061 	.word	0x0800a061
 800a0b8:	0800a213 	.word	0x0800a213
 800a0bc:	0800a061 	.word	0x0800a061
 800a0c0:	0800a115 	.word	0x0800a115
 800a0c4:	0800a061 	.word	0x0800a061
 800a0c8:	0800a061 	.word	0x0800a061
 800a0cc:	0800a1db 	.word	0x0800a1db
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	602a      	str	r2, [r5, #0]
 800a0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0a3      	b.n	800a22c <_printf_i+0x1f4>
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	6829      	ldr	r1, [r5, #0]
 800a0e8:	0606      	lsls	r6, r0, #24
 800a0ea:	f101 0304 	add.w	r3, r1, #4
 800a0ee:	d50a      	bpl.n	800a106 <_printf_i+0xce>
 800a0f0:	680e      	ldr	r6, [r1, #0]
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	2e00      	cmp	r6, #0
 800a0f6:	da03      	bge.n	800a100 <_printf_i+0xc8>
 800a0f8:	232d      	movs	r3, #45	; 0x2d
 800a0fa:	4276      	negs	r6, r6
 800a0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a100:	485e      	ldr	r0, [pc, #376]	; (800a27c <_printf_i+0x244>)
 800a102:	230a      	movs	r3, #10
 800a104:	e019      	b.n	800a13a <_printf_i+0x102>
 800a106:	680e      	ldr	r6, [r1, #0]
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a10e:	bf18      	it	ne
 800a110:	b236      	sxthne	r6, r6
 800a112:	e7ef      	b.n	800a0f4 <_printf_i+0xbc>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	6029      	str	r1, [r5, #0]
 800a11c:	0601      	lsls	r1, r0, #24
 800a11e:	d501      	bpl.n	800a124 <_printf_i+0xec>
 800a120:	681e      	ldr	r6, [r3, #0]
 800a122:	e002      	b.n	800a12a <_printf_i+0xf2>
 800a124:	0646      	lsls	r6, r0, #25
 800a126:	d5fb      	bpl.n	800a120 <_printf_i+0xe8>
 800a128:	881e      	ldrh	r6, [r3, #0]
 800a12a:	4854      	ldr	r0, [pc, #336]	; (800a27c <_printf_i+0x244>)
 800a12c:	2f6f      	cmp	r7, #111	; 0x6f
 800a12e:	bf0c      	ite	eq
 800a130:	2308      	moveq	r3, #8
 800a132:	230a      	movne	r3, #10
 800a134:	2100      	movs	r1, #0
 800a136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a13a:	6865      	ldr	r5, [r4, #4]
 800a13c:	60a5      	str	r5, [r4, #8]
 800a13e:	2d00      	cmp	r5, #0
 800a140:	bfa2      	ittt	ge
 800a142:	6821      	ldrge	r1, [r4, #0]
 800a144:	f021 0104 	bicge.w	r1, r1, #4
 800a148:	6021      	strge	r1, [r4, #0]
 800a14a:	b90e      	cbnz	r6, 800a150 <_printf_i+0x118>
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	d04d      	beq.n	800a1ec <_printf_i+0x1b4>
 800a150:	4615      	mov	r5, r2
 800a152:	fbb6 f1f3 	udiv	r1, r6, r3
 800a156:	fb03 6711 	mls	r7, r3, r1, r6
 800a15a:	5dc7      	ldrb	r7, [r0, r7]
 800a15c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a160:	4637      	mov	r7, r6
 800a162:	42bb      	cmp	r3, r7
 800a164:	460e      	mov	r6, r1
 800a166:	d9f4      	bls.n	800a152 <_printf_i+0x11a>
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d10b      	bne.n	800a184 <_printf_i+0x14c>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07de      	lsls	r6, r3, #31
 800a170:	d508      	bpl.n	800a184 <_printf_i+0x14c>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	6861      	ldr	r1, [r4, #4]
 800a176:	4299      	cmp	r1, r3
 800a178:	bfde      	ittt	le
 800a17a:	2330      	movle	r3, #48	; 0x30
 800a17c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a180:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a184:	1b52      	subs	r2, r2, r5
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	f8cd a000 	str.w	sl, [sp]
 800a18c:	464b      	mov	r3, r9
 800a18e:	aa03      	add	r2, sp, #12
 800a190:	4621      	mov	r1, r4
 800a192:	4640      	mov	r0, r8
 800a194:	f7ff fee2 	bl	8009f5c <_printf_common>
 800a198:	3001      	adds	r0, #1
 800a19a:	d14c      	bne.n	800a236 <_printf_i+0x1fe>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b004      	add	sp, #16
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	4835      	ldr	r0, [pc, #212]	; (800a27c <_printf_i+0x244>)
 800a1a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1ac:	6829      	ldr	r1, [r5, #0]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1b4:	6029      	str	r1, [r5, #0]
 800a1b6:	061d      	lsls	r5, r3, #24
 800a1b8:	d514      	bpl.n	800a1e4 <_printf_i+0x1ac>
 800a1ba:	07df      	lsls	r7, r3, #31
 800a1bc:	bf44      	itt	mi
 800a1be:	f043 0320 	orrmi.w	r3, r3, #32
 800a1c2:	6023      	strmi	r3, [r4, #0]
 800a1c4:	b91e      	cbnz	r6, 800a1ce <_printf_i+0x196>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	f023 0320 	bic.w	r3, r3, #32
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	2310      	movs	r3, #16
 800a1d0:	e7b0      	b.n	800a134 <_printf_i+0xfc>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	f043 0320 	orr.w	r3, r3, #32
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	2378      	movs	r3, #120	; 0x78
 800a1dc:	4828      	ldr	r0, [pc, #160]	; (800a280 <_printf_i+0x248>)
 800a1de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1e2:	e7e3      	b.n	800a1ac <_printf_i+0x174>
 800a1e4:	0659      	lsls	r1, r3, #25
 800a1e6:	bf48      	it	mi
 800a1e8:	b2b6      	uxthmi	r6, r6
 800a1ea:	e7e6      	b.n	800a1ba <_printf_i+0x182>
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	e7bb      	b.n	800a168 <_printf_i+0x130>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	6826      	ldr	r6, [r4, #0]
 800a1f4:	6961      	ldr	r1, [r4, #20]
 800a1f6:	1d18      	adds	r0, r3, #4
 800a1f8:	6028      	str	r0, [r5, #0]
 800a1fa:	0635      	lsls	r5, r6, #24
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	d501      	bpl.n	800a204 <_printf_i+0x1cc>
 800a200:	6019      	str	r1, [r3, #0]
 800a202:	e002      	b.n	800a20a <_printf_i+0x1d2>
 800a204:	0670      	lsls	r0, r6, #25
 800a206:	d5fb      	bpl.n	800a200 <_printf_i+0x1c8>
 800a208:	8019      	strh	r1, [r3, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	6123      	str	r3, [r4, #16]
 800a20e:	4615      	mov	r5, r2
 800a210:	e7ba      	b.n	800a188 <_printf_i+0x150>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	1d1a      	adds	r2, r3, #4
 800a216:	602a      	str	r2, [r5, #0]
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	6862      	ldr	r2, [r4, #4]
 800a21c:	2100      	movs	r1, #0
 800a21e:	4628      	mov	r0, r5
 800a220:	f7f6 f816 	bl	8000250 <memchr>
 800a224:	b108      	cbz	r0, 800a22a <_printf_i+0x1f2>
 800a226:	1b40      	subs	r0, r0, r5
 800a228:	6060      	str	r0, [r4, #4]
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	2300      	movs	r3, #0
 800a230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a234:	e7a8      	b.n	800a188 <_printf_i+0x150>
 800a236:	6923      	ldr	r3, [r4, #16]
 800a238:	462a      	mov	r2, r5
 800a23a:	4649      	mov	r1, r9
 800a23c:	4640      	mov	r0, r8
 800a23e:	47d0      	blx	sl
 800a240:	3001      	adds	r0, #1
 800a242:	d0ab      	beq.n	800a19c <_printf_i+0x164>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	079b      	lsls	r3, r3, #30
 800a248:	d413      	bmi.n	800a272 <_printf_i+0x23a>
 800a24a:	68e0      	ldr	r0, [r4, #12]
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	4298      	cmp	r0, r3
 800a250:	bfb8      	it	lt
 800a252:	4618      	movlt	r0, r3
 800a254:	e7a4      	b.n	800a1a0 <_printf_i+0x168>
 800a256:	2301      	movs	r3, #1
 800a258:	4632      	mov	r2, r6
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	47d0      	blx	sl
 800a260:	3001      	adds	r0, #1
 800a262:	d09b      	beq.n	800a19c <_printf_i+0x164>
 800a264:	3501      	adds	r5, #1
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	1a5b      	subs	r3, r3, r1
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dcf2      	bgt.n	800a256 <_printf_i+0x21e>
 800a270:	e7eb      	b.n	800a24a <_printf_i+0x212>
 800a272:	2500      	movs	r5, #0
 800a274:	f104 0619 	add.w	r6, r4, #25
 800a278:	e7f5      	b.n	800a266 <_printf_i+0x22e>
 800a27a:	bf00      	nop
 800a27c:	0800cd56 	.word	0x0800cd56
 800a280:	0800cd67 	.word	0x0800cd67

0800a284 <sniprintf>:
 800a284:	b40c      	push	{r2, r3}
 800a286:	b530      	push	{r4, r5, lr}
 800a288:	4b17      	ldr	r3, [pc, #92]	; (800a2e8 <sniprintf+0x64>)
 800a28a:	1e0c      	subs	r4, r1, #0
 800a28c:	681d      	ldr	r5, [r3, #0]
 800a28e:	b09d      	sub	sp, #116	; 0x74
 800a290:	da08      	bge.n	800a2a4 <sniprintf+0x20>
 800a292:	238b      	movs	r3, #139	; 0x8b
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	b01d      	add	sp, #116	; 0x74
 800a29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2a0:	b002      	add	sp, #8
 800a2a2:	4770      	bx	lr
 800a2a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2ac:	bf14      	ite	ne
 800a2ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2b2:	4623      	moveq	r3, r4
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	9307      	str	r3, [sp, #28]
 800a2b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2bc:	9002      	str	r0, [sp, #8]
 800a2be:	9006      	str	r0, [sp, #24]
 800a2c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2c6:	ab21      	add	r3, sp, #132	; 0x84
 800a2c8:	a902      	add	r1, sp, #8
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	f001 fc8f 	bl	800bbf0 <_svfiprintf_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	bfbc      	itt	lt
 800a2d6:	238b      	movlt	r3, #139	; 0x8b
 800a2d8:	602b      	strlt	r3, [r5, #0]
 800a2da:	2c00      	cmp	r4, #0
 800a2dc:	d0dd      	beq.n	800a29a <sniprintf+0x16>
 800a2de:	9b02      	ldr	r3, [sp, #8]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	e7d9      	b.n	800a29a <sniprintf+0x16>
 800a2e6:	bf00      	nop
 800a2e8:	2000000c 	.word	0x2000000c

0800a2ec <strtok>:
 800a2ec:	4b16      	ldr	r3, [pc, #88]	; (800a348 <strtok+0x5c>)
 800a2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f0:	681e      	ldr	r6, [r3, #0]
 800a2f2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b9fc      	cbnz	r4, 800a338 <strtok+0x4c>
 800a2f8:	2050      	movs	r0, #80	; 0x50
 800a2fa:	9101      	str	r1, [sp, #4]
 800a2fc:	f000 ff8c 	bl	800b218 <malloc>
 800a300:	9901      	ldr	r1, [sp, #4]
 800a302:	65b0      	str	r0, [r6, #88]	; 0x58
 800a304:	4602      	mov	r2, r0
 800a306:	b920      	cbnz	r0, 800a312 <strtok+0x26>
 800a308:	4b10      	ldr	r3, [pc, #64]	; (800a34c <strtok+0x60>)
 800a30a:	4811      	ldr	r0, [pc, #68]	; (800a350 <strtok+0x64>)
 800a30c:	2157      	movs	r1, #87	; 0x57
 800a30e:	f000 f8d5 	bl	800a4bc <__assert_func>
 800a312:	e9c0 4400 	strd	r4, r4, [r0]
 800a316:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a31a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a31e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a322:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a326:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a32a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a32e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a332:	6184      	str	r4, [r0, #24]
 800a334:	7704      	strb	r4, [r0, #28]
 800a336:	6244      	str	r4, [r0, #36]	; 0x24
 800a338:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a33a:	2301      	movs	r3, #1
 800a33c:	4628      	mov	r0, r5
 800a33e:	b002      	add	sp, #8
 800a340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a344:	f000 b806 	b.w	800a354 <__strtok_r>
 800a348:	2000000c 	.word	0x2000000c
 800a34c:	0800cd78 	.word	0x0800cd78
 800a350:	0800cd8f 	.word	0x0800cd8f

0800a354 <__strtok_r>:
 800a354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a356:	b908      	cbnz	r0, 800a35c <__strtok_r+0x8>
 800a358:	6810      	ldr	r0, [r2, #0]
 800a35a:	b188      	cbz	r0, 800a380 <__strtok_r+0x2c>
 800a35c:	4604      	mov	r4, r0
 800a35e:	4620      	mov	r0, r4
 800a360:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a364:	460f      	mov	r7, r1
 800a366:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a36a:	b91e      	cbnz	r6, 800a374 <__strtok_r+0x20>
 800a36c:	b965      	cbnz	r5, 800a388 <__strtok_r+0x34>
 800a36e:	6015      	str	r5, [r2, #0]
 800a370:	4628      	mov	r0, r5
 800a372:	e005      	b.n	800a380 <__strtok_r+0x2c>
 800a374:	42b5      	cmp	r5, r6
 800a376:	d1f6      	bne.n	800a366 <__strtok_r+0x12>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f0      	bne.n	800a35e <__strtok_r+0xa>
 800a37c:	6014      	str	r4, [r2, #0]
 800a37e:	7003      	strb	r3, [r0, #0]
 800a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a382:	461c      	mov	r4, r3
 800a384:	e00c      	b.n	800a3a0 <__strtok_r+0x4c>
 800a386:	b915      	cbnz	r5, 800a38e <__strtok_r+0x3a>
 800a388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a38c:	460e      	mov	r6, r1
 800a38e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a392:	42ab      	cmp	r3, r5
 800a394:	d1f7      	bne.n	800a386 <__strtok_r+0x32>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0f3      	beq.n	800a382 <__strtok_r+0x2e>
 800a39a:	2300      	movs	r3, #0
 800a39c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a3a0:	6014      	str	r4, [r2, #0]
 800a3a2:	e7ed      	b.n	800a380 <__strtok_r+0x2c>

0800a3a4 <_strtol_l.constprop.0>:
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3aa:	d001      	beq.n	800a3b0 <_strtol_l.constprop.0+0xc>
 800a3ac:	2b24      	cmp	r3, #36	; 0x24
 800a3ae:	d906      	bls.n	800a3be <_strtol_l.constprop.0+0x1a>
 800a3b0:	f7ff facc 	bl	800994c <__errno>
 800a3b4:	2316      	movs	r3, #22
 800a3b6:	6003      	str	r3, [r0, #0]
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4a4 <_strtol_l.constprop.0+0x100>
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	462e      	mov	r6, r5
 800a3c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a3ce:	f017 0708 	ands.w	r7, r7, #8
 800a3d2:	d1f7      	bne.n	800a3c4 <_strtol_l.constprop.0+0x20>
 800a3d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a3d6:	d132      	bne.n	800a43e <_strtol_l.constprop.0+0x9a>
 800a3d8:	782c      	ldrb	r4, [r5, #0]
 800a3da:	2701      	movs	r7, #1
 800a3dc:	1cb5      	adds	r5, r6, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d05b      	beq.n	800a49a <_strtol_l.constprop.0+0xf6>
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d109      	bne.n	800a3fa <_strtol_l.constprop.0+0x56>
 800a3e6:	2c30      	cmp	r4, #48	; 0x30
 800a3e8:	d107      	bne.n	800a3fa <_strtol_l.constprop.0+0x56>
 800a3ea:	782c      	ldrb	r4, [r5, #0]
 800a3ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3f0:	2c58      	cmp	r4, #88	; 0x58
 800a3f2:	d14d      	bne.n	800a490 <_strtol_l.constprop.0+0xec>
 800a3f4:	786c      	ldrb	r4, [r5, #1]
 800a3f6:	2310      	movs	r3, #16
 800a3f8:	3502      	adds	r5, #2
 800a3fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a3fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800a402:	f04f 0c00 	mov.w	ip, #0
 800a406:	fbb8 f9f3 	udiv	r9, r8, r3
 800a40a:	4666      	mov	r6, ip
 800a40c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a410:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a414:	f1be 0f09 	cmp.w	lr, #9
 800a418:	d816      	bhi.n	800a448 <_strtol_l.constprop.0+0xa4>
 800a41a:	4674      	mov	r4, lr
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	dd24      	ble.n	800a46a <_strtol_l.constprop.0+0xc6>
 800a420:	f1bc 0f00 	cmp.w	ip, #0
 800a424:	db1e      	blt.n	800a464 <_strtol_l.constprop.0+0xc0>
 800a426:	45b1      	cmp	r9, r6
 800a428:	d31c      	bcc.n	800a464 <_strtol_l.constprop.0+0xc0>
 800a42a:	d101      	bne.n	800a430 <_strtol_l.constprop.0+0x8c>
 800a42c:	45a2      	cmp	sl, r4
 800a42e:	db19      	blt.n	800a464 <_strtol_l.constprop.0+0xc0>
 800a430:	fb06 4603 	mla	r6, r6, r3, r4
 800a434:	f04f 0c01 	mov.w	ip, #1
 800a438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a43c:	e7e8      	b.n	800a410 <_strtol_l.constprop.0+0x6c>
 800a43e:	2c2b      	cmp	r4, #43	; 0x2b
 800a440:	bf04      	itt	eq
 800a442:	782c      	ldrbeq	r4, [r5, #0]
 800a444:	1cb5      	addeq	r5, r6, #2
 800a446:	e7ca      	b.n	800a3de <_strtol_l.constprop.0+0x3a>
 800a448:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a44c:	f1be 0f19 	cmp.w	lr, #25
 800a450:	d801      	bhi.n	800a456 <_strtol_l.constprop.0+0xb2>
 800a452:	3c37      	subs	r4, #55	; 0x37
 800a454:	e7e2      	b.n	800a41c <_strtol_l.constprop.0+0x78>
 800a456:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a45a:	f1be 0f19 	cmp.w	lr, #25
 800a45e:	d804      	bhi.n	800a46a <_strtol_l.constprop.0+0xc6>
 800a460:	3c57      	subs	r4, #87	; 0x57
 800a462:	e7db      	b.n	800a41c <_strtol_l.constprop.0+0x78>
 800a464:	f04f 3cff 	mov.w	ip, #4294967295
 800a468:	e7e6      	b.n	800a438 <_strtol_l.constprop.0+0x94>
 800a46a:	f1bc 0f00 	cmp.w	ip, #0
 800a46e:	da05      	bge.n	800a47c <_strtol_l.constprop.0+0xd8>
 800a470:	2322      	movs	r3, #34	; 0x22
 800a472:	6003      	str	r3, [r0, #0]
 800a474:	4646      	mov	r6, r8
 800a476:	b942      	cbnz	r2, 800a48a <_strtol_l.constprop.0+0xe6>
 800a478:	4630      	mov	r0, r6
 800a47a:	e79e      	b.n	800a3ba <_strtol_l.constprop.0+0x16>
 800a47c:	b107      	cbz	r7, 800a480 <_strtol_l.constprop.0+0xdc>
 800a47e:	4276      	negs	r6, r6
 800a480:	2a00      	cmp	r2, #0
 800a482:	d0f9      	beq.n	800a478 <_strtol_l.constprop.0+0xd4>
 800a484:	f1bc 0f00 	cmp.w	ip, #0
 800a488:	d000      	beq.n	800a48c <_strtol_l.constprop.0+0xe8>
 800a48a:	1e69      	subs	r1, r5, #1
 800a48c:	6011      	str	r1, [r2, #0]
 800a48e:	e7f3      	b.n	800a478 <_strtol_l.constprop.0+0xd4>
 800a490:	2430      	movs	r4, #48	; 0x30
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1b1      	bne.n	800a3fa <_strtol_l.constprop.0+0x56>
 800a496:	2308      	movs	r3, #8
 800a498:	e7af      	b.n	800a3fa <_strtol_l.constprop.0+0x56>
 800a49a:	2c30      	cmp	r4, #48	; 0x30
 800a49c:	d0a5      	beq.n	800a3ea <_strtol_l.constprop.0+0x46>
 800a49e:	230a      	movs	r3, #10
 800a4a0:	e7ab      	b.n	800a3fa <_strtol_l.constprop.0+0x56>
 800a4a2:	bf00      	nop
 800a4a4:	0800ce29 	.word	0x0800ce29

0800a4a8 <strtol>:
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	460a      	mov	r2, r1
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	4802      	ldr	r0, [pc, #8]	; (800a4b8 <strtol+0x10>)
 800a4b0:	6800      	ldr	r0, [r0, #0]
 800a4b2:	f7ff bf77 	b.w	800a3a4 <_strtol_l.constprop.0>
 800a4b6:	bf00      	nop
 800a4b8:	2000000c 	.word	0x2000000c

0800a4bc <__assert_func>:
 800a4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4be:	4614      	mov	r4, r2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <__assert_func+0x2c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	68d8      	ldr	r0, [r3, #12]
 800a4ca:	b14c      	cbz	r4, 800a4e0 <__assert_func+0x24>
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <__assert_func+0x30>)
 800a4ce:	9100      	str	r1, [sp, #0]
 800a4d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4d4:	4906      	ldr	r1, [pc, #24]	; (800a4f0 <__assert_func+0x34>)
 800a4d6:	462b      	mov	r3, r5
 800a4d8:	f000 fe88 	bl	800b1ec <fiprintf>
 800a4dc:	f001 feb2 	bl	800c244 <abort>
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <__assert_func+0x38>)
 800a4e2:	461c      	mov	r4, r3
 800a4e4:	e7f3      	b.n	800a4ce <__assert_func+0x12>
 800a4e6:	bf00      	nop
 800a4e8:	2000000c 	.word	0x2000000c
 800a4ec:	0800cdec 	.word	0x0800cdec
 800a4f0:	0800cdf9 	.word	0x0800cdf9
 800a4f4:	0800ce27 	.word	0x0800ce27

0800a4f8 <quorem>:
 800a4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	6903      	ldr	r3, [r0, #16]
 800a4fe:	690c      	ldr	r4, [r1, #16]
 800a500:	42a3      	cmp	r3, r4
 800a502:	4607      	mov	r7, r0
 800a504:	f2c0 8081 	blt.w	800a60a <quorem+0x112>
 800a508:	3c01      	subs	r4, #1
 800a50a:	f101 0814 	add.w	r8, r1, #20
 800a50e:	f100 0514 	add.w	r5, r0, #20
 800a512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a51c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a520:	3301      	adds	r3, #1
 800a522:	429a      	cmp	r2, r3
 800a524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a52c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a530:	d331      	bcc.n	800a596 <quorem+0x9e>
 800a532:	f04f 0e00 	mov.w	lr, #0
 800a536:	4640      	mov	r0, r8
 800a538:	46ac      	mov	ip, r5
 800a53a:	46f2      	mov	sl, lr
 800a53c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a540:	b293      	uxth	r3, r2
 800a542:	fb06 e303 	mla	r3, r6, r3, lr
 800a546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	ebaa 0303 	sub.w	r3, sl, r3
 800a550:	f8dc a000 	ldr.w	sl, [ip]
 800a554:	0c12      	lsrs	r2, r2, #16
 800a556:	fa13 f38a 	uxtah	r3, r3, sl
 800a55a:	fb06 e202 	mla	r2, r6, r2, lr
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	9b00      	ldr	r3, [sp, #0]
 800a562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a566:	b292      	uxth	r2, r2
 800a568:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a56c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a570:	f8bd 3000 	ldrh.w	r3, [sp]
 800a574:	4581      	cmp	r9, r0
 800a576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a57a:	f84c 3b04 	str.w	r3, [ip], #4
 800a57e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a582:	d2db      	bcs.n	800a53c <quorem+0x44>
 800a584:	f855 300b 	ldr.w	r3, [r5, fp]
 800a588:	b92b      	cbnz	r3, 800a596 <quorem+0x9e>
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	3b04      	subs	r3, #4
 800a58e:	429d      	cmp	r5, r3
 800a590:	461a      	mov	r2, r3
 800a592:	d32e      	bcc.n	800a5f2 <quorem+0xfa>
 800a594:	613c      	str	r4, [r7, #16]
 800a596:	4638      	mov	r0, r7
 800a598:	f001 f8d6 	bl	800b748 <__mcmp>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	db24      	blt.n	800a5ea <quorem+0xf2>
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f04f 0c00 	mov.w	ip, #0
 800a5a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5ac:	f8d0 e000 	ldr.w	lr, [r0]
 800a5b0:	b293      	uxth	r3, r2
 800a5b2:	ebac 0303 	sub.w	r3, ip, r3
 800a5b6:	0c12      	lsrs	r2, r2, #16
 800a5b8:	fa13 f38e 	uxtah	r3, r3, lr
 800a5bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ca:	45c1      	cmp	r9, r8
 800a5cc:	f840 3b04 	str.w	r3, [r0], #4
 800a5d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5d4:	d2e8      	bcs.n	800a5a8 <quorem+0xb0>
 800a5d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5de:	b922      	cbnz	r2, 800a5ea <quorem+0xf2>
 800a5e0:	3b04      	subs	r3, #4
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	d30a      	bcc.n	800a5fe <quorem+0x106>
 800a5e8:	613c      	str	r4, [r7, #16]
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	b003      	add	sp, #12
 800a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	d1cc      	bne.n	800a594 <quorem+0x9c>
 800a5fa:	3c01      	subs	r4, #1
 800a5fc:	e7c7      	b.n	800a58e <quorem+0x96>
 800a5fe:	6812      	ldr	r2, [r2, #0]
 800a600:	3b04      	subs	r3, #4
 800a602:	2a00      	cmp	r2, #0
 800a604:	d1f0      	bne.n	800a5e8 <quorem+0xf0>
 800a606:	3c01      	subs	r4, #1
 800a608:	e7eb      	b.n	800a5e2 <quorem+0xea>
 800a60a:	2000      	movs	r0, #0
 800a60c:	e7ee      	b.n	800a5ec <quorem+0xf4>
	...

0800a610 <_dtoa_r>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ed2d 8b04 	vpush	{d8-d9}
 800a618:	ec57 6b10 	vmov	r6, r7, d0
 800a61c:	b093      	sub	sp, #76	; 0x4c
 800a61e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a624:	9106      	str	r1, [sp, #24]
 800a626:	ee10 aa10 	vmov	sl, s0
 800a62a:	4604      	mov	r4, r0
 800a62c:	9209      	str	r2, [sp, #36]	; 0x24
 800a62e:	930c      	str	r3, [sp, #48]	; 0x30
 800a630:	46bb      	mov	fp, r7
 800a632:	b975      	cbnz	r5, 800a652 <_dtoa_r+0x42>
 800a634:	2010      	movs	r0, #16
 800a636:	f000 fdef 	bl	800b218 <malloc>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6260      	str	r0, [r4, #36]	; 0x24
 800a63e:	b920      	cbnz	r0, 800a64a <_dtoa_r+0x3a>
 800a640:	4ba7      	ldr	r3, [pc, #668]	; (800a8e0 <_dtoa_r+0x2d0>)
 800a642:	21ea      	movs	r1, #234	; 0xea
 800a644:	48a7      	ldr	r0, [pc, #668]	; (800a8e4 <_dtoa_r+0x2d4>)
 800a646:	f7ff ff39 	bl	800a4bc <__assert_func>
 800a64a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a64e:	6005      	str	r5, [r0, #0]
 800a650:	60c5      	str	r5, [r0, #12]
 800a652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a654:	6819      	ldr	r1, [r3, #0]
 800a656:	b151      	cbz	r1, 800a66e <_dtoa_r+0x5e>
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	604a      	str	r2, [r1, #4]
 800a65c:	2301      	movs	r3, #1
 800a65e:	4093      	lsls	r3, r2
 800a660:	608b      	str	r3, [r1, #8]
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fe2e 	bl	800b2c4 <_Bfree>
 800a668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	1e3b      	subs	r3, r7, #0
 800a670:	bfaa      	itet	ge
 800a672:	2300      	movge	r3, #0
 800a674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a678:	f8c8 3000 	strge.w	r3, [r8]
 800a67c:	4b9a      	ldr	r3, [pc, #616]	; (800a8e8 <_dtoa_r+0x2d8>)
 800a67e:	bfbc      	itt	lt
 800a680:	2201      	movlt	r2, #1
 800a682:	f8c8 2000 	strlt.w	r2, [r8]
 800a686:	ea33 030b 	bics.w	r3, r3, fp
 800a68a:	d11b      	bne.n	800a6c4 <_dtoa_r+0xb4>
 800a68c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a68e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a698:	4333      	orrs	r3, r6
 800a69a:	f000 8592 	beq.w	800b1c2 <_dtoa_r+0xbb2>
 800a69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6a0:	b963      	cbnz	r3, 800a6bc <_dtoa_r+0xac>
 800a6a2:	4b92      	ldr	r3, [pc, #584]	; (800a8ec <_dtoa_r+0x2dc>)
 800a6a4:	e022      	b.n	800a6ec <_dtoa_r+0xdc>
 800a6a6:	4b92      	ldr	r3, [pc, #584]	; (800a8f0 <_dtoa_r+0x2e0>)
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	9801      	ldr	r0, [sp, #4]
 800a6b2:	b013      	add	sp, #76	; 0x4c
 800a6b4:	ecbd 8b04 	vpop	{d8-d9}
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	4b8b      	ldr	r3, [pc, #556]	; (800a8ec <_dtoa_r+0x2dc>)
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	3303      	adds	r3, #3
 800a6c2:	e7f3      	b.n	800a6ac <_dtoa_r+0x9c>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	4659      	mov	r1, fp
 800a6cc:	f7f6 fa34 	bl	8000b38 <__aeabi_dcmpeq>
 800a6d0:	ec4b ab19 	vmov	d9, sl, fp
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	b158      	cbz	r0, 800a6f0 <_dtoa_r+0xe0>
 800a6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6da:	2301      	movs	r3, #1
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 856b 	beq.w	800b1bc <_dtoa_r+0xbac>
 800a6e6:	4883      	ldr	r0, [pc, #524]	; (800a8f4 <_dtoa_r+0x2e4>)
 800a6e8:	6018      	str	r0, [r3, #0]
 800a6ea:	1e43      	subs	r3, r0, #1
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	e7df      	b.n	800a6b0 <_dtoa_r+0xa0>
 800a6f0:	ec4b ab10 	vmov	d0, sl, fp
 800a6f4:	aa10      	add	r2, sp, #64	; 0x40
 800a6f6:	a911      	add	r1, sp, #68	; 0x44
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f001 f8cb 	bl	800b894 <__d2b>
 800a6fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a702:	ee08 0a10 	vmov	s16, r0
 800a706:	2d00      	cmp	r5, #0
 800a708:	f000 8084 	beq.w	800a814 <_dtoa_r+0x204>
 800a70c:	ee19 3a90 	vmov	r3, s19
 800a710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a718:	4656      	mov	r6, sl
 800a71a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a71e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a726:	4b74      	ldr	r3, [pc, #464]	; (800a8f8 <_dtoa_r+0x2e8>)
 800a728:	2200      	movs	r2, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f5 fde3 	bl	80002f8 <__aeabi_dsub>
 800a732:	a365      	add	r3, pc, #404	; (adr r3, 800a8c8 <_dtoa_r+0x2b8>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 ff96 	bl	8000668 <__aeabi_dmul>
 800a73c:	a364      	add	r3, pc, #400	; (adr r3, 800a8d0 <_dtoa_r+0x2c0>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 fddb 	bl	80002fc <__adddf3>
 800a746:	4606      	mov	r6, r0
 800a748:	4628      	mov	r0, r5
 800a74a:	460f      	mov	r7, r1
 800a74c:	f7f5 ff22 	bl	8000594 <__aeabi_i2d>
 800a750:	a361      	add	r3, pc, #388	; (adr r3, 800a8d8 <_dtoa_r+0x2c8>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 ff87 	bl	8000668 <__aeabi_dmul>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f5 fdcb 	bl	80002fc <__adddf3>
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	f7f6 fa2d 	bl	8000bc8 <__aeabi_d2iz>
 800a76e:	2200      	movs	r2, #0
 800a770:	9000      	str	r0, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	f7f6 f9e8 	bl	8000b4c <__aeabi_dcmplt>
 800a77c:	b150      	cbz	r0, 800a794 <_dtoa_r+0x184>
 800a77e:	9800      	ldr	r0, [sp, #0]
 800a780:	f7f5 ff08 	bl	8000594 <__aeabi_i2d>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f6 f9d6 	bl	8000b38 <__aeabi_dcmpeq>
 800a78c:	b910      	cbnz	r0, 800a794 <_dtoa_r+0x184>
 800a78e:	9b00      	ldr	r3, [sp, #0]
 800a790:	3b01      	subs	r3, #1
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	9b00      	ldr	r3, [sp, #0]
 800a796:	2b16      	cmp	r3, #22
 800a798:	d85a      	bhi.n	800a850 <_dtoa_r+0x240>
 800a79a:	9a00      	ldr	r2, [sp, #0]
 800a79c:	4b57      	ldr	r3, [pc, #348]	; (800a8fc <_dtoa_r+0x2ec>)
 800a79e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	ec51 0b19 	vmov	r0, r1, d9
 800a7aa:	f7f6 f9cf 	bl	8000b4c <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d050      	beq.n	800a854 <_dtoa_r+0x244>
 800a7b2:	9b00      	ldr	r3, [sp, #0]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7be:	1b5d      	subs	r5, r3, r5
 800a7c0:	1e6b      	subs	r3, r5, #1
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	bf45      	ittet	mi
 800a7c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7ca:	9304      	strmi	r3, [sp, #16]
 800a7cc:	2300      	movpl	r3, #0
 800a7ce:	2300      	movmi	r3, #0
 800a7d0:	bf4c      	ite	mi
 800a7d2:	9305      	strmi	r3, [sp, #20]
 800a7d4:	9304      	strpl	r3, [sp, #16]
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	db3d      	blt.n	800a858 <_dtoa_r+0x248>
 800a7dc:	9b05      	ldr	r3, [sp, #20]
 800a7de:	9a00      	ldr	r2, [sp, #0]
 800a7e0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7e2:	4413      	add	r3, r2
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9307      	str	r3, [sp, #28]
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	f200 8089 	bhi.w	800a904 <_dtoa_r+0x2f4>
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	bfc4      	itt	gt
 800a7f6:	3b04      	subgt	r3, #4
 800a7f8:	9306      	strgt	r3, [sp, #24]
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	f1a3 0302 	sub.w	r3, r3, #2
 800a800:	bfcc      	ite	gt
 800a802:	2500      	movgt	r5, #0
 800a804:	2501      	movle	r5, #1
 800a806:	2b03      	cmp	r3, #3
 800a808:	f200 8087 	bhi.w	800a91a <_dtoa_r+0x30a>
 800a80c:	e8df f003 	tbb	[pc, r3]
 800a810:	59383a2d 	.word	0x59383a2d
 800a814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a818:	441d      	add	r5, r3
 800a81a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a81e:	2b20      	cmp	r3, #32
 800a820:	bfc1      	itttt	gt
 800a822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a82a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a82e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a832:	bfda      	itte	le
 800a834:	f1c3 0320 	rsble	r3, r3, #32
 800a838:	fa06 f003 	lslle.w	r0, r6, r3
 800a83c:	4318      	orrgt	r0, r3
 800a83e:	f7f5 fe99 	bl	8000574 <__aeabi_ui2d>
 800a842:	2301      	movs	r3, #1
 800a844:	4606      	mov	r6, r0
 800a846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a84a:	3d01      	subs	r5, #1
 800a84c:	930e      	str	r3, [sp, #56]	; 0x38
 800a84e:	e76a      	b.n	800a726 <_dtoa_r+0x116>
 800a850:	2301      	movs	r3, #1
 800a852:	e7b2      	b.n	800a7ba <_dtoa_r+0x1aa>
 800a854:	900b      	str	r0, [sp, #44]	; 0x2c
 800a856:	e7b1      	b.n	800a7bc <_dtoa_r+0x1ac>
 800a858:	9b04      	ldr	r3, [sp, #16]
 800a85a:	9a00      	ldr	r2, [sp, #0]
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	9304      	str	r3, [sp, #16]
 800a860:	4253      	negs	r3, r2
 800a862:	9307      	str	r3, [sp, #28]
 800a864:	2300      	movs	r3, #0
 800a866:	930a      	str	r3, [sp, #40]	; 0x28
 800a868:	e7bf      	b.n	800a7ea <_dtoa_r+0x1da>
 800a86a:	2300      	movs	r3, #0
 800a86c:	9308      	str	r3, [sp, #32]
 800a86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a870:	2b00      	cmp	r3, #0
 800a872:	dc55      	bgt.n	800a920 <_dtoa_r+0x310>
 800a874:	2301      	movs	r3, #1
 800a876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a87a:	461a      	mov	r2, r3
 800a87c:	9209      	str	r2, [sp, #36]	; 0x24
 800a87e:	e00c      	b.n	800a89a <_dtoa_r+0x28a>
 800a880:	2301      	movs	r3, #1
 800a882:	e7f3      	b.n	800a86c <_dtoa_r+0x25c>
 800a884:	2300      	movs	r3, #0
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a888:	9308      	str	r3, [sp, #32]
 800a88a:	9b00      	ldr	r3, [sp, #0]
 800a88c:	4413      	add	r3, r2
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	3301      	adds	r3, #1
 800a892:	2b01      	cmp	r3, #1
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	bfb8      	it	lt
 800a898:	2301      	movlt	r3, #1
 800a89a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a89c:	2200      	movs	r2, #0
 800a89e:	6042      	str	r2, [r0, #4]
 800a8a0:	2204      	movs	r2, #4
 800a8a2:	f102 0614 	add.w	r6, r2, #20
 800a8a6:	429e      	cmp	r6, r3
 800a8a8:	6841      	ldr	r1, [r0, #4]
 800a8aa:	d93d      	bls.n	800a928 <_dtoa_r+0x318>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fcc9 	bl	800b244 <_Balloc>
 800a8b2:	9001      	str	r0, [sp, #4]
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d13b      	bne.n	800a930 <_dtoa_r+0x320>
 800a8b8:	4b11      	ldr	r3, [pc, #68]	; (800a900 <_dtoa_r+0x2f0>)
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8c0:	e6c0      	b.n	800a644 <_dtoa_r+0x34>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e7df      	b.n	800a886 <_dtoa_r+0x276>
 800a8c6:	bf00      	nop
 800a8c8:	636f4361 	.word	0x636f4361
 800a8cc:	3fd287a7 	.word	0x3fd287a7
 800a8d0:	8b60c8b3 	.word	0x8b60c8b3
 800a8d4:	3fc68a28 	.word	0x3fc68a28
 800a8d8:	509f79fb 	.word	0x509f79fb
 800a8dc:	3fd34413 	.word	0x3fd34413
 800a8e0:	0800cd78 	.word	0x0800cd78
 800a8e4:	0800cf36 	.word	0x0800cf36
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	0800cf32 	.word	0x0800cf32
 800a8f0:	0800cf29 	.word	0x0800cf29
 800a8f4:	0800cd55 	.word	0x0800cd55
 800a8f8:	3ff80000 	.word	0x3ff80000
 800a8fc:	0800d028 	.word	0x0800d028
 800a900:	0800cf91 	.word	0x0800cf91
 800a904:	2501      	movs	r5, #1
 800a906:	2300      	movs	r3, #0
 800a908:	9306      	str	r3, [sp, #24]
 800a90a:	9508      	str	r5, [sp, #32]
 800a90c:	f04f 33ff 	mov.w	r3, #4294967295
 800a910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a914:	2200      	movs	r2, #0
 800a916:	2312      	movs	r3, #18
 800a918:	e7b0      	b.n	800a87c <_dtoa_r+0x26c>
 800a91a:	2301      	movs	r3, #1
 800a91c:	9308      	str	r3, [sp, #32]
 800a91e:	e7f5      	b.n	800a90c <_dtoa_r+0x2fc>
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a926:	e7b8      	b.n	800a89a <_dtoa_r+0x28a>
 800a928:	3101      	adds	r1, #1
 800a92a:	6041      	str	r1, [r0, #4]
 800a92c:	0052      	lsls	r2, r2, #1
 800a92e:	e7b8      	b.n	800a8a2 <_dtoa_r+0x292>
 800a930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	2b0e      	cmp	r3, #14
 800a93a:	f200 809d 	bhi.w	800aa78 <_dtoa_r+0x468>
 800a93e:	2d00      	cmp	r5, #0
 800a940:	f000 809a 	beq.w	800aa78 <_dtoa_r+0x468>
 800a944:	9b00      	ldr	r3, [sp, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd32      	ble.n	800a9b0 <_dtoa_r+0x3a0>
 800a94a:	4ab7      	ldr	r2, [pc, #732]	; (800ac28 <_dtoa_r+0x618>)
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a954:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	05d8      	lsls	r0, r3, #23
 800a95c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a960:	d516      	bpl.n	800a990 <_dtoa_r+0x380>
 800a962:	4bb2      	ldr	r3, [pc, #712]	; (800ac2c <_dtoa_r+0x61c>)
 800a964:	ec51 0b19 	vmov	r0, r1, d9
 800a968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a96c:	f7f5 ffa6 	bl	80008bc <__aeabi_ddiv>
 800a970:	f007 070f 	and.w	r7, r7, #15
 800a974:	4682      	mov	sl, r0
 800a976:	468b      	mov	fp, r1
 800a978:	2503      	movs	r5, #3
 800a97a:	4eac      	ldr	r6, [pc, #688]	; (800ac2c <_dtoa_r+0x61c>)
 800a97c:	b957      	cbnz	r7, 800a994 <_dtoa_r+0x384>
 800a97e:	4642      	mov	r2, r8
 800a980:	464b      	mov	r3, r9
 800a982:	4650      	mov	r0, sl
 800a984:	4659      	mov	r1, fp
 800a986:	f7f5 ff99 	bl	80008bc <__aeabi_ddiv>
 800a98a:	4682      	mov	sl, r0
 800a98c:	468b      	mov	fp, r1
 800a98e:	e028      	b.n	800a9e2 <_dtoa_r+0x3d2>
 800a990:	2502      	movs	r5, #2
 800a992:	e7f2      	b.n	800a97a <_dtoa_r+0x36a>
 800a994:	07f9      	lsls	r1, r7, #31
 800a996:	d508      	bpl.n	800a9aa <_dtoa_r+0x39a>
 800a998:	4640      	mov	r0, r8
 800a99a:	4649      	mov	r1, r9
 800a99c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9a0:	f7f5 fe62 	bl	8000668 <__aeabi_dmul>
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4689      	mov	r9, r1
 800a9aa:	107f      	asrs	r7, r7, #1
 800a9ac:	3608      	adds	r6, #8
 800a9ae:	e7e5      	b.n	800a97c <_dtoa_r+0x36c>
 800a9b0:	f000 809b 	beq.w	800aaea <_dtoa_r+0x4da>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	4f9d      	ldr	r7, [pc, #628]	; (800ac2c <_dtoa_r+0x61c>)
 800a9b8:	425e      	negs	r6, r3
 800a9ba:	4b9b      	ldr	r3, [pc, #620]	; (800ac28 <_dtoa_r+0x618>)
 800a9bc:	f006 020f 	and.w	r2, r6, #15
 800a9c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	ec51 0b19 	vmov	r0, r1, d9
 800a9cc:	f7f5 fe4c 	bl	8000668 <__aeabi_dmul>
 800a9d0:	1136      	asrs	r6, r6, #4
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	468b      	mov	fp, r1
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2502      	movs	r5, #2
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	d17a      	bne.n	800aad4 <_dtoa_r+0x4c4>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1d3      	bne.n	800a98a <_dtoa_r+0x37a>
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8082 	beq.w	800aaee <_dtoa_r+0x4de>
 800a9ea:	4b91      	ldr	r3, [pc, #580]	; (800ac30 <_dtoa_r+0x620>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	4659      	mov	r1, fp
 800a9f2:	f7f6 f8ab 	bl	8000b4c <__aeabi_dcmplt>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d079      	beq.n	800aaee <_dtoa_r+0x4de>
 800a9fa:	9b03      	ldr	r3, [sp, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d076      	beq.n	800aaee <_dtoa_r+0x4de>
 800aa00:	9b02      	ldr	r3, [sp, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd36      	ble.n	800aa74 <_dtoa_r+0x464>
 800aa06:	9b00      	ldr	r3, [sp, #0]
 800aa08:	4650      	mov	r0, sl
 800aa0a:	4659      	mov	r1, fp
 800aa0c:	1e5f      	subs	r7, r3, #1
 800aa0e:	2200      	movs	r2, #0
 800aa10:	4b88      	ldr	r3, [pc, #544]	; (800ac34 <_dtoa_r+0x624>)
 800aa12:	f7f5 fe29 	bl	8000668 <__aeabi_dmul>
 800aa16:	9e02      	ldr	r6, [sp, #8]
 800aa18:	4682      	mov	sl, r0
 800aa1a:	468b      	mov	fp, r1
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f7f5 fdb8 	bl	8000594 <__aeabi_i2d>
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	f7f5 fe1e 	bl	8000668 <__aeabi_dmul>
 800aa2c:	4b82      	ldr	r3, [pc, #520]	; (800ac38 <_dtoa_r+0x628>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f7f5 fc64 	bl	80002fc <__adddf3>
 800aa34:	46d0      	mov	r8, sl
 800aa36:	46d9      	mov	r9, fp
 800aa38:	4682      	mov	sl, r0
 800aa3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d158      	bne.n	800aaf4 <_dtoa_r+0x4e4>
 800aa42:	4b7e      	ldr	r3, [pc, #504]	; (800ac3c <_dtoa_r+0x62c>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	4640      	mov	r0, r8
 800aa48:	4649      	mov	r1, r9
 800aa4a:	f7f5 fc55 	bl	80002f8 <__aeabi_dsub>
 800aa4e:	4652      	mov	r2, sl
 800aa50:	465b      	mov	r3, fp
 800aa52:	4680      	mov	r8, r0
 800aa54:	4689      	mov	r9, r1
 800aa56:	f7f6 f897 	bl	8000b88 <__aeabi_dcmpgt>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f040 8295 	bne.w	800af8a <_dtoa_r+0x97a>
 800aa60:	4652      	mov	r2, sl
 800aa62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	f7f6 f86f 	bl	8000b4c <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f040 8289 	bne.w	800af86 <_dtoa_r+0x976>
 800aa74:	ec5b ab19 	vmov	sl, fp, d9
 800aa78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f2c0 8148 	blt.w	800ad10 <_dtoa_r+0x700>
 800aa80:	9a00      	ldr	r2, [sp, #0]
 800aa82:	2a0e      	cmp	r2, #14
 800aa84:	f300 8144 	bgt.w	800ad10 <_dtoa_r+0x700>
 800aa88:	4b67      	ldr	r3, [pc, #412]	; (800ac28 <_dtoa_r+0x618>)
 800aa8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f280 80d5 	bge.w	800ac44 <_dtoa_r+0x634>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f300 80d1 	bgt.w	800ac44 <_dtoa_r+0x634>
 800aaa2:	f040 826f 	bne.w	800af84 <_dtoa_r+0x974>
 800aaa6:	4b65      	ldr	r3, [pc, #404]	; (800ac3c <_dtoa_r+0x62c>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fddb 	bl	8000668 <__aeabi_dmul>
 800aab2:	4652      	mov	r2, sl
 800aab4:	465b      	mov	r3, fp
 800aab6:	f7f6 f85d 	bl	8000b74 <__aeabi_dcmpge>
 800aaba:	9e03      	ldr	r6, [sp, #12]
 800aabc:	4637      	mov	r7, r6
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f040 8245 	bne.w	800af4e <_dtoa_r+0x93e>
 800aac4:	9d01      	ldr	r5, [sp, #4]
 800aac6:	2331      	movs	r3, #49	; 0x31
 800aac8:	f805 3b01 	strb.w	r3, [r5], #1
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	3301      	adds	r3, #1
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	e240      	b.n	800af56 <_dtoa_r+0x946>
 800aad4:	07f2      	lsls	r2, r6, #31
 800aad6:	d505      	bpl.n	800aae4 <_dtoa_r+0x4d4>
 800aad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aadc:	f7f5 fdc4 	bl	8000668 <__aeabi_dmul>
 800aae0:	3501      	adds	r5, #1
 800aae2:	2301      	movs	r3, #1
 800aae4:	1076      	asrs	r6, r6, #1
 800aae6:	3708      	adds	r7, #8
 800aae8:	e777      	b.n	800a9da <_dtoa_r+0x3ca>
 800aaea:	2502      	movs	r5, #2
 800aaec:	e779      	b.n	800a9e2 <_dtoa_r+0x3d2>
 800aaee:	9f00      	ldr	r7, [sp, #0]
 800aaf0:	9e03      	ldr	r6, [sp, #12]
 800aaf2:	e794      	b.n	800aa1e <_dtoa_r+0x40e>
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	4b4c      	ldr	r3, [pc, #304]	; (800ac28 <_dtoa_r+0x618>)
 800aaf8:	4431      	add	r1, r6
 800aafa:	910d      	str	r1, [sp, #52]	; 0x34
 800aafc:	9908      	ldr	r1, [sp, #32]
 800aafe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab06:	2900      	cmp	r1, #0
 800ab08:	d043      	beq.n	800ab92 <_dtoa_r+0x582>
 800ab0a:	494d      	ldr	r1, [pc, #308]	; (800ac40 <_dtoa_r+0x630>)
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f7f5 fed5 	bl	80008bc <__aeabi_ddiv>
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	f7f5 fbef 	bl	80002f8 <__aeabi_dsub>
 800ab1a:	9d01      	ldr	r5, [sp, #4]
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	468b      	mov	fp, r1
 800ab20:	4649      	mov	r1, r9
 800ab22:	4640      	mov	r0, r8
 800ab24:	f7f6 f850 	bl	8000bc8 <__aeabi_d2iz>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	f7f5 fd33 	bl	8000594 <__aeabi_i2d>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 fbdf 	bl	80002f8 <__aeabi_dsub>
 800ab3a:	3630      	adds	r6, #48	; 0x30
 800ab3c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab40:	4652      	mov	r2, sl
 800ab42:	465b      	mov	r3, fp
 800ab44:	4680      	mov	r8, r0
 800ab46:	4689      	mov	r9, r1
 800ab48:	f7f6 f800 	bl	8000b4c <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d163      	bne.n	800ac18 <_dtoa_r+0x608>
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	4936      	ldr	r1, [pc, #216]	; (800ac30 <_dtoa_r+0x620>)
 800ab56:	2000      	movs	r0, #0
 800ab58:	f7f5 fbce 	bl	80002f8 <__aeabi_dsub>
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	465b      	mov	r3, fp
 800ab60:	f7f5 fff4 	bl	8000b4c <__aeabi_dcmplt>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 80b5 	bne.w	800acd4 <_dtoa_r+0x6c4>
 800ab6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	d081      	beq.n	800aa74 <_dtoa_r+0x464>
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <_dtoa_r+0x624>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	4650      	mov	r0, sl
 800ab76:	4659      	mov	r1, fp
 800ab78:	f7f5 fd76 	bl	8000668 <__aeabi_dmul>
 800ab7c:	4b2d      	ldr	r3, [pc, #180]	; (800ac34 <_dtoa_r+0x624>)
 800ab7e:	4682      	mov	sl, r0
 800ab80:	468b      	mov	fp, r1
 800ab82:	4640      	mov	r0, r8
 800ab84:	4649      	mov	r1, r9
 800ab86:	2200      	movs	r2, #0
 800ab88:	f7f5 fd6e 	bl	8000668 <__aeabi_dmul>
 800ab8c:	4680      	mov	r8, r0
 800ab8e:	4689      	mov	r9, r1
 800ab90:	e7c6      	b.n	800ab20 <_dtoa_r+0x510>
 800ab92:	4650      	mov	r0, sl
 800ab94:	4659      	mov	r1, fp
 800ab96:	f7f5 fd67 	bl	8000668 <__aeabi_dmul>
 800ab9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9c:	9d01      	ldr	r5, [sp, #4]
 800ab9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba0:	4682      	mov	sl, r0
 800aba2:	468b      	mov	fp, r1
 800aba4:	4649      	mov	r1, r9
 800aba6:	4640      	mov	r0, r8
 800aba8:	f7f6 f80e 	bl	8000bc8 <__aeabi_d2iz>
 800abac:	4606      	mov	r6, r0
 800abae:	f7f5 fcf1 	bl	8000594 <__aeabi_i2d>
 800abb2:	3630      	adds	r6, #48	; 0x30
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 fb9c 	bl	80002f8 <__aeabi_dsub>
 800abc0:	f805 6b01 	strb.w	r6, [r5], #1
 800abc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc6:	429d      	cmp	r5, r3
 800abc8:	4680      	mov	r8, r0
 800abca:	4689      	mov	r9, r1
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	d124      	bne.n	800ac1c <_dtoa_r+0x60c>
 800abd2:	4b1b      	ldr	r3, [pc, #108]	; (800ac40 <_dtoa_r+0x630>)
 800abd4:	4650      	mov	r0, sl
 800abd6:	4659      	mov	r1, fp
 800abd8:	f7f5 fb90 	bl	80002fc <__adddf3>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 ffd0 	bl	8000b88 <__aeabi_dcmpgt>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d173      	bne.n	800acd4 <_dtoa_r+0x6c4>
 800abec:	4652      	mov	r2, sl
 800abee:	465b      	mov	r3, fp
 800abf0:	4913      	ldr	r1, [pc, #76]	; (800ac40 <_dtoa_r+0x630>)
 800abf2:	2000      	movs	r0, #0
 800abf4:	f7f5 fb80 	bl	80002f8 <__aeabi_dsub>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4640      	mov	r0, r8
 800abfe:	4649      	mov	r1, r9
 800ac00:	f7f5 ffa4 	bl	8000b4c <__aeabi_dcmplt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f43f af35 	beq.w	800aa74 <_dtoa_r+0x464>
 800ac0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac0c:	1e6b      	subs	r3, r5, #1
 800ac0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac14:	2b30      	cmp	r3, #48	; 0x30
 800ac16:	d0f8      	beq.n	800ac0a <_dtoa_r+0x5fa>
 800ac18:	9700      	str	r7, [sp, #0]
 800ac1a:	e049      	b.n	800acb0 <_dtoa_r+0x6a0>
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <_dtoa_r+0x624>)
 800ac1e:	f7f5 fd23 	bl	8000668 <__aeabi_dmul>
 800ac22:	4680      	mov	r8, r0
 800ac24:	4689      	mov	r9, r1
 800ac26:	e7bd      	b.n	800aba4 <_dtoa_r+0x594>
 800ac28:	0800d028 	.word	0x0800d028
 800ac2c:	0800d000 	.word	0x0800d000
 800ac30:	3ff00000 	.word	0x3ff00000
 800ac34:	40240000 	.word	0x40240000
 800ac38:	401c0000 	.word	0x401c0000
 800ac3c:	40140000 	.word	0x40140000
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	9d01      	ldr	r5, [sp, #4]
 800ac46:	4656      	mov	r6, sl
 800ac48:	465f      	mov	r7, fp
 800ac4a:	4642      	mov	r2, r8
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fe33 	bl	80008bc <__aeabi_ddiv>
 800ac56:	f7f5 ffb7 	bl	8000bc8 <__aeabi_d2iz>
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	f7f5 fc9a 	bl	8000594 <__aeabi_i2d>
 800ac60:	4642      	mov	r2, r8
 800ac62:	464b      	mov	r3, r9
 800ac64:	f7f5 fd00 	bl	8000668 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac74:	f7f5 fb40 	bl	80002f8 <__aeabi_dsub>
 800ac78:	f805 6b01 	strb.w	r6, [r5], #1
 800ac7c:	9e01      	ldr	r6, [sp, #4]
 800ac7e:	9f03      	ldr	r7, [sp, #12]
 800ac80:	1bae      	subs	r6, r5, r6
 800ac82:	42b7      	cmp	r7, r6
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	d135      	bne.n	800acf6 <_dtoa_r+0x6e6>
 800ac8a:	f7f5 fb37 	bl	80002fc <__adddf3>
 800ac8e:	4642      	mov	r2, r8
 800ac90:	464b      	mov	r3, r9
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	f7f5 ff77 	bl	8000b88 <__aeabi_dcmpgt>
 800ac9a:	b9d0      	cbnz	r0, 800acd2 <_dtoa_r+0x6c2>
 800ac9c:	4642      	mov	r2, r8
 800ac9e:	464b      	mov	r3, r9
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 ff48 	bl	8000b38 <__aeabi_dcmpeq>
 800aca8:	b110      	cbz	r0, 800acb0 <_dtoa_r+0x6a0>
 800acaa:	f01a 0f01 	tst.w	sl, #1
 800acae:	d110      	bne.n	800acd2 <_dtoa_r+0x6c2>
 800acb0:	4620      	mov	r0, r4
 800acb2:	ee18 1a10 	vmov	r1, s16
 800acb6:	f000 fb05 	bl	800b2c4 <_Bfree>
 800acba:	2300      	movs	r3, #0
 800acbc:	9800      	ldr	r0, [sp, #0]
 800acbe:	702b      	strb	r3, [r5, #0]
 800acc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acc2:	3001      	adds	r0, #1
 800acc4:	6018      	str	r0, [r3, #0]
 800acc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f43f acf1 	beq.w	800a6b0 <_dtoa_r+0xa0>
 800acce:	601d      	str	r5, [r3, #0]
 800acd0:	e4ee      	b.n	800a6b0 <_dtoa_r+0xa0>
 800acd2:	9f00      	ldr	r7, [sp, #0]
 800acd4:	462b      	mov	r3, r5
 800acd6:	461d      	mov	r5, r3
 800acd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acdc:	2a39      	cmp	r2, #57	; 0x39
 800acde:	d106      	bne.n	800acee <_dtoa_r+0x6de>
 800ace0:	9a01      	ldr	r2, [sp, #4]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d1f7      	bne.n	800acd6 <_dtoa_r+0x6c6>
 800ace6:	9901      	ldr	r1, [sp, #4]
 800ace8:	2230      	movs	r2, #48	; 0x30
 800acea:	3701      	adds	r7, #1
 800acec:	700a      	strb	r2, [r1, #0]
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	3201      	adds	r2, #1
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	e790      	b.n	800ac18 <_dtoa_r+0x608>
 800acf6:	4ba6      	ldr	r3, [pc, #664]	; (800af90 <_dtoa_r+0x980>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7f5 fcb5 	bl	8000668 <__aeabi_dmul>
 800acfe:	2200      	movs	r2, #0
 800ad00:	2300      	movs	r3, #0
 800ad02:	4606      	mov	r6, r0
 800ad04:	460f      	mov	r7, r1
 800ad06:	f7f5 ff17 	bl	8000b38 <__aeabi_dcmpeq>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d09d      	beq.n	800ac4a <_dtoa_r+0x63a>
 800ad0e:	e7cf      	b.n	800acb0 <_dtoa_r+0x6a0>
 800ad10:	9a08      	ldr	r2, [sp, #32]
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	f000 80d7 	beq.w	800aec6 <_dtoa_r+0x8b6>
 800ad18:	9a06      	ldr	r2, [sp, #24]
 800ad1a:	2a01      	cmp	r2, #1
 800ad1c:	f300 80ba 	bgt.w	800ae94 <_dtoa_r+0x884>
 800ad20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	f000 80b2 	beq.w	800ae8c <_dtoa_r+0x87c>
 800ad28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad2c:	9e07      	ldr	r6, [sp, #28]
 800ad2e:	9d04      	ldr	r5, [sp, #16]
 800ad30:	9a04      	ldr	r2, [sp, #16]
 800ad32:	441a      	add	r2, r3
 800ad34:	9204      	str	r2, [sp, #16]
 800ad36:	9a05      	ldr	r2, [sp, #20]
 800ad38:	2101      	movs	r1, #1
 800ad3a:	441a      	add	r2, r3
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	9205      	str	r2, [sp, #20]
 800ad40:	f000 fb78 	bl	800b434 <__i2b>
 800ad44:	4607      	mov	r7, r0
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	dd0c      	ble.n	800ad64 <_dtoa_r+0x754>
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dd09      	ble.n	800ad64 <_dtoa_r+0x754>
 800ad50:	42ab      	cmp	r3, r5
 800ad52:	9a04      	ldr	r2, [sp, #16]
 800ad54:	bfa8      	it	ge
 800ad56:	462b      	movge	r3, r5
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	9204      	str	r2, [sp, #16]
 800ad5c:	9a05      	ldr	r2, [sp, #20]
 800ad5e:	1aed      	subs	r5, r5, r3
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	9305      	str	r3, [sp, #20]
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	b31b      	cbz	r3, 800adb0 <_dtoa_r+0x7a0>
 800ad68:	9b08      	ldr	r3, [sp, #32]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80af 	beq.w	800aece <_dtoa_r+0x8be>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	dd13      	ble.n	800ad9c <_dtoa_r+0x78c>
 800ad74:	4639      	mov	r1, r7
 800ad76:	4632      	mov	r2, r6
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 fc1b 	bl	800b5b4 <__pow5mult>
 800ad7e:	ee18 2a10 	vmov	r2, s16
 800ad82:	4601      	mov	r1, r0
 800ad84:	4607      	mov	r7, r0
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 fb6a 	bl	800b460 <__multiply>
 800ad8c:	ee18 1a10 	vmov	r1, s16
 800ad90:	4680      	mov	r8, r0
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fa96 	bl	800b2c4 <_Bfree>
 800ad98:	ee08 8a10 	vmov	s16, r8
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	1b9a      	subs	r2, r3, r6
 800ada0:	d006      	beq.n	800adb0 <_dtoa_r+0x7a0>
 800ada2:	ee18 1a10 	vmov	r1, s16
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fc04 	bl	800b5b4 <__pow5mult>
 800adac:	ee08 0a10 	vmov	s16, r0
 800adb0:	2101      	movs	r1, #1
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fb3e 	bl	800b434 <__i2b>
 800adb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adba:	2b00      	cmp	r3, #0
 800adbc:	4606      	mov	r6, r0
 800adbe:	f340 8088 	ble.w	800aed2 <_dtoa_r+0x8c2>
 800adc2:	461a      	mov	r2, r3
 800adc4:	4601      	mov	r1, r0
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 fbf4 	bl	800b5b4 <__pow5mult>
 800adcc:	9b06      	ldr	r3, [sp, #24]
 800adce:	2b01      	cmp	r3, #1
 800add0:	4606      	mov	r6, r0
 800add2:	f340 8081 	ble.w	800aed8 <_dtoa_r+0x8c8>
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	6933      	ldr	r3, [r6, #16]
 800addc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ade0:	6918      	ldr	r0, [r3, #16]
 800ade2:	f000 fad7 	bl	800b394 <__hi0bits>
 800ade6:	f1c0 0020 	rsb	r0, r0, #32
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	4418      	add	r0, r3
 800adee:	f010 001f 	ands.w	r0, r0, #31
 800adf2:	f000 8092 	beq.w	800af1a <_dtoa_r+0x90a>
 800adf6:	f1c0 0320 	rsb	r3, r0, #32
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	f340 808a 	ble.w	800af14 <_dtoa_r+0x904>
 800ae00:	f1c0 001c 	rsb	r0, r0, #28
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	4403      	add	r3, r0
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	9b05      	ldr	r3, [sp, #20]
 800ae0c:	4403      	add	r3, r0
 800ae0e:	4405      	add	r5, r0
 800ae10:	9305      	str	r3, [sp, #20]
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd07      	ble.n	800ae28 <_dtoa_r+0x818>
 800ae18:	ee18 1a10 	vmov	r1, s16
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fc22 	bl	800b668 <__lshift>
 800ae24:	ee08 0a10 	vmov	s16, r0
 800ae28:	9b05      	ldr	r3, [sp, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	dd05      	ble.n	800ae3a <_dtoa_r+0x82a>
 800ae2e:	4631      	mov	r1, r6
 800ae30:	461a      	mov	r2, r3
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 fc18 	bl	800b668 <__lshift>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d06e      	beq.n	800af1e <_dtoa_r+0x90e>
 800ae40:	ee18 0a10 	vmov	r0, s16
 800ae44:	4631      	mov	r1, r6
 800ae46:	f000 fc7f 	bl	800b748 <__mcmp>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	da67      	bge.n	800af1e <_dtoa_r+0x90e>
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	ee18 1a10 	vmov	r1, s16
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	220a      	movs	r2, #10
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 fa53 	bl	800b308 <__multadd>
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	ee08 0a10 	vmov	s16, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 81b1 	beq.w	800b1d0 <_dtoa_r+0xbc0>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4639      	mov	r1, r7
 800ae72:	220a      	movs	r2, #10
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 fa47 	bl	800b308 <__multadd>
 800ae7a:	9b02      	ldr	r3, [sp, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	4607      	mov	r7, r0
 800ae80:	f300 808e 	bgt.w	800afa0 <_dtoa_r+0x990>
 800ae84:	9b06      	ldr	r3, [sp, #24]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	dc51      	bgt.n	800af2e <_dtoa_r+0x91e>
 800ae8a:	e089      	b.n	800afa0 <_dtoa_r+0x990>
 800ae8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae92:	e74b      	b.n	800ad2c <_dtoa_r+0x71c>
 800ae94:	9b03      	ldr	r3, [sp, #12]
 800ae96:	1e5e      	subs	r6, r3, #1
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	42b3      	cmp	r3, r6
 800ae9c:	bfbf      	itttt	lt
 800ae9e:	9b07      	ldrlt	r3, [sp, #28]
 800aea0:	9607      	strlt	r6, [sp, #28]
 800aea2:	1af2      	sublt	r2, r6, r3
 800aea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aea6:	bfb6      	itet	lt
 800aea8:	189b      	addlt	r3, r3, r2
 800aeaa:	1b9e      	subge	r6, r3, r6
 800aeac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	bfb8      	it	lt
 800aeb2:	2600      	movlt	r6, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfb7      	itett	lt
 800aeb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aec0:	1a9d      	sublt	r5, r3, r2
 800aec2:	2300      	movlt	r3, #0
 800aec4:	e734      	b.n	800ad30 <_dtoa_r+0x720>
 800aec6:	9e07      	ldr	r6, [sp, #28]
 800aec8:	9d04      	ldr	r5, [sp, #16]
 800aeca:	9f08      	ldr	r7, [sp, #32]
 800aecc:	e73b      	b.n	800ad46 <_dtoa_r+0x736>
 800aece:	9a07      	ldr	r2, [sp, #28]
 800aed0:	e767      	b.n	800ada2 <_dtoa_r+0x792>
 800aed2:	9b06      	ldr	r3, [sp, #24]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	dc18      	bgt.n	800af0a <_dtoa_r+0x8fa>
 800aed8:	f1ba 0f00 	cmp.w	sl, #0
 800aedc:	d115      	bne.n	800af0a <_dtoa_r+0x8fa>
 800aede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aee2:	b993      	cbnz	r3, 800af0a <_dtoa_r+0x8fa>
 800aee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aee8:	0d1b      	lsrs	r3, r3, #20
 800aeea:	051b      	lsls	r3, r3, #20
 800aeec:	b183      	cbz	r3, 800af10 <_dtoa_r+0x900>
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	3301      	adds	r3, #1
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	3301      	adds	r3, #1
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	f04f 0801 	mov.w	r8, #1
 800aefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af00:	2b00      	cmp	r3, #0
 800af02:	f47f af6a 	bne.w	800adda <_dtoa_r+0x7ca>
 800af06:	2001      	movs	r0, #1
 800af08:	e76f      	b.n	800adea <_dtoa_r+0x7da>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	e7f6      	b.n	800aefe <_dtoa_r+0x8ee>
 800af10:	4698      	mov	r8, r3
 800af12:	e7f4      	b.n	800aefe <_dtoa_r+0x8ee>
 800af14:	f43f af7d 	beq.w	800ae12 <_dtoa_r+0x802>
 800af18:	4618      	mov	r0, r3
 800af1a:	301c      	adds	r0, #28
 800af1c:	e772      	b.n	800ae04 <_dtoa_r+0x7f4>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	dc37      	bgt.n	800af94 <_dtoa_r+0x984>
 800af24:	9b06      	ldr	r3, [sp, #24]
 800af26:	2b02      	cmp	r3, #2
 800af28:	dd34      	ble.n	800af94 <_dtoa_r+0x984>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	9302      	str	r3, [sp, #8]
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	b96b      	cbnz	r3, 800af4e <_dtoa_r+0x93e>
 800af32:	4631      	mov	r1, r6
 800af34:	2205      	movs	r2, #5
 800af36:	4620      	mov	r0, r4
 800af38:	f000 f9e6 	bl	800b308 <__multadd>
 800af3c:	4601      	mov	r1, r0
 800af3e:	4606      	mov	r6, r0
 800af40:	ee18 0a10 	vmov	r0, s16
 800af44:	f000 fc00 	bl	800b748 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f73f adbb 	bgt.w	800aac4 <_dtoa_r+0x4b4>
 800af4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af50:	9d01      	ldr	r5, [sp, #4]
 800af52:	43db      	mvns	r3, r3
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	f04f 0800 	mov.w	r8, #0
 800af5a:	4631      	mov	r1, r6
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f9b1 	bl	800b2c4 <_Bfree>
 800af62:	2f00      	cmp	r7, #0
 800af64:	f43f aea4 	beq.w	800acb0 <_dtoa_r+0x6a0>
 800af68:	f1b8 0f00 	cmp.w	r8, #0
 800af6c:	d005      	beq.n	800af7a <_dtoa_r+0x96a>
 800af6e:	45b8      	cmp	r8, r7
 800af70:	d003      	beq.n	800af7a <_dtoa_r+0x96a>
 800af72:	4641      	mov	r1, r8
 800af74:	4620      	mov	r0, r4
 800af76:	f000 f9a5 	bl	800b2c4 <_Bfree>
 800af7a:	4639      	mov	r1, r7
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 f9a1 	bl	800b2c4 <_Bfree>
 800af82:	e695      	b.n	800acb0 <_dtoa_r+0x6a0>
 800af84:	2600      	movs	r6, #0
 800af86:	4637      	mov	r7, r6
 800af88:	e7e1      	b.n	800af4e <_dtoa_r+0x93e>
 800af8a:	9700      	str	r7, [sp, #0]
 800af8c:	4637      	mov	r7, r6
 800af8e:	e599      	b.n	800aac4 <_dtoa_r+0x4b4>
 800af90:	40240000 	.word	0x40240000
 800af94:	9b08      	ldr	r3, [sp, #32]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 80ca 	beq.w	800b130 <_dtoa_r+0xb20>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	9302      	str	r3, [sp, #8]
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	dd05      	ble.n	800afb0 <_dtoa_r+0x9a0>
 800afa4:	4639      	mov	r1, r7
 800afa6:	462a      	mov	r2, r5
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fb5d 	bl	800b668 <__lshift>
 800afae:	4607      	mov	r7, r0
 800afb0:	f1b8 0f00 	cmp.w	r8, #0
 800afb4:	d05b      	beq.n	800b06e <_dtoa_r+0xa5e>
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 f943 	bl	800b244 <_Balloc>
 800afbe:	4605      	mov	r5, r0
 800afc0:	b928      	cbnz	r0, 800afce <_dtoa_r+0x9be>
 800afc2:	4b87      	ldr	r3, [pc, #540]	; (800b1e0 <_dtoa_r+0xbd0>)
 800afc4:	4602      	mov	r2, r0
 800afc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afca:	f7ff bb3b 	b.w	800a644 <_dtoa_r+0x34>
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	3202      	adds	r2, #2
 800afd2:	0092      	lsls	r2, r2, #2
 800afd4:	f107 010c 	add.w	r1, r7, #12
 800afd8:	300c      	adds	r0, #12
 800afda:	f000 f925 	bl	800b228 <memcpy>
 800afde:	2201      	movs	r2, #1
 800afe0:	4629      	mov	r1, r5
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fb40 	bl	800b668 <__lshift>
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	f103 0901 	add.w	r9, r3, #1
 800afee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aff2:	4413      	add	r3, r2
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	f00a 0301 	and.w	r3, sl, #1
 800affa:	46b8      	mov	r8, r7
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	4607      	mov	r7, r0
 800b000:	4631      	mov	r1, r6
 800b002:	ee18 0a10 	vmov	r0, s16
 800b006:	f7ff fa77 	bl	800a4f8 <quorem>
 800b00a:	4641      	mov	r1, r8
 800b00c:	9002      	str	r0, [sp, #8]
 800b00e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b012:	ee18 0a10 	vmov	r0, s16
 800b016:	f000 fb97 	bl	800b748 <__mcmp>
 800b01a:	463a      	mov	r2, r7
 800b01c:	9003      	str	r0, [sp, #12]
 800b01e:	4631      	mov	r1, r6
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fbad 	bl	800b780 <__mdiff>
 800b026:	68c2      	ldr	r2, [r0, #12]
 800b028:	f109 3bff 	add.w	fp, r9, #4294967295
 800b02c:	4605      	mov	r5, r0
 800b02e:	bb02      	cbnz	r2, 800b072 <_dtoa_r+0xa62>
 800b030:	4601      	mov	r1, r0
 800b032:	ee18 0a10 	vmov	r0, s16
 800b036:	f000 fb87 	bl	800b748 <__mcmp>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4629      	mov	r1, r5
 800b03e:	4620      	mov	r0, r4
 800b040:	9207      	str	r2, [sp, #28]
 800b042:	f000 f93f 	bl	800b2c4 <_Bfree>
 800b046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b04a:	ea43 0102 	orr.w	r1, r3, r2
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	430b      	orrs	r3, r1
 800b052:	464d      	mov	r5, r9
 800b054:	d10f      	bne.n	800b076 <_dtoa_r+0xa66>
 800b056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b05a:	d02a      	beq.n	800b0b2 <_dtoa_r+0xaa2>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dd02      	ble.n	800b068 <_dtoa_r+0xa58>
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b068:	f88b a000 	strb.w	sl, [fp]
 800b06c:	e775      	b.n	800af5a <_dtoa_r+0x94a>
 800b06e:	4638      	mov	r0, r7
 800b070:	e7ba      	b.n	800afe8 <_dtoa_r+0x9d8>
 800b072:	2201      	movs	r2, #1
 800b074:	e7e2      	b.n	800b03c <_dtoa_r+0xa2c>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	db04      	blt.n	800b086 <_dtoa_r+0xa76>
 800b07c:	9906      	ldr	r1, [sp, #24]
 800b07e:	430b      	orrs	r3, r1
 800b080:	9904      	ldr	r1, [sp, #16]
 800b082:	430b      	orrs	r3, r1
 800b084:	d122      	bne.n	800b0cc <_dtoa_r+0xabc>
 800b086:	2a00      	cmp	r2, #0
 800b088:	ddee      	ble.n	800b068 <_dtoa_r+0xa58>
 800b08a:	ee18 1a10 	vmov	r1, s16
 800b08e:	2201      	movs	r2, #1
 800b090:	4620      	mov	r0, r4
 800b092:	f000 fae9 	bl	800b668 <__lshift>
 800b096:	4631      	mov	r1, r6
 800b098:	ee08 0a10 	vmov	s16, r0
 800b09c:	f000 fb54 	bl	800b748 <__mcmp>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	dc03      	bgt.n	800b0ac <_dtoa_r+0xa9c>
 800b0a4:	d1e0      	bne.n	800b068 <_dtoa_r+0xa58>
 800b0a6:	f01a 0f01 	tst.w	sl, #1
 800b0aa:	d0dd      	beq.n	800b068 <_dtoa_r+0xa58>
 800b0ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0b0:	d1d7      	bne.n	800b062 <_dtoa_r+0xa52>
 800b0b2:	2339      	movs	r3, #57	; 0x39
 800b0b4:	f88b 3000 	strb.w	r3, [fp]
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	461d      	mov	r5, r3
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0c2:	2a39      	cmp	r2, #57	; 0x39
 800b0c4:	d071      	beq.n	800b1aa <_dtoa_r+0xb9a>
 800b0c6:	3201      	adds	r2, #1
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	e746      	b.n	800af5a <_dtoa_r+0x94a>
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	dd07      	ble.n	800b0e0 <_dtoa_r+0xad0>
 800b0d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0d4:	d0ed      	beq.n	800b0b2 <_dtoa_r+0xaa2>
 800b0d6:	f10a 0301 	add.w	r3, sl, #1
 800b0da:	f88b 3000 	strb.w	r3, [fp]
 800b0de:	e73c      	b.n	800af5a <_dtoa_r+0x94a>
 800b0e0:	9b05      	ldr	r3, [sp, #20]
 800b0e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0e6:	4599      	cmp	r9, r3
 800b0e8:	d047      	beq.n	800b17a <_dtoa_r+0xb6a>
 800b0ea:	ee18 1a10 	vmov	r1, s16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f908 	bl	800b308 <__multadd>
 800b0f8:	45b8      	cmp	r8, r7
 800b0fa:	ee08 0a10 	vmov	s16, r0
 800b0fe:	f04f 0300 	mov.w	r3, #0
 800b102:	f04f 020a 	mov.w	r2, #10
 800b106:	4641      	mov	r1, r8
 800b108:	4620      	mov	r0, r4
 800b10a:	d106      	bne.n	800b11a <_dtoa_r+0xb0a>
 800b10c:	f000 f8fc 	bl	800b308 <__multadd>
 800b110:	4680      	mov	r8, r0
 800b112:	4607      	mov	r7, r0
 800b114:	f109 0901 	add.w	r9, r9, #1
 800b118:	e772      	b.n	800b000 <_dtoa_r+0x9f0>
 800b11a:	f000 f8f5 	bl	800b308 <__multadd>
 800b11e:	4639      	mov	r1, r7
 800b120:	4680      	mov	r8, r0
 800b122:	2300      	movs	r3, #0
 800b124:	220a      	movs	r2, #10
 800b126:	4620      	mov	r0, r4
 800b128:	f000 f8ee 	bl	800b308 <__multadd>
 800b12c:	4607      	mov	r7, r0
 800b12e:	e7f1      	b.n	800b114 <_dtoa_r+0xb04>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	9302      	str	r3, [sp, #8]
 800b134:	9d01      	ldr	r5, [sp, #4]
 800b136:	ee18 0a10 	vmov	r0, s16
 800b13a:	4631      	mov	r1, r6
 800b13c:	f7ff f9dc 	bl	800a4f8 <quorem>
 800b140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	f805 ab01 	strb.w	sl, [r5], #1
 800b14a:	1aea      	subs	r2, r5, r3
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	4293      	cmp	r3, r2
 800b150:	dd09      	ble.n	800b166 <_dtoa_r+0xb56>
 800b152:	ee18 1a10 	vmov	r1, s16
 800b156:	2300      	movs	r3, #0
 800b158:	220a      	movs	r2, #10
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 f8d4 	bl	800b308 <__multadd>
 800b160:	ee08 0a10 	vmov	s16, r0
 800b164:	e7e7      	b.n	800b136 <_dtoa_r+0xb26>
 800b166:	9b02      	ldr	r3, [sp, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bfc8      	it	gt
 800b16c:	461d      	movgt	r5, r3
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	bfd8      	it	le
 800b172:	2501      	movle	r5, #1
 800b174:	441d      	add	r5, r3
 800b176:	f04f 0800 	mov.w	r8, #0
 800b17a:	ee18 1a10 	vmov	r1, s16
 800b17e:	2201      	movs	r2, #1
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fa71 	bl	800b668 <__lshift>
 800b186:	4631      	mov	r1, r6
 800b188:	ee08 0a10 	vmov	s16, r0
 800b18c:	f000 fadc 	bl	800b748 <__mcmp>
 800b190:	2800      	cmp	r0, #0
 800b192:	dc91      	bgt.n	800b0b8 <_dtoa_r+0xaa8>
 800b194:	d102      	bne.n	800b19c <_dtoa_r+0xb8c>
 800b196:	f01a 0f01 	tst.w	sl, #1
 800b19a:	d18d      	bne.n	800b0b8 <_dtoa_r+0xaa8>
 800b19c:	462b      	mov	r3, r5
 800b19e:	461d      	mov	r5, r3
 800b1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1a4:	2a30      	cmp	r2, #48	; 0x30
 800b1a6:	d0fa      	beq.n	800b19e <_dtoa_r+0xb8e>
 800b1a8:	e6d7      	b.n	800af5a <_dtoa_r+0x94a>
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d184      	bne.n	800b0ba <_dtoa_r+0xaaa>
 800b1b0:	9b00      	ldr	r3, [sp, #0]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	2331      	movs	r3, #49	; 0x31
 800b1b8:	7013      	strb	r3, [r2, #0]
 800b1ba:	e6ce      	b.n	800af5a <_dtoa_r+0x94a>
 800b1bc:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <_dtoa_r+0xbd4>)
 800b1be:	f7ff ba95 	b.w	800a6ec <_dtoa_r+0xdc>
 800b1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f47f aa6e 	bne.w	800a6a6 <_dtoa_r+0x96>
 800b1ca:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <_dtoa_r+0xbd8>)
 800b1cc:	f7ff ba8e 	b.w	800a6ec <_dtoa_r+0xdc>
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dcae      	bgt.n	800b134 <_dtoa_r+0xb24>
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	f73f aea8 	bgt.w	800af2e <_dtoa_r+0x91e>
 800b1de:	e7a9      	b.n	800b134 <_dtoa_r+0xb24>
 800b1e0:	0800cf91 	.word	0x0800cf91
 800b1e4:	0800cd54 	.word	0x0800cd54
 800b1e8:	0800cf29 	.word	0x0800cf29

0800b1ec <fiprintf>:
 800b1ec:	b40e      	push	{r1, r2, r3}
 800b1ee:	b503      	push	{r0, r1, lr}
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	ab03      	add	r3, sp, #12
 800b1f4:	4805      	ldr	r0, [pc, #20]	; (800b20c <fiprintf+0x20>)
 800b1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1fa:	6800      	ldr	r0, [r0, #0]
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	f000 fe21 	bl	800be44 <_vfiprintf_r>
 800b202:	b002      	add	sp, #8
 800b204:	f85d eb04 	ldr.w	lr, [sp], #4
 800b208:	b003      	add	sp, #12
 800b20a:	4770      	bx	lr
 800b20c:	2000000c 	.word	0x2000000c

0800b210 <_localeconv_r>:
 800b210:	4800      	ldr	r0, [pc, #0]	; (800b214 <_localeconv_r+0x4>)
 800b212:	4770      	bx	lr
 800b214:	20000160 	.word	0x20000160

0800b218 <malloc>:
 800b218:	4b02      	ldr	r3, [pc, #8]	; (800b224 <malloc+0xc>)
 800b21a:	4601      	mov	r1, r0
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	f000 bc17 	b.w	800ba50 <_malloc_r>
 800b222:	bf00      	nop
 800b224:	2000000c 	.word	0x2000000c

0800b228 <memcpy>:
 800b228:	440a      	add	r2, r1
 800b22a:	4291      	cmp	r1, r2
 800b22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b230:	d100      	bne.n	800b234 <memcpy+0xc>
 800b232:	4770      	bx	lr
 800b234:	b510      	push	{r4, lr}
 800b236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b23e:	4291      	cmp	r1, r2
 800b240:	d1f9      	bne.n	800b236 <memcpy+0xe>
 800b242:	bd10      	pop	{r4, pc}

0800b244 <_Balloc>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b248:	4604      	mov	r4, r0
 800b24a:	460d      	mov	r5, r1
 800b24c:	b976      	cbnz	r6, 800b26c <_Balloc+0x28>
 800b24e:	2010      	movs	r0, #16
 800b250:	f7ff ffe2 	bl	800b218 <malloc>
 800b254:	4602      	mov	r2, r0
 800b256:	6260      	str	r0, [r4, #36]	; 0x24
 800b258:	b920      	cbnz	r0, 800b264 <_Balloc+0x20>
 800b25a:	4b18      	ldr	r3, [pc, #96]	; (800b2bc <_Balloc+0x78>)
 800b25c:	4818      	ldr	r0, [pc, #96]	; (800b2c0 <_Balloc+0x7c>)
 800b25e:	2166      	movs	r1, #102	; 0x66
 800b260:	f7ff f92c 	bl	800a4bc <__assert_func>
 800b264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b268:	6006      	str	r6, [r0, #0]
 800b26a:	60c6      	str	r6, [r0, #12]
 800b26c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b26e:	68f3      	ldr	r3, [r6, #12]
 800b270:	b183      	cbz	r3, 800b294 <_Balloc+0x50>
 800b272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b27a:	b9b8      	cbnz	r0, 800b2ac <_Balloc+0x68>
 800b27c:	2101      	movs	r1, #1
 800b27e:	fa01 f605 	lsl.w	r6, r1, r5
 800b282:	1d72      	adds	r2, r6, #5
 800b284:	0092      	lsls	r2, r2, #2
 800b286:	4620      	mov	r0, r4
 800b288:	f000 fb60 	bl	800b94c <_calloc_r>
 800b28c:	b160      	cbz	r0, 800b2a8 <_Balloc+0x64>
 800b28e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b292:	e00e      	b.n	800b2b2 <_Balloc+0x6e>
 800b294:	2221      	movs	r2, #33	; 0x21
 800b296:	2104      	movs	r1, #4
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fb57 	bl	800b94c <_calloc_r>
 800b29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a0:	60f0      	str	r0, [r6, #12]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e4      	bne.n	800b272 <_Balloc+0x2e>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	6802      	ldr	r2, [r0, #0]
 800b2ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2b8:	e7f7      	b.n	800b2aa <_Balloc+0x66>
 800b2ba:	bf00      	nop
 800b2bc:	0800cd78 	.word	0x0800cd78
 800b2c0:	0800cfa2 	.word	0x0800cfa2

0800b2c4 <_Bfree>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	b976      	cbnz	r6, 800b2ec <_Bfree+0x28>
 800b2ce:	2010      	movs	r0, #16
 800b2d0:	f7ff ffa2 	bl	800b218 <malloc>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6268      	str	r0, [r5, #36]	; 0x24
 800b2d8:	b920      	cbnz	r0, 800b2e4 <_Bfree+0x20>
 800b2da:	4b09      	ldr	r3, [pc, #36]	; (800b300 <_Bfree+0x3c>)
 800b2dc:	4809      	ldr	r0, [pc, #36]	; (800b304 <_Bfree+0x40>)
 800b2de:	218a      	movs	r1, #138	; 0x8a
 800b2e0:	f7ff f8ec 	bl	800a4bc <__assert_func>
 800b2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2e8:	6006      	str	r6, [r0, #0]
 800b2ea:	60c6      	str	r6, [r0, #12]
 800b2ec:	b13c      	cbz	r4, 800b2fe <_Bfree+0x3a>
 800b2ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2f0:	6862      	ldr	r2, [r4, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2f8:	6021      	str	r1, [r4, #0]
 800b2fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	0800cd78 	.word	0x0800cd78
 800b304:	0800cfa2 	.word	0x0800cfa2

0800b308 <__multadd>:
 800b308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	690d      	ldr	r5, [r1, #16]
 800b30e:	4607      	mov	r7, r0
 800b310:	460c      	mov	r4, r1
 800b312:	461e      	mov	r6, r3
 800b314:	f101 0c14 	add.w	ip, r1, #20
 800b318:	2000      	movs	r0, #0
 800b31a:	f8dc 3000 	ldr.w	r3, [ip]
 800b31e:	b299      	uxth	r1, r3
 800b320:	fb02 6101 	mla	r1, r2, r1, r6
 800b324:	0c1e      	lsrs	r6, r3, #16
 800b326:	0c0b      	lsrs	r3, r1, #16
 800b328:	fb02 3306 	mla	r3, r2, r6, r3
 800b32c:	b289      	uxth	r1, r1
 800b32e:	3001      	adds	r0, #1
 800b330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b334:	4285      	cmp	r5, r0
 800b336:	f84c 1b04 	str.w	r1, [ip], #4
 800b33a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b33e:	dcec      	bgt.n	800b31a <__multadd+0x12>
 800b340:	b30e      	cbz	r6, 800b386 <__multadd+0x7e>
 800b342:	68a3      	ldr	r3, [r4, #8]
 800b344:	42ab      	cmp	r3, r5
 800b346:	dc19      	bgt.n	800b37c <__multadd+0x74>
 800b348:	6861      	ldr	r1, [r4, #4]
 800b34a:	4638      	mov	r0, r7
 800b34c:	3101      	adds	r1, #1
 800b34e:	f7ff ff79 	bl	800b244 <_Balloc>
 800b352:	4680      	mov	r8, r0
 800b354:	b928      	cbnz	r0, 800b362 <__multadd+0x5a>
 800b356:	4602      	mov	r2, r0
 800b358:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <__multadd+0x84>)
 800b35a:	480d      	ldr	r0, [pc, #52]	; (800b390 <__multadd+0x88>)
 800b35c:	21b5      	movs	r1, #181	; 0xb5
 800b35e:	f7ff f8ad 	bl	800a4bc <__assert_func>
 800b362:	6922      	ldr	r2, [r4, #16]
 800b364:	3202      	adds	r2, #2
 800b366:	f104 010c 	add.w	r1, r4, #12
 800b36a:	0092      	lsls	r2, r2, #2
 800b36c:	300c      	adds	r0, #12
 800b36e:	f7ff ff5b 	bl	800b228 <memcpy>
 800b372:	4621      	mov	r1, r4
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff ffa5 	bl	800b2c4 <_Bfree>
 800b37a:	4644      	mov	r4, r8
 800b37c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b380:	3501      	adds	r5, #1
 800b382:	615e      	str	r6, [r3, #20]
 800b384:	6125      	str	r5, [r4, #16]
 800b386:	4620      	mov	r0, r4
 800b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38c:	0800cf91 	.word	0x0800cf91
 800b390:	0800cfa2 	.word	0x0800cfa2

0800b394 <__hi0bits>:
 800b394:	0c03      	lsrs	r3, r0, #16
 800b396:	041b      	lsls	r3, r3, #16
 800b398:	b9d3      	cbnz	r3, 800b3d0 <__hi0bits+0x3c>
 800b39a:	0400      	lsls	r0, r0, #16
 800b39c:	2310      	movs	r3, #16
 800b39e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3a2:	bf04      	itt	eq
 800b3a4:	0200      	lsleq	r0, r0, #8
 800b3a6:	3308      	addeq	r3, #8
 800b3a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3ac:	bf04      	itt	eq
 800b3ae:	0100      	lsleq	r0, r0, #4
 800b3b0:	3304      	addeq	r3, #4
 800b3b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3b6:	bf04      	itt	eq
 800b3b8:	0080      	lsleq	r0, r0, #2
 800b3ba:	3302      	addeq	r3, #2
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	db05      	blt.n	800b3cc <__hi0bits+0x38>
 800b3c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3c4:	f103 0301 	add.w	r3, r3, #1
 800b3c8:	bf08      	it	eq
 800b3ca:	2320      	moveq	r3, #32
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4770      	bx	lr
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e7e4      	b.n	800b39e <__hi0bits+0xa>

0800b3d4 <__lo0bits>:
 800b3d4:	6803      	ldr	r3, [r0, #0]
 800b3d6:	f013 0207 	ands.w	r2, r3, #7
 800b3da:	4601      	mov	r1, r0
 800b3dc:	d00b      	beq.n	800b3f6 <__lo0bits+0x22>
 800b3de:	07da      	lsls	r2, r3, #31
 800b3e0:	d423      	bmi.n	800b42a <__lo0bits+0x56>
 800b3e2:	0798      	lsls	r0, r3, #30
 800b3e4:	bf49      	itett	mi
 800b3e6:	085b      	lsrmi	r3, r3, #1
 800b3e8:	089b      	lsrpl	r3, r3, #2
 800b3ea:	2001      	movmi	r0, #1
 800b3ec:	600b      	strmi	r3, [r1, #0]
 800b3ee:	bf5c      	itt	pl
 800b3f0:	600b      	strpl	r3, [r1, #0]
 800b3f2:	2002      	movpl	r0, #2
 800b3f4:	4770      	bx	lr
 800b3f6:	b298      	uxth	r0, r3
 800b3f8:	b9a8      	cbnz	r0, 800b426 <__lo0bits+0x52>
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	2010      	movs	r0, #16
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	b90a      	cbnz	r2, 800b406 <__lo0bits+0x32>
 800b402:	3008      	adds	r0, #8
 800b404:	0a1b      	lsrs	r3, r3, #8
 800b406:	071a      	lsls	r2, r3, #28
 800b408:	bf04      	itt	eq
 800b40a:	091b      	lsreq	r3, r3, #4
 800b40c:	3004      	addeq	r0, #4
 800b40e:	079a      	lsls	r2, r3, #30
 800b410:	bf04      	itt	eq
 800b412:	089b      	lsreq	r3, r3, #2
 800b414:	3002      	addeq	r0, #2
 800b416:	07da      	lsls	r2, r3, #31
 800b418:	d403      	bmi.n	800b422 <__lo0bits+0x4e>
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	f100 0001 	add.w	r0, r0, #1
 800b420:	d005      	beq.n	800b42e <__lo0bits+0x5a>
 800b422:	600b      	str	r3, [r1, #0]
 800b424:	4770      	bx	lr
 800b426:	4610      	mov	r0, r2
 800b428:	e7e9      	b.n	800b3fe <__lo0bits+0x2a>
 800b42a:	2000      	movs	r0, #0
 800b42c:	4770      	bx	lr
 800b42e:	2020      	movs	r0, #32
 800b430:	4770      	bx	lr
	...

0800b434 <__i2b>:
 800b434:	b510      	push	{r4, lr}
 800b436:	460c      	mov	r4, r1
 800b438:	2101      	movs	r1, #1
 800b43a:	f7ff ff03 	bl	800b244 <_Balloc>
 800b43e:	4602      	mov	r2, r0
 800b440:	b928      	cbnz	r0, 800b44e <__i2b+0x1a>
 800b442:	4b05      	ldr	r3, [pc, #20]	; (800b458 <__i2b+0x24>)
 800b444:	4805      	ldr	r0, [pc, #20]	; (800b45c <__i2b+0x28>)
 800b446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b44a:	f7ff f837 	bl	800a4bc <__assert_func>
 800b44e:	2301      	movs	r3, #1
 800b450:	6144      	str	r4, [r0, #20]
 800b452:	6103      	str	r3, [r0, #16]
 800b454:	bd10      	pop	{r4, pc}
 800b456:	bf00      	nop
 800b458:	0800cf91 	.word	0x0800cf91
 800b45c:	0800cfa2 	.word	0x0800cfa2

0800b460 <__multiply>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	4691      	mov	r9, r2
 800b466:	690a      	ldr	r2, [r1, #16]
 800b468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	bfb8      	it	lt
 800b470:	460b      	movlt	r3, r1
 800b472:	460c      	mov	r4, r1
 800b474:	bfbc      	itt	lt
 800b476:	464c      	movlt	r4, r9
 800b478:	4699      	movlt	r9, r3
 800b47a:	6927      	ldr	r7, [r4, #16]
 800b47c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b480:	68a3      	ldr	r3, [r4, #8]
 800b482:	6861      	ldr	r1, [r4, #4]
 800b484:	eb07 060a 	add.w	r6, r7, sl
 800b488:	42b3      	cmp	r3, r6
 800b48a:	b085      	sub	sp, #20
 800b48c:	bfb8      	it	lt
 800b48e:	3101      	addlt	r1, #1
 800b490:	f7ff fed8 	bl	800b244 <_Balloc>
 800b494:	b930      	cbnz	r0, 800b4a4 <__multiply+0x44>
 800b496:	4602      	mov	r2, r0
 800b498:	4b44      	ldr	r3, [pc, #272]	; (800b5ac <__multiply+0x14c>)
 800b49a:	4845      	ldr	r0, [pc, #276]	; (800b5b0 <__multiply+0x150>)
 800b49c:	f240 115d 	movw	r1, #349	; 0x15d
 800b4a0:	f7ff f80c 	bl	800a4bc <__assert_func>
 800b4a4:	f100 0514 	add.w	r5, r0, #20
 800b4a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	4543      	cmp	r3, r8
 800b4b2:	d321      	bcc.n	800b4f8 <__multiply+0x98>
 800b4b4:	f104 0314 	add.w	r3, r4, #20
 800b4b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4bc:	f109 0314 	add.w	r3, r9, #20
 800b4c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4c4:	9202      	str	r2, [sp, #8]
 800b4c6:	1b3a      	subs	r2, r7, r4
 800b4c8:	3a15      	subs	r2, #21
 800b4ca:	f022 0203 	bic.w	r2, r2, #3
 800b4ce:	3204      	adds	r2, #4
 800b4d0:	f104 0115 	add.w	r1, r4, #21
 800b4d4:	428f      	cmp	r7, r1
 800b4d6:	bf38      	it	cc
 800b4d8:	2204      	movcc	r2, #4
 800b4da:	9201      	str	r2, [sp, #4]
 800b4dc:	9a02      	ldr	r2, [sp, #8]
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d80c      	bhi.n	800b4fe <__multiply+0x9e>
 800b4e4:	2e00      	cmp	r6, #0
 800b4e6:	dd03      	ble.n	800b4f0 <__multiply+0x90>
 800b4e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d05a      	beq.n	800b5a6 <__multiply+0x146>
 800b4f0:	6106      	str	r6, [r0, #16]
 800b4f2:	b005      	add	sp, #20
 800b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	f843 2b04 	str.w	r2, [r3], #4
 800b4fc:	e7d8      	b.n	800b4b0 <__multiply+0x50>
 800b4fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800b502:	f1ba 0f00 	cmp.w	sl, #0
 800b506:	d024      	beq.n	800b552 <__multiply+0xf2>
 800b508:	f104 0e14 	add.w	lr, r4, #20
 800b50c:	46a9      	mov	r9, r5
 800b50e:	f04f 0c00 	mov.w	ip, #0
 800b512:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b516:	f8d9 1000 	ldr.w	r1, [r9]
 800b51a:	fa1f fb82 	uxth.w	fp, r2
 800b51e:	b289      	uxth	r1, r1
 800b520:	fb0a 110b 	mla	r1, sl, fp, r1
 800b524:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b528:	f8d9 2000 	ldr.w	r2, [r9]
 800b52c:	4461      	add	r1, ip
 800b52e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b532:	fb0a c20b 	mla	r2, sl, fp, ip
 800b536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b53a:	b289      	uxth	r1, r1
 800b53c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b540:	4577      	cmp	r7, lr
 800b542:	f849 1b04 	str.w	r1, [r9], #4
 800b546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b54a:	d8e2      	bhi.n	800b512 <__multiply+0xb2>
 800b54c:	9a01      	ldr	r2, [sp, #4]
 800b54e:	f845 c002 	str.w	ip, [r5, r2]
 800b552:	9a03      	ldr	r2, [sp, #12]
 800b554:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b558:	3304      	adds	r3, #4
 800b55a:	f1b9 0f00 	cmp.w	r9, #0
 800b55e:	d020      	beq.n	800b5a2 <__multiply+0x142>
 800b560:	6829      	ldr	r1, [r5, #0]
 800b562:	f104 0c14 	add.w	ip, r4, #20
 800b566:	46ae      	mov	lr, r5
 800b568:	f04f 0a00 	mov.w	sl, #0
 800b56c:	f8bc b000 	ldrh.w	fp, [ip]
 800b570:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b574:	fb09 220b 	mla	r2, r9, fp, r2
 800b578:	4492      	add	sl, r2
 800b57a:	b289      	uxth	r1, r1
 800b57c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b580:	f84e 1b04 	str.w	r1, [lr], #4
 800b584:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b588:	f8be 1000 	ldrh.w	r1, [lr]
 800b58c:	0c12      	lsrs	r2, r2, #16
 800b58e:	fb09 1102 	mla	r1, r9, r2, r1
 800b592:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b596:	4567      	cmp	r7, ip
 800b598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b59c:	d8e6      	bhi.n	800b56c <__multiply+0x10c>
 800b59e:	9a01      	ldr	r2, [sp, #4]
 800b5a0:	50a9      	str	r1, [r5, r2]
 800b5a2:	3504      	adds	r5, #4
 800b5a4:	e79a      	b.n	800b4dc <__multiply+0x7c>
 800b5a6:	3e01      	subs	r6, #1
 800b5a8:	e79c      	b.n	800b4e4 <__multiply+0x84>
 800b5aa:	bf00      	nop
 800b5ac:	0800cf91 	.word	0x0800cf91
 800b5b0:	0800cfa2 	.word	0x0800cfa2

0800b5b4 <__pow5mult>:
 800b5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b8:	4615      	mov	r5, r2
 800b5ba:	f012 0203 	ands.w	r2, r2, #3
 800b5be:	4606      	mov	r6, r0
 800b5c0:	460f      	mov	r7, r1
 800b5c2:	d007      	beq.n	800b5d4 <__pow5mult+0x20>
 800b5c4:	4c25      	ldr	r4, [pc, #148]	; (800b65c <__pow5mult+0xa8>)
 800b5c6:	3a01      	subs	r2, #1
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5ce:	f7ff fe9b 	bl	800b308 <__multadd>
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	10ad      	asrs	r5, r5, #2
 800b5d6:	d03d      	beq.n	800b654 <__pow5mult+0xa0>
 800b5d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5da:	b97c      	cbnz	r4, 800b5fc <__pow5mult+0x48>
 800b5dc:	2010      	movs	r0, #16
 800b5de:	f7ff fe1b 	bl	800b218 <malloc>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e6:	b928      	cbnz	r0, 800b5f4 <__pow5mult+0x40>
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <__pow5mult+0xac>)
 800b5ea:	481e      	ldr	r0, [pc, #120]	; (800b664 <__pow5mult+0xb0>)
 800b5ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5f0:	f7fe ff64 	bl	800a4bc <__assert_func>
 800b5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5f8:	6004      	str	r4, [r0, #0]
 800b5fa:	60c4      	str	r4, [r0, #12]
 800b5fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b604:	b94c      	cbnz	r4, 800b61a <__pow5mult+0x66>
 800b606:	f240 2171 	movw	r1, #625	; 0x271
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ff12 	bl	800b434 <__i2b>
 800b610:	2300      	movs	r3, #0
 800b612:	f8c8 0008 	str.w	r0, [r8, #8]
 800b616:	4604      	mov	r4, r0
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	f04f 0900 	mov.w	r9, #0
 800b61e:	07eb      	lsls	r3, r5, #31
 800b620:	d50a      	bpl.n	800b638 <__pow5mult+0x84>
 800b622:	4639      	mov	r1, r7
 800b624:	4622      	mov	r2, r4
 800b626:	4630      	mov	r0, r6
 800b628:	f7ff ff1a 	bl	800b460 <__multiply>
 800b62c:	4639      	mov	r1, r7
 800b62e:	4680      	mov	r8, r0
 800b630:	4630      	mov	r0, r6
 800b632:	f7ff fe47 	bl	800b2c4 <_Bfree>
 800b636:	4647      	mov	r7, r8
 800b638:	106d      	asrs	r5, r5, #1
 800b63a:	d00b      	beq.n	800b654 <__pow5mult+0xa0>
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	b938      	cbnz	r0, 800b650 <__pow5mult+0x9c>
 800b640:	4622      	mov	r2, r4
 800b642:	4621      	mov	r1, r4
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff ff0b 	bl	800b460 <__multiply>
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	f8c0 9000 	str.w	r9, [r0]
 800b650:	4604      	mov	r4, r0
 800b652:	e7e4      	b.n	800b61e <__pow5mult+0x6a>
 800b654:	4638      	mov	r0, r7
 800b656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65a:	bf00      	nop
 800b65c:	0800d0f0 	.word	0x0800d0f0
 800b660:	0800cd78 	.word	0x0800cd78
 800b664:	0800cfa2 	.word	0x0800cfa2

0800b668 <__lshift>:
 800b668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	460c      	mov	r4, r1
 800b66e:	6849      	ldr	r1, [r1, #4]
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	4607      	mov	r7, r0
 800b67a:	4691      	mov	r9, r2
 800b67c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b680:	f108 0601 	add.w	r6, r8, #1
 800b684:	42b3      	cmp	r3, r6
 800b686:	db0b      	blt.n	800b6a0 <__lshift+0x38>
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff fddb 	bl	800b244 <_Balloc>
 800b68e:	4605      	mov	r5, r0
 800b690:	b948      	cbnz	r0, 800b6a6 <__lshift+0x3e>
 800b692:	4602      	mov	r2, r0
 800b694:	4b2a      	ldr	r3, [pc, #168]	; (800b740 <__lshift+0xd8>)
 800b696:	482b      	ldr	r0, [pc, #172]	; (800b744 <__lshift+0xdc>)
 800b698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b69c:	f7fe ff0e 	bl	800a4bc <__assert_func>
 800b6a0:	3101      	adds	r1, #1
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	e7ee      	b.n	800b684 <__lshift+0x1c>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f100 0114 	add.w	r1, r0, #20
 800b6ac:	f100 0210 	add.w	r2, r0, #16
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	4553      	cmp	r3, sl
 800b6b4:	db37      	blt.n	800b726 <__lshift+0xbe>
 800b6b6:	6920      	ldr	r0, [r4, #16]
 800b6b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6bc:	f104 0314 	add.w	r3, r4, #20
 800b6c0:	f019 091f 	ands.w	r9, r9, #31
 800b6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6cc:	d02f      	beq.n	800b72e <__lshift+0xc6>
 800b6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b6d2:	468a      	mov	sl, r1
 800b6d4:	f04f 0c00 	mov.w	ip, #0
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	fa02 f209 	lsl.w	r2, r2, r9
 800b6de:	ea42 020c 	orr.w	r2, r2, ip
 800b6e2:	f84a 2b04 	str.w	r2, [sl], #4
 800b6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6f0:	d8f2      	bhi.n	800b6d8 <__lshift+0x70>
 800b6f2:	1b03      	subs	r3, r0, r4
 800b6f4:	3b15      	subs	r3, #21
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	f104 0215 	add.w	r2, r4, #21
 800b700:	4290      	cmp	r0, r2
 800b702:	bf38      	it	cc
 800b704:	2304      	movcc	r3, #4
 800b706:	f841 c003 	str.w	ip, [r1, r3]
 800b70a:	f1bc 0f00 	cmp.w	ip, #0
 800b70e:	d001      	beq.n	800b714 <__lshift+0xac>
 800b710:	f108 0602 	add.w	r6, r8, #2
 800b714:	3e01      	subs	r6, #1
 800b716:	4638      	mov	r0, r7
 800b718:	612e      	str	r6, [r5, #16]
 800b71a:	4621      	mov	r1, r4
 800b71c:	f7ff fdd2 	bl	800b2c4 <_Bfree>
 800b720:	4628      	mov	r0, r5
 800b722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b726:	f842 0f04 	str.w	r0, [r2, #4]!
 800b72a:	3301      	adds	r3, #1
 800b72c:	e7c1      	b.n	800b6b2 <__lshift+0x4a>
 800b72e:	3904      	subs	r1, #4
 800b730:	f853 2b04 	ldr.w	r2, [r3], #4
 800b734:	f841 2f04 	str.w	r2, [r1, #4]!
 800b738:	4298      	cmp	r0, r3
 800b73a:	d8f9      	bhi.n	800b730 <__lshift+0xc8>
 800b73c:	e7ea      	b.n	800b714 <__lshift+0xac>
 800b73e:	bf00      	nop
 800b740:	0800cf91 	.word	0x0800cf91
 800b744:	0800cfa2 	.word	0x0800cfa2

0800b748 <__mcmp>:
 800b748:	b530      	push	{r4, r5, lr}
 800b74a:	6902      	ldr	r2, [r0, #16]
 800b74c:	690c      	ldr	r4, [r1, #16]
 800b74e:	1b12      	subs	r2, r2, r4
 800b750:	d10e      	bne.n	800b770 <__mcmp+0x28>
 800b752:	f100 0314 	add.w	r3, r0, #20
 800b756:	3114      	adds	r1, #20
 800b758:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b75c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b760:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b764:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b768:	42a5      	cmp	r5, r4
 800b76a:	d003      	beq.n	800b774 <__mcmp+0x2c>
 800b76c:	d305      	bcc.n	800b77a <__mcmp+0x32>
 800b76e:	2201      	movs	r2, #1
 800b770:	4610      	mov	r0, r2
 800b772:	bd30      	pop	{r4, r5, pc}
 800b774:	4283      	cmp	r3, r0
 800b776:	d3f3      	bcc.n	800b760 <__mcmp+0x18>
 800b778:	e7fa      	b.n	800b770 <__mcmp+0x28>
 800b77a:	f04f 32ff 	mov.w	r2, #4294967295
 800b77e:	e7f7      	b.n	800b770 <__mcmp+0x28>

0800b780 <__mdiff>:
 800b780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	460c      	mov	r4, r1
 800b786:	4606      	mov	r6, r0
 800b788:	4611      	mov	r1, r2
 800b78a:	4620      	mov	r0, r4
 800b78c:	4690      	mov	r8, r2
 800b78e:	f7ff ffdb 	bl	800b748 <__mcmp>
 800b792:	1e05      	subs	r5, r0, #0
 800b794:	d110      	bne.n	800b7b8 <__mdiff+0x38>
 800b796:	4629      	mov	r1, r5
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff fd53 	bl	800b244 <_Balloc>
 800b79e:	b930      	cbnz	r0, 800b7ae <__mdiff+0x2e>
 800b7a0:	4b3a      	ldr	r3, [pc, #232]	; (800b88c <__mdiff+0x10c>)
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	f240 2132 	movw	r1, #562	; 0x232
 800b7a8:	4839      	ldr	r0, [pc, #228]	; (800b890 <__mdiff+0x110>)
 800b7aa:	f7fe fe87 	bl	800a4bc <__assert_func>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	bfa4      	itt	ge
 800b7ba:	4643      	movge	r3, r8
 800b7bc:	46a0      	movge	r8, r4
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7c4:	bfa6      	itte	ge
 800b7c6:	461c      	movge	r4, r3
 800b7c8:	2500      	movge	r5, #0
 800b7ca:	2501      	movlt	r5, #1
 800b7cc:	f7ff fd3a 	bl	800b244 <_Balloc>
 800b7d0:	b920      	cbnz	r0, 800b7dc <__mdiff+0x5c>
 800b7d2:	4b2e      	ldr	r3, [pc, #184]	; (800b88c <__mdiff+0x10c>)
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7da:	e7e5      	b.n	800b7a8 <__mdiff+0x28>
 800b7dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7e0:	6926      	ldr	r6, [r4, #16]
 800b7e2:	60c5      	str	r5, [r0, #12]
 800b7e4:	f104 0914 	add.w	r9, r4, #20
 800b7e8:	f108 0514 	add.w	r5, r8, #20
 800b7ec:	f100 0e14 	add.w	lr, r0, #20
 800b7f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7f8:	f108 0210 	add.w	r2, r8, #16
 800b7fc:	46f2      	mov	sl, lr
 800b7fe:	2100      	movs	r1, #0
 800b800:	f859 3b04 	ldr.w	r3, [r9], #4
 800b804:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b808:	fa1f f883 	uxth.w	r8, r3
 800b80c:	fa11 f18b 	uxtah	r1, r1, fp
 800b810:	0c1b      	lsrs	r3, r3, #16
 800b812:	eba1 0808 	sub.w	r8, r1, r8
 800b816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b81a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b81e:	fa1f f888 	uxth.w	r8, r8
 800b822:	1419      	asrs	r1, r3, #16
 800b824:	454e      	cmp	r6, r9
 800b826:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b82a:	f84a 3b04 	str.w	r3, [sl], #4
 800b82e:	d8e7      	bhi.n	800b800 <__mdiff+0x80>
 800b830:	1b33      	subs	r3, r6, r4
 800b832:	3b15      	subs	r3, #21
 800b834:	f023 0303 	bic.w	r3, r3, #3
 800b838:	3304      	adds	r3, #4
 800b83a:	3415      	adds	r4, #21
 800b83c:	42a6      	cmp	r6, r4
 800b83e:	bf38      	it	cc
 800b840:	2304      	movcc	r3, #4
 800b842:	441d      	add	r5, r3
 800b844:	4473      	add	r3, lr
 800b846:	469e      	mov	lr, r3
 800b848:	462e      	mov	r6, r5
 800b84a:	4566      	cmp	r6, ip
 800b84c:	d30e      	bcc.n	800b86c <__mdiff+0xec>
 800b84e:	f10c 0203 	add.w	r2, ip, #3
 800b852:	1b52      	subs	r2, r2, r5
 800b854:	f022 0203 	bic.w	r2, r2, #3
 800b858:	3d03      	subs	r5, #3
 800b85a:	45ac      	cmp	ip, r5
 800b85c:	bf38      	it	cc
 800b85e:	2200      	movcc	r2, #0
 800b860:	441a      	add	r2, r3
 800b862:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b866:	b17b      	cbz	r3, 800b888 <__mdiff+0x108>
 800b868:	6107      	str	r7, [r0, #16]
 800b86a:	e7a3      	b.n	800b7b4 <__mdiff+0x34>
 800b86c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b870:	fa11 f288 	uxtah	r2, r1, r8
 800b874:	1414      	asrs	r4, r2, #16
 800b876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b87a:	b292      	uxth	r2, r2
 800b87c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b880:	f84e 2b04 	str.w	r2, [lr], #4
 800b884:	1421      	asrs	r1, r4, #16
 800b886:	e7e0      	b.n	800b84a <__mdiff+0xca>
 800b888:	3f01      	subs	r7, #1
 800b88a:	e7ea      	b.n	800b862 <__mdiff+0xe2>
 800b88c:	0800cf91 	.word	0x0800cf91
 800b890:	0800cfa2 	.word	0x0800cfa2

0800b894 <__d2b>:
 800b894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b898:	4689      	mov	r9, r1
 800b89a:	2101      	movs	r1, #1
 800b89c:	ec57 6b10 	vmov	r6, r7, d0
 800b8a0:	4690      	mov	r8, r2
 800b8a2:	f7ff fccf 	bl	800b244 <_Balloc>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	b930      	cbnz	r0, 800b8b8 <__d2b+0x24>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4b25      	ldr	r3, [pc, #148]	; (800b944 <__d2b+0xb0>)
 800b8ae:	4826      	ldr	r0, [pc, #152]	; (800b948 <__d2b+0xb4>)
 800b8b0:	f240 310a 	movw	r1, #778	; 0x30a
 800b8b4:	f7fe fe02 	bl	800a4bc <__assert_func>
 800b8b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8c0:	bb35      	cbnz	r5, 800b910 <__d2b+0x7c>
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	d028      	beq.n	800b91a <__d2b+0x86>
 800b8c8:	4668      	mov	r0, sp
 800b8ca:	9600      	str	r6, [sp, #0]
 800b8cc:	f7ff fd82 	bl	800b3d4 <__lo0bits>
 800b8d0:	9900      	ldr	r1, [sp, #0]
 800b8d2:	b300      	cbz	r0, 800b916 <__d2b+0x82>
 800b8d4:	9a01      	ldr	r2, [sp, #4]
 800b8d6:	f1c0 0320 	rsb	r3, r0, #32
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	40c2      	lsrs	r2, r0
 800b8e2:	6163      	str	r3, [r4, #20]
 800b8e4:	9201      	str	r2, [sp, #4]
 800b8e6:	9b01      	ldr	r3, [sp, #4]
 800b8e8:	61a3      	str	r3, [r4, #24]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	bf14      	ite	ne
 800b8ee:	2202      	movne	r2, #2
 800b8f0:	2201      	moveq	r2, #1
 800b8f2:	6122      	str	r2, [r4, #16]
 800b8f4:	b1d5      	cbz	r5, 800b92c <__d2b+0x98>
 800b8f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8fa:	4405      	add	r5, r0
 800b8fc:	f8c9 5000 	str.w	r5, [r9]
 800b900:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b904:	f8c8 0000 	str.w	r0, [r8]
 800b908:	4620      	mov	r0, r4
 800b90a:	b003      	add	sp, #12
 800b90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b914:	e7d5      	b.n	800b8c2 <__d2b+0x2e>
 800b916:	6161      	str	r1, [r4, #20]
 800b918:	e7e5      	b.n	800b8e6 <__d2b+0x52>
 800b91a:	a801      	add	r0, sp, #4
 800b91c:	f7ff fd5a 	bl	800b3d4 <__lo0bits>
 800b920:	9b01      	ldr	r3, [sp, #4]
 800b922:	6163      	str	r3, [r4, #20]
 800b924:	2201      	movs	r2, #1
 800b926:	6122      	str	r2, [r4, #16]
 800b928:	3020      	adds	r0, #32
 800b92a:	e7e3      	b.n	800b8f4 <__d2b+0x60>
 800b92c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b930:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b934:	f8c9 0000 	str.w	r0, [r9]
 800b938:	6918      	ldr	r0, [r3, #16]
 800b93a:	f7ff fd2b 	bl	800b394 <__hi0bits>
 800b93e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b942:	e7df      	b.n	800b904 <__d2b+0x70>
 800b944:	0800cf91 	.word	0x0800cf91
 800b948:	0800cfa2 	.word	0x0800cfa2

0800b94c <_calloc_r>:
 800b94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b94e:	fba1 2402 	umull	r2, r4, r1, r2
 800b952:	b94c      	cbnz	r4, 800b968 <_calloc_r+0x1c>
 800b954:	4611      	mov	r1, r2
 800b956:	9201      	str	r2, [sp, #4]
 800b958:	f000 f87a 	bl	800ba50 <_malloc_r>
 800b95c:	9a01      	ldr	r2, [sp, #4]
 800b95e:	4605      	mov	r5, r0
 800b960:	b930      	cbnz	r0, 800b970 <_calloc_r+0x24>
 800b962:	4628      	mov	r0, r5
 800b964:	b003      	add	sp, #12
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	220c      	movs	r2, #12
 800b96a:	6002      	str	r2, [r0, #0]
 800b96c:	2500      	movs	r5, #0
 800b96e:	e7f8      	b.n	800b962 <_calloc_r+0x16>
 800b970:	4621      	mov	r1, r4
 800b972:	f7fe f815 	bl	80099a0 <memset>
 800b976:	e7f4      	b.n	800b962 <_calloc_r+0x16>

0800b978 <_free_r>:
 800b978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b97a:	2900      	cmp	r1, #0
 800b97c:	d044      	beq.n	800ba08 <_free_r+0x90>
 800b97e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b982:	9001      	str	r0, [sp, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f1a1 0404 	sub.w	r4, r1, #4
 800b98a:	bfb8      	it	lt
 800b98c:	18e4      	addlt	r4, r4, r3
 800b98e:	f000 fead 	bl	800c6ec <__malloc_lock>
 800b992:	4a1e      	ldr	r2, [pc, #120]	; (800ba0c <_free_r+0x94>)
 800b994:	9801      	ldr	r0, [sp, #4]
 800b996:	6813      	ldr	r3, [r2, #0]
 800b998:	b933      	cbnz	r3, 800b9a8 <_free_r+0x30>
 800b99a:	6063      	str	r3, [r4, #4]
 800b99c:	6014      	str	r4, [r2, #0]
 800b99e:	b003      	add	sp, #12
 800b9a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9a4:	f000 bea8 	b.w	800c6f8 <__malloc_unlock>
 800b9a8:	42a3      	cmp	r3, r4
 800b9aa:	d908      	bls.n	800b9be <_free_r+0x46>
 800b9ac:	6825      	ldr	r5, [r4, #0]
 800b9ae:	1961      	adds	r1, r4, r5
 800b9b0:	428b      	cmp	r3, r1
 800b9b2:	bf01      	itttt	eq
 800b9b4:	6819      	ldreq	r1, [r3, #0]
 800b9b6:	685b      	ldreq	r3, [r3, #4]
 800b9b8:	1949      	addeq	r1, r1, r5
 800b9ba:	6021      	streq	r1, [r4, #0]
 800b9bc:	e7ed      	b.n	800b99a <_free_r+0x22>
 800b9be:	461a      	mov	r2, r3
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	b10b      	cbz	r3, 800b9c8 <_free_r+0x50>
 800b9c4:	42a3      	cmp	r3, r4
 800b9c6:	d9fa      	bls.n	800b9be <_free_r+0x46>
 800b9c8:	6811      	ldr	r1, [r2, #0]
 800b9ca:	1855      	adds	r5, r2, r1
 800b9cc:	42a5      	cmp	r5, r4
 800b9ce:	d10b      	bne.n	800b9e8 <_free_r+0x70>
 800b9d0:	6824      	ldr	r4, [r4, #0]
 800b9d2:	4421      	add	r1, r4
 800b9d4:	1854      	adds	r4, r2, r1
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	d1e0      	bne.n	800b99e <_free_r+0x26>
 800b9dc:	681c      	ldr	r4, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	6053      	str	r3, [r2, #4]
 800b9e2:	4421      	add	r1, r4
 800b9e4:	6011      	str	r1, [r2, #0]
 800b9e6:	e7da      	b.n	800b99e <_free_r+0x26>
 800b9e8:	d902      	bls.n	800b9f0 <_free_r+0x78>
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	e7d6      	b.n	800b99e <_free_r+0x26>
 800b9f0:	6825      	ldr	r5, [r4, #0]
 800b9f2:	1961      	adds	r1, r4, r5
 800b9f4:	428b      	cmp	r3, r1
 800b9f6:	bf04      	itt	eq
 800b9f8:	6819      	ldreq	r1, [r3, #0]
 800b9fa:	685b      	ldreq	r3, [r3, #4]
 800b9fc:	6063      	str	r3, [r4, #4]
 800b9fe:	bf04      	itt	eq
 800ba00:	1949      	addeq	r1, r1, r5
 800ba02:	6021      	streq	r1, [r4, #0]
 800ba04:	6054      	str	r4, [r2, #4]
 800ba06:	e7ca      	b.n	800b99e <_free_r+0x26>
 800ba08:	b003      	add	sp, #12
 800ba0a:	bd30      	pop	{r4, r5, pc}
 800ba0c:	200005c8 	.word	0x200005c8

0800ba10 <sbrk_aligned>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4e0e      	ldr	r6, [pc, #56]	; (800ba4c <sbrk_aligned+0x3c>)
 800ba14:	460c      	mov	r4, r1
 800ba16:	6831      	ldr	r1, [r6, #0]
 800ba18:	4605      	mov	r5, r0
 800ba1a:	b911      	cbnz	r1, 800ba22 <sbrk_aligned+0x12>
 800ba1c:	f000 fb42 	bl	800c0a4 <_sbrk_r>
 800ba20:	6030      	str	r0, [r6, #0]
 800ba22:	4621      	mov	r1, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 fb3d 	bl	800c0a4 <_sbrk_r>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	d00a      	beq.n	800ba44 <sbrk_aligned+0x34>
 800ba2e:	1cc4      	adds	r4, r0, #3
 800ba30:	f024 0403 	bic.w	r4, r4, #3
 800ba34:	42a0      	cmp	r0, r4
 800ba36:	d007      	beq.n	800ba48 <sbrk_aligned+0x38>
 800ba38:	1a21      	subs	r1, r4, r0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f000 fb32 	bl	800c0a4 <_sbrk_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	d101      	bne.n	800ba48 <sbrk_aligned+0x38>
 800ba44:	f04f 34ff 	mov.w	r4, #4294967295
 800ba48:	4620      	mov	r0, r4
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	200005cc 	.word	0x200005cc

0800ba50 <_malloc_r>:
 800ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba54:	1ccd      	adds	r5, r1, #3
 800ba56:	f025 0503 	bic.w	r5, r5, #3
 800ba5a:	3508      	adds	r5, #8
 800ba5c:	2d0c      	cmp	r5, #12
 800ba5e:	bf38      	it	cc
 800ba60:	250c      	movcc	r5, #12
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	4607      	mov	r7, r0
 800ba66:	db01      	blt.n	800ba6c <_malloc_r+0x1c>
 800ba68:	42a9      	cmp	r1, r5
 800ba6a:	d905      	bls.n	800ba78 <_malloc_r+0x28>
 800ba6c:	230c      	movs	r3, #12
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	2600      	movs	r6, #0
 800ba72:	4630      	mov	r0, r6
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	4e2e      	ldr	r6, [pc, #184]	; (800bb34 <_malloc_r+0xe4>)
 800ba7a:	f000 fe37 	bl	800c6ec <__malloc_lock>
 800ba7e:	6833      	ldr	r3, [r6, #0]
 800ba80:	461c      	mov	r4, r3
 800ba82:	bb34      	cbnz	r4, 800bad2 <_malloc_r+0x82>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4638      	mov	r0, r7
 800ba88:	f7ff ffc2 	bl	800ba10 <sbrk_aligned>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	4604      	mov	r4, r0
 800ba90:	d14d      	bne.n	800bb2e <_malloc_r+0xde>
 800ba92:	6834      	ldr	r4, [r6, #0]
 800ba94:	4626      	mov	r6, r4
 800ba96:	2e00      	cmp	r6, #0
 800ba98:	d140      	bne.n	800bb1c <_malloc_r+0xcc>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4638      	mov	r0, r7
 800baa0:	eb04 0803 	add.w	r8, r4, r3
 800baa4:	f000 fafe 	bl	800c0a4 <_sbrk_r>
 800baa8:	4580      	cmp	r8, r0
 800baaa:	d13a      	bne.n	800bb22 <_malloc_r+0xd2>
 800baac:	6821      	ldr	r1, [r4, #0]
 800baae:	3503      	adds	r5, #3
 800bab0:	1a6d      	subs	r5, r5, r1
 800bab2:	f025 0503 	bic.w	r5, r5, #3
 800bab6:	3508      	adds	r5, #8
 800bab8:	2d0c      	cmp	r5, #12
 800baba:	bf38      	it	cc
 800babc:	250c      	movcc	r5, #12
 800babe:	4629      	mov	r1, r5
 800bac0:	4638      	mov	r0, r7
 800bac2:	f7ff ffa5 	bl	800ba10 <sbrk_aligned>
 800bac6:	3001      	adds	r0, #1
 800bac8:	d02b      	beq.n	800bb22 <_malloc_r+0xd2>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	442b      	add	r3, r5
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	e00e      	b.n	800baf0 <_malloc_r+0xa0>
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	1b52      	subs	r2, r2, r5
 800bad6:	d41e      	bmi.n	800bb16 <_malloc_r+0xc6>
 800bad8:	2a0b      	cmp	r2, #11
 800bada:	d916      	bls.n	800bb0a <_malloc_r+0xba>
 800badc:	1961      	adds	r1, r4, r5
 800bade:	42a3      	cmp	r3, r4
 800bae0:	6025      	str	r5, [r4, #0]
 800bae2:	bf18      	it	ne
 800bae4:	6059      	strne	r1, [r3, #4]
 800bae6:	6863      	ldr	r3, [r4, #4]
 800bae8:	bf08      	it	eq
 800baea:	6031      	streq	r1, [r6, #0]
 800baec:	5162      	str	r2, [r4, r5]
 800baee:	604b      	str	r3, [r1, #4]
 800baf0:	4638      	mov	r0, r7
 800baf2:	f104 060b 	add.w	r6, r4, #11
 800baf6:	f000 fdff 	bl	800c6f8 <__malloc_unlock>
 800bafa:	f026 0607 	bic.w	r6, r6, #7
 800bafe:	1d23      	adds	r3, r4, #4
 800bb00:	1af2      	subs	r2, r6, r3
 800bb02:	d0b6      	beq.n	800ba72 <_malloc_r+0x22>
 800bb04:	1b9b      	subs	r3, r3, r6
 800bb06:	50a3      	str	r3, [r4, r2]
 800bb08:	e7b3      	b.n	800ba72 <_malloc_r+0x22>
 800bb0a:	6862      	ldr	r2, [r4, #4]
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	bf0c      	ite	eq
 800bb10:	6032      	streq	r2, [r6, #0]
 800bb12:	605a      	strne	r2, [r3, #4]
 800bb14:	e7ec      	b.n	800baf0 <_malloc_r+0xa0>
 800bb16:	4623      	mov	r3, r4
 800bb18:	6864      	ldr	r4, [r4, #4]
 800bb1a:	e7b2      	b.n	800ba82 <_malloc_r+0x32>
 800bb1c:	4634      	mov	r4, r6
 800bb1e:	6876      	ldr	r6, [r6, #4]
 800bb20:	e7b9      	b.n	800ba96 <_malloc_r+0x46>
 800bb22:	230c      	movs	r3, #12
 800bb24:	603b      	str	r3, [r7, #0]
 800bb26:	4638      	mov	r0, r7
 800bb28:	f000 fde6 	bl	800c6f8 <__malloc_unlock>
 800bb2c:	e7a1      	b.n	800ba72 <_malloc_r+0x22>
 800bb2e:	6025      	str	r5, [r4, #0]
 800bb30:	e7de      	b.n	800baf0 <_malloc_r+0xa0>
 800bb32:	bf00      	nop
 800bb34:	200005c8 	.word	0x200005c8

0800bb38 <__ssputs_r>:
 800bb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb3c:	688e      	ldr	r6, [r1, #8]
 800bb3e:	429e      	cmp	r6, r3
 800bb40:	4682      	mov	sl, r0
 800bb42:	460c      	mov	r4, r1
 800bb44:	4690      	mov	r8, r2
 800bb46:	461f      	mov	r7, r3
 800bb48:	d838      	bhi.n	800bbbc <__ssputs_r+0x84>
 800bb4a:	898a      	ldrh	r2, [r1, #12]
 800bb4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb50:	d032      	beq.n	800bbb8 <__ssputs_r+0x80>
 800bb52:	6825      	ldr	r5, [r4, #0]
 800bb54:	6909      	ldr	r1, [r1, #16]
 800bb56:	eba5 0901 	sub.w	r9, r5, r1
 800bb5a:	6965      	ldr	r5, [r4, #20]
 800bb5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb64:	3301      	adds	r3, #1
 800bb66:	444b      	add	r3, r9
 800bb68:	106d      	asrs	r5, r5, #1
 800bb6a:	429d      	cmp	r5, r3
 800bb6c:	bf38      	it	cc
 800bb6e:	461d      	movcc	r5, r3
 800bb70:	0553      	lsls	r3, r2, #21
 800bb72:	d531      	bpl.n	800bbd8 <__ssputs_r+0xa0>
 800bb74:	4629      	mov	r1, r5
 800bb76:	f7ff ff6b 	bl	800ba50 <_malloc_r>
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	b950      	cbnz	r0, 800bb94 <__ssputs_r+0x5c>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	f8ca 3000 	str.w	r3, [sl]
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	6921      	ldr	r1, [r4, #16]
 800bb96:	464a      	mov	r2, r9
 800bb98:	f7ff fb46 	bl	800b228 <memcpy>
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba6:	81a3      	strh	r3, [r4, #12]
 800bba8:	6126      	str	r6, [r4, #16]
 800bbaa:	6165      	str	r5, [r4, #20]
 800bbac:	444e      	add	r6, r9
 800bbae:	eba5 0509 	sub.w	r5, r5, r9
 800bbb2:	6026      	str	r6, [r4, #0]
 800bbb4:	60a5      	str	r5, [r4, #8]
 800bbb6:	463e      	mov	r6, r7
 800bbb8:	42be      	cmp	r6, r7
 800bbba:	d900      	bls.n	800bbbe <__ssputs_r+0x86>
 800bbbc:	463e      	mov	r6, r7
 800bbbe:	6820      	ldr	r0, [r4, #0]
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	f000 fd78 	bl	800c6b8 <memmove>
 800bbc8:	68a3      	ldr	r3, [r4, #8]
 800bbca:	1b9b      	subs	r3, r3, r6
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	4433      	add	r3, r6
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e7db      	b.n	800bb90 <__ssputs_r+0x58>
 800bbd8:	462a      	mov	r2, r5
 800bbda:	f000 fd93 	bl	800c704 <_realloc_r>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d1e1      	bne.n	800bba8 <__ssputs_r+0x70>
 800bbe4:	6921      	ldr	r1, [r4, #16]
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	f7ff fec6 	bl	800b978 <_free_r>
 800bbec:	e7c7      	b.n	800bb7e <__ssputs_r+0x46>
	...

0800bbf0 <_svfiprintf_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	4698      	mov	r8, r3
 800bbf6:	898b      	ldrh	r3, [r1, #12]
 800bbf8:	061b      	lsls	r3, r3, #24
 800bbfa:	b09d      	sub	sp, #116	; 0x74
 800bbfc:	4607      	mov	r7, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	4614      	mov	r4, r2
 800bc02:	d50e      	bpl.n	800bc22 <_svfiprintf_r+0x32>
 800bc04:	690b      	ldr	r3, [r1, #16]
 800bc06:	b963      	cbnz	r3, 800bc22 <_svfiprintf_r+0x32>
 800bc08:	2140      	movs	r1, #64	; 0x40
 800bc0a:	f7ff ff21 	bl	800ba50 <_malloc_r>
 800bc0e:	6028      	str	r0, [r5, #0]
 800bc10:	6128      	str	r0, [r5, #16]
 800bc12:	b920      	cbnz	r0, 800bc1e <_svfiprintf_r+0x2e>
 800bc14:	230c      	movs	r3, #12
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	e0d1      	b.n	800bdc2 <_svfiprintf_r+0x1d2>
 800bc1e:	2340      	movs	r3, #64	; 0x40
 800bc20:	616b      	str	r3, [r5, #20]
 800bc22:	2300      	movs	r3, #0
 800bc24:	9309      	str	r3, [sp, #36]	; 0x24
 800bc26:	2320      	movs	r3, #32
 800bc28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc30:	2330      	movs	r3, #48	; 0x30
 800bc32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bddc <_svfiprintf_r+0x1ec>
 800bc36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc3a:	f04f 0901 	mov.w	r9, #1
 800bc3e:	4623      	mov	r3, r4
 800bc40:	469a      	mov	sl, r3
 800bc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc46:	b10a      	cbz	r2, 800bc4c <_svfiprintf_r+0x5c>
 800bc48:	2a25      	cmp	r2, #37	; 0x25
 800bc4a:	d1f9      	bne.n	800bc40 <_svfiprintf_r+0x50>
 800bc4c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc50:	d00b      	beq.n	800bc6a <_svfiprintf_r+0x7a>
 800bc52:	465b      	mov	r3, fp
 800bc54:	4622      	mov	r2, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ff6d 	bl	800bb38 <__ssputs_r>
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f000 80aa 	beq.w	800bdb8 <_svfiprintf_r+0x1c8>
 800bc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc66:	445a      	add	r2, fp
 800bc68:	9209      	str	r2, [sp, #36]	; 0x24
 800bc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80a2 	beq.w	800bdb8 <_svfiprintf_r+0x1c8>
 800bc74:	2300      	movs	r3, #0
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc7e:	f10a 0a01 	add.w	sl, sl, #1
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	9307      	str	r3, [sp, #28]
 800bc86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc8a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc8c:	4654      	mov	r4, sl
 800bc8e:	2205      	movs	r2, #5
 800bc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc94:	4851      	ldr	r0, [pc, #324]	; (800bddc <_svfiprintf_r+0x1ec>)
 800bc96:	f7f4 fadb 	bl	8000250 <memchr>
 800bc9a:	9a04      	ldr	r2, [sp, #16]
 800bc9c:	b9d8      	cbnz	r0, 800bcd6 <_svfiprintf_r+0xe6>
 800bc9e:	06d0      	lsls	r0, r2, #27
 800bca0:	bf44      	itt	mi
 800bca2:	2320      	movmi	r3, #32
 800bca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca8:	0711      	lsls	r1, r2, #28
 800bcaa:	bf44      	itt	mi
 800bcac:	232b      	movmi	r3, #43	; 0x2b
 800bcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb8:	d015      	beq.n	800bce6 <_svfiprintf_r+0xf6>
 800bcba:	9a07      	ldr	r2, [sp, #28]
 800bcbc:	4654      	mov	r4, sl
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f04f 0c0a 	mov.w	ip, #10
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcca:	3b30      	subs	r3, #48	; 0x30
 800bccc:	2b09      	cmp	r3, #9
 800bcce:	d94e      	bls.n	800bd6e <_svfiprintf_r+0x17e>
 800bcd0:	b1b0      	cbz	r0, 800bd00 <_svfiprintf_r+0x110>
 800bcd2:	9207      	str	r2, [sp, #28]
 800bcd4:	e014      	b.n	800bd00 <_svfiprintf_r+0x110>
 800bcd6:	eba0 0308 	sub.w	r3, r0, r8
 800bcda:	fa09 f303 	lsl.w	r3, r9, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	46a2      	mov	sl, r4
 800bce4:	e7d2      	b.n	800bc8c <_svfiprintf_r+0x9c>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d19      	adds	r1, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9103      	str	r1, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfbb      	ittet	lt
 800bcf2:	425b      	neglt	r3, r3
 800bcf4:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf8:	9307      	strge	r3, [sp, #28]
 800bcfa:	9307      	strlt	r3, [sp, #28]
 800bcfc:	bfb8      	it	lt
 800bcfe:	9204      	strlt	r2, [sp, #16]
 800bd00:	7823      	ldrb	r3, [r4, #0]
 800bd02:	2b2e      	cmp	r3, #46	; 0x2e
 800bd04:	d10c      	bne.n	800bd20 <_svfiprintf_r+0x130>
 800bd06:	7863      	ldrb	r3, [r4, #1]
 800bd08:	2b2a      	cmp	r3, #42	; 0x2a
 800bd0a:	d135      	bne.n	800bd78 <_svfiprintf_r+0x188>
 800bd0c:	9b03      	ldr	r3, [sp, #12]
 800bd0e:	1d1a      	adds	r2, r3, #4
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	9203      	str	r2, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bfb8      	it	lt
 800bd18:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd1c:	3402      	adds	r4, #2
 800bd1e:	9305      	str	r3, [sp, #20]
 800bd20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bdec <_svfiprintf_r+0x1fc>
 800bd24:	7821      	ldrb	r1, [r4, #0]
 800bd26:	2203      	movs	r2, #3
 800bd28:	4650      	mov	r0, sl
 800bd2a:	f7f4 fa91 	bl	8000250 <memchr>
 800bd2e:	b140      	cbz	r0, 800bd42 <_svfiprintf_r+0x152>
 800bd30:	2340      	movs	r3, #64	; 0x40
 800bd32:	eba0 000a 	sub.w	r0, r0, sl
 800bd36:	fa03 f000 	lsl.w	r0, r3, r0
 800bd3a:	9b04      	ldr	r3, [sp, #16]
 800bd3c:	4303      	orrs	r3, r0
 800bd3e:	3401      	adds	r4, #1
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd46:	4826      	ldr	r0, [pc, #152]	; (800bde0 <_svfiprintf_r+0x1f0>)
 800bd48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd4c:	2206      	movs	r2, #6
 800bd4e:	f7f4 fa7f 	bl	8000250 <memchr>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d038      	beq.n	800bdc8 <_svfiprintf_r+0x1d8>
 800bd56:	4b23      	ldr	r3, [pc, #140]	; (800bde4 <_svfiprintf_r+0x1f4>)
 800bd58:	bb1b      	cbnz	r3, 800bda2 <_svfiprintf_r+0x1b2>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	3307      	adds	r3, #7
 800bd5e:	f023 0307 	bic.w	r3, r3, #7
 800bd62:	3308      	adds	r3, #8
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd68:	4433      	add	r3, r6
 800bd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6c:	e767      	b.n	800bc3e <_svfiprintf_r+0x4e>
 800bd6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd72:	460c      	mov	r4, r1
 800bd74:	2001      	movs	r0, #1
 800bd76:	e7a5      	b.n	800bcc4 <_svfiprintf_r+0xd4>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	3401      	adds	r4, #1
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f04f 0c0a 	mov.w	ip, #10
 800bd84:	4620      	mov	r0, r4
 800bd86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd8a:	3a30      	subs	r2, #48	; 0x30
 800bd8c:	2a09      	cmp	r2, #9
 800bd8e:	d903      	bls.n	800bd98 <_svfiprintf_r+0x1a8>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d0c5      	beq.n	800bd20 <_svfiprintf_r+0x130>
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	e7c3      	b.n	800bd20 <_svfiprintf_r+0x130>
 800bd98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e7f0      	b.n	800bd84 <_svfiprintf_r+0x194>
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <_svfiprintf_r+0x1f8>)
 800bdaa:	a904      	add	r1, sp, #16
 800bdac:	4638      	mov	r0, r7
 800bdae:	f7fd fe9f 	bl	8009af0 <_printf_float>
 800bdb2:	1c42      	adds	r2, r0, #1
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	d1d6      	bne.n	800bd66 <_svfiprintf_r+0x176>
 800bdb8:	89ab      	ldrh	r3, [r5, #12]
 800bdba:	065b      	lsls	r3, r3, #25
 800bdbc:	f53f af2c 	bmi.w	800bc18 <_svfiprintf_r+0x28>
 800bdc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc2:	b01d      	add	sp, #116	; 0x74
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	ab03      	add	r3, sp, #12
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	462a      	mov	r2, r5
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <_svfiprintf_r+0x1f8>)
 800bdd0:	a904      	add	r1, sp, #16
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f7fe f930 	bl	800a038 <_printf_i>
 800bdd8:	e7eb      	b.n	800bdb2 <_svfiprintf_r+0x1c2>
 800bdda:	bf00      	nop
 800bddc:	0800d0fc 	.word	0x0800d0fc
 800bde0:	0800d106 	.word	0x0800d106
 800bde4:	08009af1 	.word	0x08009af1
 800bde8:	0800bb39 	.word	0x0800bb39
 800bdec:	0800d102 	.word	0x0800d102

0800bdf0 <__sfputc_r>:
 800bdf0:	6893      	ldr	r3, [r2, #8]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	b410      	push	{r4}
 800bdf8:	6093      	str	r3, [r2, #8]
 800bdfa:	da08      	bge.n	800be0e <__sfputc_r+0x1e>
 800bdfc:	6994      	ldr	r4, [r2, #24]
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	db01      	blt.n	800be06 <__sfputc_r+0x16>
 800be02:	290a      	cmp	r1, #10
 800be04:	d103      	bne.n	800be0e <__sfputc_r+0x1e>
 800be06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0a:	f000 b95b 	b.w	800c0c4 <__swbuf_r>
 800be0e:	6813      	ldr	r3, [r2, #0]
 800be10:	1c58      	adds	r0, r3, #1
 800be12:	6010      	str	r0, [r2, #0]
 800be14:	7019      	strb	r1, [r3, #0]
 800be16:	4608      	mov	r0, r1
 800be18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <__sfputs_r>:
 800be1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be20:	4606      	mov	r6, r0
 800be22:	460f      	mov	r7, r1
 800be24:	4614      	mov	r4, r2
 800be26:	18d5      	adds	r5, r2, r3
 800be28:	42ac      	cmp	r4, r5
 800be2a:	d101      	bne.n	800be30 <__sfputs_r+0x12>
 800be2c:	2000      	movs	r0, #0
 800be2e:	e007      	b.n	800be40 <__sfputs_r+0x22>
 800be30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be34:	463a      	mov	r2, r7
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ffda 	bl	800bdf0 <__sfputc_r>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d1f3      	bne.n	800be28 <__sfputs_r+0xa>
 800be40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be44 <_vfiprintf_r>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	460d      	mov	r5, r1
 800be4a:	b09d      	sub	sp, #116	; 0x74
 800be4c:	4614      	mov	r4, r2
 800be4e:	4698      	mov	r8, r3
 800be50:	4606      	mov	r6, r0
 800be52:	b118      	cbz	r0, 800be5c <_vfiprintf_r+0x18>
 800be54:	6983      	ldr	r3, [r0, #24]
 800be56:	b90b      	cbnz	r3, 800be5c <_vfiprintf_r+0x18>
 800be58:	f000 fb16 	bl	800c488 <__sinit>
 800be5c:	4b89      	ldr	r3, [pc, #548]	; (800c084 <_vfiprintf_r+0x240>)
 800be5e:	429d      	cmp	r5, r3
 800be60:	d11b      	bne.n	800be9a <_vfiprintf_r+0x56>
 800be62:	6875      	ldr	r5, [r6, #4]
 800be64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be66:	07d9      	lsls	r1, r3, #31
 800be68:	d405      	bmi.n	800be76 <_vfiprintf_r+0x32>
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	059a      	lsls	r2, r3, #22
 800be6e:	d402      	bmi.n	800be76 <_vfiprintf_r+0x32>
 800be70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be72:	f000 fba7 	bl	800c5c4 <__retarget_lock_acquire_recursive>
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	071b      	lsls	r3, r3, #28
 800be7a:	d501      	bpl.n	800be80 <_vfiprintf_r+0x3c>
 800be7c:	692b      	ldr	r3, [r5, #16]
 800be7e:	b9eb      	cbnz	r3, 800bebc <_vfiprintf_r+0x78>
 800be80:	4629      	mov	r1, r5
 800be82:	4630      	mov	r0, r6
 800be84:	f000 f970 	bl	800c168 <__swsetup_r>
 800be88:	b1c0      	cbz	r0, 800bebc <_vfiprintf_r+0x78>
 800be8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be8c:	07dc      	lsls	r4, r3, #31
 800be8e:	d50e      	bpl.n	800beae <_vfiprintf_r+0x6a>
 800be90:	f04f 30ff 	mov.w	r0, #4294967295
 800be94:	b01d      	add	sp, #116	; 0x74
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	4b7b      	ldr	r3, [pc, #492]	; (800c088 <_vfiprintf_r+0x244>)
 800be9c:	429d      	cmp	r5, r3
 800be9e:	d101      	bne.n	800bea4 <_vfiprintf_r+0x60>
 800bea0:	68b5      	ldr	r5, [r6, #8]
 800bea2:	e7df      	b.n	800be64 <_vfiprintf_r+0x20>
 800bea4:	4b79      	ldr	r3, [pc, #484]	; (800c08c <_vfiprintf_r+0x248>)
 800bea6:	429d      	cmp	r5, r3
 800bea8:	bf08      	it	eq
 800beaa:	68f5      	ldreq	r5, [r6, #12]
 800beac:	e7da      	b.n	800be64 <_vfiprintf_r+0x20>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	0598      	lsls	r0, r3, #22
 800beb2:	d4ed      	bmi.n	800be90 <_vfiprintf_r+0x4c>
 800beb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb6:	f000 fb86 	bl	800c5c6 <__retarget_lock_release_recursive>
 800beba:	e7e9      	b.n	800be90 <_vfiprintf_r+0x4c>
 800bebc:	2300      	movs	r3, #0
 800bebe:	9309      	str	r3, [sp, #36]	; 0x24
 800bec0:	2320      	movs	r3, #32
 800bec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bec6:	f8cd 800c 	str.w	r8, [sp, #12]
 800beca:	2330      	movs	r3, #48	; 0x30
 800becc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c090 <_vfiprintf_r+0x24c>
 800bed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bed4:	f04f 0901 	mov.w	r9, #1
 800bed8:	4623      	mov	r3, r4
 800beda:	469a      	mov	sl, r3
 800bedc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee0:	b10a      	cbz	r2, 800bee6 <_vfiprintf_r+0xa2>
 800bee2:	2a25      	cmp	r2, #37	; 0x25
 800bee4:	d1f9      	bne.n	800beda <_vfiprintf_r+0x96>
 800bee6:	ebba 0b04 	subs.w	fp, sl, r4
 800beea:	d00b      	beq.n	800bf04 <_vfiprintf_r+0xc0>
 800beec:	465b      	mov	r3, fp
 800beee:	4622      	mov	r2, r4
 800bef0:	4629      	mov	r1, r5
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ff93 	bl	800be1e <__sfputs_r>
 800bef8:	3001      	adds	r0, #1
 800befa:	f000 80aa 	beq.w	800c052 <_vfiprintf_r+0x20e>
 800befe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf00:	445a      	add	r2, fp
 800bf02:	9209      	str	r2, [sp, #36]	; 0x24
 800bf04:	f89a 3000 	ldrb.w	r3, [sl]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 80a2 	beq.w	800c052 <_vfiprintf_r+0x20e>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f04f 32ff 	mov.w	r2, #4294967295
 800bf14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf18:	f10a 0a01 	add.w	sl, sl, #1
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf24:	931a      	str	r3, [sp, #104]	; 0x68
 800bf26:	4654      	mov	r4, sl
 800bf28:	2205      	movs	r2, #5
 800bf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf2e:	4858      	ldr	r0, [pc, #352]	; (800c090 <_vfiprintf_r+0x24c>)
 800bf30:	f7f4 f98e 	bl	8000250 <memchr>
 800bf34:	9a04      	ldr	r2, [sp, #16]
 800bf36:	b9d8      	cbnz	r0, 800bf70 <_vfiprintf_r+0x12c>
 800bf38:	06d1      	lsls	r1, r2, #27
 800bf3a:	bf44      	itt	mi
 800bf3c:	2320      	movmi	r3, #32
 800bf3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf42:	0713      	lsls	r3, r2, #28
 800bf44:	bf44      	itt	mi
 800bf46:	232b      	movmi	r3, #43	; 0x2b
 800bf48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf50:	2b2a      	cmp	r3, #42	; 0x2a
 800bf52:	d015      	beq.n	800bf80 <_vfiprintf_r+0x13c>
 800bf54:	9a07      	ldr	r2, [sp, #28]
 800bf56:	4654      	mov	r4, sl
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f04f 0c0a 	mov.w	ip, #10
 800bf5e:	4621      	mov	r1, r4
 800bf60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf64:	3b30      	subs	r3, #48	; 0x30
 800bf66:	2b09      	cmp	r3, #9
 800bf68:	d94e      	bls.n	800c008 <_vfiprintf_r+0x1c4>
 800bf6a:	b1b0      	cbz	r0, 800bf9a <_vfiprintf_r+0x156>
 800bf6c:	9207      	str	r2, [sp, #28]
 800bf6e:	e014      	b.n	800bf9a <_vfiprintf_r+0x156>
 800bf70:	eba0 0308 	sub.w	r3, r0, r8
 800bf74:	fa09 f303 	lsl.w	r3, r9, r3
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	46a2      	mov	sl, r4
 800bf7e:	e7d2      	b.n	800bf26 <_vfiprintf_r+0xe2>
 800bf80:	9b03      	ldr	r3, [sp, #12]
 800bf82:	1d19      	adds	r1, r3, #4
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	9103      	str	r1, [sp, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	bfbb      	ittet	lt
 800bf8c:	425b      	neglt	r3, r3
 800bf8e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf92:	9307      	strge	r3, [sp, #28]
 800bf94:	9307      	strlt	r3, [sp, #28]
 800bf96:	bfb8      	it	lt
 800bf98:	9204      	strlt	r2, [sp, #16]
 800bf9a:	7823      	ldrb	r3, [r4, #0]
 800bf9c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf9e:	d10c      	bne.n	800bfba <_vfiprintf_r+0x176>
 800bfa0:	7863      	ldrb	r3, [r4, #1]
 800bfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa4:	d135      	bne.n	800c012 <_vfiprintf_r+0x1ce>
 800bfa6:	9b03      	ldr	r3, [sp, #12]
 800bfa8:	1d1a      	adds	r2, r3, #4
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	9203      	str	r2, [sp, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bfb8      	it	lt
 800bfb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfb6:	3402      	adds	r4, #2
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0a0 <_vfiprintf_r+0x25c>
 800bfbe:	7821      	ldrb	r1, [r4, #0]
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	f7f4 f944 	bl	8000250 <memchr>
 800bfc8:	b140      	cbz	r0, 800bfdc <_vfiprintf_r+0x198>
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	eba0 000a 	sub.w	r0, r0, sl
 800bfd0:	fa03 f000 	lsl.w	r0, r3, r0
 800bfd4:	9b04      	ldr	r3, [sp, #16]
 800bfd6:	4303      	orrs	r3, r0
 800bfd8:	3401      	adds	r4, #1
 800bfda:	9304      	str	r3, [sp, #16]
 800bfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe0:	482c      	ldr	r0, [pc, #176]	; (800c094 <_vfiprintf_r+0x250>)
 800bfe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfe6:	2206      	movs	r2, #6
 800bfe8:	f7f4 f932 	bl	8000250 <memchr>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d03f      	beq.n	800c070 <_vfiprintf_r+0x22c>
 800bff0:	4b29      	ldr	r3, [pc, #164]	; (800c098 <_vfiprintf_r+0x254>)
 800bff2:	bb1b      	cbnz	r3, 800c03c <_vfiprintf_r+0x1f8>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	3307      	adds	r3, #7
 800bff8:	f023 0307 	bic.w	r3, r3, #7
 800bffc:	3308      	adds	r3, #8
 800bffe:	9303      	str	r3, [sp, #12]
 800c000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c002:	443b      	add	r3, r7
 800c004:	9309      	str	r3, [sp, #36]	; 0x24
 800c006:	e767      	b.n	800bed8 <_vfiprintf_r+0x94>
 800c008:	fb0c 3202 	mla	r2, ip, r2, r3
 800c00c:	460c      	mov	r4, r1
 800c00e:	2001      	movs	r0, #1
 800c010:	e7a5      	b.n	800bf5e <_vfiprintf_r+0x11a>
 800c012:	2300      	movs	r3, #0
 800c014:	3401      	adds	r4, #1
 800c016:	9305      	str	r3, [sp, #20]
 800c018:	4619      	mov	r1, r3
 800c01a:	f04f 0c0a 	mov.w	ip, #10
 800c01e:	4620      	mov	r0, r4
 800c020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c024:	3a30      	subs	r2, #48	; 0x30
 800c026:	2a09      	cmp	r2, #9
 800c028:	d903      	bls.n	800c032 <_vfiprintf_r+0x1ee>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0c5      	beq.n	800bfba <_vfiprintf_r+0x176>
 800c02e:	9105      	str	r1, [sp, #20]
 800c030:	e7c3      	b.n	800bfba <_vfiprintf_r+0x176>
 800c032:	fb0c 2101 	mla	r1, ip, r1, r2
 800c036:	4604      	mov	r4, r0
 800c038:	2301      	movs	r3, #1
 800c03a:	e7f0      	b.n	800c01e <_vfiprintf_r+0x1da>
 800c03c:	ab03      	add	r3, sp, #12
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	462a      	mov	r2, r5
 800c042:	4b16      	ldr	r3, [pc, #88]	; (800c09c <_vfiprintf_r+0x258>)
 800c044:	a904      	add	r1, sp, #16
 800c046:	4630      	mov	r0, r6
 800c048:	f7fd fd52 	bl	8009af0 <_printf_float>
 800c04c:	4607      	mov	r7, r0
 800c04e:	1c78      	adds	r0, r7, #1
 800c050:	d1d6      	bne.n	800c000 <_vfiprintf_r+0x1bc>
 800c052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c054:	07d9      	lsls	r1, r3, #31
 800c056:	d405      	bmi.n	800c064 <_vfiprintf_r+0x220>
 800c058:	89ab      	ldrh	r3, [r5, #12]
 800c05a:	059a      	lsls	r2, r3, #22
 800c05c:	d402      	bmi.n	800c064 <_vfiprintf_r+0x220>
 800c05e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c060:	f000 fab1 	bl	800c5c6 <__retarget_lock_release_recursive>
 800c064:	89ab      	ldrh	r3, [r5, #12]
 800c066:	065b      	lsls	r3, r3, #25
 800c068:	f53f af12 	bmi.w	800be90 <_vfiprintf_r+0x4c>
 800c06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c06e:	e711      	b.n	800be94 <_vfiprintf_r+0x50>
 800c070:	ab03      	add	r3, sp, #12
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	462a      	mov	r2, r5
 800c076:	4b09      	ldr	r3, [pc, #36]	; (800c09c <_vfiprintf_r+0x258>)
 800c078:	a904      	add	r1, sp, #16
 800c07a:	4630      	mov	r0, r6
 800c07c:	f7fd ffdc 	bl	800a038 <_printf_i>
 800c080:	e7e4      	b.n	800c04c <_vfiprintf_r+0x208>
 800c082:	bf00      	nop
 800c084:	0800d130 	.word	0x0800d130
 800c088:	0800d150 	.word	0x0800d150
 800c08c:	0800d110 	.word	0x0800d110
 800c090:	0800d0fc 	.word	0x0800d0fc
 800c094:	0800d106 	.word	0x0800d106
 800c098:	08009af1 	.word	0x08009af1
 800c09c:	0800be1f 	.word	0x0800be1f
 800c0a0:	0800d102 	.word	0x0800d102

0800c0a4 <_sbrk_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4d06      	ldr	r5, [pc, #24]	; (800c0c0 <_sbrk_r+0x1c>)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	602b      	str	r3, [r5, #0]
 800c0b0:	f7f5 fe6c 	bl	8001d8c <_sbrk>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_sbrk_r+0x1a>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_sbrk_r+0x1a>
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	200005d4 	.word	0x200005d4

0800c0c4 <__swbuf_r>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	460e      	mov	r6, r1
 800c0c8:	4614      	mov	r4, r2
 800c0ca:	4605      	mov	r5, r0
 800c0cc:	b118      	cbz	r0, 800c0d6 <__swbuf_r+0x12>
 800c0ce:	6983      	ldr	r3, [r0, #24]
 800c0d0:	b90b      	cbnz	r3, 800c0d6 <__swbuf_r+0x12>
 800c0d2:	f000 f9d9 	bl	800c488 <__sinit>
 800c0d6:	4b21      	ldr	r3, [pc, #132]	; (800c15c <__swbuf_r+0x98>)
 800c0d8:	429c      	cmp	r4, r3
 800c0da:	d12b      	bne.n	800c134 <__swbuf_r+0x70>
 800c0dc:	686c      	ldr	r4, [r5, #4]
 800c0de:	69a3      	ldr	r3, [r4, #24]
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	071a      	lsls	r2, r3, #28
 800c0e6:	d52f      	bpl.n	800c148 <__swbuf_r+0x84>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	b36b      	cbz	r3, 800c148 <__swbuf_r+0x84>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	6820      	ldr	r0, [r4, #0]
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	6963      	ldr	r3, [r4, #20]
 800c0f4:	b2f6      	uxtb	r6, r6
 800c0f6:	4283      	cmp	r3, r0
 800c0f8:	4637      	mov	r7, r6
 800c0fa:	dc04      	bgt.n	800c106 <__swbuf_r+0x42>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 f92e 	bl	800c360 <_fflush_r>
 800c104:	bb30      	cbnz	r0, 800c154 <__swbuf_r+0x90>
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	3b01      	subs	r3, #1
 800c10a:	60a3      	str	r3, [r4, #8]
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	6022      	str	r2, [r4, #0]
 800c112:	701e      	strb	r6, [r3, #0]
 800c114:	6963      	ldr	r3, [r4, #20]
 800c116:	3001      	adds	r0, #1
 800c118:	4283      	cmp	r3, r0
 800c11a:	d004      	beq.n	800c126 <__swbuf_r+0x62>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	07db      	lsls	r3, r3, #31
 800c120:	d506      	bpl.n	800c130 <__swbuf_r+0x6c>
 800c122:	2e0a      	cmp	r6, #10
 800c124:	d104      	bne.n	800c130 <__swbuf_r+0x6c>
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 f919 	bl	800c360 <_fflush_r>
 800c12e:	b988      	cbnz	r0, 800c154 <__swbuf_r+0x90>
 800c130:	4638      	mov	r0, r7
 800c132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c134:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <__swbuf_r+0x9c>)
 800c136:	429c      	cmp	r4, r3
 800c138:	d101      	bne.n	800c13e <__swbuf_r+0x7a>
 800c13a:	68ac      	ldr	r4, [r5, #8]
 800c13c:	e7cf      	b.n	800c0de <__swbuf_r+0x1a>
 800c13e:	4b09      	ldr	r3, [pc, #36]	; (800c164 <__swbuf_r+0xa0>)
 800c140:	429c      	cmp	r4, r3
 800c142:	bf08      	it	eq
 800c144:	68ec      	ldreq	r4, [r5, #12]
 800c146:	e7ca      	b.n	800c0de <__swbuf_r+0x1a>
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f80c 	bl	800c168 <__swsetup_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0cb      	beq.n	800c0ec <__swbuf_r+0x28>
 800c154:	f04f 37ff 	mov.w	r7, #4294967295
 800c158:	e7ea      	b.n	800c130 <__swbuf_r+0x6c>
 800c15a:	bf00      	nop
 800c15c:	0800d130 	.word	0x0800d130
 800c160:	0800d150 	.word	0x0800d150
 800c164:	0800d110 	.word	0x0800d110

0800c168 <__swsetup_r>:
 800c168:	4b32      	ldr	r3, [pc, #200]	; (800c234 <__swsetup_r+0xcc>)
 800c16a:	b570      	push	{r4, r5, r6, lr}
 800c16c:	681d      	ldr	r5, [r3, #0]
 800c16e:	4606      	mov	r6, r0
 800c170:	460c      	mov	r4, r1
 800c172:	b125      	cbz	r5, 800c17e <__swsetup_r+0x16>
 800c174:	69ab      	ldr	r3, [r5, #24]
 800c176:	b913      	cbnz	r3, 800c17e <__swsetup_r+0x16>
 800c178:	4628      	mov	r0, r5
 800c17a:	f000 f985 	bl	800c488 <__sinit>
 800c17e:	4b2e      	ldr	r3, [pc, #184]	; (800c238 <__swsetup_r+0xd0>)
 800c180:	429c      	cmp	r4, r3
 800c182:	d10f      	bne.n	800c1a4 <__swsetup_r+0x3c>
 800c184:	686c      	ldr	r4, [r5, #4]
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c18c:	0719      	lsls	r1, r3, #28
 800c18e:	d42c      	bmi.n	800c1ea <__swsetup_r+0x82>
 800c190:	06dd      	lsls	r5, r3, #27
 800c192:	d411      	bmi.n	800c1b8 <__swsetup_r+0x50>
 800c194:	2309      	movs	r3, #9
 800c196:	6033      	str	r3, [r6, #0]
 800c198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	e03e      	b.n	800c222 <__swsetup_r+0xba>
 800c1a4:	4b25      	ldr	r3, [pc, #148]	; (800c23c <__swsetup_r+0xd4>)
 800c1a6:	429c      	cmp	r4, r3
 800c1a8:	d101      	bne.n	800c1ae <__swsetup_r+0x46>
 800c1aa:	68ac      	ldr	r4, [r5, #8]
 800c1ac:	e7eb      	b.n	800c186 <__swsetup_r+0x1e>
 800c1ae:	4b24      	ldr	r3, [pc, #144]	; (800c240 <__swsetup_r+0xd8>)
 800c1b0:	429c      	cmp	r4, r3
 800c1b2:	bf08      	it	eq
 800c1b4:	68ec      	ldreq	r4, [r5, #12]
 800c1b6:	e7e6      	b.n	800c186 <__swsetup_r+0x1e>
 800c1b8:	0758      	lsls	r0, r3, #29
 800c1ba:	d512      	bpl.n	800c1e2 <__swsetup_r+0x7a>
 800c1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1be:	b141      	cbz	r1, 800c1d2 <__swsetup_r+0x6a>
 800c1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c4:	4299      	cmp	r1, r3
 800c1c6:	d002      	beq.n	800c1ce <__swsetup_r+0x66>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff fbd5 	bl	800b978 <_free_r>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6363      	str	r3, [r4, #52]	; 0x34
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1d8:	81a3      	strh	r3, [r4, #12]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6063      	str	r3, [r4, #4]
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f043 0308 	orr.w	r3, r3, #8
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	b94b      	cbnz	r3, 800c202 <__swsetup_r+0x9a>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1f8:	d003      	beq.n	800c202 <__swsetup_r+0x9a>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f000 fa09 	bl	800c614 <__smakebuf_r>
 800c202:	89a0      	ldrh	r0, [r4, #12]
 800c204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c208:	f010 0301 	ands.w	r3, r0, #1
 800c20c:	d00a      	beq.n	800c224 <__swsetup_r+0xbc>
 800c20e:	2300      	movs	r3, #0
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	6963      	ldr	r3, [r4, #20]
 800c214:	425b      	negs	r3, r3
 800c216:	61a3      	str	r3, [r4, #24]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	b943      	cbnz	r3, 800c22e <__swsetup_r+0xc6>
 800c21c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c220:	d1ba      	bne.n	800c198 <__swsetup_r+0x30>
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	0781      	lsls	r1, r0, #30
 800c226:	bf58      	it	pl
 800c228:	6963      	ldrpl	r3, [r4, #20]
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	e7f4      	b.n	800c218 <__swsetup_r+0xb0>
 800c22e:	2000      	movs	r0, #0
 800c230:	e7f7      	b.n	800c222 <__swsetup_r+0xba>
 800c232:	bf00      	nop
 800c234:	2000000c 	.word	0x2000000c
 800c238:	0800d130 	.word	0x0800d130
 800c23c:	0800d150 	.word	0x0800d150
 800c240:	0800d110 	.word	0x0800d110

0800c244 <abort>:
 800c244:	b508      	push	{r3, lr}
 800c246:	2006      	movs	r0, #6
 800c248:	f000 fab4 	bl	800c7b4 <raise>
 800c24c:	2001      	movs	r0, #1
 800c24e:	f7f5 fd25 	bl	8001c9c <_exit>
	...

0800c254 <__sflush_r>:
 800c254:	898a      	ldrh	r2, [r1, #12]
 800c256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25a:	4605      	mov	r5, r0
 800c25c:	0710      	lsls	r0, r2, #28
 800c25e:	460c      	mov	r4, r1
 800c260:	d458      	bmi.n	800c314 <__sflush_r+0xc0>
 800c262:	684b      	ldr	r3, [r1, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc05      	bgt.n	800c274 <__sflush_r+0x20>
 800c268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	dc02      	bgt.n	800c274 <__sflush_r+0x20>
 800c26e:	2000      	movs	r0, #0
 800c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c276:	2e00      	cmp	r6, #0
 800c278:	d0f9      	beq.n	800c26e <__sflush_r+0x1a>
 800c27a:	2300      	movs	r3, #0
 800c27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c280:	682f      	ldr	r7, [r5, #0]
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	d032      	beq.n	800c2ec <__sflush_r+0x98>
 800c286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	075a      	lsls	r2, r3, #29
 800c28c:	d505      	bpl.n	800c29a <__sflush_r+0x46>
 800c28e:	6863      	ldr	r3, [r4, #4]
 800c290:	1ac0      	subs	r0, r0, r3
 800c292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c294:	b10b      	cbz	r3, 800c29a <__sflush_r+0x46>
 800c296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c298:	1ac0      	subs	r0, r0, r3
 800c29a:	2300      	movs	r3, #0
 800c29c:	4602      	mov	r2, r0
 800c29e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2a0:	6a21      	ldr	r1, [r4, #32]
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b0      	blx	r6
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	d106      	bne.n	800c2ba <__sflush_r+0x66>
 800c2ac:	6829      	ldr	r1, [r5, #0]
 800c2ae:	291d      	cmp	r1, #29
 800c2b0:	d82c      	bhi.n	800c30c <__sflush_r+0xb8>
 800c2b2:	4a2a      	ldr	r2, [pc, #168]	; (800c35c <__sflush_r+0x108>)
 800c2b4:	40ca      	lsrs	r2, r1
 800c2b6:	07d6      	lsls	r6, r2, #31
 800c2b8:	d528      	bpl.n	800c30c <__sflush_r+0xb8>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	6062      	str	r2, [r4, #4]
 800c2be:	04d9      	lsls	r1, r3, #19
 800c2c0:	6922      	ldr	r2, [r4, #16]
 800c2c2:	6022      	str	r2, [r4, #0]
 800c2c4:	d504      	bpl.n	800c2d0 <__sflush_r+0x7c>
 800c2c6:	1c42      	adds	r2, r0, #1
 800c2c8:	d101      	bne.n	800c2ce <__sflush_r+0x7a>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	b903      	cbnz	r3, 800c2d0 <__sflush_r+0x7c>
 800c2ce:	6560      	str	r0, [r4, #84]	; 0x54
 800c2d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2d2:	602f      	str	r7, [r5, #0]
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	d0ca      	beq.n	800c26e <__sflush_r+0x1a>
 800c2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2dc:	4299      	cmp	r1, r3
 800c2de:	d002      	beq.n	800c2e6 <__sflush_r+0x92>
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	f7ff fb49 	bl	800b978 <_free_r>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	6360      	str	r0, [r4, #52]	; 0x34
 800c2ea:	e7c1      	b.n	800c270 <__sflush_r+0x1c>
 800c2ec:	6a21      	ldr	r1, [r4, #32]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b0      	blx	r6
 800c2f4:	1c41      	adds	r1, r0, #1
 800c2f6:	d1c7      	bne.n	800c288 <__sflush_r+0x34>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0c4      	beq.n	800c288 <__sflush_r+0x34>
 800c2fe:	2b1d      	cmp	r3, #29
 800c300:	d001      	beq.n	800c306 <__sflush_r+0xb2>
 800c302:	2b16      	cmp	r3, #22
 800c304:	d101      	bne.n	800c30a <__sflush_r+0xb6>
 800c306:	602f      	str	r7, [r5, #0]
 800c308:	e7b1      	b.n	800c26e <__sflush_r+0x1a>
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c310:	81a3      	strh	r3, [r4, #12]
 800c312:	e7ad      	b.n	800c270 <__sflush_r+0x1c>
 800c314:	690f      	ldr	r7, [r1, #16]
 800c316:	2f00      	cmp	r7, #0
 800c318:	d0a9      	beq.n	800c26e <__sflush_r+0x1a>
 800c31a:	0793      	lsls	r3, r2, #30
 800c31c:	680e      	ldr	r6, [r1, #0]
 800c31e:	bf08      	it	eq
 800c320:	694b      	ldreq	r3, [r1, #20]
 800c322:	600f      	str	r7, [r1, #0]
 800c324:	bf18      	it	ne
 800c326:	2300      	movne	r3, #0
 800c328:	eba6 0807 	sub.w	r8, r6, r7
 800c32c:	608b      	str	r3, [r1, #8]
 800c32e:	f1b8 0f00 	cmp.w	r8, #0
 800c332:	dd9c      	ble.n	800c26e <__sflush_r+0x1a>
 800c334:	6a21      	ldr	r1, [r4, #32]
 800c336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c338:	4643      	mov	r3, r8
 800c33a:	463a      	mov	r2, r7
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b0      	blx	r6
 800c340:	2800      	cmp	r0, #0
 800c342:	dc06      	bgt.n	800c352 <__sflush_r+0xfe>
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e78e      	b.n	800c270 <__sflush_r+0x1c>
 800c352:	4407      	add	r7, r0
 800c354:	eba8 0800 	sub.w	r8, r8, r0
 800c358:	e7e9      	b.n	800c32e <__sflush_r+0xda>
 800c35a:	bf00      	nop
 800c35c:	20400001 	.word	0x20400001

0800c360 <_fflush_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	690b      	ldr	r3, [r1, #16]
 800c364:	4605      	mov	r5, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b913      	cbnz	r3, 800c370 <_fflush_r+0x10>
 800c36a:	2500      	movs	r5, #0
 800c36c:	4628      	mov	r0, r5
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	b118      	cbz	r0, 800c37a <_fflush_r+0x1a>
 800c372:	6983      	ldr	r3, [r0, #24]
 800c374:	b90b      	cbnz	r3, 800c37a <_fflush_r+0x1a>
 800c376:	f000 f887 	bl	800c488 <__sinit>
 800c37a:	4b14      	ldr	r3, [pc, #80]	; (800c3cc <_fflush_r+0x6c>)
 800c37c:	429c      	cmp	r4, r3
 800c37e:	d11b      	bne.n	800c3b8 <_fflush_r+0x58>
 800c380:	686c      	ldr	r4, [r5, #4]
 800c382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d0ef      	beq.n	800c36a <_fflush_r+0xa>
 800c38a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c38c:	07d0      	lsls	r0, r2, #31
 800c38e:	d404      	bmi.n	800c39a <_fflush_r+0x3a>
 800c390:	0599      	lsls	r1, r3, #22
 800c392:	d402      	bmi.n	800c39a <_fflush_r+0x3a>
 800c394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c396:	f000 f915 	bl	800c5c4 <__retarget_lock_acquire_recursive>
 800c39a:	4628      	mov	r0, r5
 800c39c:	4621      	mov	r1, r4
 800c39e:	f7ff ff59 	bl	800c254 <__sflush_r>
 800c3a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3a4:	07da      	lsls	r2, r3, #31
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	d4e0      	bmi.n	800c36c <_fflush_r+0xc>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	059b      	lsls	r3, r3, #22
 800c3ae:	d4dd      	bmi.n	800c36c <_fflush_r+0xc>
 800c3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b2:	f000 f908 	bl	800c5c6 <__retarget_lock_release_recursive>
 800c3b6:	e7d9      	b.n	800c36c <_fflush_r+0xc>
 800c3b8:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <_fflush_r+0x70>)
 800c3ba:	429c      	cmp	r4, r3
 800c3bc:	d101      	bne.n	800c3c2 <_fflush_r+0x62>
 800c3be:	68ac      	ldr	r4, [r5, #8]
 800c3c0:	e7df      	b.n	800c382 <_fflush_r+0x22>
 800c3c2:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <_fflush_r+0x74>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	bf08      	it	eq
 800c3c8:	68ec      	ldreq	r4, [r5, #12]
 800c3ca:	e7da      	b.n	800c382 <_fflush_r+0x22>
 800c3cc:	0800d130 	.word	0x0800d130
 800c3d0:	0800d150 	.word	0x0800d150
 800c3d4:	0800d110 	.word	0x0800d110

0800c3d8 <std>:
 800c3d8:	2300      	movs	r3, #0
 800c3da:	b510      	push	{r4, lr}
 800c3dc:	4604      	mov	r4, r0
 800c3de:	e9c0 3300 	strd	r3, r3, [r0]
 800c3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3e6:	6083      	str	r3, [r0, #8]
 800c3e8:	8181      	strh	r1, [r0, #12]
 800c3ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c3ec:	81c2      	strh	r2, [r0, #14]
 800c3ee:	6183      	str	r3, [r0, #24]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	2208      	movs	r2, #8
 800c3f4:	305c      	adds	r0, #92	; 0x5c
 800c3f6:	f7fd fad3 	bl	80099a0 <memset>
 800c3fa:	4b05      	ldr	r3, [pc, #20]	; (800c410 <std+0x38>)
 800c3fc:	6263      	str	r3, [r4, #36]	; 0x24
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <std+0x3c>)
 800c400:	62a3      	str	r3, [r4, #40]	; 0x28
 800c402:	4b05      	ldr	r3, [pc, #20]	; (800c418 <std+0x40>)
 800c404:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c406:	4b05      	ldr	r3, [pc, #20]	; (800c41c <std+0x44>)
 800c408:	6224      	str	r4, [r4, #32]
 800c40a:	6323      	str	r3, [r4, #48]	; 0x30
 800c40c:	bd10      	pop	{r4, pc}
 800c40e:	bf00      	nop
 800c410:	0800c7ed 	.word	0x0800c7ed
 800c414:	0800c80f 	.word	0x0800c80f
 800c418:	0800c847 	.word	0x0800c847
 800c41c:	0800c86b 	.word	0x0800c86b

0800c420 <_cleanup_r>:
 800c420:	4901      	ldr	r1, [pc, #4]	; (800c428 <_cleanup_r+0x8>)
 800c422:	f000 b8af 	b.w	800c584 <_fwalk_reent>
 800c426:	bf00      	nop
 800c428:	0800c361 	.word	0x0800c361

0800c42c <__sfmoreglue>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	2268      	movs	r2, #104	; 0x68
 800c430:	1e4d      	subs	r5, r1, #1
 800c432:	4355      	muls	r5, r2
 800c434:	460e      	mov	r6, r1
 800c436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c43a:	f7ff fb09 	bl	800ba50 <_malloc_r>
 800c43e:	4604      	mov	r4, r0
 800c440:	b140      	cbz	r0, 800c454 <__sfmoreglue+0x28>
 800c442:	2100      	movs	r1, #0
 800c444:	e9c0 1600 	strd	r1, r6, [r0]
 800c448:	300c      	adds	r0, #12
 800c44a:	60a0      	str	r0, [r4, #8]
 800c44c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c450:	f7fd faa6 	bl	80099a0 <memset>
 800c454:	4620      	mov	r0, r4
 800c456:	bd70      	pop	{r4, r5, r6, pc}

0800c458 <__sfp_lock_acquire>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__sfp_lock_acquire+0x8>)
 800c45a:	f000 b8b3 	b.w	800c5c4 <__retarget_lock_acquire_recursive>
 800c45e:	bf00      	nop
 800c460:	200005d1 	.word	0x200005d1

0800c464 <__sfp_lock_release>:
 800c464:	4801      	ldr	r0, [pc, #4]	; (800c46c <__sfp_lock_release+0x8>)
 800c466:	f000 b8ae 	b.w	800c5c6 <__retarget_lock_release_recursive>
 800c46a:	bf00      	nop
 800c46c:	200005d1 	.word	0x200005d1

0800c470 <__sinit_lock_acquire>:
 800c470:	4801      	ldr	r0, [pc, #4]	; (800c478 <__sinit_lock_acquire+0x8>)
 800c472:	f000 b8a7 	b.w	800c5c4 <__retarget_lock_acquire_recursive>
 800c476:	bf00      	nop
 800c478:	200005d2 	.word	0x200005d2

0800c47c <__sinit_lock_release>:
 800c47c:	4801      	ldr	r0, [pc, #4]	; (800c484 <__sinit_lock_release+0x8>)
 800c47e:	f000 b8a2 	b.w	800c5c6 <__retarget_lock_release_recursive>
 800c482:	bf00      	nop
 800c484:	200005d2 	.word	0x200005d2

0800c488 <__sinit>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	4604      	mov	r4, r0
 800c48c:	f7ff fff0 	bl	800c470 <__sinit_lock_acquire>
 800c490:	69a3      	ldr	r3, [r4, #24]
 800c492:	b11b      	cbz	r3, 800c49c <__sinit+0x14>
 800c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c498:	f7ff bff0 	b.w	800c47c <__sinit_lock_release>
 800c49c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4a0:	6523      	str	r3, [r4, #80]	; 0x50
 800c4a2:	4b13      	ldr	r3, [pc, #76]	; (800c4f0 <__sinit+0x68>)
 800c4a4:	4a13      	ldr	r2, [pc, #76]	; (800c4f4 <__sinit+0x6c>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	bf04      	itt	eq
 800c4ae:	2301      	moveq	r3, #1
 800c4b0:	61a3      	streq	r3, [r4, #24]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 f820 	bl	800c4f8 <__sfp>
 800c4b8:	6060      	str	r0, [r4, #4]
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 f81c 	bl	800c4f8 <__sfp>
 800c4c0:	60a0      	str	r0, [r4, #8]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 f818 	bl	800c4f8 <__sfp>
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	60e0      	str	r0, [r4, #12]
 800c4cc:	2104      	movs	r1, #4
 800c4ce:	6860      	ldr	r0, [r4, #4]
 800c4d0:	f7ff ff82 	bl	800c3d8 <std>
 800c4d4:	68a0      	ldr	r0, [r4, #8]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	2109      	movs	r1, #9
 800c4da:	f7ff ff7d 	bl	800c3d8 <std>
 800c4de:	68e0      	ldr	r0, [r4, #12]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	2112      	movs	r1, #18
 800c4e4:	f7ff ff78 	bl	800c3d8 <std>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	61a3      	str	r3, [r4, #24]
 800c4ec:	e7d2      	b.n	800c494 <__sinit+0xc>
 800c4ee:	bf00      	nop
 800c4f0:	0800cd40 	.word	0x0800cd40
 800c4f4:	0800c421 	.word	0x0800c421

0800c4f8 <__sfp>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	f7ff ffac 	bl	800c458 <__sfp_lock_acquire>
 800c500:	4b1e      	ldr	r3, [pc, #120]	; (800c57c <__sfp+0x84>)
 800c502:	681e      	ldr	r6, [r3, #0]
 800c504:	69b3      	ldr	r3, [r6, #24]
 800c506:	b913      	cbnz	r3, 800c50e <__sfp+0x16>
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff ffbd 	bl	800c488 <__sinit>
 800c50e:	3648      	adds	r6, #72	; 0x48
 800c510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c514:	3b01      	subs	r3, #1
 800c516:	d503      	bpl.n	800c520 <__sfp+0x28>
 800c518:	6833      	ldr	r3, [r6, #0]
 800c51a:	b30b      	cbz	r3, 800c560 <__sfp+0x68>
 800c51c:	6836      	ldr	r6, [r6, #0]
 800c51e:	e7f7      	b.n	800c510 <__sfp+0x18>
 800c520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c524:	b9d5      	cbnz	r5, 800c55c <__sfp+0x64>
 800c526:	4b16      	ldr	r3, [pc, #88]	; (800c580 <__sfp+0x88>)
 800c528:	60e3      	str	r3, [r4, #12]
 800c52a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c52e:	6665      	str	r5, [r4, #100]	; 0x64
 800c530:	f000 f847 	bl	800c5c2 <__retarget_lock_init_recursive>
 800c534:	f7ff ff96 	bl	800c464 <__sfp_lock_release>
 800c538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c53c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c540:	6025      	str	r5, [r4, #0]
 800c542:	61a5      	str	r5, [r4, #24]
 800c544:	2208      	movs	r2, #8
 800c546:	4629      	mov	r1, r5
 800c548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c54c:	f7fd fa28 	bl	80099a0 <memset>
 800c550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c558:	4620      	mov	r0, r4
 800c55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c55c:	3468      	adds	r4, #104	; 0x68
 800c55e:	e7d9      	b.n	800c514 <__sfp+0x1c>
 800c560:	2104      	movs	r1, #4
 800c562:	4638      	mov	r0, r7
 800c564:	f7ff ff62 	bl	800c42c <__sfmoreglue>
 800c568:	4604      	mov	r4, r0
 800c56a:	6030      	str	r0, [r6, #0]
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d1d5      	bne.n	800c51c <__sfp+0x24>
 800c570:	f7ff ff78 	bl	800c464 <__sfp_lock_release>
 800c574:	230c      	movs	r3, #12
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	e7ee      	b.n	800c558 <__sfp+0x60>
 800c57a:	bf00      	nop
 800c57c:	0800cd40 	.word	0x0800cd40
 800c580:	ffff0001 	.word	0xffff0001

0800c584 <_fwalk_reent>:
 800c584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c588:	4606      	mov	r6, r0
 800c58a:	4688      	mov	r8, r1
 800c58c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c590:	2700      	movs	r7, #0
 800c592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c596:	f1b9 0901 	subs.w	r9, r9, #1
 800c59a:	d505      	bpl.n	800c5a8 <_fwalk_reent+0x24>
 800c59c:	6824      	ldr	r4, [r4, #0]
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d1f7      	bne.n	800c592 <_fwalk_reent+0xe>
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a8:	89ab      	ldrh	r3, [r5, #12]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d907      	bls.n	800c5be <_fwalk_reent+0x3a>
 800c5ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	d003      	beq.n	800c5be <_fwalk_reent+0x3a>
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	47c0      	blx	r8
 800c5bc:	4307      	orrs	r7, r0
 800c5be:	3568      	adds	r5, #104	; 0x68
 800c5c0:	e7e9      	b.n	800c596 <_fwalk_reent+0x12>

0800c5c2 <__retarget_lock_init_recursive>:
 800c5c2:	4770      	bx	lr

0800c5c4 <__retarget_lock_acquire_recursive>:
 800c5c4:	4770      	bx	lr

0800c5c6 <__retarget_lock_release_recursive>:
 800c5c6:	4770      	bx	lr

0800c5c8 <__swhatbuf_r>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	460e      	mov	r6, r1
 800c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d0:	2900      	cmp	r1, #0
 800c5d2:	b096      	sub	sp, #88	; 0x58
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	461d      	mov	r5, r3
 800c5d8:	da08      	bge.n	800c5ec <__swhatbuf_r+0x24>
 800c5da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	602a      	str	r2, [r5, #0]
 800c5e2:	061a      	lsls	r2, r3, #24
 800c5e4:	d410      	bmi.n	800c608 <__swhatbuf_r+0x40>
 800c5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ea:	e00e      	b.n	800c60a <__swhatbuf_r+0x42>
 800c5ec:	466a      	mov	r2, sp
 800c5ee:	f000 f96f 	bl	800c8d0 <_fstat_r>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	dbf1      	blt.n	800c5da <__swhatbuf_r+0x12>
 800c5f6:	9a01      	ldr	r2, [sp, #4]
 800c5f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c600:	425a      	negs	r2, r3
 800c602:	415a      	adcs	r2, r3
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	e7ee      	b.n	800c5e6 <__swhatbuf_r+0x1e>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	2000      	movs	r0, #0
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	b016      	add	sp, #88	; 0x58
 800c610:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c614 <__smakebuf_r>:
 800c614:	898b      	ldrh	r3, [r1, #12]
 800c616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c618:	079d      	lsls	r5, r3, #30
 800c61a:	4606      	mov	r6, r0
 800c61c:	460c      	mov	r4, r1
 800c61e:	d507      	bpl.n	800c630 <__smakebuf_r+0x1c>
 800c620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	2301      	movs	r3, #1
 800c62a:	6163      	str	r3, [r4, #20]
 800c62c:	b002      	add	sp, #8
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	ab01      	add	r3, sp, #4
 800c632:	466a      	mov	r2, sp
 800c634:	f7ff ffc8 	bl	800c5c8 <__swhatbuf_r>
 800c638:	9900      	ldr	r1, [sp, #0]
 800c63a:	4605      	mov	r5, r0
 800c63c:	4630      	mov	r0, r6
 800c63e:	f7ff fa07 	bl	800ba50 <_malloc_r>
 800c642:	b948      	cbnz	r0, 800c658 <__smakebuf_r+0x44>
 800c644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c648:	059a      	lsls	r2, r3, #22
 800c64a:	d4ef      	bmi.n	800c62c <__smakebuf_r+0x18>
 800c64c:	f023 0303 	bic.w	r3, r3, #3
 800c650:	f043 0302 	orr.w	r3, r3, #2
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	e7e3      	b.n	800c620 <__smakebuf_r+0xc>
 800c658:	4b0d      	ldr	r3, [pc, #52]	; (800c690 <__smakebuf_r+0x7c>)
 800c65a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	6020      	str	r0, [r4, #0]
 800c660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	6163      	str	r3, [r4, #20]
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	6120      	str	r0, [r4, #16]
 800c66e:	b15b      	cbz	r3, 800c688 <__smakebuf_r+0x74>
 800c670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c674:	4630      	mov	r0, r6
 800c676:	f000 f93d 	bl	800c8f4 <_isatty_r>
 800c67a:	b128      	cbz	r0, 800c688 <__smakebuf_r+0x74>
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	f043 0301 	orr.w	r3, r3, #1
 800c686:	81a3      	strh	r3, [r4, #12]
 800c688:	89a0      	ldrh	r0, [r4, #12]
 800c68a:	4305      	orrs	r5, r0
 800c68c:	81a5      	strh	r5, [r4, #12]
 800c68e:	e7cd      	b.n	800c62c <__smakebuf_r+0x18>
 800c690:	0800c421 	.word	0x0800c421

0800c694 <__ascii_mbtowc>:
 800c694:	b082      	sub	sp, #8
 800c696:	b901      	cbnz	r1, 800c69a <__ascii_mbtowc+0x6>
 800c698:	a901      	add	r1, sp, #4
 800c69a:	b142      	cbz	r2, 800c6ae <__ascii_mbtowc+0x1a>
 800c69c:	b14b      	cbz	r3, 800c6b2 <__ascii_mbtowc+0x1e>
 800c69e:	7813      	ldrb	r3, [r2, #0]
 800c6a0:	600b      	str	r3, [r1, #0]
 800c6a2:	7812      	ldrb	r2, [r2, #0]
 800c6a4:	1e10      	subs	r0, r2, #0
 800c6a6:	bf18      	it	ne
 800c6a8:	2001      	movne	r0, #1
 800c6aa:	b002      	add	sp, #8
 800c6ac:	4770      	bx	lr
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	e7fb      	b.n	800c6aa <__ascii_mbtowc+0x16>
 800c6b2:	f06f 0001 	mvn.w	r0, #1
 800c6b6:	e7f8      	b.n	800c6aa <__ascii_mbtowc+0x16>

0800c6b8 <memmove>:
 800c6b8:	4288      	cmp	r0, r1
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	eb01 0402 	add.w	r4, r1, r2
 800c6c0:	d902      	bls.n	800c6c8 <memmove+0x10>
 800c6c2:	4284      	cmp	r4, r0
 800c6c4:	4623      	mov	r3, r4
 800c6c6:	d807      	bhi.n	800c6d8 <memmove+0x20>
 800c6c8:	1e43      	subs	r3, r0, #1
 800c6ca:	42a1      	cmp	r1, r4
 800c6cc:	d008      	beq.n	800c6e0 <memmove+0x28>
 800c6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6d6:	e7f8      	b.n	800c6ca <memmove+0x12>
 800c6d8:	4402      	add	r2, r0
 800c6da:	4601      	mov	r1, r0
 800c6dc:	428a      	cmp	r2, r1
 800c6de:	d100      	bne.n	800c6e2 <memmove+0x2a>
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ea:	e7f7      	b.n	800c6dc <memmove+0x24>

0800c6ec <__malloc_lock>:
 800c6ec:	4801      	ldr	r0, [pc, #4]	; (800c6f4 <__malloc_lock+0x8>)
 800c6ee:	f7ff bf69 	b.w	800c5c4 <__retarget_lock_acquire_recursive>
 800c6f2:	bf00      	nop
 800c6f4:	200005d0 	.word	0x200005d0

0800c6f8 <__malloc_unlock>:
 800c6f8:	4801      	ldr	r0, [pc, #4]	; (800c700 <__malloc_unlock+0x8>)
 800c6fa:	f7ff bf64 	b.w	800c5c6 <__retarget_lock_release_recursive>
 800c6fe:	bf00      	nop
 800c700:	200005d0 	.word	0x200005d0

0800c704 <_realloc_r>:
 800c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c708:	4680      	mov	r8, r0
 800c70a:	4614      	mov	r4, r2
 800c70c:	460e      	mov	r6, r1
 800c70e:	b921      	cbnz	r1, 800c71a <_realloc_r+0x16>
 800c710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c714:	4611      	mov	r1, r2
 800c716:	f7ff b99b 	b.w	800ba50 <_malloc_r>
 800c71a:	b92a      	cbnz	r2, 800c728 <_realloc_r+0x24>
 800c71c:	f7ff f92c 	bl	800b978 <_free_r>
 800c720:	4625      	mov	r5, r4
 800c722:	4628      	mov	r0, r5
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	f000 f906 	bl	800c938 <_malloc_usable_size_r>
 800c72c:	4284      	cmp	r4, r0
 800c72e:	4607      	mov	r7, r0
 800c730:	d802      	bhi.n	800c738 <_realloc_r+0x34>
 800c732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c736:	d812      	bhi.n	800c75e <_realloc_r+0x5a>
 800c738:	4621      	mov	r1, r4
 800c73a:	4640      	mov	r0, r8
 800c73c:	f7ff f988 	bl	800ba50 <_malloc_r>
 800c740:	4605      	mov	r5, r0
 800c742:	2800      	cmp	r0, #0
 800c744:	d0ed      	beq.n	800c722 <_realloc_r+0x1e>
 800c746:	42bc      	cmp	r4, r7
 800c748:	4622      	mov	r2, r4
 800c74a:	4631      	mov	r1, r6
 800c74c:	bf28      	it	cs
 800c74e:	463a      	movcs	r2, r7
 800c750:	f7fe fd6a 	bl	800b228 <memcpy>
 800c754:	4631      	mov	r1, r6
 800c756:	4640      	mov	r0, r8
 800c758:	f7ff f90e 	bl	800b978 <_free_r>
 800c75c:	e7e1      	b.n	800c722 <_realloc_r+0x1e>
 800c75e:	4635      	mov	r5, r6
 800c760:	e7df      	b.n	800c722 <_realloc_r+0x1e>

0800c762 <_raise_r>:
 800c762:	291f      	cmp	r1, #31
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4604      	mov	r4, r0
 800c768:	460d      	mov	r5, r1
 800c76a:	d904      	bls.n	800c776 <_raise_r+0x14>
 800c76c:	2316      	movs	r3, #22
 800c76e:	6003      	str	r3, [r0, #0]
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	bd38      	pop	{r3, r4, r5, pc}
 800c776:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c778:	b112      	cbz	r2, 800c780 <_raise_r+0x1e>
 800c77a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c77e:	b94b      	cbnz	r3, 800c794 <_raise_r+0x32>
 800c780:	4620      	mov	r0, r4
 800c782:	f000 f831 	bl	800c7e8 <_getpid_r>
 800c786:	462a      	mov	r2, r5
 800c788:	4601      	mov	r1, r0
 800c78a:	4620      	mov	r0, r4
 800c78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c790:	f000 b818 	b.w	800c7c4 <_kill_r>
 800c794:	2b01      	cmp	r3, #1
 800c796:	d00a      	beq.n	800c7ae <_raise_r+0x4c>
 800c798:	1c59      	adds	r1, r3, #1
 800c79a:	d103      	bne.n	800c7a4 <_raise_r+0x42>
 800c79c:	2316      	movs	r3, #22
 800c79e:	6003      	str	r3, [r0, #0]
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	e7e7      	b.n	800c774 <_raise_r+0x12>
 800c7a4:	2400      	movs	r4, #0
 800c7a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	4798      	blx	r3
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	e7e0      	b.n	800c774 <_raise_r+0x12>
	...

0800c7b4 <raise>:
 800c7b4:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <raise+0xc>)
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	f7ff bfd2 	b.w	800c762 <_raise_r>
 800c7be:	bf00      	nop
 800c7c0:	2000000c 	.word	0x2000000c

0800c7c4 <_kill_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	4d07      	ldr	r5, [pc, #28]	; (800c7e4 <_kill_r+0x20>)
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	4608      	mov	r0, r1
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	602b      	str	r3, [r5, #0]
 800c7d2:	f7f5 fa53 	bl	8001c7c <_kill>
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	d102      	bne.n	800c7e0 <_kill_r+0x1c>
 800c7da:	682b      	ldr	r3, [r5, #0]
 800c7dc:	b103      	cbz	r3, 800c7e0 <_kill_r+0x1c>
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	bd38      	pop	{r3, r4, r5, pc}
 800c7e2:	bf00      	nop
 800c7e4:	200005d4 	.word	0x200005d4

0800c7e8 <_getpid_r>:
 800c7e8:	f7f5 ba40 	b.w	8001c6c <_getpid>

0800c7ec <__sread>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f4:	f000 f8a8 	bl	800c948 <_read_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	bfab      	itete	ge
 800c7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c800:	181b      	addge	r3, r3, r0
 800c802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c806:	bfac      	ite	ge
 800c808:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80a:	81a3      	strhlt	r3, [r4, #12]
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <__swrite>:
 800c80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	461f      	mov	r7, r3
 800c814:	898b      	ldrh	r3, [r1, #12]
 800c816:	05db      	lsls	r3, r3, #23
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4616      	mov	r6, r2
 800c81e:	d505      	bpl.n	800c82c <__swrite+0x1e>
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	2302      	movs	r3, #2
 800c826:	2200      	movs	r2, #0
 800c828:	f000 f874 	bl	800c914 <_lseek_r>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	4632      	mov	r2, r6
 800c83a:	463b      	mov	r3, r7
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	f000 b823 	b.w	800c88c <_write_r>

0800c846 <__sseek>:
 800c846:	b510      	push	{r4, lr}
 800c848:	460c      	mov	r4, r1
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 f861 	bl	800c914 <_lseek_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	bf15      	itete	ne
 800c858:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c862:	81a3      	strheq	r3, [r4, #12]
 800c864:	bf18      	it	ne
 800c866:	81a3      	strhne	r3, [r4, #12]
 800c868:	bd10      	pop	{r4, pc}

0800c86a <__sclose>:
 800c86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86e:	f000 b81f 	b.w	800c8b0 <_close_r>

0800c872 <__ascii_wctomb>:
 800c872:	b149      	cbz	r1, 800c888 <__ascii_wctomb+0x16>
 800c874:	2aff      	cmp	r2, #255	; 0xff
 800c876:	bf85      	ittet	hi
 800c878:	238a      	movhi	r3, #138	; 0x8a
 800c87a:	6003      	strhi	r3, [r0, #0]
 800c87c:	700a      	strbls	r2, [r1, #0]
 800c87e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c882:	bf98      	it	ls
 800c884:	2001      	movls	r0, #1
 800c886:	4770      	bx	lr
 800c888:	4608      	mov	r0, r1
 800c88a:	4770      	bx	lr

0800c88c <_write_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_write_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f5 fa25 	bl	8001cea <_write>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_write_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_write_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	200005d4 	.word	0x200005d4

0800c8b0 <_close_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d06      	ldr	r5, [pc, #24]	; (800c8cc <_close_r+0x1c>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	602b      	str	r3, [r5, #0]
 800c8bc:	f7f5 fa31 	bl	8001d22 <_close>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_close_r+0x1a>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_close_r+0x1a>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	200005d4 	.word	0x200005d4

0800c8d0 <_fstat_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	; (800c8f0 <_fstat_r+0x20>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	4611      	mov	r1, r2
 800c8dc:	602b      	str	r3, [r5, #0]
 800c8de:	f7f5 fa2c 	bl	8001d3a <_fstat>
 800c8e2:	1c43      	adds	r3, r0, #1
 800c8e4:	d102      	bne.n	800c8ec <_fstat_r+0x1c>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	b103      	cbz	r3, 800c8ec <_fstat_r+0x1c>
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	bd38      	pop	{r3, r4, r5, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200005d4 	.word	0x200005d4

0800c8f4 <_isatty_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d06      	ldr	r5, [pc, #24]	; (800c910 <_isatty_r+0x1c>)
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	f7f5 fa2b 	bl	8001d5a <_isatty>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d102      	bne.n	800c90e <_isatty_r+0x1a>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	b103      	cbz	r3, 800c90e <_isatty_r+0x1a>
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	200005d4 	.word	0x200005d4

0800c914 <_lseek_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d07      	ldr	r5, [pc, #28]	; (800c934 <_lseek_r+0x20>)
 800c918:	4604      	mov	r4, r0
 800c91a:	4608      	mov	r0, r1
 800c91c:	4611      	mov	r1, r2
 800c91e:	2200      	movs	r2, #0
 800c920:	602a      	str	r2, [r5, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	f7f5 fa24 	bl	8001d70 <_lseek>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_lseek_r+0x1e>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_lseek_r+0x1e>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	200005d4 	.word	0x200005d4

0800c938 <_malloc_usable_size_r>:
 800c938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c93c:	1f18      	subs	r0, r3, #4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfbc      	itt	lt
 800c942:	580b      	ldrlt	r3, [r1, r0]
 800c944:	18c0      	addlt	r0, r0, r3
 800c946:	4770      	bx	lr

0800c948 <_read_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	4d07      	ldr	r5, [pc, #28]	; (800c968 <_read_r+0x20>)
 800c94c:	4604      	mov	r4, r0
 800c94e:	4608      	mov	r0, r1
 800c950:	4611      	mov	r1, r2
 800c952:	2200      	movs	r2, #0
 800c954:	602a      	str	r2, [r5, #0]
 800c956:	461a      	mov	r2, r3
 800c958:	f7f5 f9aa 	bl	8001cb0 <_read>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d102      	bne.n	800c966 <_read_r+0x1e>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	b103      	cbz	r3, 800c966 <_read_r+0x1e>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	200005d4 	.word	0x200005d4

0800c96c <_init>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	bf00      	nop
 800c970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c972:	bc08      	pop	{r3}
 800c974:	469e      	mov	lr, r3
 800c976:	4770      	bx	lr

0800c978 <_fini>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	bf00      	nop
 800c97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97e:	bc08      	pop	{r3}
 800c980:	469e      	mov	lr, r3
 800c982:	4770      	bx	lr
