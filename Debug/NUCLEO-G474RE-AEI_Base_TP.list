
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e458  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  0800e638  0800e638  0001e638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eef8  0800eef8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800eef8  0800eef8  0001eef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef00  0800ef00  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef00  0800ef00  0001ef00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef04  0800ef04  0001ef04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ef08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001ec  0800f0f4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800f0f4  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d472  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003918  00000000  00000000  0003d68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00040fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00042658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab68  00000000  00000000  00043b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb40  00000000  00000000  0006e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001141cc  00000000  00000000  0008a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e3f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007610  00000000  00000000  0019e444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e620 	.word	0x0800e620

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800e620 	.word	0x0800e620

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2220      	movs	r2, #32
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f008 ffc9 	bl	800a018 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC1_Init+0xec>)
 8001088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC1_Init+0xec>)
 8001090:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC1_Init+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <MX_ADC1_Init+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_ADC1_Init+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_ADC1_Init+0xec>)
 80010bc:	2201      	movs	r2, #1
 80010be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_ADC1_Init+0xec>)
 80010f6:	f001 ffe1 	bl	80030bc <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001100:	f000 fb14 	bl	800172c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_ADC1_Init+0xec>)
 8001110:	f003 f8c8 	bl	80042a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 fb07 	bl	800172c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ADC1_Init+0xf0>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	237f      	movs	r3, #127	; 0x7f
 800112c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0xec>)
 800113c:	f002 fa68 	bl	8003610 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001146:	f000 faf1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000023c 	.word	0x2000023c
 8001158:	04300002 	.word	0x04300002

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	; 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2254      	movs	r2, #84	; 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 ff4b 	bl	800a018 <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d15f      	bne.n	800124c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001190:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fd81 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f000 fac0 	bl	800172c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a22      	ldr	r2, [pc, #136]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 fd71 	bl	8004cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_ADC_MspInit+0x100>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011fe:	2205      	movs	r2, #5
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800121e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001222:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001232:	f003 fa1f 	bl	8004674 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800123c:	f000 fa76 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3778      	adds	r7, #120	; 0x78
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	200002a8 	.word	0x200002a8
 800125c:	40020008 	.word	0x40020008

08001260 <HAL_ADC_ConvCpltCallback>:
 * Change the value of the dmaFlag to high level when the ADC buffer is full
 * @ param ADC_HandleTypeDef *hadc
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_ADC_ConvCpltCallback+0x24>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d102      	bne.n	8001276 <HAL_ADC_ConvCpltCallback+0x16>
  {
	  adcDMAflag=1;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_ADC_ConvCpltCallback+0x28>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000023c 	.word	0x2000023c
 8001288:	20000230 	.word	0x20000230
 800128c:	00000000 	.word	0x00000000

08001290 <meanADCValue>:
 * @brief Make the mean of the current value stocked in the buffer and stock it in the hallCurrentValue variable
 * @note use the command "measure current" on the commandshell to display the current value
 * @retval None
 */
void meanADCValue (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	int i;
	int sum=0;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
	if (adcDMAflag==1)
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <meanADCValue+0x100>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d167      	bne.n	8001372 <meanADCValue+0xe2>
	{
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e009      	b.n	80012bc <meanADCValue+0x2c>
		{
			sum=sum+ adcBuffer[i];
 80012a8:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <meanADCValue+0x104>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	603b      	str	r3, [r7, #0]
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b09      	cmp	r3, #9
 80012c0:	ddf2      	ble.n	80012a8 <meanADCValue+0x18>
		}

		hallVoltageValue= ((sum/ADC_HALL_BUFFER)*3.3/4096.0)+OFFSET_DEFAULT_ADC;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <meanADCValue+0x108>)
 80012c6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ca:	1092      	asrs	r2, r2, #2
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f95f 	bl	8000594 <__aeabi_i2d>
 80012d6:	a32a      	add	r3, pc, #168	; (adr r3, 8001380 <meanADCValue+0xf0>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f9c4 	bl	8000668 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <meanADCValue+0x10c>)
 80012ee:	f7ff fae5 	bl	80008bc <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a323      	add	r3, pc, #140	; (adr r3, 8001388 <meanADCValue+0xf8>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe fffa 	bl	80002f8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fca4 	bl	8000c58 <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <meanADCValue+0x110>)
 8001314:	6013      	str	r3, [r2, #0]
		hallCurrentValue= (hallVoltageValue-VOLTAGE_HALL_OC)*HALL_GAIN;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <meanADCValue+0x110>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f94c 	bl	80005b8 <__aeabi_f2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <meanADCValue+0x114>)
 8001326:	f7fe ffe7 	bl	80002f8 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <meanADCValue+0x118>)
 8001338:	f7ff f996 	bl	8000668 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <meanADCValue+0x11c>)
 800134a:	f7ff f98d 	bl	8000668 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <meanADCValue+0x120>)
 800135c:	f7ff faae 	bl	80008bc <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fc76 	bl	8000c58 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <meanADCValue+0x124>)
 8001370:	6013      	str	r3, [r2, #0]

	}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	66666666 	.word	0x66666666
 8001384:	400a6666 	.word	0x400a6666
 8001388:	99999999 	.word	0x99999999
 800138c:	3f999999 	.word	0x3f999999
 8001390:	20000230 	.word	0x20000230
 8001394:	20000208 	.word	0x20000208
 8001398:	66666667 	.word	0x66666667
 800139c:	40b00000 	.word	0x40b00000
 80013a0:	20000234 	.word	0x20000234
 80013a4:	40040000 	.word	0x40040000
 80013a8:	40280000 	.word	0x40280000
 80013ac:	40080000 	.word	0x40080000
 80013b0:	400c0000 	.word	0x400c0000
 80013b4:	20000238 	.word	0x20000238

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_DMA_Init+0x50>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <MX_DMA_Init+0x50>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_DMA_Init+0x50>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x50>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x50>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x50>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	200b      	movs	r0, #11
 80013f4:	f003 f916 	bl	8004624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f8:	200b      	movs	r0, #11
 80013fa:	f003 f92d 	bl	8004658 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xe4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2108      	movs	r1, #8
 800146e:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001470:	f003 fdb4 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f003 fdae 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4817      	ldr	r0, [pc, #92]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001498:	f003 fc1e 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800149c:	2308      	movs	r3, #8
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_GPIO_Init+0xe8>)
 80014b4:	f003 fc10 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 fc01 	bl	8004cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f003 f8a2 	bl	8004624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e0:	2028      	movs	r0, #40	; 0x28
 80014e2:	f003 f8b9 	bl	8004658 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800

080014f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014fc:	f001 fb3d 	bl	8002b7a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001500:	f000 f890 	bl	8001624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001504:	f7ff ff82 	bl	800140c <MX_GPIO_Init>
	MX_DMA_Init();
 8001508:	f7ff ff56 	bl	80013b8 <MX_DMA_Init>
	MX_TIM1_Init();
 800150c:	f000 ff90 	bl	8002430 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001510:	f001 fa1e 	bl	8002950 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001514:	f7ff fda8 	bl	8001068 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001518:	f001 f84a 	bl	80025b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800151c:	f001 f896 	bl	800264c <MX_TIM3_Init>
	MX_TIM5_Init();
 8001520:	f001 f8ea 	bl	80026f8 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001524:	2201      	movs	r2, #1
 8001526:	4932      	ldr	r1, [pc, #200]	; (80015f0 <main+0xf8>)
 8001528:	4832      	ldr	r0, [pc, #200]	; (80015f4 <main+0xfc>)
 800152a:	f006 fdb3 	bl	8008094 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f001 fb5a 	bl	8002be8 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8001534:	4830      	ldr	r0, [pc, #192]	; (80015f8 <main+0x100>)
 8001536:	f004 fe5b 	bl	80061f0 <HAL_TIM_Base_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800153a:	217f      	movs	r1, #127	; 0x7f
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <main+0x104>)
 800153e:	f002 fe4f 	bl	80041e0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_HALL_BUFFER);
 8001542:	220a      	movs	r2, #10
 8001544:	492e      	ldr	r1, [pc, #184]	; (8001600 <main+0x108>)
 8001546:	482d      	ldr	r0, [pc, #180]	; (80015fc <main+0x104>)
 8001548:	f001 ff7a 	bl	8003440 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800154c:	213c      	movs	r1, #60	; 0x3c
 800154e:	482d      	ldr	r0, [pc, #180]	; (8001604 <main+0x10c>)
 8001550:	f005 f950 	bl	80067f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <main+0x110>)
 8001556:	f004 febb 	bl	80062d0 <HAL_TIM_Base_Start_IT>
	TIM3->CNT=TIM3->ARR/2;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <main+0x114>)
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	4a2b      	ldr	r2, [pc, #172]	; (800160c <main+0x114>)
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	6253      	str	r3, [r2, #36]	; 0x24
	shellInit();
 8001564:	f000 fb94 	bl	8001c90 <shellInit>
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <main+0x118>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <main+0x90>
			if(shellGetChar()){
 8001570:	f000 fbc6 	bl	8001d00 <shellGetChar>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <main+0x8a>
				shellExec();
 800157a:	f000 fc35 	bl	8001de8 <shellExec>
				shellPrompt();
 800157e:	f000 fb9f 	bl	8001cc0 <shellPrompt>
			}
			uartRxReceived = 0;
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <main+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
		}
		switch (chooseModeFlag){
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <main+0x11c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d002      	beq.n	8001596 <main+0x9e>
 8001590:	2b02      	cmp	r3, #2
 8001592:	d00e      	beq.n	80015b2 <main+0xba>
 8001594:	e02b      	b.n	80015ee <main+0xf6>
		case 1:
			if (adcDMAflag)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <main+0x120>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0e4      	beq.n	8001568 <main+0x70>
			{
				if (startFlag){
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <main+0x124>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d020      	beq.n	80015e8 <main+0xf0>
					asserCurrent();
 80015a6:	f000 f9bb 	bl	8001920 <asserCurrent>
					adcDMAflag=0;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <main+0x120>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
				}
				break;
 80015b0:	e01a      	b.n	80015e8 <main+0xf0>
		case 2:
			if (adcDMAflag)
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <main+0x120>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <main+0xd4>
			{
				if (startFlag){
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <main+0x124>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <main+0xce>
					asserCurrent();
 80015c2:	f000 f9ad 	bl	8001920 <asserCurrent>
				}
				adcDMAflag=0;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <main+0x120>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
			}
			if (speedFlag)
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <main+0x128>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <main+0xf4>
			{
				if (startFlag){
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <main+0x124>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <main+0xe8>
					asserSpeed();
 80015dc:	f000 fa7c 	bl	8001ad8 <asserSpeed>
				}
				speedFlag=0;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <main+0x128>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
			}
			break;
 80015e6:	e001      	b.n	80015ec <main+0xf4>
				break;
 80015e8:	bf00      	nop
 80015ea:	e7bd      	b.n	8001568 <main+0x70>
			break;
 80015ec:	bf00      	nop
		if(uartRxReceived){
 80015ee:	e7bb      	b.n	8001568 <main+0x70>
 80015f0:	2000052c 	.word	0x2000052c
 80015f4:	20000574 	.word	0x20000574
 80015f8:	20000444 	.word	0x20000444
 80015fc:	2000023c 	.word	0x2000023c
 8001600:	20000208 	.word	0x20000208
 8001604:	20000490 	.word	0x20000490
 8001608:	200004dc 	.word	0x200004dc
 800160c:	40000400 	.word	0x40000400
 8001610:	20000528 	.word	0x20000528
 8001614:	20000320 	.word	0x20000320
 8001618:	20000230 	.word	0x20000230
 800161c:	20000318 	.word	0x20000318
 8001620:	2000031c 	.word	0x2000031c

08001624 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2238      	movs	r2, #56	; 0x38
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f008 fcf0 	bl	800a018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001646:	2000      	movs	r0, #0
 8001648:	f003 fd12 	bl	8005070 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001654:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165a:	2303      	movs	r3, #3
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800165e:	2306      	movs	r3, #6
 8001660:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001662:	2355      	movs	r3, #85	; 0x55
 8001664:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166e:	2302      	movs	r3, #2
 8001670:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fdae 	bl	80051d8 <HAL_RCC_OscConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001682:	f000 f853 	bl	800172c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	230f      	movs	r3, #15
 8001688:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168a:	2303      	movs	r3, #3
 800168c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2104      	movs	r1, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 f8b2 	bl	8005808 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80016aa:	f000 f83f 	bl	800172c <Error_Handler>
	}
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	; 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Use the interruption on the blue Button to lunch the power module according to the datasheet
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin== BUTTON_Pin)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x16>
	{
		motorPowerOn();
 80016c8:	f000 f836 	bl	8001738 <motorPowerOn>
	}

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a measure of the incremental encoder wired to TIM3 and put the counter on the middle value for the next measure
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */


	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d102      	bne.n	80016ec <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 80016e6:	f001 fa61 	bl	8002bac <HAL_IncTick>
		codeurValue= TIM3->CNT;
		TIM3->CNT = TIM3->ARR/2;
		speedFlag=1;
	}
	/* USER CODE END Callback 1 */
}
 80016ea:	e011      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if (htim->Instance == TIM5){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10c      	bne.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x3c>
		codeurValue= TIM3->CNT;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016fe:	601a      	str	r2, [r3, #0]
		TIM3->CNT = TIM3->ARR/2;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	6253      	str	r3, [r2, #36]	; 0x24
		speedFlag=1;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40001000 	.word	0x40001000
 800171c:	40000c00 	.word	0x40000c00
 8001720:	40000400 	.word	0x40000400
 8001724:	20000314 	.word	0x20000314
 8001728:	2000031c 	.word	0x2000031c

0800172c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <motorPowerOn>:

/**
 * @brief  Switch on the motor driver
 * @retval None
 */
void motorPowerOn(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800173e:	2120      	movs	r1, #32
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f003 fc62 	bl	800500c <HAL_GPIO_TogglePin>
	//Phase de démarage//
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET );
 8001748:	2201      	movs	r2, #1
 800174a:	2108      	movs	r1, #8
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <motorPowerOn+0x94>)
 800174e:	f003 fc45 	bl	8004fdc <HAL_GPIO_WritePin>
	setAlpha(50);
 8001752:	2032      	movs	r0, #50	; 0x32
 8001754:	f000 f8bc 	bl	80018d0 <setAlpha>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 8001758:	2100      	movs	r1, #0
 800175a:	481d      	ldr	r0, [pc, #116]	; (80017d0 <motorPowerOn+0x98>)
 800175c:	f004 fe92 	bl	8006484 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001760:	2100      	movs	r1, #0
 8001762:	481b      	ldr	r0, [pc, #108]	; (80017d0 <motorPowerOn+0x98>)
 8001764:	f006 f93a 	bl	80079dc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2 );
 8001768:	2104      	movs	r1, #4
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <motorPowerOn+0x98>)
 800176c:	f004 fe8a 	bl	8006484 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	4817      	ldr	r0, [pc, #92]	; (80017d0 <motorPowerOn+0x98>)
 8001774:	f006 f932 	bl	80079dc <HAL_TIMEx_PWMN_Start>


	int i=0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
	while (i<33)
 800177c:	e002      	b.n	8001784 <motorPowerOn+0x4c>
	{
		i++;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
	while (i<33)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b20      	cmp	r3, #32
 8001788:	ddf9      	ble.n	800177e <motorPowerOn+0x46>
	}
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2108      	movs	r1, #8
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <motorPowerOn+0x94>)
 8001790:	f003 fc24 	bl	8004fdc <HAL_GPIO_WritePin>

	consignCurrent=0;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <motorPowerOn+0x9c>)
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	consignSpeed=0;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <motorPowerOn+0xa0>)
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
	currentKiOld=0;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <motorPowerOn+0xa4>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
	startFlag=1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <motorPowerOn+0xa8>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
	alphaKiOld=0.5;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <motorPowerOn+0xac>)
 80017b4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80017b8:	601a      	str	r2, [r3, #0]
	epsOld=0;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <motorPowerOn+0xb0>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]


}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	48000800 	.word	0x48000800
 80017d0:	200003f8 	.word	0x200003f8
 80017d4:	2000030c 	.word	0x2000030c
 80017d8:	20000310 	.word	0x20000310
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000318 	.word	0x20000318
 80017e4:	20000000 	.word	0x20000000
 80017e8:	2000032c 	.word	0x2000032c
 80017ec:	00000000 	.word	0x00000000

080017f0 <calcSpeed>:

/**
 * @brief  Calculation of the speed.
 * @retval None
 */
void calcSpeed (void){
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	speed=(codeurValue-((TIM3->ARR)/2.0))*FREQ_ECH_SPEED*60.0/NUMBER_OF_POINT;
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <calcSpeed+0xa8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fecb 	bl	8000594 <__aeabi_i2d>
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <calcSpeed+0xac>)
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feb4 	bl	8000574 <__aeabi_ui2d>
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001814:	f7ff f852 	bl	80008bc <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fd6a 	bl	80002f8 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	a318      	add	r3, pc, #96	; (adr r3, 8001890 <calcSpeed+0xa0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe ff19 	bl	8000668 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <calcSpeed+0xb0>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe96 	bl	8000574 <__aeabi_ui2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7ff f834 	bl	80008bc <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <calcSpeed+0xb4>)
 8001862:	f7fe ff01 	bl	8000668 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <calcSpeed+0xb8>)
 8001874:	f7ff f822 	bl	80008bc <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ea 	bl	8000c58 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <calcSpeed+0xbc>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	bdb0      	pop	{r4, r5, r7, pc}
 800188e:	bf00      	nop
 8001890:	00000000 	.word	0x00000000
 8001894:	41a443fd 	.word	0x41a443fd
 8001898:	20000314 	.word	0x20000314
 800189c:	40000400 	.word	0x40000400
 80018a0:	40000c00 	.word	0x40000c00
 80018a4:	404e0000 	.word	0x404e0000
 80018a8:	40b00000 	.word	0x40b00000
 80018ac:	20000308 	.word	0x20000308

080018b0 <motorPowerOff>:

/**
 * @brief  Switch off the motor driver
 * @retval None
 */
void motorPowerOff(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80018b4:	2120      	movs	r1, #32
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f003 fba7 	bl	800500c <HAL_GPIO_TogglePin>
	consignCurrent=0.0;
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <motorPowerOff+0x1c>)
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000030c 	.word	0x2000030c

080018d0 <setAlpha>:
 * @brief  Set the dutyCycle
 * @param  alpha : target alpha of the Transitors
 * @retval None
 */
void setAlpha(int alpha1)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	TIM1->CCR1=alpha1*(TIM1->ARR)/100;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <setAlpha+0x48>)
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <setAlpha+0x48>)
 80018e4:	490d      	ldr	r1, [pc, #52]	; (800191c <setAlpha+0x4c>)
 80018e6:	fba1 1303 	umull	r1, r3, r1, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=(100-alpha1)*(TIM1->ARR)/100;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <setAlpha+0x48>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <setAlpha+0x48>)
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <setAlpha+0x4c>)
 8001902:	fba1 1303 	umull	r1, r3, r1, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	6393      	str	r3, [r2, #56]	; 0x38
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40012c00 	.word	0x40012c00
 800191c:	51eb851f 	.word	0x51eb851f

08001920 <asserCurrent>:
 * @brief Set the duty cycle thanks to a PI regulation to match with the wanted value.
 * It use a parallel PI regulation
 * @retval None
 */
void asserCurrent (void)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	meanADCValue();
 8001926:	f7ff fcb3 	bl	8001290 <meanADCValue>

	float eps= consignCurrent - hallCurrentValue;
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <asserCurrent+0x190>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <asserCurrent+0x194>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Proportional part
	if (Kp*eps < 0){
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fe3a 	bl	80005b8 <__aeabi_f2d>
 8001944:	a356      	add	r3, pc, #344	; (adr r3, 8001aa0 <asserCurrent+0x180>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe8d 	bl	8000668 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f7ff f8f5 	bl	8000b4c <__aeabi_dcmplt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <asserCurrent+0x52>
		alphaKp=0.0;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <asserCurrent+0x198>)
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e021      	b.n	80019b6 <asserCurrent+0x96>
	}
	else if (Kp*eps > 1) {
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fe20 	bl	80005b8 <__aeabi_f2d>
 8001978:	a349      	add	r3, pc, #292	; (adr r3, 8001aa0 <asserCurrent+0x180>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe73 	bl	8000668 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <asserCurrent+0x19c>)
 8001990:	f7ff f8fa 	bl	8000b88 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <asserCurrent+0x84>
		alphaKp=1.0;
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <asserCurrent+0x198>)
 800199c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e008      	b.n	80019b6 <asserCurrent+0x96>
	}
	else {
		alphaKp=eps*(float)Kp;
 80019a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ac0 <asserCurrent+0x1a0>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <asserCurrent+0x198>)
 80019b2:	edc3 7a00 	vstr	s15, [r3]
	}

	// Integral part

	alphaKi=alphaKiOld+((Ki*Te)/2)*(eps+epsOld);
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <asserCurrent+0x1a4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdfc 	bl	80005b8 <__aeabi_f2d>
 80019c0:	4604      	mov	r4, r0
 80019c2:	460d      	mov	r5, r1
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <asserCurrent+0x1a8>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fdef 	bl	80005b8 <__aeabi_f2d>
 80019da:	a333      	add	r3, pc, #204	; (adr r3, 8001aa8 <asserCurrent+0x188>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fe42 	bl	8000668 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fc86 	bl	80002fc <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f92e 	bl	8000c58 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a33      	ldr	r2, [pc, #204]	; (8001acc <asserCurrent+0x1ac>)
 8001a00:	6013      	str	r3, [r2, #0]
	if (alphaKi < 0){
 8001a02:	4b32      	ldr	r3, [pc, #200]	; (8001acc <asserCurrent+0x1ac>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d504      	bpl.n	8001a1c <asserCurrent+0xfc>
		alphaKi=0.0;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <asserCurrent+0x1ac>)
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e00d      	b.n	8001a38 <asserCurrent+0x118>
	}
	else if (alphaKi > 1) {
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <asserCurrent+0x1ac>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dd03      	ble.n	8001a38 <asserCurrent+0x118>
		alphaKi=1.0;
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <asserCurrent+0x1ac>)
 8001a32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a36:	601a      	str	r2, [r3, #0]
	}

	alphaKiOld=alphaKi;
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <asserCurrent+0x1ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <asserCurrent+0x1a4>)
 8001a3e:	6013      	str	r3, [r2, #0]
	epsOld=eps;
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <asserCurrent+0x1a8>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]

	// Summ of the two coeff

	alpha=(int)((alphaKi+alphaKp)*100);
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <asserCurrent+0x1ac>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <asserCurrent+0x198>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a56:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ad0 <asserCurrent+0x1b0>
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 2a90 	vmov	r2, s15
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a68:	601a      	str	r2, [r3, #0]

	if (alpha < 0){
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da03      	bge.n	8001a7a <asserCurrent+0x15a>
		alpha=0;
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e006      	b.n	8001a88 <asserCurrent+0x168>
	}
	else if (alpha > 100) {
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	dd02      	ble.n	8001a88 <asserCurrent+0x168>
		alpha=100;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a84:	2264      	movs	r2, #100	; 0x64
 8001a86:	601a      	str	r2, [r3, #0]
	}
	setAlpha(alpha);
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <asserCurrent+0x1b4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff1f 	bl	80018d0 <setAlpha>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	eb1c432d 	.word	0xeb1c432d
 8001aa4:	3f2a36e2 	.word	0x3f2a36e2
 8001aa8:	bc6a7efa 	.word	0xbc6a7efa
 8001aac:	3f189374 	.word	0x3f189374
 8001ab0:	2000030c 	.word	0x2000030c
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	20000324 	.word	0x20000324
 8001abc:	3ff00000 	.word	0x3ff00000
 8001ac0:	3951b717 	.word	0x3951b717
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	2000032c 	.word	0x2000032c
 8001acc:	20000328 	.word	0x20000328
 8001ad0:	42c80000 	.word	0x42c80000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <asserSpeed>:
 * @brief Set the reference current thanks to a PI regulation to match with the wanted value.
 * It use a parallel PI regulation
 * @retval None
 */
void asserSpeed (void)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	calcSpeed();
 8001ade:	f7ff fe87 	bl	80017f0 <calcSpeed>
	float eps= consignSpeed - speed;
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <asserSpeed+0x188>)
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <asserSpeed+0x18c>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af2:	edc7 7a01 	vstr	s15, [r7, #4]

	// Proportional part
	if (KpSpeed*eps < -IMAX){
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd5e 	bl	80005b8 <__aeabi_f2d>
 8001afc:	a354      	add	r3, pc, #336	; (adr r3, 8001c50 <asserSpeed+0x178>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fdb1 	bl	8000668 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <asserSpeed+0x190>)
 8001b14:	f7ff f81a 	bl	8000b4c <__aeabi_dcmplt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <asserSpeed+0x4e>
		currentKp=-IMAX;
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <asserSpeed+0x194>)
 8001b20:	4a53      	ldr	r2, [pc, #332]	; (8001c70 <asserSpeed+0x198>)
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e020      	b.n	8001b68 <asserSpeed+0x90>
	}
	else if (KpSpeed*eps > IMAX) {
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fd46 	bl	80005b8 <__aeabi_f2d>
 8001b2c:	a348      	add	r3, pc, #288	; (adr r3, 8001c50 <asserSpeed+0x178>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fd99 	bl	8000668 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <asserSpeed+0x19c>)
 8001b44:	f7ff f820 	bl	8000b88 <__aeabi_dcmpgt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <asserSpeed+0x7e>
		currentKp=IMAX;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <asserSpeed+0x194>)
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <asserSpeed+0x1a0>)
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e008      	b.n	8001b68 <asserSpeed+0x90>
	}
	else {
		currentKp=eps*(float)KpSpeed;
 8001b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001c7c <asserSpeed+0x1a4>
 8001b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b62:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <asserSpeed+0x194>)
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	}

	// Integral part

	currentKi=currentKiOld+((KiSpeed*TeSpeed)/2)*(eps+speedEpsOld);
 8001b68:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <asserSpeed+0x1a8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd23 	bl	80005b8 <__aeabi_f2d>
 8001b72:	4604      	mov	r4, r0
 8001b74:	460d      	mov	r5, r1
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <asserSpeed+0x1ac>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	ee17 0a90 	vmov	r0, s15
 8001b88:	f7fe fd16 	bl	80005b8 <__aeabi_f2d>
 8001b8c:	a332      	add	r3, pc, #200	; (adr r3, 8001c58 <asserSpeed+0x180>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd69 	bl	8000668 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fbad 	bl	80002fc <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff f855 	bl	8000c58 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a35      	ldr	r2, [pc, #212]	; (8001c88 <asserSpeed+0x1b0>)
 8001bb2:	6013      	str	r3, [r2, #0]
	if (currentKi < -IMAX){
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <asserSpeed+0x1b0>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8001bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	d503      	bpl.n	8001bd0 <asserSpeed+0xf8>
		currentKi=-IMAX;
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <asserSpeed+0x1b0>)
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <asserSpeed+0x198>)
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e00c      	b.n	8001bea <asserSpeed+0x112>
	}
	else if (currentKi > IMAX) {
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <asserSpeed+0x1b0>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	dd02      	ble.n	8001bea <asserSpeed+0x112>
		currentKi=IMAX;
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <asserSpeed+0x1b0>)
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <asserSpeed+0x1a0>)
 8001be8:	601a      	str	r2, [r3, #0]
	}

	currentKiOld=currentKi;
 8001bea:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <asserSpeed+0x1b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <asserSpeed+0x1a8>)
 8001bf0:	6013      	str	r3, [r2, #0]
	speedEpsOld=eps;
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <asserSpeed+0x1ac>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]

	// Summ of the two coeff

	consignCurrent=(float)(currentKi+currentKp);
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <asserSpeed+0x1b0>)
 8001bfa:	ed93 7a00 	vldr	s14, [r3]
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <asserSpeed+0x194>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <asserSpeed+0x1b4>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]

	if (consignCurrent < -IMAX){
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <asserSpeed+0x1b4>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8001c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d503      	bpl.n	8001c2a <asserSpeed+0x152>
		consignCurrent=-IMAX;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <asserSpeed+0x1b4>)
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <asserSpeed+0x198>)
 8001c26:	601a      	str	r2, [r3, #0]
	}
	else if (consignCurrent > IMAX) {
		consignCurrent=IMAX;
	}
}
 8001c28:	e00d      	b.n	8001c46 <asserSpeed+0x16e>
	else if (consignCurrent > IMAX) {
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <asserSpeed+0x1b4>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	dc00      	bgt.n	8001c40 <asserSpeed+0x168>
}
 8001c3e:	e002      	b.n	8001c46 <asserSpeed+0x16e>
		consignCurrent=IMAX;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <asserSpeed+0x1b4>)
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <asserSpeed+0x1a0>)
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	47ae147b 	.word	0x47ae147b
 8001c54:	3f847ae1 	.word	0x3f847ae1
 8001c58:	bc6a7efa 	.word	0xbc6a7efa
 8001c5c:	3f589374 	.word	0x3f589374
 8001c60:	20000310 	.word	0x20000310
 8001c64:	20000308 	.word	0x20000308
 8001c68:	c01c0000 	.word	0xc01c0000
 8001c6c:	20000330 	.word	0x20000330
 8001c70:	c0e00000 	.word	0xc0e00000
 8001c74:	401c0000 	.word	0x401c0000
 8001c78:	40e00000 	.word	0x40e00000
 8001c7c:	3c23d70a 	.word	0x3c23d70a
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000338 	.word	0x20000338
 8001c88:	20000334 	.word	0x20000334
 8001c8c:	2000030c 	.word	0x2000030c

08001c90 <shellInit>:

/**
 * @brief  Send a stating message
 * @retval None
 */
void shellInit(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	226c      	movs	r2, #108	; 0x6c
 8001c9a:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <shellInit+0x24>)
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <shellInit+0x28>)
 8001c9e:	f006 f962 	bl	8007f66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	221a      	movs	r2, #26
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <shellInit+0x2c>)
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <shellInit+0x28>)
 8001cac:	f006 f95b 	bl	8007f66 <HAL_UART_Transmit>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	0800e6f8 	.word	0x0800e6f8
 8001cb8:	20000574 	.word	0x20000574
 8001cbc:	0800e6dc 	.word	0x0800e6dc

08001cc0 <shellPrompt>:

/**
 * @brief  Send the prompt
 * @retval None
 */
void shellPrompt(void){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	221a      	movs	r2, #26
 8001cca:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <shellPrompt+0x18>)
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <shellPrompt+0x1c>)
 8001cce:	f006 f94a 	bl	8007f66 <HAL_UART_Transmit>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0800e6dc 	.word	0x0800e6dc
 8001cdc:	20000574 	.word	0x20000574

08001ce0 <shellCmdNotFound>:

/**
 * @brief  Send the default message if the command is not found
 * @retval None
 */
void shellCmdNotFound(void){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	2214      	movs	r2, #20
 8001cea:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <shellCmdNotFound+0x18>)
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <shellCmdNotFound+0x1c>)
 8001cee:	f006 f93a 	bl	8007f66 <HAL_UART_Transmit>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	0800e9a8 	.word	0x0800e9a8
 8001cfc:	20000574 	.word	0x20000574

08001d00 <shellGetChar>:

/**
 * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
 * @retval 1 if a new command is available, 0 if not.
 */
uint8_t shellGetChar(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <shellGetChar+0xc8>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b0d      	cmp	r3, #13
 8001d10:	d002      	beq.n	8001d18 <shellGetChar+0x18>
 8001d12:	2b7f      	cmp	r3, #127	; 0x7f
 8001d14:	d02f      	beq.n	8001d76 <shellGetChar+0x76>
 8001d16:	e040      	b.n	8001d9a <shellGetChar+0x9a>
	// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	492b      	ldr	r1, [pc, #172]	; (8001dcc <shellGetChar+0xcc>)
 8001d20:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <shellGetChar+0xd0>)
 8001d22:	f006 f920 	bl	8007f66 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <shellGetChar+0xd4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <shellGetChar+0xd8>)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <shellGetChar+0xdc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001d38:	4929      	ldr	r1, [pc, #164]	; (8001de0 <shellGetChar+0xe0>)
 8001d3a:	4827      	ldr	r0, [pc, #156]	; (8001dd8 <shellGetChar+0xd8>)
 8001d3c:	f009 fc62 	bl	800b604 <strtok>
 8001d40:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001d42:	e00f      	b.n	8001d64 <shellGetChar+0x64>
			argv[argc++] = token;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <shellGetChar+0xdc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	b2d1      	uxtb	r1, r2
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <shellGetChar+0xdc>)
 8001d4e:	7011      	strb	r1, [r2, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <shellGetChar+0xe4>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001d5a:	4921      	ldr	r1, [pc, #132]	; (8001de0 <shellGetChar+0xe0>)
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f009 fc51 	bl	800b604 <strtok>
 8001d62:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ec      	bne.n	8001d44 <shellGetChar+0x44>
		}

		idxCmd = 0;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <shellGetChar+0xd4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
		break;
 8001d74:	e023      	b.n	8001dbe <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <shellGetChar+0xd4>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	b2d1      	uxtb	r1, r2
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <shellGetChar+0xd4>)
 8001d80:	7011      	strb	r1, [r2, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <shellGetChar+0xd8>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	2201      	movs	r2, #1
 8001d90:	490d      	ldr	r1, [pc, #52]	; (8001dc8 <shellGetChar+0xc8>)
 8001d92:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <shellGetChar+0xd0>)
 8001d94:	f006 f8e7 	bl	8007f66 <HAL_UART_Transmit>
		break;
 8001d98:	e011      	b.n	8001dbe <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <shellGetChar+0xd4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	b2d1      	uxtb	r1, r2
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <shellGetChar+0xd4>)
 8001da4:	7011      	strb	r1, [r2, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <shellGetChar+0xc8>)
 8001daa:	7819      	ldrb	r1, [r3, #0]
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <shellGetChar+0xd8>)
 8001dae:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	2201      	movs	r2, #1
 8001db6:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <shellGetChar+0xc8>)
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <shellGetChar+0xd0>)
 8001dba:	f006 f8d4 	bl	8007f66 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000052c 	.word	0x2000052c
 8001dcc:	0800e764 	.word	0x0800e764
 8001dd0:	20000574 	.word	0x20000574
 8001dd4:	2000037c 	.word	0x2000037c
 8001dd8:	2000033c 	.word	0x2000033c
 8001ddc:	200003a4 	.word	0x200003a4
 8001de0:	0800e638 	.word	0x0800e638
 8001de4:	20000380 	.word	0x20000380

08001de8 <shellExec>:
 * in mode 2: use the "set speed [float]" command to set the speed value in RPM wanted.
 * use the "measure current" command to display the current value.
 * use the "measure speed" commande to display the speed of the motor.
 * @retval None
 */
void shellExec(void){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <shellExec+0x250>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4992      	ldr	r1, [pc, #584]	; (800203c <shellExec+0x254>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fa14 	bl	8000220 <strcmp>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8087 	bne.w	8001f0e <shellExec+0x126>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001e00:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <shellExec+0x250>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	498e      	ldr	r1, [pc, #568]	; (8002040 <shellExec+0x258>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fa0a 	bl	8000220 <strcmp>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d137      	bne.n	8001e82 <shellExec+0x9a>
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <shellExec+0x250>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	498b      	ldr	r1, [pc, #556]	; (8002044 <shellExec+0x25c>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fa01 	bl	8000220 <strcmp>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <shellExec+0x4e>
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <shellExec+0x250>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4987      	ldr	r1, [pc, #540]	; (8002048 <shellExec+0x260>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe f9f8 	bl	8000220 <strcmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d125      	bne.n	8001e82 <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001e36:	4b80      	ldr	r3, [pc, #512]	; (8002038 <shellExec+0x250>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 f8bd 	bl	8009fba <atoi>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	2120      	movs	r1, #32
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f003 f8c6 	bl	8004fdc <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001e50:	4b79      	ldr	r3, [pc, #484]	; (8002038 <shellExec+0x250>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 f8b0 	bl	8009fba <atoi>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a7b      	ldr	r2, [pc, #492]	; (800204c <shellExec+0x264>)
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	487b      	ldr	r0, [pc, #492]	; (8002050 <shellExec+0x268>)
 8001e62:	f008 fd4b 	bl	800a8fc <sniprintf>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <shellExec+0x26c>)
 8001e6c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8001e6e:	4b79      	ldr	r3, [pc, #484]	; (8002054 <shellExec+0x26c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
 8001e78:	4975      	ldr	r1, [pc, #468]	; (8002050 <shellExec+0x268>)
 8001e7a:	4877      	ldr	r0, [pc, #476]	; (8002058 <shellExec+0x270>)
 8001e7c:	f006 f873 	bl	8007f66 <HAL_UART_Transmit>
 8001e80:	e0d7      	b.n	8002032 <shellExec+0x24a>
		}
		else if(strcmp(argv[1],"speed")==0){
 8001e82:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <shellExec+0x250>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4975      	ldr	r1, [pc, #468]	; (800205c <shellExec+0x274>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe f9c9 	bl	8000220 <strcmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10e      	bne.n	8001eb2 <shellExec+0xca>
			consignSpeed= (atof(argv[2]));
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <shellExec+0x250>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f008 f88b 	bl	8009fb4 <atof>
 8001e9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fed7 	bl	8000c58 <__aeabi_d2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a6c      	ldr	r2, [pc, #432]	; (8002060 <shellExec+0x278>)
 8001eae:	6013      	str	r3, [r2, #0]
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8001eb0:	e0bf      	b.n	8002032 <shellExec+0x24a>
		else if(strcmp(argv[1],"alpha")==0){
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <shellExec+0x250>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	496b      	ldr	r1, [pc, #428]	; (8002064 <shellExec+0x27c>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe f9b1 	bl	8000220 <strcmp>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <shellExec+0xf0>
			setAlpha(atoi(argv[2]));
 8001ec4:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <shellExec+0x250>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f008 f876 	bl	8009fba <atoi>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fcfd 	bl	80018d0 <setAlpha>
}
 8001ed6:	e0ac      	b.n	8002032 <shellExec+0x24a>
		else if(strcmp(argv[1],"current")==0){
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <shellExec+0x250>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4962      	ldr	r1, [pc, #392]	; (8002068 <shellExec+0x280>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f99e 	bl	8000220 <strcmp>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <shellExec+0x120>
			consignCurrent=(atof(argv[2]));
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <shellExec+0x250>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 f860 	bl	8009fb4 <atof>
 8001ef4:	ec53 2b10 	vmov	r2, r3, d0
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe feac 	bl	8000c58 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <shellExec+0x284>)
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	e094      	b.n	8002032 <shellExec+0x24a>
			shellCmdNotFound();
 8001f08:	f7ff feea 	bl	8001ce0 <shellCmdNotFound>
}
 8001f0c:	e091      	b.n	8002032 <shellExec+0x24a>
	else if (strcmp(argv[0],"measure")==0)
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <shellExec+0x250>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4957      	ldr	r1, [pc, #348]	; (8002070 <shellExec+0x288>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe f983 	bl	8000220 <strcmp>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d117      	bne.n	8001f50 <shellExec+0x168>
		if(strcmp(argv[1],"current")==0){
 8001f20:	4b45      	ldr	r3, [pc, #276]	; (8002038 <shellExec+0x250>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4950      	ldr	r1, [pc, #320]	; (8002068 <shellExec+0x280>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f97a 	bl	8000220 <strcmp>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <shellExec+0x150>
			uartPrintADCValue();
 8001f32:	f000 fdb9 	bl	8002aa8 <uartPrintADCValue>
}
 8001f36:	e07c      	b.n	8002032 <shellExec+0x24a>
		else if (strcmp(argv[1],"speed")==0){
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <shellExec+0x250>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4947      	ldr	r1, [pc, #284]	; (800205c <shellExec+0x274>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f96e 	bl	8000220 <strcmp>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d173      	bne.n	8002032 <shellExec+0x24a>
			uartPrintSpeed();
 8001f4a:	f000 fdcd 	bl	8002ae8 <uartPrintSpeed>
}
 8001f4e:	e070      	b.n	8002032 <shellExec+0x24a>
	else if (strcmp(argv[0],"mode")==0)
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <shellExec+0x250>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4947      	ldr	r1, [pc, #284]	; (8002074 <shellExec+0x28c>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f962 	bl	8000220 <strcmp>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <shellExec+0x18c>
		chooseModeFlag= atoi(argv[1]);
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <shellExec+0x250>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 f827 	bl	8009fba <atoi>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a42      	ldr	r2, [pc, #264]	; (8002078 <shellExec+0x290>)
 8001f70:	6013      	str	r3, [r2, #0]
}
 8001f72:	e05e      	b.n	8002032 <shellExec+0x24a>
	else if(strcmp(argv[0],"help")==0)
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <shellExec+0x250>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4940      	ldr	r1, [pc, #256]	; (800207c <shellExec+0x294>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f950 	bl	8000220 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <shellExec+0x1b0>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f8e:	493c      	ldr	r1, [pc, #240]	; (8002080 <shellExec+0x298>)
 8001f90:	4831      	ldr	r0, [pc, #196]	; (8002058 <shellExec+0x270>)
 8001f92:	f005 ffe8 	bl	8007f66 <HAL_UART_Transmit>
}
 8001f96:	e04c      	b.n	8002032 <shellExec+0x24a>
	else if(strcmp(argv[0],"pinout")==0)
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <shellExec+0x250>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4939      	ldr	r1, [pc, #228]	; (8002084 <shellExec+0x29c>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f93e 	bl	8000220 <strcmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <shellExec+0x1d4>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001fb2:	4935      	ldr	r1, [pc, #212]	; (8002088 <shellExec+0x2a0>)
 8001fb4:	4828      	ldr	r0, [pc, #160]	; (8002058 <shellExec+0x270>)
 8001fb6:	f005 ffd6 	bl	8007f66 <HAL_UART_Transmit>
}
 8001fba:	e03a      	b.n	8002032 <shellExec+0x24a>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <shellExec+0x250>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4932      	ldr	r1, [pc, #200]	; (800208c <shellExec+0x2a4>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f92c 	bl	8000220 <strcmp>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d112      	bne.n	8001ff4 <shellExec+0x20c>
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <shellExec+0x250>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	492f      	ldr	r1, [pc, #188]	; (8002090 <shellExec+0x2a8>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f923 	bl	8000220 <strcmp>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <shellExec+0x20c>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	221a      	movs	r2, #26
 8001fe6:	492b      	ldr	r1, [pc, #172]	; (8002094 <shellExec+0x2ac>)
 8001fe8:	481b      	ldr	r0, [pc, #108]	; (8002058 <shellExec+0x270>)
 8001fea:	f005 ffbc 	bl	8007f66 <HAL_UART_Transmit>
		motorPowerOn();
 8001fee:	f7ff fba3 	bl	8001738 <motorPowerOn>
 8001ff2:	e01e      	b.n	8002032 <shellExec+0x24a>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <shellExec+0x250>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4924      	ldr	r1, [pc, #144]	; (800208c <shellExec+0x2a4>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f910 	bl	8000220 <strcmp>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d112      	bne.n	800202c <shellExec+0x244>
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <shellExec+0x250>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4923      	ldr	r1, [pc, #140]	; (8002098 <shellExec+0x2b0>)
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe f907 	bl	8000220 <strcmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <shellExec+0x244>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	221b      	movs	r2, #27
 800201e:	491f      	ldr	r1, [pc, #124]	; (800209c <shellExec+0x2b4>)
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <shellExec+0x270>)
 8002022:	f005 ffa0 	bl	8007f66 <HAL_UART_Transmit>
		motorPowerOff();
 8002026:	f7ff fc43 	bl	80018b0 <motorPowerOff>
 800202a:	e002      	b.n	8002032 <shellExec+0x24a>
		shellCmdNotFound();
 800202c:	f7ff fe58 	bl	8001ce0 <shellCmdNotFound>
}
 8002030:	e7ff      	b.n	8002032 <shellExec+0x24a>
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000380 	.word	0x20000380
 800203c:	0800e63c 	.word	0x0800e63c
 8002040:	0800e640 	.word	0x0800e640
 8002044:	0800e644 	.word	0x0800e644
 8002048:	0800e648 	.word	0x0800e648
 800204c:	0800e64c 	.word	0x0800e64c
 8002050:	20000530 	.word	0x20000530
 8002054:	20000570 	.word	0x20000570
 8002058:	20000574 	.word	0x20000574
 800205c:	0800e668 	.word	0x0800e668
 8002060:	20000310 	.word	0x20000310
 8002064:	0800e670 	.word	0x0800e670
 8002068:	0800e678 	.word	0x0800e678
 800206c:	2000030c 	.word	0x2000030c
 8002070:	0800e680 	.word	0x0800e680
 8002074:	0800e688 	.word	0x0800e688
 8002078:	20000320 	.word	0x20000320
 800207c:	0800e690 	.word	0x0800e690
 8002080:	0800e768 	.word	0x0800e768
 8002084:	0800e698 	.word	0x0800e698
 8002088:	0800e86c 	.word	0x0800e86c
 800208c:	0800e6a0 	.word	0x0800e6a0
 8002090:	0800e6a8 	.word	0x0800e6a8
 8002094:	0800e970 	.word	0x0800e970
 8002098:	0800e6ac 	.word	0x0800e6ac
 800209c:	0800e98c 	.word	0x0800e98c

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_MspInit+0x44>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_MspInit+0x44>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_MspInit+0x44>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_MspInit+0x44>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_MspInit+0x44>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_MspInit+0x44>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020d6:	f003 f86f 	bl	80051b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_InitTick+0xcc>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <HAL_InitTick+0xcc>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_InitTick+0xcc>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fd47 	bl	8005bb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002126:	f003 fd19 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 800212a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_InitTick+0xd0>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	3b01      	subs	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_InitTick+0xd4>)
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_InitTick+0xd8>)
 800213e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_InitTick+0xd4>)
 8002142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002146:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_InitTick+0xd4>)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_InitTick+0xd4>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_InitTick+0xd4>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800215a:	4818      	ldr	r0, [pc, #96]	; (80021bc <HAL_InitTick+0xd4>)
 800215c:	f003 fff0 	bl	8006140 <HAL_TIM_Base_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11b      	bne.n	80021a6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800216e:	4813      	ldr	r0, [pc, #76]	; (80021bc <HAL_InitTick+0xd4>)
 8002170:	f004 f8ae 	bl	80062d0 <HAL_TIM_Base_Start_IT>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800217a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002182:	2036      	movs	r0, #54	; 0x36
 8002184:	f002 fa68 	bl	8004658 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d808      	bhi.n	80021a0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800218e:	2200      	movs	r2, #0
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	2036      	movs	r0, #54	; 0x36
 8002194:	f002 fa46 	bl	8004624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_InitTick+0xdc>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e002      	b.n	80021a6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3730      	adds	r7, #48	; 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	431bde83 	.word	0x431bde83
 80021bc:	200003a8 	.word	0x200003a8
 80021c0:	40001000 	.word	0x40001000
 80021c4:	20000010 	.word	0x20000010

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA1_Channel1_IRQHandler+0x10>)
 8002226:	f002 fc08 	bl	8004a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200002a8 	.word	0x200002a8

08002234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <USART2_IRQHandler+0x10>)
 800223a:	f005 ff81 	bl	8008140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000574 	.word	0x20000574

08002248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800224c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002250:	f002 fef6 	bl	8005040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM5_IRQHandler+0x10>)
 800225e:	f004 fb57 	bl	8006910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200004dc 	.word	0x200004dc

0800226c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM6_DAC_IRQHandler+0x10>)
 8002272:	f004 fb4d 	bl	8006910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200003a8 	.word	0x200003a8

08002280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	return 1;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_kill>:

int _kill(int pid, int sig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229a:	f007 fe93 	bl	8009fc4 <__errno>
 800229e:	4603      	mov	r3, r0
 80022a0:	2216      	movs	r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
	return -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_exit>:

void _exit (int status)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe7 	bl	8002290 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c2:	e7fe      	b.n	80022c2 <_exit+0x12>

080022c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00a      	b.n	80022ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d6:	f3af 8000 	nop.w
 80022da:	4601      	mov	r1, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf0      	blt.n	80022d6 <_read+0x12>
	}

return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e009      	b.n	8002324 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf1      	blt.n	8002310 <_write+0x12>
	}
	return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_close>:

int _close(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235e:	605a      	str	r2, [r3, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_isatty>:

int _isatty(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d0:	f007 fdf8 	bl	8009fc4 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	220c      	movs	r2, #12
 80023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20020000 	.word	0x20020000
 8002400:	00000400 	.word	0x00000400
 8002404:	200003f4 	.word	0x200003f4
 8002408:	20000618 	.word	0x20000618

0800240c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <SystemInit+0x20>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <SystemInit+0x20>)
 8002418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800241c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b09c      	sub	sp, #112	; 0x70
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002450:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	615a      	str	r2, [r3, #20]
 8002462:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2234      	movs	r2, #52	; 0x34
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f007 fdd4 	bl	800a018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002472:	4a4e      	ldr	r2, [pc, #312]	; (80025ac <MX_TIM1_Init+0x17c>)
 8002474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <MX_TIM1_Init+0x178>)
 800247e:	2220      	movs	r2, #32
 8002480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002484:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8002488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <MX_TIM1_Init+0x178>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800249c:	4842      	ldr	r0, [pc, #264]	; (80025a8 <MX_TIM1_Init+0x178>)
 800249e:	f003 fe4f 	bl	8006140 <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024a8:	f7ff f940 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024b6:	4619      	mov	r1, r3
 80024b8:	483b      	ldr	r0, [pc, #236]	; (80025a8 <MX_TIM1_Init+0x178>)
 80024ba:	f004 fcbd 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024c4:	f7ff f932 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024c8:	4837      	ldr	r0, [pc, #220]	; (80025a8 <MX_TIM1_Init+0x178>)
 80024ca:	f003 ff79 	bl	80063c0 <HAL_TIM_PWM_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024d4:	f7ff f92a 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024e8:	4619      	mov	r1, r3
 80024ea:	482f      	ldr	r0, [pc, #188]	; (80025a8 <MX_TIM1_Init+0x178>)
 80024ec:	f005 fb38 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024f6:	f7ff f919 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fa:	2360      	movs	r3, #96	; 0x60
 80024fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 80024fe:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	4821      	ldr	r0, [pc, #132]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002522:	f004 fb75 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800252c:	f7ff f8fe 	bl	800172c <Error_Handler>
  }
  sConfigOC.Pulse = 2655;
 8002530:	f640 235f 	movw	r3, #2655	; 0xa5f
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800253a:	2204      	movs	r2, #4
 800253c:	4619      	mov	r1, r3
 800253e:	481a      	ldr	r0, [pc, #104]	; (80025a8 <MX_TIM1_Init+0x178>)
 8002540:	f004 fb66 	bl	8006c10 <HAL_TIM_PWM_ConfigChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800254a:	f7ff f8ef 	bl	800172c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 800255a:	23cd      	movs	r3, #205	; 0xcd
 800255c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4807      	ldr	r0, [pc, #28]	; (80025a8 <MX_TIM1_Init+0x178>)
 800258c:	f005 fb7e 	bl	8007c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002596:	f7ff f8c9 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <MX_TIM1_Init+0x178>)
 800259c:	f000 f98a 	bl	80028b4 <HAL_TIM_MspPostInit>

}
 80025a0:	bf00      	nop
 80025a2:	3770      	adds	r7, #112	; 0x70
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200003f8 	.word	0x200003f8
 80025ac:	40012c00 	.word	0x40012c00

080025b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <MX_TIM2_Init+0x98>)
 80025d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM2_Init+0x98>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_TIM2_Init+0x98>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1062;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <MX_TIM2_Init+0x98>)
 80025e4:	f240 4226 	movw	r2, #1062	; 0x426
 80025e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <MX_TIM2_Init+0x98>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <MX_TIM2_Init+0x98>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f6:	4814      	ldr	r0, [pc, #80]	; (8002648 <MX_TIM2_Init+0x98>)
 80025f8:	f003 fda2 	bl	8006140 <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002602:	f7ff f893 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4619      	mov	r1, r3
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <MX_TIM2_Init+0x98>)
 8002614:	f004 fc10 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800261e:	f7ff f885 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002622:	2320      	movs	r3, #32
 8002624:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <MX_TIM2_Init+0x98>)
 8002630:	f005 fa96 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800263a:	f7ff f877 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000444 	.word	0x20000444

0800264c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f007 fcdc 	bl	800a018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002660:	463b      	mov	r3, r7
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <MX_TIM3_Init+0xa4>)
 800266c:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <MX_TIM3_Init+0xa8>)
 800266e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_TIM3_Init+0xa4>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_TIM3_Init+0xa4>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM3_Init+0xa4>)
 800267e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002682:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM3_Init+0xa4>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_TIM3_Init+0xa4>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002690:	2303      	movs	r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a8:	2301      	movs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_TIM3_Init+0xa4>)
 80026bc:	f003 fff4 	bl	80066a8 <HAL_TIM_Encoder_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026c6:	f7ff f831 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MX_TIM3_Init+0xa4>)
 80026d8:	f005 fa42 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80026e2:	f7ff f823 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3730      	adds	r7, #48	; 0x30
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000490 	.word	0x20000490
 80026f4:	40000400 	.word	0x40000400

080026f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <MX_TIM5_Init+0x94>)
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <MX_TIM5_Init+0x98>)
 800271a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_TIM5_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_TIM5_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.6999999E7;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_TIM5_Init+0x94>)
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <MX_TIM5_Init+0x9c>)
 800272c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <MX_TIM5_Init+0x94>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_TIM5_Init+0x94>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <MX_TIM5_Init+0x94>)
 800273c:	f003 fd00 	bl	8006140 <HAL_TIM_Base_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002746:	f7fe fff1 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4619      	mov	r1, r3
 8002756:	480d      	ldr	r0, [pc, #52]	; (800278c <MX_TIM5_Init+0x94>)
 8002758:	f004 fb6e 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002762:	f7fe ffe3 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_TIM5_Init+0x94>)
 8002774:	f005 f9f4 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800277e:	f7fe ffd5 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200004dc 	.word	0x200004dc
 8002790:	40000c00 	.word	0x40000c00
 8002794:	0103663f 	.word	0x0103663f

08002798 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_TIM_Base_MspInit+0x8c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10c      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b4:	6613      	str	r3, [r2, #96]	; 0x60
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80027c2:	e02a      	b.n	800281a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d10c      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
}
 80027e6:	e018      	b.n	800281a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_TIM_Base_MspInit+0x94>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_TIM_Base_MspInit+0x90>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2032      	movs	r0, #50	; 0x32
 8002810:	f001 ff08 	bl	8004624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002814:	2032      	movs	r0, #50	; 0x32
 8002816:	f001 ff1f 	bl	8004658 <HAL_NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40000c00 	.word	0x40000c00

08002830 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_TIM_Encoder_MspInit+0x7c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d128      	bne.n	80028a4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002882:	2350      	movs	r3, #80	; 0x50
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002892:	2302      	movs	r3, #2
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a0:	f002 fa1a 	bl	8004cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_TIM_MspPostInit+0x68>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d11d      	bne.n	8002912 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_TIM_MspPostInit+0x6c>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_TIM_MspPostInit+0x6c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <HAL_TIM_MspPostInit+0x6c>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80028ee:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80028f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002900:	2306      	movs	r3, #6
 8002902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f002 f9e3 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002912:	bf00      	nop
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_UART_RxCpltCallback+0x20>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002932:	2201      	movs	r2, #1
 8002934:	4904      	ldr	r1, [pc, #16]	; (8002948 <HAL_UART_RxCpltCallback+0x24>)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_UART_RxCpltCallback+0x28>)
 8002938:	f005 fbac 	bl	8008094 <HAL_UART_Receive_IT>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000528 	.word	0x20000528
 8002948:	2000052c 	.word	0x2000052c
 800294c:	20000574 	.word	0x20000574

08002950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <MX_USART2_UART_Init+0x94>)
 8002958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002998:	4811      	ldr	r0, [pc, #68]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 800299a:	f005 fa94 	bl	8007ec6 <HAL_UART_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80029a4:	f7fe fec2 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029a8:	2100      	movs	r1, #0
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 80029ac:	f007 fa37 	bl	8009e1e <HAL_UARTEx_SetTxFifoThreshold>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80029b6:	f7fe feb9 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ba:	2100      	movs	r1, #0
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 80029be:	f007 fa6c 	bl	8009e9a <HAL_UARTEx_SetRxFifoThreshold>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80029c8:	f7fe feb0 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <MX_USART2_UART_Init+0x90>)
 80029ce:	f007 f9ed 	bl	8009dac <HAL_UARTEx_DisableFifoMode>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80029d8:	f7fe fea8 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000574 	.word	0x20000574
 80029e4:	40004400 	.word	0x40004400

080029e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b09e      	sub	sp, #120	; 0x78
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	2254      	movs	r2, #84	; 0x54
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 fb05 	bl	800a018 <memset>
  if(uartHandle->Instance==USART2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_UART_MspInit+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d13e      	bne.n	8002a96 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f93d 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a30:	f7fe fe7c 	bl	800172c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_UART_MspInit+0xbc>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a64:	230c      	movs	r3, #12
 8002a66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a74:	2307      	movs	r3, #7
 8002a76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a82:	f002 f929 	bl	8004cd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2026      	movs	r0, #38	; 0x26
 8002a8c:	f001 fdca 	bl	8004624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a90:	2026      	movs	r0, #38	; 0x26
 8002a92:	f001 fde1 	bl	8004658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a96:	bf00      	nop
 8002a98:	3778      	adds	r7, #120	; 0x78
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40004400 	.word	0x40004400
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <uartPrintADCValue>:
/* USER CODE BEGIN 1 */
/**
 *  @brief Allow to display the current value of the motor using the USART bus
 */
void uartPrintADCValue(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	meanADCValue();
 8002aac:	f7fe fbf0 	bl	8001290 <meanADCValue>
	sprintf(uartTxBuffer,"Current: %.2f A\r\n",hallCurrentValue);
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <uartPrintADCValue+0x30>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd7f 	bl	80005b8 <__aeabi_f2d>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4907      	ldr	r1, [pc, #28]	; (8002adc <uartPrintADCValue+0x34>)
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <uartPrintADCValue+0x38>)
 8002ac2:	f007 ff4f 	bl	800a964 <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <uartPrintADCValue+0x38>)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <uartPrintADCValue+0x3c>)
 8002ad0:	f005 fa49 	bl	8007f66 <HAL_UART_Transmit>

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000238 	.word	0x20000238
 8002adc:	0800e6b0 	.word	0x0800e6b0
 8002ae0:	20000530 	.word	0x20000530
 8002ae4:	20000574 	.word	0x20000574

08002ae8 <uartPrintSpeed>:

/**
 *  @brief Allow to display the speed value of the motor using the USART bus
 */
void uartPrintSpeed(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	calcSpeed();
 8002aec:	f7fe fe80 	bl	80017f0 <calcSpeed>
	sprintf(uartTxBuffer,"Speed: %.2f tr/min\r\n",speed);
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <uartPrintSpeed+0x30>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fd5f 	bl	80005b8 <__aeabi_f2d>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4907      	ldr	r1, [pc, #28]	; (8002b1c <uartPrintSpeed+0x34>)
 8002b00:	4807      	ldr	r0, [pc, #28]	; (8002b20 <uartPrintSpeed+0x38>)
 8002b02:	f007 ff2f 	bl	800a964 <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	4904      	ldr	r1, [pc, #16]	; (8002b20 <uartPrintSpeed+0x38>)
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <uartPrintSpeed+0x3c>)
 8002b10:	f005 fa29 	bl	8007f66 <HAL_UART_Transmit>

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000308 	.word	0x20000308
 8002b1c:	0800e6c4 	.word	0x0800e6c4
 8002b20:	20000530 	.word	0x20000530
 8002b24:	20000574 	.word	0x20000574

08002b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b2e:	490e      	ldr	r1, [pc, #56]	; (8002b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <LoopForever+0xe>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b34:	e002      	b.n	8002b3c <LoopCopyDataInit>

08002b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3a:	3304      	adds	r3, #4

08002b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b40:	d3f9      	bcc.n	8002b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b44:	4c0b      	ldr	r4, [pc, #44]	; (8002b74 <LoopForever+0x16>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b48:	e001      	b.n	8002b4e <LoopFillZerobss>

08002b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b4c:	3204      	adds	r2, #4

08002b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b50:	d3fb      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b52:	f7ff fc5b 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b56:	f007 fa3b 	bl	8009fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b5a:	f7fe fccd 	bl	80014f8 <main>

08002b5e <LoopForever>:

LoopForever:
    b LoopForever
 8002b5e:	e7fe      	b.n	8002b5e <LoopForever>
  ldr   r0, =_estack
 8002b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b6c:	0800ef08 	.word	0x0800ef08
  ldr r2, =_sbss
 8002b70:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b74:	20000618 	.word	0x20000618

08002b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC1_2_IRQHandler>

08002b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f001 fd42 	bl	800460e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f7ff faac 	bl	80020e8 <HAL_InitTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	71fb      	strb	r3, [r7, #7]
 8002b9a:	e001      	b.n	8002ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b9c:	f7ff fa80 	bl	80020a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]

}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_IncTick+0x1c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_IncTick+0x20>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_IncTick+0x1c>)
 8002bbc:	6013      	str	r3, [r2, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	20000604 	.word	0x20000604
 8002bcc:	20000014 	.word	0x20000014

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000604 	.word	0x20000604

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d004      	beq.n	8002c0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_Delay+0x40>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0c:	bf00      	nop
 8002c0e:	f7ff ffdf 	bl	8002bd0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d8f7      	bhi.n	8002c0e <HAL_Delay+0x26>
  {
  }
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000014 	.word	0x20000014

08002c2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3360      	adds	r3, #96	; 0x60
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <LL_ADC_SetOffset+0x44>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	03fff000 	.word	0x03fff000

08002cdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	461a      	mov	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	615a      	str	r2, [r3, #20]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3330      	adds	r3, #48	; 0x30
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	4413      	add	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	211f      	movs	r1, #31
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 011f 	and.w	r1, r3, #31
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b087      	sub	sp, #28
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	0e5b      	lsrs	r3, r3, #25
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0d1b      	lsrs	r3, r3, #20
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2107      	movs	r1, #7
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	0d1b      	lsrs	r3, r3, #20
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	431a      	orrs	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10a      	bne.n	8002ece <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	407f0000 	.word	0x407f0000

08002ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 031f 	and.w	r3, r3, #31
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6093      	str	r3, [r2, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <LL_ADC_IsEnabled+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_IsEnabled+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d101      	bne.n	800303a <LL_ADC_IsDisableOngoing+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_IsDisableOngoing+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d101      	bne.n	8003088 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d101      	bne.n	80030ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1af      	b.n	8003436 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fe f839 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff19 	bl	8002f34 <LL_ADC_IsDeepPowerDownEnabled>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff feff 	bl	8002f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff34 	bl	8002f84 <LL_ADC_IsInternalRegulatorEnabled>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d115      	bne.n	800314e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff18 	bl	8002f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800312c:	4b9f      	ldr	r3, [pc, #636]	; (80033ac <HAL_ADC_Init+0x2f0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	4a9f      	ldr	r2, [pc, #636]	; (80033b0 <HAL_ADC_Init+0x2f4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003140:	e002      	b.n	8003148 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff16 	bl	8002f84 <LL_ADC_IsInternalRegulatorEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff76 	bl	8003070 <LL_ADC_REG_IsConversionOngoing>
 8003184:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 8148 	bne.w	8003424 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 8144 	bne.w	8003424 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff23 	bl	8002ffc <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d141      	bne.n	8003240 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d004      	beq.n	80031d0 <HAL_ADC_Init+0x114>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_ADC_Init+0x2f8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d10f      	bne.n	80031f0 <HAL_ADC_Init+0x134>
 80031d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031d4:	f7ff ff12 	bl	8002ffc <LL_ADC_IsEnabled>
 80031d8:	4604      	mov	r4, r0
 80031da:	4876      	ldr	r0, [pc, #472]	; (80033b4 <HAL_ADC_Init+0x2f8>)
 80031dc:	f7ff ff0e 	bl	8002ffc <LL_ADC_IsEnabled>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4323      	orrs	r3, r4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e012      	b.n	8003216 <HAL_ADC_Init+0x15a>
 80031f0:	4871      	ldr	r0, [pc, #452]	; (80033b8 <HAL_ADC_Init+0x2fc>)
 80031f2:	f7ff ff03 	bl	8002ffc <LL_ADC_IsEnabled>
 80031f6:	4604      	mov	r4, r0
 80031f8:	4870      	ldr	r0, [pc, #448]	; (80033bc <HAL_ADC_Init+0x300>)
 80031fa:	f7ff feff 	bl	8002ffc <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	431c      	orrs	r4, r3
 8003202:	486f      	ldr	r0, [pc, #444]	; (80033c0 <HAL_ADC_Init+0x304>)
 8003204:	f7ff fefa 	bl	8002ffc <LL_ADC_IsEnabled>
 8003208:	4603      	mov	r3, r0
 800320a:	4323      	orrs	r3, r4
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003222:	d004      	beq.n	800322e <HAL_ADC_Init+0x172>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a62      	ldr	r2, [pc, #392]	; (80033b4 <HAL_ADC_Init+0x2f8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_ADC_Init+0x176>
 800322e:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_ADC_Init+0x308>)
 8003230:	e000      	b.n	8003234 <HAL_ADC_Init+0x178>
 8003232:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_ADC_Init+0x30c>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f7ff fcf6 	bl	8002c2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7f5b      	ldrb	r3, [r3, #29]
 8003244:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800324a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003250:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003256:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800325e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	045b      	lsls	r3, r3, #17
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_ADC_Init+0x310>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fed2 	bl	8003070 <LL_ADC_REG_IsConversionOngoing>
 80032cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fedf 	bl	8003096 <LL_ADC_INJ_IsConversionOngoing>
 80032d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d17f      	bne.n	80033e0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d17c      	bne.n	80033e0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003326:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003330:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6911      	ldr	r1, [r2, #16]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003346:	e013      	b.n	8003370 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003356:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800336c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d12a      	bne.n	80033d0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800339c:	430a      	orrs	r2, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e019      	b.n	80033e0 <HAL_ADC_Init+0x324>
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	053e2d63 	.word	0x053e2d63
 80033b4:	50000100 	.word	0x50000100
 80033b8:	50000400 	.word	0x50000400
 80033bc:	50000500 	.word	0x50000500
 80033c0:	50000600 	.word	0x50000600
 80033c4:	50000300 	.word	0x50000300
 80033c8:	50000700 	.word	0x50000700
 80033cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10c      	bne.n	8003402 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f023 010f 	bic.w	r1, r3, #15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003400:	e007      	b.n	8003412 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 020f 	bic.w	r2, r2, #15
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c
 8003422:	e007      	b.n	8003434 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	f043 0210 	orr.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003434:	7ffb      	ldrb	r3, [r7, #31]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop

08003440 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003454:	d004      	beq.n	8003460 <HAL_ADC_Start_DMA+0x20>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5a      	ldr	r2, [pc, #360]	; (80035c4 <HAL_ADC_Start_DMA+0x184>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_ADC_Start_DMA+0x24>
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_ADC_Start_DMA+0x188>)
 8003462:	e000      	b.n	8003466 <HAL_ADC_Start_DMA+0x26>
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_ADC_Start_DMA+0x18c>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fd44 	bl	8002ef4 <LL_ADC_GetMultimode>
 800346c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fdfc 	bl	8003070 <LL_ADC_REG_IsConversionOngoing>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 809b 	bne.w	80035b6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_ADC_Start_DMA+0x4e>
 800348a:	2302      	movs	r3, #2
 800348c:	e096      	b.n	80035bc <HAL_ADC_Start_DMA+0x17c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_ADC_Start_DMA+0x190>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d008      	beq.n	80034b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d002      	beq.n	80034b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	d17a      	bne.n	80035a8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fcec 	bl	8003e90 <ADC_Enable>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d16d      	bne.n	800359e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_ADC_Start_DMA+0x184>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_ADC_Start_DMA+0xb4>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <HAL_ADC_Start_DMA+0x194>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d002      	beq.n	80034f0 <HAL_ADC_Start_DMA+0xb0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e003      	b.n	80034f8 <HAL_ADC_Start_DMA+0xb8>
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_ADC_Start_DMA+0x198>)
 80034f2:	e001      	b.n	80034f8 <HAL_ADC_Start_DMA+0xb8>
 80034f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	f023 0206 	bic.w	r2, r3, #6
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
 800352a:	e002      	b.n	8003532 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <HAL_ADC_Start_DMA+0x19c>)
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_ADC_Start_DMA+0x1a0>)
 8003540:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <HAL_ADC_Start_DMA+0x1a4>)
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	221c      	movs	r2, #28
 8003550:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0210 	orr.w	r2, r2, #16
 8003568:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3340      	adds	r3, #64	; 0x40
 8003584:	4619      	mov	r1, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f001 f91b 	bl	80047c4 <HAL_DMA_Start_IT>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fd56 	bl	8003048 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800359c:	e00d      	b.n	80035ba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80035a6:	e008      	b.n	80035ba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80035b4:	e001      	b.n	80035ba <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	50000100 	.word	0x50000100
 80035c8:	50000300 	.word	0x50000300
 80035cc:	50000700 	.word	0x50000700
 80035d0:	50000600 	.word	0x50000600
 80035d4:	50000500 	.word	0x50000500
 80035d8:	50000400 	.word	0x50000400
 80035dc:	08004013 	.word	0x08004013
 80035e0:	080040eb 	.word	0x080040eb
 80035e4:	08004107 	.word	0x08004107

080035e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0b6      	sub	sp, #216	; 0xd8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x24>
 800362e:	2302      	movs	r3, #2
 8003630:	f000 bc13 	b.w	8003e5a <HAL_ADC_ConfigChannel+0x84a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fd15 	bl	8003070 <LL_ADC_REG_IsConversionOngoing>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 83f3 	bne.w	8003e34 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f7ff fbcb 	bl	8002df6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fd03 	bl	8003070 <LL_ADC_REG_IsConversionOngoing>
 800366a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fd0f 	bl	8003096 <LL_ADC_INJ_IsConversionOngoing>
 8003678:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800367c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 81d9 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 81d4 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003698:	d10f      	bne.n	80036ba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	4619      	mov	r1, r3
 80036a6:	f7ff fbd2 	bl	8002e4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fb79 	bl	8002daa <LL_ADC_SetSamplingTimeCommonConfig>
 80036b8:	e00e      	b.n	80036d8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f7ff fbc1 	bl	8002e4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fb69 	bl	8002daa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d022      	beq.n	8003740 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6919      	ldr	r1, [r3, #16]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800370a:	f7ff fac3 	bl	8002c94 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6919      	ldr	r1, [r3, #16]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	461a      	mov	r2, r3
 800371c:	f7ff fb0f 	bl	8002d3e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6919      	ldr	r1, [r3, #16]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	7f1b      	ldrb	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d102      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x126>
 8003730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003734:	e000      	b.n	8003738 <HAL_ADC_ConfigChannel+0x128>
 8003736:	2300      	movs	r3, #0
 8003738:	461a      	mov	r2, r3
 800373a:	f7ff fb1b 	bl	8002d74 <LL_ADC_SetOffsetSaturation>
 800373e:	e17b      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fac8 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 800374c:	4603      	mov	r3, r0
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <HAL_ADC_ConfigChannel+0x15c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fabd 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003762:	4603      	mov	r3, r0
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	e01e      	b.n	80037aa <HAL_ADC_ConfigChannel+0x19a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fab2 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800378a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800378e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800379a:	2320      	movs	r3, #32
 800379c:	e004      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800379e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1b2>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	e018      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x1e4>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80037de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037e6:	2320      	movs	r3, #32
 80037e8:	e004      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d106      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fa81 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fa65 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003812:	4603      	mov	r3, r0
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x222>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa5a 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003828:	4603      	mov	r3, r0
 800382a:	0e9b      	lsrs	r3, r3, #26
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	e01e      	b.n	8003870 <HAL_ADC_ConfigChannel+0x260>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fa4f 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003850:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e004      	b.n	800386e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x278>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	e018      	b.n	80038ba <HAL_ADC_ConfigChannel+0x2aa>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800389c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80038a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e004      	b.n	80038ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80038b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d106      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fa1e 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fa02 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x2e8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2102      	movs	r1, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f9f7 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	f003 021f 	and.w	r2, r3, #31
 80038f6:	e01e      	b.n	8003936 <HAL_ADC_ConfigChannel+0x326>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2102      	movs	r1, #2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f9ec 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800391a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800391e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003926:	2320      	movs	r3, #32
 8003928:	e004      	b.n	8003934 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_ADC_ConfigChannel+0x33e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	e016      	b.n	800397c <HAL_ADC_ConfigChannel+0x36c>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800396e:	2320      	movs	r3, #32
 8003970:	e004      	b.n	800397c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800397c:	429a      	cmp	r2, r3
 800397e:	d106      	bne.n	800398e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f9bd 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2103      	movs	r1, #3
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f9a1 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x3aa>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2103      	movs	r1, #3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f996 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80039b0:	4603      	mov	r3, r0
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	e017      	b.n	80039ea <HAL_ADC_ConfigChannel+0x3da>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2103      	movs	r1, #3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f98b 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x3f2>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0e9b      	lsrs	r3, r3, #26
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	e011      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x416>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e003      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d106      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2103      	movs	r1, #3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f968 	bl	8002d08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fadd 	bl	8002ffc <LL_ADC_IsEnabled>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f040 813d 	bne.w	8003cc4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f7ff fa24 	bl	8002ea4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4aa2      	ldr	r2, [pc, #648]	; (8003cec <HAL_ADC_ConfigChannel+0x6dc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f040 812e 	bne.w	8003cc4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x480>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e019      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x4b4>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	bf94      	ite	ls
 8003abe:	2301      	movls	r3, #1
 8003ac0:	2300      	movhi	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d079      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x4d4>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	3301      	adds	r3, #1
 8003adc:	069b      	lsls	r3, r3, #26
 8003ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae2:	e015      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x500>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e003      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	069b      	lsls	r3, r3, #26
 8003b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x520>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	e017      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x550>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b48:	2320      	movs	r3, #32
 8003b4a:	e003      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	ea42 0103 	orr.w	r1, r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x576>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	3301      	adds	r3, #1
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	051b      	lsls	r3, r3, #20
 8003b84:	e018      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x5a8>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e003      	b.n	8003baa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	e07e      	b.n	8003cba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x5c8>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	3301      	adds	r3, #1
 8003bd0:	069b      	lsls	r3, r3, #26
 8003bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd6:	e015      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x5f4>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e003      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	069b      	lsls	r3, r3, #26
 8003c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x614>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	e017      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x644>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	61fb      	str	r3, [r7, #28]
  return result;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	e003      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10d      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x670>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	3b1e      	subs	r3, #30
 8003c78:	051b      	lsls	r3, r3, #20
 8003c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	e01b      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x6a8>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	613b      	str	r3, [r7, #16]
  return result;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f003 021f 	and.w	r2, r3, #31
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b1e      	subs	r3, #30
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7ff f8c5 	bl	8002e4e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80be 	beq.w	8003e4e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cda:	d004      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x6d6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10a      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x6ec>
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ce8:	e009      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x6ee>
 8003cea:	bf00      	nop
 8003cec:	407f0000 	.word	0x407f0000
 8003cf0:	80080000 	.word	0x80080000
 8003cf4:	50000100 	.word	0x50000100
 8003cf8:	50000300 	.word	0x50000300
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_ADC_ConfigChannel+0x854>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe ffba 	bl	8002c78 <LL_ADC_GetCommonPathInternalCh>
 8003d04:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a56      	ldr	r2, [pc, #344]	; (8003e68 <HAL_ADC_ConfigChannel+0x858>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x70c>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a55      	ldr	r2, [pc, #340]	; (8003e6c <HAL_ADC_ConfigChannel+0x85c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d13a      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d134      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d30:	d005      	beq.n	8003d3e <HAL_ADC_ConfigChannel+0x72e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_ADC_ConfigChannel+0x860>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	f040 8085 	bne.w	8003e48 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d46:	d004      	beq.n	8003d52 <HAL_ADC_ConfigChannel+0x742>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a49      	ldr	r2, [pc, #292]	; (8003e74 <HAL_ADC_ConfigChannel+0x864>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x746>
 8003d52:	4a49      	ldr	r2, [pc, #292]	; (8003e78 <HAL_ADC_ConfigChannel+0x868>)
 8003d54:	e000      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x748>
 8003d56:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <HAL_ADC_ConfigChannel+0x854>)
 8003d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fe ff75 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d68:	4b44      	ldr	r3, [pc, #272]	; (8003e7c <HAL_ADC_ConfigChannel+0x86c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	4a44      	ldr	r2, [pc, #272]	; (8003e80 <HAL_ADC_ConfigChannel+0x870>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d82:	e002      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f9      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d90:	e05a      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3b      	ldr	r2, [pc, #236]	; (8003e84 <HAL_ADC_ConfigChannel+0x874>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d125      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x7d8>
 8003d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11f      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a31      	ldr	r2, [pc, #196]	; (8003e74 <HAL_ADC_ConfigChannel+0x864>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d104      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x7ac>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <HAL_ADC_ConfigChannel+0x878>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d047      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc4:	d004      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x7c0>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <HAL_ADC_ConfigChannel+0x864>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x7c4>
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_ADC_ConfigChannel+0x868>)
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x7c6>
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <HAL_ADC_ConfigChannel+0x854>)
 8003dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe ff36 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003de6:	e031      	b.n	8003e4c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <HAL_ADC_ConfigChannel+0x87c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d12d      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d127      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_ADC_ConfigChannel+0x864>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADC_ConfigChannel+0x80c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <HAL_ADC_ConfigChannel+0x864>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x810>
 8003e1c:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <HAL_ADC_ConfigChannel+0x868>)
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x812>
 8003e20:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_ADC_ConfigChannel+0x854>)
 8003e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe ff10 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
 8003e32:	e00c      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e46:	e002      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	37d8      	adds	r7, #216	; 0xd8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	50000700 	.word	0x50000700
 8003e68:	c3210000 	.word	0xc3210000
 8003e6c:	90c00010 	.word	0x90c00010
 8003e70:	50000600 	.word	0x50000600
 8003e74:	50000100 	.word	0x50000100
 8003e78:	50000300 	.word	0x50000300
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	053e2d63 	.word	0x053e2d63
 8003e84:	c7520000 	.word	0xc7520000
 8003e88:	50000500 	.word	0x50000500
 8003e8c:	cb840000 	.word	0xcb840000

08003e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f8ad 	bl	8002ffc <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d14d      	bne.n	8003f44 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <ADC_Enable+0xc0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e039      	b.n	8003f46 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f868 	bl	8002fac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003edc:	f7fe fe78 	bl	8002bd0 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee2:	e028      	b.n	8003f36 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f887 	bl	8002ffc <LL_ADC_IsEnabled>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff f857 	bl	8002fac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003efe:	f7fe fe67 	bl	8002bd0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d914      	bls.n	8003f36 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d00d      	beq.n	8003f36 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e007      	b.n	8003f46 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d1cf      	bne.n	8003ee4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	8000003f 	.word	0x8000003f

08003f54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff f85e 	bl	8003022 <LL_ADC_IsDisableOngoing>
 8003f66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f845 	bl	8002ffc <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d047      	beq.n	8004008 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d144      	bne.n	8004008 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030d 	and.w	r3, r3, #13
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f81f 	bl	8002fd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f9e:	f7fe fe17 	bl	8002bd0 <HAL_GetTick>
 8003fa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa4:	e029      	b.n	8003ffa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e023      	b.n	800400a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fc2:	f7fe fe05 	bl	8002bd0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d914      	bls.n	8003ffa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	f043 0210 	orr.w	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e007      	b.n	800400a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1dc      	bne.n	8003fc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004028:	2b00      	cmp	r3, #0
 800402a:	d14b      	bne.n	80040c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d021      	beq.n	800408a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fec0 	bl	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d032      	beq.n	80040bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d12b      	bne.n	80040bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11f      	bne.n	80040bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	65da      	str	r2, [r3, #92]	; 0x5c
 8004088:	e018      	b.n	80040bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d111      	bne.n	80040bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7fd f8cf 	bl	8001260 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040c2:	e00e      	b.n	80040e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fa93 	bl	80035fc <HAL_ADC_ErrorCallback>
}
 80040d6:	e004      	b.n	80040e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff fa75 	bl	80035e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	f043 0204 	orr.w	r2, r3, #4
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fa65 	bl	80035fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <LL_ADC_IsEnabled>:
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <LL_ADC_IsEnabled+0x18>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <LL_ADC_IsEnabled+0x1a>
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_StartCalibration>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004172:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800417c:	4313      	orrs	r3, r2
 800417e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_IsCalibrationOnGoing>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a6:	d101      	bne.n	80041ac <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_ADC_REG_IsConversionOngoing>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d101      	bne.n	80041d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_ADCEx_Calibration_Start+0x1c>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e04d      	b.n	8004298 <HAL_ADCEx_Calibration_Start+0xb8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fea5 	bl	8003f54 <ADC_Disable>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d136      	bne.n	8004282 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff96 	bl	8004160 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004234:	e014      	b.n	8004260 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d90d      	bls.n	8004260 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f023 0312 	bic.w	r3, r3, #18
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e01b      	b.n	8004298 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff94 	bl	8004192 <LL_ADC_IsCalibrationOnGoing>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e2      	bne.n	8004236 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f023 0303 	bic.w	r3, r3, #3
 8004278:	f043 0201 	orr.w	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004280:	e005      	b.n	800428e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	f043 0210 	orr.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	0004de01 	.word	0x0004de01

080042a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b0a1      	sub	sp, #132	; 0x84
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0e7      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80042ca:	2300      	movs	r3, #0
 80042cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80042ce:	2300      	movs	r3, #0
 80042d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042da:	d102      	bne.n	80042e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	e009      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6e      	ldr	r2, [pc, #440]	; (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d102      	bne.n	80042f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80042ec:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	e001      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0be      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff4f 	bl	80041ba <LL_ADC_REG_IsConversionOngoing>
 800431c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff49 	bl	80041ba <LL_ADC_REG_IsConversionOngoing>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80a0 	bne.w	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 809c 	bne.w	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004340:	d004      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a55      	ldr	r2, [pc, #340]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800434c:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800434e:	e000      	b.n	8004352 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004350:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004352:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d04b      	beq.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800435c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800436e:	035b      	lsls	r3, r3, #13
 8004370:	430b      	orrs	r3, r1
 8004372:	431a      	orrs	r2, r3
 8004374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004376:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004380:	d004      	beq.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a45      	ldr	r2, [pc, #276]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10f      	bne.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800438c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004390:	f7ff fed3 	bl	800413a <LL_ADC_IsEnabled>
 8004394:	4604      	mov	r4, r0
 8004396:	4841      	ldr	r0, [pc, #260]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004398:	f7ff fecf 	bl	800413a <LL_ADC_IsEnabled>
 800439c:	4603      	mov	r3, r0
 800439e:	4323      	orrs	r3, r4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e012      	b.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043ac:	483c      	ldr	r0, [pc, #240]	; (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043ae:	f7ff fec4 	bl	800413a <LL_ADC_IsEnabled>
 80043b2:	4604      	mov	r4, r0
 80043b4:	483b      	ldr	r0, [pc, #236]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043b6:	f7ff fec0 	bl	800413a <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	431c      	orrs	r4, r3
 80043be:	483c      	ldr	r0, [pc, #240]	; (80044b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043c0:	f7ff febb 	bl	800413a <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4323      	orrs	r3, r4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d056      	beq.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	6811      	ldr	r1, [r2, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f2:	e047      	b.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004408:	d004      	beq.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10f      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004414:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004418:	f7ff fe8f 	bl	800413a <LL_ADC_IsEnabled>
 800441c:	4604      	mov	r4, r0
 800441e:	481f      	ldr	r0, [pc, #124]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004420:	f7ff fe8b 	bl	800413a <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	4323      	orrs	r3, r4
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e012      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004434:	481a      	ldr	r0, [pc, #104]	; (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004436:	f7ff fe80 	bl	800413a <LL_ADC_IsEnabled>
 800443a:	4604      	mov	r4, r0
 800443c:	4819      	ldr	r0, [pc, #100]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800443e:	f7ff fe7c 	bl	800413a <LL_ADC_IsEnabled>
 8004442:	4603      	mov	r3, r0
 8004444:	431c      	orrs	r4, r3
 8004446:	481a      	ldr	r0, [pc, #104]	; (80044b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004448:	f7ff fe77 	bl	800413a <LL_ADC_IsEnabled>
 800444c:	4603      	mov	r3, r0
 800444e:	4323      	orrs	r3, r4
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d012      	beq.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800445e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800446c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800446e:	e009      	b.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004482:	e000      	b.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004484:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800448e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004492:	4618      	mov	r0, r3
 8004494:	3784      	adds	r7, #132	; 0x84
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}
 800449a:	bf00      	nop
 800449c:	50000100 	.word	0x50000100
 80044a0:	50000400 	.word	0x50000400
 80044a4:	50000500 	.word	0x50000500
 80044a8:	50000300 	.word	0x50000300
 80044ac:	50000700 	.word	0x50000700
 80044b0:	50000600 	.word	0x50000600

080044b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d0:	4013      	ands	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	60d3      	str	r3, [r2, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <__NVIC_GetPriorityGrouping+0x18>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 0307 	and.w	r3, r3, #7
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db0b      	blt.n	8004542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4907      	ldr	r1, [pc, #28]	; (8004550 <__NVIC_EnableIRQ+0x38>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	bf28      	it	cs
 80045c6:	2304      	movcs	r3, #4
 80045c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d902      	bls.n	80045d8 <NVIC_EncodePriority+0x30>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3b03      	subs	r3, #3
 80045d6:	e000      	b.n	80045da <NVIC_EncodePriority+0x32>
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	401a      	ands	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43d9      	mvns	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	4313      	orrs	r3, r2
         );
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff ff4c 	bl	80044b4 <__NVIC_SetPriorityGrouping>
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004632:	f7ff ff63 	bl	80044fc <__NVIC_GetPriorityGrouping>
 8004636:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f7ff ffb3 	bl	80045a8 <NVIC_EncodePriority>
 8004642:	4602      	mov	r2, r0
 8004644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff82 	bl	8004554 <__NVIC_SetPriority>
}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff56 	bl	8004518 <__NVIC_EnableIRQ>
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08d      	b.n	80047a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_DMA_Init+0x138>)
 800468e:	429a      	cmp	r2, r3
 8004690:	d80f      	bhi.n	80046b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <HAL_DMA_Init+0x13c>)
 800469a:	4413      	add	r3, r2
 800469c:	4a45      	ldr	r2, [pc, #276]	; (80047b4 <HAL_DMA_Init+0x140>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	009a      	lsls	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a42      	ldr	r2, [pc, #264]	; (80047b8 <HAL_DMA_Init+0x144>)
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
 80046b0:	e00e      	b.n	80046d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b40      	ldr	r3, [pc, #256]	; (80047bc <HAL_DMA_Init+0x148>)
 80046ba:	4413      	add	r3, r2
 80046bc:	4a3d      	ldr	r2, [pc, #244]	; (80047b4 <HAL_DMA_Init+0x140>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	009a      	lsls	r2, r3, #2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_DMA_Init+0x14c>)
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa76 	bl	8004c14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004730:	d102      	bne.n	8004738 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800474c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <HAL_DMA_Init+0x104>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d80c      	bhi.n	8004778 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa96 	bl	8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	e008      	b.n	800478a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40020407 	.word	0x40020407
 80047b0:	bffdfff8 	.word	0xbffdfff8
 80047b4:	cccccccd 	.word	0xcccccccd
 80047b8:	40020000 	.word	0x40020000
 80047bc:	bffdfbf8 	.word	0xbffdfbf8
 80047c0:	40020400 	.word	0x40020400

080047c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_DMA_Start_IT+0x20>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e066      	b.n	80048b2 <HAL_DMA_Start_IT+0xee>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d155      	bne.n	80048a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f9bb 	bl	8004b98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 020e 	orr.w	r2, r2, #14
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e00f      	b.n	800485c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 020a 	orr.w	r2, r2, #10
 800485a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004890:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e005      	b.n	80048b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
 80048ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d005      	beq.n	80048de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e037      	b.n	800494e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 020e 	bic.w	r2, r2, #14
 80048ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	f003 021f 	and.w	r2, r3, #31
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2101      	movs	r1, #1
 800491c:	fa01 f202 	lsl.w	r2, r1, r2
 8004920:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800492a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004942:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800494c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d00d      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2204      	movs	r2, #4
 8004988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e047      	b.n	8004a30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 020e 	bic.w	r2, r2, #14
 80049ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f202 	lsl.w	r2, r1, r2
 80049e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
    }
  }
  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d026      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x7a>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d021      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0204 	bic.w	r2, r2, #4
 8004a8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f003 021f 	and.w	r2, r3, #31
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2104      	movs	r1, #4
 8004a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d071      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ab2:	e06c      	b.n	8004b8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2202      	movs	r2, #2
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02e      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d029      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 020a 	bic.w	r2, r2, #10
 8004aee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2102      	movs	r1, #2
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d038      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b24:	e033      	b.n	8004b8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2208      	movs	r2, #8
 8004b30:	409a      	lsls	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02a      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d025      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 020e 	bic.w	r2, r2, #14
 8004b52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f202 	lsl.w	r2, r1, r2
 8004b66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
}
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f003 021f 	and.w	r2, r3, #31
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d108      	bne.n	8004bf8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bf6:	e007      	b.n	8004c08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d802      	bhi.n	8004c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e001      	b.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c30:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3b08      	subs	r3, #8
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40020407 	.word	0x40020407
 8004c80:	40020800 	.word	0x40020800
 8004c84:	40020820 	.word	0x40020820
 8004c88:	cccccccd 	.word	0xcccccccd
 8004c8c:	40020880 	.word	0x40020880

08004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cb2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	1000823f 	.word	0x1000823f
 8004cd4:	40020940 	.word	0x40020940

08004cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ce6:	e15a      	b.n	8004f9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 814c 	beq.w	8004f98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d005      	beq.n	8004d18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d130      	bne.n	8004d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4e:	2201      	movs	r2, #1
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0201 	and.w	r2, r3, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d017      	beq.n	8004db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d123      	bne.n	8004e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	08da      	lsrs	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	6939      	ldr	r1, [r7, #16]
 8004e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0203 	and.w	r2, r3, #3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80a6 	beq.w	8004f98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4c:	4b5b      	ldr	r3, [pc, #364]	; (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	4a5a      	ldr	r2, [pc, #360]	; (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6613      	str	r3, [r2, #96]	; 0x60
 8004e58:	4b58      	ldr	r3, [pc, #352]	; (8004fbc <HAL_GPIO_Init+0x2e4>)
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e64:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_GPIO_Init+0x2e8>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_GPIO_Init+0x1f8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a4c      	ldr	r2, [pc, #304]	; (8004fc4 <HAL_GPIO_Init+0x2ec>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d019      	beq.n	8004ecc <HAL_GPIO_Init+0x1f4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_GPIO_Init+0x2f0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_GPIO_Init+0x1f0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a4a      	ldr	r2, [pc, #296]	; (8004fcc <HAL_GPIO_Init+0x2f4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_GPIO_Init+0x1ec>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a49      	ldr	r2, [pc, #292]	; (8004fd0 <HAL_GPIO_Init+0x2f8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <HAL_GPIO_Init+0x1e8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a48      	ldr	r2, [pc, #288]	; (8004fd4 <HAL_GPIO_Init+0x2fc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_GPIO_Init+0x1e4>
 8004eb8:	2305      	movs	r3, #5
 8004eba:	e00a      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ebc:	2306      	movs	r3, #6
 8004ebe:	e008      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e006      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e004      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e002      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_GPIO_Init+0x1fa>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	f002 0203 	and.w	r2, r2, #3
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	4093      	lsls	r3, r2
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee2:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_GPIO_Init+0x2e8>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	3302      	adds	r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ef0:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f14:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f92:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f47f ae9d 	bne.w	8004ce8 <HAL_GPIO_Init+0x10>
  }
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	48000400 	.word	0x48000400
 8004fc8:	48000800 	.word	0x48000800
 8004fcc:	48000c00 	.word	0x48000c00
 8004fd0:	48001000 	.word	0x48001000
 8004fd4:	48001400 	.word	0x48001400
 8004fd8:	40010400 	.word	0x40010400

08004fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fec:	787b      	ldrb	r3, [r7, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ff8:	e002      	b.n	8005000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ffa:	887a      	ldrh	r2, [r7, #2]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	041a      	lsls	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43d9      	mvns	r1, r3
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	400b      	ands	r3, r1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fc fb29 	bl	80016b6 <HAL_GPIO_EXTI_Callback>
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40010400 	.word	0x40010400

08005070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b4b      	ldr	r3, [pc, #300]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	4a46      	ldr	r2, [pc, #280]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b43      	ldr	r3, [pc, #268]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050a4:	4a41      	ldr	r2, [pc, #260]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050ac:	4b40      	ldr	r3, [pc, #256]	; (80051b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	; 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b38      	ldr	r3, [pc, #224]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b33      	ldr	r3, [pc, #204]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d158      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e057      	b.n	80051a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005100:	e04d      	b.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d141      	bne.n	800518e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	d131      	bne.n	800517c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511e:	4a23      	ldr	r2, [pc, #140]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005128:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005130:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2232      	movs	r2, #50	; 0x32
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	0c9b      	lsrs	r3, r3, #18
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800514e:	e002      	b.n	8005156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005162:	d102      	bne.n	800516a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f2      	bne.n	8005150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	d112      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e011      	b.n	80051a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800518c:	e007      	b.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800519c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40007000 	.word	0x40007000
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	431bde83 	.word	0x431bde83

080051b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c6:	6093      	str	r3, [r2, #8]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000

080051d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e306      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d075      	beq.n	80052e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f6:	4b97      	ldr	r3, [pc, #604]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005200:	4b94      	ldr	r3, [pc, #592]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d102      	bne.n	8005216 <HAL_RCC_OscConfig+0x3e>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d002      	beq.n	800521c <HAL_RCC_OscConfig+0x44>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10b      	bne.n	8005234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	4b8d      	ldr	r3, [pc, #564]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05b      	beq.n	80052e0 <HAL_RCC_OscConfig+0x108>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d157      	bne.n	80052e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e2e1      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x74>
 800523e:	4b85      	ldr	r3, [pc, #532]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a84      	ldr	r2, [pc, #528]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x98>
 8005256:	4b7f      	ldr	r3, [pc, #508]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7e      	ldr	r2, [pc, #504]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b7c      	ldr	r3, [pc, #496]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7b      	ldr	r2, [pc, #492]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 8005270:	4b78      	ldr	r3, [pc, #480]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a77      	ldr	r2, [pc, #476]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b75      	ldr	r3, [pc, #468]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a74      	ldr	r2, [pc, #464]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd fc9e 	bl	8002bd0 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fd fc9a 	bl	8002bd0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e2a6      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052aa:	4b6a      	ldr	r3, [pc, #424]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xc0>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd fc8a 	bl	8002bd0 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fd fc86 	bl	8002bd0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e292      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052d2:	4b60      	ldr	r3, [pc, #384]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0xe8>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d075      	beq.n	80053da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ee:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f8:	4b56      	ldr	r3, [pc, #344]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d102      	bne.n	800530e <HAL_RCC_OscConfig+0x136>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d002      	beq.n	8005314 <HAL_RCC_OscConfig+0x13c>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d11f      	bne.n	8005354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005314:	4b4f      	ldr	r3, [pc, #316]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x154>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e265      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b49      	ldr	r3, [pc, #292]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	4946      	ldr	r1, [pc, #280]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005340:	4b45      	ldr	r3, [pc, #276]	; (8005458 <HAL_RCC_OscConfig+0x280>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fecf 	bl	80020e8 <HAL_InitTick>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d043      	beq.n	80053d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e251      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d023      	beq.n	80053a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535c:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fd fc32 	bl	8002bd0 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005370:	f7fd fc2e 	bl	8002bd0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e23a      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005382:	4b34      	ldr	r3, [pc, #208]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	492d      	ldr	r1, [pc, #180]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	e01a      	b.n	80053da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd fc0e 	bl	8002bd0 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fd fc0a 	bl	8002bd0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e216      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1e0>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d041      	beq.n	800546a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01c      	beq.n	8005428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd fbe7 	bl	8002bd0 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005406:	f7fd fbe3 	bl	8002bd0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e1ef      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ef      	beq.n	8005406 <HAL_RCC_OscConfig+0x22e>
 8005426:	e020      	b.n	800546a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fd fbca 	bl	8002bd0 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800543e:	e00d      	b.n	800545c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005440:	f7fd fbc6 	bl	8002bd0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d906      	bls.n	800545c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e1d2      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800545c:	4b8c      	ldr	r3, [pc, #560]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1ea      	bne.n	8005440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a6 	beq.w	80055c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800547c:	4b84      	ldr	r3, [pc, #528]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x2b4>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x2b6>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b7f      	ldr	r3, [pc, #508]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	4a7e      	ldr	r2, [pc, #504]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6593      	str	r3, [r2, #88]	; 0x58
 800549e:	4b7c      	ldr	r3, [pc, #496]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ae:	4b79      	ldr	r3, [pc, #484]	; (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ba:	4b76      	ldr	r3, [pc, #472]	; (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a75      	ldr	r2, [pc, #468]	; (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fd fb83 	bl	8002bd0 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fd fb7f 	bl	8002bd0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e18b      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e0:	4b6c      	ldr	r3, [pc, #432]	; (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x32e>
 80054f4:	4b66      	ldr	r3, [pc, #408]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	4a65      	ldr	r2, [pc, #404]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005504:	e024      	b.n	8005550 <HAL_RCC_OscConfig+0x378>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d110      	bne.n	8005530 <HAL_RCC_OscConfig+0x358>
 800550e:	4b60      	ldr	r3, [pc, #384]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	4a5e      	ldr	r2, [pc, #376]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800551e:	4b5c      	ldr	r3, [pc, #368]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	4a5a      	ldr	r2, [pc, #360]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800552e:	e00f      	b.n	8005550 <HAL_RCC_OscConfig+0x378>
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	4a56      	ldr	r2, [pc, #344]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005540:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	4a52      	ldr	r2, [pc, #328]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f023 0304 	bic.w	r3, r3, #4
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fd fb3a 	bl	8002bd0 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fd fb36 	bl	8002bd0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e140      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005576:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ed      	beq.n	8005560 <HAL_RCC_OscConfig+0x388>
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fd fb23 	bl	8002bd0 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fd fb1f 	bl	8002bd0 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e129      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a4:	4b3a      	ldr	r3, [pc, #232]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ed      	bne.n	800558e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055b2:	7ffb      	ldrb	r3, [r7, #31]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4a34      	ldr	r2, [pc, #208]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d03c      	beq.n	800564a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01c      	beq.n	8005612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055de:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd faf2 	bl	8002bd0 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f0:	f7fd faee 	bl	8002bd0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0fa      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ef      	beq.n	80055f0 <HAL_RCC_OscConfig+0x418>
 8005610:	e01b      	b.n	800564a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005612:	4b1f      	ldr	r3, [pc, #124]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005618:	4a1d      	ldr	r2, [pc, #116]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fad5 	bl	8002bd0 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800562a:	f7fd fad1 	bl	8002bd0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0dd      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800563e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ef      	bne.n	800562a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80d1 	beq.w	80057f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b0c      	cmp	r3, #12
 800565e:	f000 808b 	beq.w	8005778 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d15e      	bne.n	8005728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a08      	ldr	r2, [pc, #32]	; (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fd faab 	bl	8002bd0 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800567c:	e00c      	b.n	8005698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567e:	f7fd faa7 	bl	8002bd0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d905      	bls.n	8005698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0b3      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005698:	4b59      	ldr	r3, [pc, #356]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ec      	bne.n	800567e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	4b56      	ldr	r3, [pc, #344]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4b56      	ldr	r3, [pc, #344]	; (8005804 <HAL_RCC_OscConfig+0x62c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6a11      	ldr	r1, [r2, #32]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	4311      	orrs	r1, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056be:	0212      	lsls	r2, r2, #8
 80056c0:	4311      	orrs	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056c6:	0852      	lsrs	r2, r2, #1
 80056c8:	3a01      	subs	r2, #1
 80056ca:	0552      	lsls	r2, r2, #21
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056d2:	0852      	lsrs	r2, r2, #1
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0652      	lsls	r2, r2, #25
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056de:	06d2      	lsls	r2, r2, #27
 80056e0:	430a      	orrs	r2, r1
 80056e2:	4947      	ldr	r1, [pc, #284]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a44      	ldr	r2, [pc, #272]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a41      	ldr	r2, [pc, #260]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd fa66 	bl	8002bd0 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005708:	f7fd fa62 	bl	8002bd0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e06e      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x530>
 8005726:	e066      	b.n	80057f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005728:	4b35      	ldr	r3, [pc, #212]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a34      	ldr	r2, [pc, #208]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800572e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005732:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005734:	4b32      	ldr	r3, [pc, #200]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a31      	ldr	r2, [pc, #196]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005740:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a2e      	ldr	r2, [pc, #184]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 8005746:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800574a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd fa3e 	bl	8002bd0 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005758:	f7fd fa3a 	bl	8002bd0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e046      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x580>
 8005776:	e03e      	b.n	80057f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e039      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCC_OscConfig+0x628>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 0203 	and.w	r2, r3, #3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	429a      	cmp	r2, r3
 8005796:	d12c      	bne.n	80057f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	3b01      	subs	r3, #1
 80057a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d123      	bne.n	80057f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d11b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d113      	bne.n	80057f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d109      	bne.n	80057f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	3b01      	subs	r3, #1
 80057ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	019f800c 	.word	0x019f800c

08005808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e11e      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b91      	ldr	r3, [pc, #580]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b8e      	ldr	r3, [pc, #568]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 020f 	bic.w	r2, r3, #15
 8005836:	498c      	ldr	r1, [pc, #560]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e106      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d073      	beq.n	8005944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d129      	bne.n	80058b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005864:	4b81      	ldr	r3, [pc, #516]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0f4      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005874:	f000 f9d0 	bl	8005c18 <RCC_GetSysClockFreqFromPLLSource>
 8005878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4a7c      	ldr	r2, [pc, #496]	; (8005a70 <HAL_RCC_ClockConfig+0x268>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d93f      	bls.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005882:	4b7a      	ldr	r3, [pc, #488]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d033      	beq.n	8005902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12f      	bne.n	8005902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058aa:	4a70      	ldr	r2, [pc, #448]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e024      	b.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c0:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0c6      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d0:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0be      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058e0:	f000 f8ce 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a61      	ldr	r2, [pc, #388]	; (8005a70 <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d909      	bls.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f6:	4a5d      	ldr	r2, [pc, #372]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005902:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 0203 	bic.w	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4957      	ldr	r1, [pc, #348]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005910:	4313      	orrs	r3, r2
 8005912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fd f95c 	bl	8002bd0 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	e00a      	b.n	8005932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591c:	f7fd f958 	bl	8002bd0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e095      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 020c 	and.w	r2, r3, #12
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	429a      	cmp	r2, r3
 8005942:	d1eb      	bne.n	800591c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a42      	ldr	r2, [pc, #264]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005974:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800597c:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 800597e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4936      	ldr	r1, [pc, #216]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
 8005996:	e008      	b.n	80059aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d105      	bne.n	80059aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800599e:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4a32      	ldr	r2, [pc, #200]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80059a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059aa:	4b2f      	ldr	r3, [pc, #188]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d21d      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b8:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 020f 	bic.w	r2, r3, #15
 80059c0:	4929      	ldr	r1, [pc, #164]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059c8:	f7fd f902 	bl	8002bd0 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fd f8fe 	bl	8002bd0 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e03b      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1ed      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4917      	ldr	r1, [pc, #92]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490f      	ldr	r1, [pc, #60]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a32:	f000 f825 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490c      	ldr	r1, [pc, #48]	; (8005a74 <HAL_RCC_ClockConfig+0x26c>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <HAL_RCC_ClockConfig+0x270>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x274>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc fb46 	bl	80020e8 <HAL_InitTick>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	04c4b400 	.word	0x04c4b400
 8005a74:	0800e9bc 	.word	0x0800e9bc
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	20000010 	.word	0x20000010

08005a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a86:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d102      	bne.n	8005a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a92:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e047      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aa4:	4b26      	ldr	r3, [pc, #152]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	e03e      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d136      	bne.n	8005b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ab6:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	3301      	adds	r3, #1
 8005acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d10c      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ade:	68d2      	ldr	r2, [r2, #12]
 8005ae0:	0a12      	lsrs	r2, r2, #8
 8005ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	617b      	str	r3, [r7, #20]
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aee:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	0a12      	lsrs	r2, r2, #8
 8005afc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
      break;
 8005b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	0e5b      	lsrs	r3, r3, #25
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	3301      	adds	r3, #1
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e001      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b28:	693b      	ldr	r3, [r7, #16]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	016e3600 	.word	0x016e3600

08005b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b60:	f7ff fff0 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	4904      	ldr	r1, [pc, #16]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b72:	5ccb      	ldrb	r3, [r1, r3]
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800e9cc 	.word	0x0800e9cc

08005b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b8c:	f7ff ffda 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0adb      	lsrs	r3, r3, #11
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800e9cc 	.word	0x0800e9cc

08005bb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0203 	and.w	r2, r3, #3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <HAL_RCC_GetClockConfig+0x60>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	601a      	str	r2, [r3, #0]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40022000 	.word	0x40022000

08005c18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c1e:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d10c      	bne.n	8005c56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c46:	68d2      	ldr	r2, [r2, #12]
 8005c48:	0a12      	lsrs	r2, r2, #8
 8005c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c4e:	fb02 f303 	mul.w	r3, r2, r3
 8005c52:	617b      	str	r3, [r7, #20]
    break;
 8005c54:	e00c      	b.n	8005c70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c60:	68d2      	ldr	r2, [r2, #12]
 8005c62:	0a12      	lsrs	r2, r2, #8
 8005c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c68:	fb02 f303 	mul.w	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]
    break;
 8005c6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	0e5b      	lsrs	r3, r3, #25
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c8a:	687b      	ldr	r3, [r7, #4]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	016e3600 	.word	0x016e3600
 8005ca0:	00f42400 	.word	0x00f42400

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cac:	2300      	movs	r3, #0
 8005cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8098 	beq.w	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc6:	4b43      	ldr	r3, [pc, #268]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	4b40      	ldr	r3, [pc, #256]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	4a3f      	ldr	r2, [pc, #252]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cde:	4b3d      	ldr	r3, [pc, #244]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cea:	2301      	movs	r3, #1
 8005cec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cee:	4b3a      	ldr	r3, [pc, #232]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a39      	ldr	r2, [pc, #228]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cfa:	f7fc ff69 	bl	8002bd0 <HAL_GetTick>
 8005cfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d00:	e009      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d02:	f7fc ff65 	bl	8002bd0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d902      	bls.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	74fb      	strb	r3, [r7, #19]
        break;
 8005d14:	e005      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d16:	4b30      	ldr	r3, [pc, #192]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ef      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d22:	7cfb      	ldrb	r3, [r7, #19]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d159      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d019      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d50:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d82:	f7fc ff25 	bl	8002bd0 <HAL_GetTick>
 8005d86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d88:	e00b      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8a:	f7fc ff21 	bl	8002bd0 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d902      	bls.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	74fb      	strb	r3, [r7, #19]
            break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ec      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005db0:	7cfb      	ldrb	r3, [r7, #19]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db6:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	4903      	ldr	r1, [pc, #12]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005dcc:	e008      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dce:	7cfb      	ldrb	r3, [r7, #19]
 8005dd0:	74bb      	strb	r3, [r7, #18]
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005de0:	7c7b      	ldrb	r3, [r7, #17]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de6:	4ba7      	ldr	r3, [pc, #668]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dea:	4aa6      	ldr	r2, [pc, #664]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dfe:	4ba1      	ldr	r3, [pc, #644]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f023 0203 	bic.w	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	499d      	ldr	r1, [pc, #628]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f023 020c 	bic.w	r2, r3, #12
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4995      	ldr	r1, [pc, #596]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e42:	4b90      	ldr	r3, [pc, #576]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	498c      	ldr	r1, [pc, #560]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e64:	4b87      	ldr	r3, [pc, #540]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	4984      	ldr	r1, [pc, #528]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e86:	4b7f      	ldr	r3, [pc, #508]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	497b      	ldr	r1, [pc, #492]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ea8:	4b76      	ldr	r3, [pc, #472]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	4973      	ldr	r1, [pc, #460]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eca:	4b6e      	ldr	r3, [pc, #440]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	496a      	ldr	r1, [pc, #424]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eec:	4b65      	ldr	r3, [pc, #404]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	4962      	ldr	r1, [pc, #392]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f0e:	4b5d      	ldr	r3, [pc, #372]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	4959      	ldr	r1, [pc, #356]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f30:	4b54      	ldr	r3, [pc, #336]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f36:	f023 0203 	bic.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	4951      	ldr	r1, [pc, #324]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f52:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4948      	ldr	r1, [pc, #288]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f74:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4940      	ldr	r1, [pc, #256]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b3b      	ldr	r3, [pc, #236]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fac:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	4932      	ldr	r1, [pc, #200]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a2c      	ldr	r2, [pc, #176]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fe4:	4b27      	ldr	r3, [pc, #156]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	4924      	ldr	r1, [pc, #144]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	4916      	ldr	r1, [pc, #88]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800603a:	d105      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b11      	ldr	r3, [pc, #68]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a10      	ldr	r2, [pc, #64]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d019      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4908      	ldr	r1, [pc, #32]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006072:	d109      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006074:	4b03      	ldr	r3, [pc, #12]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a02      	ldr	r2, [pc, #8]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607e:	60d3      	str	r3, [r2, #12]
 8006080:	e002      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006094:	4b29      	ldr	r3, [pc, #164]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	4926      	ldr	r1, [pc, #152]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a20      	ldr	r2, [pc, #128]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d015      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	4918      	ldr	r1, [pc, #96]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ea:	d105      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800610a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006112:	490a      	ldr	r1, [pc, #40]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006130:	7cbb      	ldrb	r3, [r7, #18]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000

08006140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e049      	b.n	80061e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc fb16 	bl	8002798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f000 ff98 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e04c      	b.n	80062a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <HAL_TIM_Base_Start+0xc0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d022      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d01d      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <HAL_TIM_Base_Start+0xc4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d018      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIM_Base_Start+0xc8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <HAL_TIM_Base_Start+0xcc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <HAL_TIM_Base_Start+0xd0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_Base_Start+0xd4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_Base_Start+0x70>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_TIM_Base_Start+0xd8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d115      	bne.n	800628c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_TIM_Base_Start+0xdc>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d015      	beq.n	800629e <HAL_TIM_Base_Start+0xae>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d011      	beq.n	800629e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	e008      	b.n	800629e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e000      	b.n	80062a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40000800 	.word	0x40000800
 80062bc:	40000c00 	.word	0x40000c00
 80062c0:	40013400 	.word	0x40013400
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40015000 	.word	0x40015000
 80062cc:	00010007 	.word	0x00010007

080062d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d001      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e054      	b.n	8006392 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a26      	ldr	r2, [pc, #152]	; (80063a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006312:	d01d      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_TIM_Base_Start_IT+0xdc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d115      	bne.n	800637c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	4b19      	ldr	r3, [pc, #100]	; (80063bc <HAL_TIM_Base_Start_IT+0xec>)
 8006358:	4013      	ands	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b06      	cmp	r3, #6
 8006360:	d015      	beq.n	800638e <HAL_TIM_Base_Start_IT+0xbe>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d011      	beq.n	800638e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637a:	e008      	b.n	800638e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e000      	b.n	8006390 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40012c00 	.word	0x40012c00
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40013400 	.word	0x40013400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40015000 	.word	0x40015000
 80063bc:	00010007 	.word	0x00010007

080063c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e049      	b.n	8006466 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f841 	bl	800646e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f000 fe58 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x24>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e03c      	b.n	8006522 <HAL_TIM_PWM_Start+0x9e>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d109      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x3e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	e02f      	b.n	8006522 <HAL_TIM_PWM_Start+0x9e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d109      	bne.n	80064dc <HAL_TIM_PWM_Start+0x58>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e022      	b.n	8006522 <HAL_TIM_PWM_Start+0x9e>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b0c      	cmp	r3, #12
 80064e0:	d109      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x72>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	bf14      	ite	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	2300      	moveq	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	e015      	b.n	8006522 <HAL_TIM_PWM_Start+0x9e>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d109      	bne.n	8006510 <HAL_TIM_PWM_Start+0x8c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e008      	b.n	8006522 <HAL_TIM_PWM_Start+0x9e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0a6      	b.n	8006678 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_TIM_PWM_Start+0xb6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006538:	e023      	b.n	8006582 <HAL_TIM_PWM_Start+0xfe>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b04      	cmp	r3, #4
 800653e:	d104      	bne.n	800654a <HAL_TIM_PWM_Start+0xc6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006548:	e01b      	b.n	8006582 <HAL_TIM_PWM_Start+0xfe>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d104      	bne.n	800655a <HAL_TIM_PWM_Start+0xd6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006558:	e013      	b.n	8006582 <HAL_TIM_PWM_Start+0xfe>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d104      	bne.n	800656a <HAL_TIM_PWM_Start+0xe6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006568:	e00b      	b.n	8006582 <HAL_TIM_PWM_Start+0xfe>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b10      	cmp	r3, #16
 800656e:	d104      	bne.n	800657a <HAL_TIM_PWM_Start+0xf6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006578:	e003      	b.n	8006582 <HAL_TIM_PWM_Start+0xfe>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2201      	movs	r2, #1
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fa00 	bl	8007990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a3a      	ldr	r2, [pc, #232]	; (8006680 <HAL_TIM_PWM_Start+0x1fc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_TIM_PWM_Start+0x148>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a39      	ldr	r2, [pc, #228]	; (8006684 <HAL_TIM_PWM_Start+0x200>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_TIM_PWM_Start+0x148>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a37      	ldr	r2, [pc, #220]	; (8006688 <HAL_TIM_PWM_Start+0x204>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_PWM_Start+0x148>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a36      	ldr	r2, [pc, #216]	; (800668c <HAL_TIM_PWM_Start+0x208>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_PWM_Start+0x148>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a34      	ldr	r2, [pc, #208]	; (8006690 <HAL_TIM_PWM_Start+0x20c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_PWM_Start+0x148>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a33      	ldr	r2, [pc, #204]	; (8006694 <HAL_TIM_PWM_Start+0x210>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_PWM_Start+0x14c>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_TIM_PWM_Start+0x14e>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a25      	ldr	r2, [pc, #148]	; (8006680 <HAL_TIM_PWM_Start+0x1fc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d01d      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a26      	ldr	r2, [pc, #152]	; (8006698 <HAL_TIM_PWM_Start+0x214>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a24      	ldr	r2, [pc, #144]	; (800669c <HAL_TIM_PWM_Start+0x218>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <HAL_TIM_PWM_Start+0x21c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <HAL_TIM_PWM_Start+0x200>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <HAL_TIM_PWM_Start+0x204>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIM_PWM_Start+0x1b2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a18      	ldr	r2, [pc, #96]	; (8006694 <HAL_TIM_PWM_Start+0x210>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d115      	bne.n	8006662 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <HAL_TIM_PWM_Start+0x220>)
 800663e:	4013      	ands	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b06      	cmp	r3, #6
 8006646:	d015      	beq.n	8006674 <HAL_TIM_PWM_Start+0x1f0>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664e:	d011      	beq.n	8006674 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006660:	e008      	b.n	8006674 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0201 	orr.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e000      	b.n	8006676 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800
 8006694:	40015000 	.word	0x40015000
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	00010007 	.word	0x00010007

080066a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e097      	b.n	80067ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fc f8ad 	bl	8002830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 fcd9 	bl	80070b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	4313      	orrs	r3, r2
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006748:	f023 030c 	bic.w	r3, r3, #12
 800674c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	4313      	orrs	r3, r2
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	031b      	lsls	r3, r3, #12
 8006778:	4313      	orrs	r3, r2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	4313      	orrs	r3, r2
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006804:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800680c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006814:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800681c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d110      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d102      	bne.n	8006830 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800682a:	7b7b      	ldrb	r3, [r7, #13]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d001      	beq.n	8006834 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e069      	b.n	8006908 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	e031      	b.n	80068aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b04      	cmp	r3, #4
 800684a:	d110      	bne.n	800686e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d102      	bne.n	8006858 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006852:	7b3b      	ldrb	r3, [r7, #12]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d001      	beq.n	800685c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e055      	b.n	8006908 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686c:	e01d      	b.n	80068aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d108      	bne.n	8006886 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d105      	bne.n	8006886 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800687a:	7b7b      	ldrb	r3, [r7, #13]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d102      	bne.n	8006886 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006880:	7b3b      	ldrb	r3, [r7, #12]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d001      	beq.n	800688a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e03e      	b.n	8006908 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_TIM_Encoder_Start+0xc4>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d008      	beq.n	80068c8 <HAL_TIM_Encoder_Start+0xd4>
 80068b6:	e00f      	b.n	80068d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2201      	movs	r2, #1
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f865 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 80068c6:	e016      	b.n	80068f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2201      	movs	r2, #1
 80068ce:	2104      	movs	r1, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f85d 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 80068d6:	e00e      	b.n	80068f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f855 	bl	8007990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	2104      	movs	r1, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f84e 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 80068f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d122      	bne.n	800696c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d11b      	bne.n	800696c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0202 	mvn.w	r2, #2
 800693c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb90 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006958:	e005      	b.n	8006966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb82 	bl	8007064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fb93 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b04      	cmp	r3, #4
 8006978:	d122      	bne.n	80069c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b04      	cmp	r3, #4
 8006986:	d11b      	bne.n	80069c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0204 	mvn.w	r2, #4
 8006990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb66 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 80069ac:	e005      	b.n	80069ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb58 	bl	8007064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb69 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d122      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d11b      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0208 	mvn.w	r2, #8
 80069e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb3c 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fb2e 	bl	8007064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fb3f 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b10      	cmp	r3, #16
 8006a20:	d122      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b10      	cmp	r3, #16
 8006a2e:	d11b      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0210 	mvn.w	r2, #16
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb12 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb04 	bl	8007064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fb15 	bl	800708c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10e      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d107      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0201 	mvn.w	r2, #1
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fa fe20 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b80      	cmp	r3, #128	; 0x80
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d107      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 f9a2 	bl	8007e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ace:	d10e      	bne.n	8006aee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d107      	bne.n	8006aee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f995 	bl	8007e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d10e      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d107      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fac3 	bl	80070a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d10e      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d107      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f06f 0220 	mvn.w	r2, #32
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f955 	bl	8007df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b54:	d10f      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b64:	d107      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f95b 	bl	8007e2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b84:	d10f      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b94:	d107      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f94d 	bl	8007e40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb4:	d10f      	bne.n	8006bd6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc4:	d107      	bne.n	8006bd6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f93f 	bl	8007e54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be4:	d10f      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f931 	bl	8007e68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e0ff      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b14      	cmp	r3, #20
 8006c3a:	f200 80f0 	bhi.w	8006e1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006e1f 	.word	0x08006e1f
 8006c4c:	08006e1f 	.word	0x08006e1f
 8006c50:	08006e1f 	.word	0x08006e1f
 8006c54:	08006cd9 	.word	0x08006cd9
 8006c58:	08006e1f 	.word	0x08006e1f
 8006c5c:	08006e1f 	.word	0x08006e1f
 8006c60:	08006e1f 	.word	0x08006e1f
 8006c64:	08006d1b 	.word	0x08006d1b
 8006c68:	08006e1f 	.word	0x08006e1f
 8006c6c:	08006e1f 	.word	0x08006e1f
 8006c70:	08006e1f 	.word	0x08006e1f
 8006c74:	08006d5b 	.word	0x08006d5b
 8006c78:	08006e1f 	.word	0x08006e1f
 8006c7c:	08006e1f 	.word	0x08006e1f
 8006c80:	08006e1f 	.word	0x08006e1f
 8006c84:	08006d9d 	.word	0x08006d9d
 8006c88:	08006e1f 	.word	0x08006e1f
 8006c8c:	08006e1f 	.word	0x08006e1f
 8006c90:	08006e1f 	.word	0x08006e1f
 8006c94:	08006ddd 	.word	0x08006ddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fab0 	bl	8007204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0204 	bic.w	r2, r2, #4
 8006cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6999      	ldr	r1, [r3, #24]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	619a      	str	r2, [r3, #24]
      break;
 8006cd6:	e0a5      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb2a 	bl	8007338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6999      	ldr	r1, [r3, #24]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	619a      	str	r2, [r3, #24]
      break;
 8006d18:	e084      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fb9d 	bl	8007460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0208 	orr.w	r2, r2, #8
 8006d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0204 	bic.w	r2, r2, #4
 8006d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	61da      	str	r2, [r3, #28]
      break;
 8006d58:	e064      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc0f 	bl	8007584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69d9      	ldr	r1, [r3, #28]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	021a      	lsls	r2, r3, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	61da      	str	r2, [r3, #28]
      break;
 8006d9a:	e043      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fc82 	bl	80076ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0208 	orr.w	r2, r2, #8
 8006db6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0204 	bic.w	r2, r2, #4
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006dda:	e023      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fccc 	bl	8007780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006df6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	021a      	lsls	r2, r3, #8
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006e1c:	e002      	b.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	75fb      	strb	r3, [r7, #23]
      break;
 8006e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop

08006e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIM_ConfigClockSource+0x1c>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e0f6      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x20a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6f      	ldr	r2, [pc, #444]	; (800704c <HAL_TIM_ConfigClockSource+0x214>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f000 80c1 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006e94:	4a6d      	ldr	r2, [pc, #436]	; (800704c <HAL_TIM_ConfigClockSource+0x214>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f200 80c6 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e9c:	4a6c      	ldr	r2, [pc, #432]	; (8007050 <HAL_TIM_ConfigClockSource+0x218>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 80b9 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006ea4:	4a6a      	ldr	r2, [pc, #424]	; (8007050 <HAL_TIM_ConfigClockSource+0x218>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f200 80be 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eac:	4a69      	ldr	r2, [pc, #420]	; (8007054 <HAL_TIM_ConfigClockSource+0x21c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 80b1 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb4:	4a67      	ldr	r2, [pc, #412]	; (8007054 <HAL_TIM_ConfigClockSource+0x21c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f200 80b6 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ebc:	4a66      	ldr	r2, [pc, #408]	; (8007058 <HAL_TIM_ConfigClockSource+0x220>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f000 80a9 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec4:	4a64      	ldr	r2, [pc, #400]	; (8007058 <HAL_TIM_ConfigClockSource+0x220>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f200 80ae 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ecc:	4a63      	ldr	r2, [pc, #396]	; (800705c <HAL_TIM_ConfigClockSource+0x224>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 80a1 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006ed4:	4a61      	ldr	r2, [pc, #388]	; (800705c <HAL_TIM_ConfigClockSource+0x224>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 80a6 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006edc:	4a60      	ldr	r2, [pc, #384]	; (8007060 <HAL_TIM_ConfigClockSource+0x228>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f000 8099 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006ee4:	4a5e      	ldr	r2, [pc, #376]	; (8007060 <HAL_TIM_ConfigClockSource+0x228>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f200 809e 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef0:	f000 8091 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006ef4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef8:	f200 8096 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f00:	f000 8089 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f08:	f200 808e 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f10:	d03e      	beq.n	8006f90 <HAL_TIM_ConfigClockSource+0x158>
 8006f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f16:	f200 8087 	bhi.w	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1e:	f000 8086 	beq.w	800702e <HAL_TIM_ConfigClockSource+0x1f6>
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	d87f      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f28:	2b70      	cmp	r3, #112	; 0x70
 8006f2a:	d01a      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x12a>
 8006f2c:	2b70      	cmp	r3, #112	; 0x70
 8006f2e:	d87b      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f30:	2b60      	cmp	r3, #96	; 0x60
 8006f32:	d050      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x19e>
 8006f34:	2b60      	cmp	r3, #96	; 0x60
 8006f36:	d877      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f38:	2b50      	cmp	r3, #80	; 0x50
 8006f3a:	d03c      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x17e>
 8006f3c:	2b50      	cmp	r3, #80	; 0x50
 8006f3e:	d873      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d058      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x1be>
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d86f      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f48:	2b30      	cmp	r3, #48	; 0x30
 8006f4a:	d064      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006f4c:	2b30      	cmp	r3, #48	; 0x30
 8006f4e:	d86b      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d060      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d867      	bhi.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d05c      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006f5c:	2b10      	cmp	r3, #16
 8006f5e:	d05a      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x1de>
 8006f60:	e062      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6899      	ldr	r1, [r3, #8]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f000 fced 	bl	8007950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	609a      	str	r2, [r3, #8]
      break;
 8006f8e:	e04f      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f000 fcd6 	bl	8007950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb2:	609a      	str	r2, [r3, #8]
      break;
 8006fb4:	e03c      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 fc48 	bl	8007858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2150      	movs	r1, #80	; 0x50
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fca1 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8006fd4:	e02c      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 fc67 	bl	80078b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2160      	movs	r1, #96	; 0x60
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fc91 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e01c      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	461a      	mov	r2, r3
 8007004:	f000 fc28 	bl	8007858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2140      	movs	r1, #64	; 0x40
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fc81 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007014:	e00c      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f000 fc78 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007026:	e003      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
      break;
 800702c:	e000      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800702e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	00100070 	.word	0x00100070
 8007050:	00100060 	.word	0x00100060
 8007054:	00100050 	.word	0x00100050
 8007058:	00100040 	.word	0x00100040
 800705c:	00100030 	.word	0x00100030
 8007060:	00100020 	.word	0x00100020

08007064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a46      	ldr	r2, [pc, #280]	; (80071e0 <TIM_Base_SetConfig+0x12c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d017      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d2:	d013      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a43      	ldr	r2, [pc, #268]	; (80071e4 <TIM_Base_SetConfig+0x130>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a42      	ldr	r2, [pc, #264]	; (80071e8 <TIM_Base_SetConfig+0x134>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a41      	ldr	r2, [pc, #260]	; (80071ec <TIM_Base_SetConfig+0x138>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a40      	ldr	r2, [pc, #256]	; (80071f0 <TIM_Base_SetConfig+0x13c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x48>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3f      	ldr	r2, [pc, #252]	; (80071f4 <TIM_Base_SetConfig+0x140>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <TIM_Base_SetConfig+0x12c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d023      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d01f      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a30      	ldr	r2, [pc, #192]	; (80071e4 <TIM_Base_SetConfig+0x130>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01b      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2f      	ldr	r2, [pc, #188]	; (80071e8 <TIM_Base_SetConfig+0x134>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d017      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2e      	ldr	r2, [pc, #184]	; (80071ec <TIM_Base_SetConfig+0x138>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2d      	ldr	r2, [pc, #180]	; (80071f0 <TIM_Base_SetConfig+0x13c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00f      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2d      	ldr	r2, [pc, #180]	; (80071f8 <TIM_Base_SetConfig+0x144>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <TIM_Base_SetConfig+0x148>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <TIM_Base_SetConfig+0x14c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_Base_SetConfig+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <TIM_Base_SetConfig+0x140>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d108      	bne.n	8007170 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <TIM_Base_SetConfig+0x12c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d013      	beq.n	80071c4 <TIM_Base_SetConfig+0x110>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <TIM_Base_SetConfig+0x13c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00f      	beq.n	80071c4 <TIM_Base_SetConfig+0x110>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <TIM_Base_SetConfig+0x144>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00b      	beq.n	80071c4 <TIM_Base_SetConfig+0x110>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a13      	ldr	r2, [pc, #76]	; (80071fc <TIM_Base_SetConfig+0x148>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d007      	beq.n	80071c4 <TIM_Base_SetConfig+0x110>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a12      	ldr	r2, [pc, #72]	; (8007200 <TIM_Base_SetConfig+0x14c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d003      	beq.n	80071c4 <TIM_Base_SetConfig+0x110>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <TIM_Base_SetConfig+0x140>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d103      	bne.n	80071cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	615a      	str	r2, [r3, #20]
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40015000 	.word	0x40015000
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0302 	bic.w	r3, r3, #2
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a30      	ldr	r2, [pc, #192]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2f      	ldr	r2, [pc, #188]	; (8007324 <TIM_OC1_SetConfig+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <TIM_OC1_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a2d      	ldr	r2, [pc, #180]	; (800732c <TIM_OC1_SetConfig+0x128>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <TIM_OC1_SetConfig+0x12c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <TIM_OC1_SetConfig+0x130>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10c      	bne.n	80072a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0308 	bic.w	r3, r3, #8
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 0304 	bic.w	r3, r3, #4
 80072a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <TIM_OC1_SetConfig+0x120>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00f      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <TIM_OC1_SetConfig+0x124>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1a      	ldr	r2, [pc, #104]	; (800732c <TIM_OC1_SetConfig+0x128>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d007      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a19      	ldr	r2, [pc, #100]	; (8007330 <TIM_OC1_SetConfig+0x12c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a18      	ldr	r2, [pc, #96]	; (8007334 <TIM_OC1_SetConfig+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d111      	bne.n	80072fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800
 8007334:	40015000 	.word	0x40015000

08007338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0210 	bic.w	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0320 	bic.w	r3, r3, #32
 8007386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a2c      	ldr	r2, [pc, #176]	; (8007448 <TIM_OC2_SetConfig+0x110>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_OC2_SetConfig+0x74>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a2b      	ldr	r2, [pc, #172]	; (800744c <TIM_OC2_SetConfig+0x114>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_OC2_SetConfig+0x74>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <TIM_OC2_SetConfig+0x118>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d10d      	bne.n	80073c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <TIM_OC2_SetConfig+0x110>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <TIM_OC2_SetConfig+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <TIM_OC2_SetConfig+0x11c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <TIM_OC2_SetConfig+0x120>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1c      	ldr	r2, [pc, #112]	; (800745c <TIM_OC2_SetConfig+0x124>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC2_SetConfig+0x118>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40013400 	.word	0x40013400
 8007450:	40015000 	.word	0x40015000
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2b      	ldr	r2, [pc, #172]	; (800756c <TIM_OC3_SetConfig+0x10c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_OC3_SetConfig+0x72>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <TIM_OC3_SetConfig+0x110>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_OC3_SetConfig+0x72>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a29      	ldr	r2, [pc, #164]	; (8007574 <TIM_OC3_SetConfig+0x114>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10d      	bne.n	80074ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <TIM_OC3_SetConfig+0x10c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a1d      	ldr	r2, [pc, #116]	; (8007570 <TIM_OC3_SetConfig+0x110>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00f      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <TIM_OC3_SetConfig+0x118>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1c      	ldr	r2, [pc, #112]	; (800757c <TIM_OC3_SetConfig+0x11c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1b      	ldr	r2, [pc, #108]	; (8007580 <TIM_OC3_SetConfig+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a16      	ldr	r2, [pc, #88]	; (8007574 <TIM_OC3_SetConfig+0x114>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d113      	bne.n	8007546 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800752c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40013400 	.word	0x40013400
 8007574:	40015000 	.word	0x40015000
 8007578:	40014000 	.word	0x40014000
 800757c:	40014400 	.word	0x40014400
 8007580:	40014800 	.word	0x40014800

08007584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	031b      	lsls	r3, r3, #12
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <TIM_OC4_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d007      	beq.n	80075f8 <TIM_OC4_SetConfig+0x74>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a2b      	ldr	r2, [pc, #172]	; (8007698 <TIM_OC4_SetConfig+0x114>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_OC4_SetConfig+0x74>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <TIM_OC4_SetConfig+0x118>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d10d      	bne.n	8007614 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	031b      	lsls	r3, r3, #12
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <TIM_OC4_SetConfig+0x110>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <TIM_OC4_SetConfig+0x114>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00f      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <TIM_OC4_SetConfig+0x11c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <TIM_OC4_SetConfig+0x120>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <TIM_OC4_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <TIM_OC4_SetConfig+0x118>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d113      	bne.n	800766c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800764a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007652:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	019b      	lsls	r3, r3, #6
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	019b      	lsls	r3, r3, #6
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40013400 	.word	0x40013400
 800769c:	40015000 	.word	0x40015000
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800

080076ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a19      	ldr	r2, [pc, #100]	; (8007768 <TIM_OC5_SetConfig+0xbc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <TIM_OC5_SetConfig+0xc0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00f      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <TIM_OC5_SetConfig+0xc4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00b      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a16      	ldr	r2, [pc, #88]	; (8007774 <TIM_OC5_SetConfig+0xc8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <TIM_OC5_SetConfig+0xcc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a14      	ldr	r2, [pc, #80]	; (800777c <TIM_OC5_SetConfig+0xd0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d109      	bne.n	8007742 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40013400 	.word	0x40013400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800
 800777c:	40015000 	.word	0x40015000

08007780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	051b      	lsls	r3, r3, #20
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1a      	ldr	r2, [pc, #104]	; (8007840 <TIM_OC6_SetConfig+0xc0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a19      	ldr	r2, [pc, #100]	; (8007844 <TIM_OC6_SetConfig+0xc4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a18      	ldr	r2, [pc, #96]	; (8007848 <TIM_OC6_SetConfig+0xc8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC6_SetConfig+0xcc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC6_SetConfig+0xd0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <TIM_OC6_SetConfig+0xd4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d109      	bne.n	8007818 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800
 8007854:	40015000 	.word	0x40015000

08007858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f023 030a 	bic.w	r3, r3, #10
 8007894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b087      	sub	sp, #28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0210 	bic.w	r2, r3, #16
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	f043 0307 	orr.w	r3, r3, #7
 800793c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800796a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	431a      	orrs	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4313      	orrs	r3, r2
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	609a      	str	r2, [r3, #8]
}
 8007984:	bf00      	nop
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 031f 	and.w	r3, r3, #31
 80079a2:	2201      	movs	r2, #1
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	401a      	ands	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1a      	ldr	r2, [r3, #32]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	fa01 f303 	lsl.w	r3, r1, r3
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <HAL_TIMEx_PWMN_Start+0x24>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	bf14      	ite	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	2300      	moveq	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	e022      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d109      	bne.n	8007a1a <HAL_TIMEx_PWMN_Start+0x3e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	bf14      	ite	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	2300      	moveq	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	e015      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d109      	bne.n	8007a34 <HAL_TIMEx_PWMN_Start+0x58>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e008      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e073      	b.n	8007b36 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <HAL_TIMEx_PWMN_Start+0x82>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a5c:	e013      	b.n	8007a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d104      	bne.n	8007a6e <HAL_TIMEx_PWMN_Start+0x92>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a6c:	e00b      	b.n	8007a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d104      	bne.n	8007a7e <HAL_TIMEx_PWMN_Start+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a7c:	e003      	b.n	8007a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f9f4 	bl	8007e7c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a25      	ldr	r2, [pc, #148]	; (8007b40 <HAL_TIMEx_PWMN_Start+0x164>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d022      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d01d      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <HAL_TIMEx_PWMN_Start+0x168>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d018      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a20      	ldr	r2, [pc, #128]	; (8007b48 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d013      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <HAL_TIMEx_PWMN_Start+0x170>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00e      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <HAL_TIMEx_PWMN_Start+0x174>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIMEx_PWMN_Start+0x178>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIMEx_PWMN_Start+0x118>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d115      	bne.n	8007b20 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <HAL_TIMEx_PWMN_Start+0x180>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d015      	beq.n	8007b32 <HAL_TIMEx_PWMN_Start+0x156>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d011      	beq.n	8007b32 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0201 	orr.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1e:	e008      	b.n	8007b32 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e000      	b.n	8007b34 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40000800 	.word	0x40000800
 8007b4c:	40000c00 	.word	0x40000c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40015000 	.word	0x40015000
 8007b5c:	00010007 	.word	0x00010007

08007b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e074      	b.n	8007c62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a34      	ldr	r2, [pc, #208]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a33      	ldr	r2, [pc, #204]	; (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a31      	ldr	r2, [pc, #196]	; (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d108      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a21      	ldr	r2, [pc, #132]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf8:	d01d      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1c      	ldr	r2, [pc, #112]	; (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a15      	ldr	r2, [pc, #84]	; (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a11      	ldr	r2, [pc, #68]	; (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d10c      	bne.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00
 8007c74:	40013400 	.word	0x40013400
 8007c78:	40015000 	.word	0x40015000
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40000c00 	.word	0x40000c00
 8007c88:	40014000 	.word	0x40014000

08007c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e096      	b.n	8007dd6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a2f      	ldr	r2, [pc, #188]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d009      	beq.n	8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a2d      	ldr	r2, [pc, #180]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d106      	bne.n	8007d4e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a24      	ldr	r2, [pc, #144]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a22      	ldr	r2, [pc, #136]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a21      	ldr	r2, [pc, #132]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d12b      	bne.n	8007dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	051b      	lsls	r3, r3, #20
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d009      	beq.n	8007db6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d004      	beq.n	8007db6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0e      	ldr	r2, [pc, #56]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d106      	bne.n	8007dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400
 8007dec:	40015000 	.word	0x40015000

08007df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	2204      	movs	r2, #4
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1a      	ldr	r2, [r3, #32]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	401a      	ands	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e042      	b.n	8007f5e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fa fd7c 	bl	80029e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	; 0x24
 8007ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc51 	bl	80087b0 <UART_SetConfig>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e022      	b.n	8007f5e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 ff41 	bl	8008da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 ffc8 	bl	8008eec <UART_CheckIdleState>
 8007f5c:	4603      	mov	r3, r0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b08a      	sub	sp, #40	; 0x28
 8007f6a:	af02      	add	r7, sp, #8
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	f040 8083 	bne.w	8008088 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_Transmit+0x28>
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e07b      	b.n	800808a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_UART_Transmit+0x3a>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e074      	b.n	800808a <HAL_UART_Transmit+0x124>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2221      	movs	r2, #33	; 0x21
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fb8:	f7fa fe0a 	bl	8002bd0 <HAL_GetTick>
 8007fbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd6:	d108      	bne.n	8007fea <HAL_UART_Transmit+0x84>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e003      	b.n	8007ff2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007ffa:	e02c      	b.n	8008056 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	2180      	movs	r1, #128	; 0x80
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 ffbb 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e039      	b.n	800808a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800802a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	3302      	adds	r3, #2
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e007      	b.n	8008044 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	3301      	adds	r3, #1
 8008042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800804a:	b29b      	uxth	r3, r3
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1cc      	bne.n	8007ffc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	2140      	movs	r1, #64	; 0x40
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 ff88 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e000      	b.n	800808a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d142      	bne.n	8008132 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Receive_IT+0x24>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e03b      	b.n	8008134 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Receive_IT+0x36>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e034      	b.n	8008134 <HAL_UART_Receive_IT+0xa0>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a17      	ldr	r2, [pc, #92]	; (800813c <HAL_UART_Receive_IT+0xa8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d01f      	beq.n	8008122 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d018      	beq.n	8008122 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	613b      	str	r3, [r7, #16]
   return(result);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	623b      	str	r3, [r7, #32]
 8008110:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	69f9      	ldr	r1, [r7, #28]
 8008114:	6a3a      	ldr	r2, [r7, #32]
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	61bb      	str	r3, [r7, #24]
   return(result);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e6      	bne.n	80080f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	461a      	mov	r2, r3
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fff3 	bl	8009114 <UART_Start_Receive_IT>
 800812e:	4603      	mov	r3, r0
 8008130:	e000      	b.n	8008134 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008132:	2302      	movs	r3, #2
  }
}
 8008134:	4618      	mov	r0, r3
 8008136:	3728      	adds	r7, #40	; 0x28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40008000 	.word	0x40008000

08008140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0ba      	sub	sp, #232	; 0xe8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800816a:	f640 030f 	movw	r3, #2063	; 0x80f
 800816e:	4013      	ands	r3, r2
 8008170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11b      	bne.n	80081b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d015      	beq.n	80081b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 82d6 	beq.w	8008756 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
      }
      return;
 80081b2:	e2d0      	b.n	8008756 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 811f 	beq.w	80083fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081c2:	4b8b      	ldr	r3, [pc, #556]	; (80083f0 <HAL_UART_IRQHandler+0x2b0>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081ce:	4b89      	ldr	r3, [pc, #548]	; (80083f4 <HAL_UART_IRQHandler+0x2b4>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 8112 	beq.w	80083fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d011      	beq.n	8008208 <HAL_UART_IRQHandler+0xc8>
 80081e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2201      	movs	r2, #1
 80081f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fe:	f043 0201 	orr.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d011      	beq.n	8008238 <HAL_UART_IRQHandler+0xf8>
 8008214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2202      	movs	r2, #2
 8008226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822e:	f043 0204 	orr.w	r2, r3, #4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d011      	beq.n	8008268 <HAL_UART_IRQHandler+0x128>
 8008244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2204      	movs	r2, #4
 8008256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825e:	f043 0202 	orr.w	r2, r3, #2
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d017      	beq.n	80082a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008280:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008284:	4b5a      	ldr	r3, [pc, #360]	; (80083f0 <HAL_UART_IRQHandler+0x2b0>)
 8008286:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2208      	movs	r2, #8
 8008292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829a:	f043 0208 	orr.w	r2, r3, #8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d012      	beq.n	80082d6 <HAL_UART_IRQHandler+0x196>
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00c      	beq.n	80082d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 823c 	beq.w	800875a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d013      	beq.n	8008316 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d005      	beq.n	800833a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800832e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008332:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008336:	2b00      	cmp	r3, #0
 8008338:	d04f      	beq.n	80083da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 f814 	bl	8009368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d141      	bne.n	80083d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800837a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800837e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1d9      	bne.n	800834e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d013      	beq.n	80083ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a6:	4a14      	ldr	r2, [pc, #80]	; (80083f8 <HAL_UART_IRQHandler+0x2b8>)
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fc fadc 	bl	800496c <HAL_DMA_Abort_IT>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d017      	beq.n	80083ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c8:	e00f      	b.n	80083ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f9da 	bl	8008784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d0:	e00b      	b.n	80083ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9d6 	bl	8008784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d8:	e007      	b.n	80083ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9d2 	bl	8008784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083e8:	e1b7      	b.n	800875a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ea:	bf00      	nop
    return;
 80083ec:	e1b5      	b.n	800875a <HAL_UART_IRQHandler+0x61a>
 80083ee:	bf00      	nop
 80083f0:	10000001 	.word	0x10000001
 80083f4:	04000120 	.word	0x04000120
 80083f8:	08009435 	.word	0x08009435

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008400:	2b01      	cmp	r3, #1
 8008402:	f040 814a 	bne.w	800869a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	f003 0310 	and.w	r3, r3, #16
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8143 	beq.w	800869a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 813c 	beq.w	800869a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2210      	movs	r2, #16
 8008428:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	f040 80b5 	bne.w	80085a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008446:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 8187 	beq.w	800875e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800845a:	429a      	cmp	r2, r3
 800845c:	f080 817f 	bcs.w	800875e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 8086 	bne.w	8008588 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1da      	bne.n	800847c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e1      	bne.n	80084c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800852c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e3      	bne.n	8008502 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008558:	f023 0310 	bic.w	r3, r3, #16
 800855c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800856a:	65bb      	str	r3, [r7, #88]	; 0x58
 800856c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e4      	bne.n	8008548 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008582:	4618      	mov	r0, r3
 8008584:	f7fc f999 	bl	80048ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008594:	b29b      	uxth	r3, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f8fb 	bl	8008798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085a2:	e0dc      	b.n	800875e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80ce 	beq.w	8008762 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80085c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80c9 	beq.w	8008762 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085f2:	647b      	str	r3, [r7, #68]	; 0x44
 80085f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e4      	bne.n	80085d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	623b      	str	r3, [r7, #32]
   return(result);
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800862e:	633a      	str	r2, [r7, #48]	; 0x30
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e1      	bne.n	8008606 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60fb      	str	r3, [r7, #12]
   return(result);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0310 	bic.w	r3, r3, #16
 800866a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	617b      	str	r3, [r7, #20]
   return(result);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e4      	bne.n	8008656 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800868c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f880 	bl	8008798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008698:	e063      	b.n	8008762 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <HAL_UART_IRQHandler+0x584>
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fb57 	bl	8009d70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086c2:	e051      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d014      	beq.n	80086fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d105      	bne.n	80086e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d03a      	beq.n	8008766 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
    }
    return;
 80086f8:	e035      	b.n	8008766 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <HAL_UART_IRQHandler+0x5da>
 8008706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fea4 	bl	8009460 <UART_EndTransmit_IT>
    return;
 8008718:	e026      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <HAL_UART_IRQHandler+0x5fa>
 8008726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fb30 	bl	8009d98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008738:	e016      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <HAL_UART_IRQHandler+0x628>
 8008746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874a:	2b00      	cmp	r3, #0
 800874c:	da0c      	bge.n	8008768 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fb18 	bl	8009d84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008754:	e008      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
      return;
 8008756:	bf00      	nop
 8008758:	e006      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
    return;
 800875a:	bf00      	nop
 800875c:	e004      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
      return;
 800875e:	bf00      	nop
 8008760:	e002      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
      return;
 8008762:	bf00      	nop
 8008764:	e000      	b.n	8008768 <HAL_UART_IRQHandler+0x628>
    return;
 8008766:	bf00      	nop
  }
}
 8008768:	37e8      	adds	r7, #232	; 0xe8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop

08008770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087b4:	b08c      	sub	sp, #48	; 0x30
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	431a      	orrs	r2, r3
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4baa      	ldr	r3, [pc, #680]	; (8008a88 <UART_SetConfig+0x2d8>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a9f      	ldr	r2, [pc, #636]	; (8008a8c <UART_SetConfig+0x2dc>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008818:	4313      	orrs	r3, r2
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008826:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008830:	430b      	orrs	r3, r1
 8008832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	f023 010f 	bic.w	r1, r3, #15
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a90      	ldr	r2, [pc, #576]	; (8008a90 <UART_SetConfig+0x2e0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d125      	bne.n	80088a0 <UART_SetConfig+0xf0>
 8008854:	4b8f      	ldr	r3, [pc, #572]	; (8008a94 <UART_SetConfig+0x2e4>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b03      	cmp	r3, #3
 8008860:	d81a      	bhi.n	8008898 <UART_SetConfig+0xe8>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <UART_SetConfig+0xb8>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008879 	.word	0x08008879
 800886c:	08008889 	.word	0x08008889
 8008870:	08008881 	.word	0x08008881
 8008874:	08008891 	.word	0x08008891
 8008878:	2301      	movs	r3, #1
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e116      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008880:	2302      	movs	r3, #2
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e112      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008888:	2304      	movs	r3, #4
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888e:	e10e      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008890:	2308      	movs	r3, #8
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e10a      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008898:	2310      	movs	r3, #16
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e106      	b.n	8008aae <UART_SetConfig+0x2fe>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a7c      	ldr	r2, [pc, #496]	; (8008a98 <UART_SetConfig+0x2e8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d138      	bne.n	800891c <UART_SetConfig+0x16c>
 80088aa:	4b7a      	ldr	r3, [pc, #488]	; (8008a94 <UART_SetConfig+0x2e4>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	d82d      	bhi.n	8008914 <UART_SetConfig+0x164>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x110>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088f5 	.word	0x080088f5
 80088c4:	08008915 	.word	0x08008915
 80088c8:	08008915 	.word	0x08008915
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008905 	.word	0x08008905
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008915 	.word	0x08008915
 80088dc:	08008915 	.word	0x08008915
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008915 	.word	0x08008915
 80088ec:	08008915 	.word	0x08008915
 80088f0:	0800890d 	.word	0x0800890d
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e0d8      	b.n	8008aae <UART_SetConfig+0x2fe>
 80088fc:	2302      	movs	r3, #2
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e0d4      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008904:	2304      	movs	r3, #4
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890a:	e0d0      	b.n	8008aae <UART_SetConfig+0x2fe>
 800890c:	2308      	movs	r3, #8
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008912:	e0cc      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008914:	2310      	movs	r3, #16
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891a:	e0c8      	b.n	8008aae <UART_SetConfig+0x2fe>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a5e      	ldr	r2, [pc, #376]	; (8008a9c <UART_SetConfig+0x2ec>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d125      	bne.n	8008972 <UART_SetConfig+0x1c2>
 8008926:	4b5b      	ldr	r3, [pc, #364]	; (8008a94 <UART_SetConfig+0x2e4>)
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d016      	beq.n	8008962 <UART_SetConfig+0x1b2>
 8008934:	2b30      	cmp	r3, #48	; 0x30
 8008936:	d818      	bhi.n	800896a <UART_SetConfig+0x1ba>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d00a      	beq.n	8008952 <UART_SetConfig+0x1a2>
 800893c:	2b20      	cmp	r3, #32
 800893e:	d814      	bhi.n	800896a <UART_SetConfig+0x1ba>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <UART_SetConfig+0x19a>
 8008944:	2b10      	cmp	r3, #16
 8008946:	d008      	beq.n	800895a <UART_SetConfig+0x1aa>
 8008948:	e00f      	b.n	800896a <UART_SetConfig+0x1ba>
 800894a:	2300      	movs	r3, #0
 800894c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008950:	e0ad      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008952:	2302      	movs	r3, #2
 8008954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008958:	e0a9      	b.n	8008aae <UART_SetConfig+0x2fe>
 800895a:	2304      	movs	r3, #4
 800895c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008960:	e0a5      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008962:	2308      	movs	r3, #8
 8008964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008968:	e0a1      	b.n	8008aae <UART_SetConfig+0x2fe>
 800896a:	2310      	movs	r3, #16
 800896c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008970:	e09d      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a4a      	ldr	r2, [pc, #296]	; (8008aa0 <UART_SetConfig+0x2f0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d125      	bne.n	80089c8 <UART_SetConfig+0x218>
 800897c:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <UART_SetConfig+0x2e4>)
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008986:	2bc0      	cmp	r3, #192	; 0xc0
 8008988:	d016      	beq.n	80089b8 <UART_SetConfig+0x208>
 800898a:	2bc0      	cmp	r3, #192	; 0xc0
 800898c:	d818      	bhi.n	80089c0 <UART_SetConfig+0x210>
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d00a      	beq.n	80089a8 <UART_SetConfig+0x1f8>
 8008992:	2b80      	cmp	r3, #128	; 0x80
 8008994:	d814      	bhi.n	80089c0 <UART_SetConfig+0x210>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <UART_SetConfig+0x1f0>
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d008      	beq.n	80089b0 <UART_SetConfig+0x200>
 800899e:	e00f      	b.n	80089c0 <UART_SetConfig+0x210>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a6:	e082      	b.n	8008aae <UART_SetConfig+0x2fe>
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ae:	e07e      	b.n	8008aae <UART_SetConfig+0x2fe>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089b6:	e07a      	b.n	8008aae <UART_SetConfig+0x2fe>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089be:	e076      	b.n	8008aae <UART_SetConfig+0x2fe>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e072      	b.n	8008aae <UART_SetConfig+0x2fe>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a35      	ldr	r2, [pc, #212]	; (8008aa4 <UART_SetConfig+0x2f4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d12a      	bne.n	8008a28 <UART_SetConfig+0x278>
 80089d2:	4b30      	ldr	r3, [pc, #192]	; (8008a94 <UART_SetConfig+0x2e4>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e0:	d01a      	beq.n	8008a18 <UART_SetConfig+0x268>
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e6:	d81b      	bhi.n	8008a20 <UART_SetConfig+0x270>
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ec:	d00c      	beq.n	8008a08 <UART_SetConfig+0x258>
 80089ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f2:	d815      	bhi.n	8008a20 <UART_SetConfig+0x270>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <UART_SetConfig+0x250>
 80089f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fc:	d008      	beq.n	8008a10 <UART_SetConfig+0x260>
 80089fe:	e00f      	b.n	8008a20 <UART_SetConfig+0x270>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a06:	e052      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0e:	e04e      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a10:	2304      	movs	r3, #4
 8008a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a16:	e04a      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a1e:	e046      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a26:	e042      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a17      	ldr	r2, [pc, #92]	; (8008a8c <UART_SetConfig+0x2dc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d13a      	bne.n	8008aa8 <UART_SetConfig+0x2f8>
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <UART_SetConfig+0x2e4>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a40:	d01a      	beq.n	8008a78 <UART_SetConfig+0x2c8>
 8008a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a46:	d81b      	bhi.n	8008a80 <UART_SetConfig+0x2d0>
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4c:	d00c      	beq.n	8008a68 <UART_SetConfig+0x2b8>
 8008a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a52:	d815      	bhi.n	8008a80 <UART_SetConfig+0x2d0>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <UART_SetConfig+0x2b0>
 8008a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5c:	d008      	beq.n	8008a70 <UART_SetConfig+0x2c0>
 8008a5e:	e00f      	b.n	8008a80 <UART_SetConfig+0x2d0>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a66:	e022      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a6e:	e01e      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a70:	2304      	movs	r3, #4
 8008a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a76:	e01a      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a78:	2308      	movs	r3, #8
 8008a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a7e:	e016      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a80:	2310      	movs	r3, #16
 8008a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a86:	e012      	b.n	8008aae <UART_SetConfig+0x2fe>
 8008a88:	cfff69f3 	.word	0xcfff69f3
 8008a8c:	40008000 	.word	0x40008000
 8008a90:	40013800 	.word	0x40013800
 8008a94:	40021000 	.word	0x40021000
 8008a98:	40004400 	.word	0x40004400
 8008a9c:	40004800 	.word	0x40004800
 8008aa0:	40004c00 	.word	0x40004c00
 8008aa4:	40005000 	.word	0x40005000
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4aae      	ldr	r2, [pc, #696]	; (8008d6c <UART_SetConfig+0x5bc>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	f040 8097 	bne.w	8008be8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d823      	bhi.n	8008b0a <UART_SetConfig+0x35a>
 8008ac2:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <UART_SetConfig+0x318>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008aed 	.word	0x08008aed
 8008acc:	08008b0b 	.word	0x08008b0b
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008b0b 	.word	0x08008b0b
 8008ad8:	08008afb 	.word	0x08008afb
 8008adc:	08008b0b 	.word	0x08008b0b
 8008ae0:	08008b0b 	.word	0x08008b0b
 8008ae4:	08008b0b 	.word	0x08008b0b
 8008ae8:	08008b03 	.word	0x08008b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aec:	f7fd f836 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8008af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008af2:	e010      	b.n	8008b16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af4:	4b9e      	ldr	r3, [pc, #632]	; (8008d70 <UART_SetConfig+0x5c0>)
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008af8:	e00d      	b.n	8008b16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afa:	f7fc ffc1 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8008afe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b00:	e009      	b.n	8008b16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b08:	e005      	b.n	8008b16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8130 	beq.w	8008d7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	4a94      	ldr	r2, [pc, #592]	; (8008d74 <UART_SetConfig+0x5c4>)
 8008b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d305      	bcc.n	8008b4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d903      	bls.n	8008b56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b54:	e113      	b.n	8008d7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	2200      	movs	r2, #0
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	60fa      	str	r2, [r7, #12]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	4a84      	ldr	r2, [pc, #528]	; (8008d74 <UART_SetConfig+0x5c4>)
 8008b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b78:	f7f8 f8be 	bl	8000cf8 <__aeabi_uldivmod>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4610      	mov	r0, r2
 8008b82:	4619      	mov	r1, r3
 8008b84:	f04f 0200 	mov.w	r2, #0
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	020b      	lsls	r3, r1, #8
 8008b8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b92:	0202      	lsls	r2, r0, #8
 8008b94:	6979      	ldr	r1, [r7, #20]
 8008b96:	6849      	ldr	r1, [r1, #4]
 8008b98:	0849      	lsrs	r1, r1, #1
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	eb12 0804 	adds.w	r8, r2, r4
 8008ba4:	eb43 0905 	adc.w	r9, r3, r5
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	469a      	mov	sl, r3
 8008bb0:	4693      	mov	fp, r2
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f8 f89d 	bl	8000cf8 <__aeabi_uldivmod>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bcc:	d308      	bcc.n	8008be0 <UART_SetConfig+0x430>
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd4:	d204      	bcs.n	8008be0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6a3a      	ldr	r2, [r7, #32]
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	e0ce      	b.n	8008d7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008be6:	e0ca      	b.n	8008d7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf0:	d166      	bne.n	8008cc0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d827      	bhi.n	8008c4a <UART_SetConfig+0x49a>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x450>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c4b 	.word	0x08008c4b
 8008c10:	08008c3b 	.word	0x08008c3b
 8008c14:	08008c4b 	.word	0x08008c4b
 8008c18:	08008c4b 	.word	0x08008c4b
 8008c1c:	08008c4b 	.word	0x08008c4b
 8008c20:	08008c43 	.word	0x08008c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c24:	f7fc ff9a 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c2a:	e014      	b.n	8008c56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c2c:	f7fc ffac 	bl	8005b88 <HAL_RCC_GetPCLK2Freq>
 8008c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c32:	e010      	b.n	8008c56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <UART_SetConfig+0x5c0>)
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c38:	e00d      	b.n	8008c56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3a:	f7fc ff21 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8008c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c40:	e009      	b.n	8008c56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c48:	e005      	b.n	8008c56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8090 	beq.w	8008d7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	4a44      	ldr	r2, [pc, #272]	; (8008d74 <UART_SetConfig+0x5c4>)
 8008c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c70:	005a      	lsls	r2, r3, #1
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	085b      	lsrs	r3, r3, #1
 8008c78:	441a      	add	r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	d916      	bls.n	8008cb8 <UART_SetConfig+0x508>
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c90:	d212      	bcs.n	8008cb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f023 030f 	bic.w	r3, r3, #15
 8008c9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	8bfb      	ldrh	r3, [r7, #30]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	8bfa      	ldrh	r2, [r7, #30]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	e062      	b.n	8008d7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cbe:	e05e      	b.n	8008d7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d828      	bhi.n	8008d1a <UART_SetConfig+0x56a>
 8008cc8:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <UART_SetConfig+0x520>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	08008d1b 	.word	0x08008d1b
 8008ce0:	08008d0b 	.word	0x08008d0b
 8008ce4:	08008d1b 	.word	0x08008d1b
 8008ce8:	08008d1b 	.word	0x08008d1b
 8008cec:	08008d1b 	.word	0x08008d1b
 8008cf0:	08008d13 	.word	0x08008d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf4:	f7fc ff32 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8008cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cfa:	e014      	b.n	8008d26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cfc:	f7fc ff44 	bl	8005b88 <HAL_RCC_GetPCLK2Freq>
 8008d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d02:	e010      	b.n	8008d26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <UART_SetConfig+0x5c0>)
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d08:	e00d      	b.n	8008d26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0a:	f7fc feb9 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8008d0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d10:	e009      	b.n	8008d26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d18:	e005      	b.n	8008d26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d24:	bf00      	nop
    }

    if (pclk != 0U)
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d028      	beq.n	8008d7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <UART_SetConfig+0x5c4>)
 8008d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d910      	bls.n	8008d78 <UART_SetConfig+0x5c8>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d5c:	d20c      	bcs.n	8008d78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60da      	str	r2, [r3, #12]
 8008d68:	e009      	b.n	8008d7e <UART_SetConfig+0x5ce>
 8008d6a:	bf00      	nop
 8008d6c:	40008000 	.word	0x40008000
 8008d70:	00f42400 	.word	0x00f42400
 8008d74:	0800e9d4 	.word	0x0800e9d4
      }
      else
      {
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2200      	movs	r2, #0
 8008d92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2200      	movs	r2, #0
 8008d98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3730      	adds	r7, #48	; 0x30
 8008da2:	46bd      	mov	sp, r7
 8008da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00a      	beq.n	8008e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00a      	beq.n	8008e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01a      	beq.n	8008ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ea6:	d10a      	bne.n	8008ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]
  }
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008efc:	f7f9 fe68 	bl	8002bd0 <HAL_GetTick>
 8008f00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d10e      	bne.n	8008f2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f82f 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e025      	b.n	8008f7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d10e      	bne.n	8008f5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f819 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e00f      	b.n	8008f7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b09c      	sub	sp, #112	; 0x70
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f92:	e0a9      	b.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	f000 80a5 	beq.w	80090e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f9e:	f7f9 fe17 	bl	8002bd0 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d140      	bne.n	8009036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e6      	bne.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009006:	64ba      	str	r2, [r7, #72]	; 0x48
 8009008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800900c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e069      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d051      	beq.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800904e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009052:	d149      	bne.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800905c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907c:	637b      	str	r3, [r7, #52]	; 0x34
 800907e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	613b      	str	r3, [r7, #16]
   return(result);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090b0:	623a      	str	r2, [r7, #32]
 80090b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	69f9      	ldr	r1, [r7, #28]
 80090b6:	6a3a      	ldr	r2, [r7, #32]
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e010      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69da      	ldr	r2, [r3, #28]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4013      	ands	r3, r2
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	bf0c      	ite	eq
 80090f8:	2301      	moveq	r3, #1
 80090fa:	2300      	movne	r3, #0
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	461a      	mov	r2, r3
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	429a      	cmp	r2, r3
 8009104:	f43f af46 	beq.w	8008f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3770      	adds	r7, #112	; 0x70
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009114:	b480      	push	{r7}
 8009116:	b0a3      	sub	sp, #140	; 0x8c
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009146:	d10e      	bne.n	8009166 <UART_Start_Receive_IT+0x52>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <UART_Start_Receive_IT+0x48>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009156:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800915a:	e02d      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	22ff      	movs	r2, #255	; 0xff
 8009160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009164:	e028      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10d      	bne.n	800918a <UART_Start_Receive_IT+0x76>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d104      	bne.n	8009180 <UART_Start_Receive_IT+0x6c>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800917e:	e01b      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	227f      	movs	r2, #127	; 0x7f
 8009184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009188:	e016      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009192:	d10d      	bne.n	80091b0 <UART_Start_Receive_IT+0x9c>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <UART_Start_Receive_IT+0x92>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	227f      	movs	r2, #127	; 0x7f
 80091a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091a4:	e008      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	223f      	movs	r2, #63	; 0x3f
 80091aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091ae:	e003      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2222      	movs	r2, #34	; 0x22
 80091c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80091d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091ec:	673a      	str	r2, [r7, #112]	; 0x70
 80091ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80091f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80091fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e3      	bne.n	80091c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009208:	d153      	bne.n	80092b2 <UART_Start_Receive_IT+0x19e>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	429a      	cmp	r2, r3
 8009214:	d34d      	bcc.n	80092b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921e:	d107      	bne.n	8009230 <UART_Start_Receive_IT+0x11c>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d103      	bne.n	8009230 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4a4b      	ldr	r2, [pc, #300]	; (8009358 <UART_Start_Receive_IT+0x244>)
 800922c:	671a      	str	r2, [r3, #112]	; 0x70
 800922e:	e002      	b.n	8009236 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a4a      	ldr	r2, [pc, #296]	; (800935c <UART_Start_Receive_IT+0x248>)
 8009234:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01a      	beq.n	800927c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800926a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800926e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e4      	bne.n	8009246 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3308      	adds	r3, #8
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3308      	adds	r3, #8
 800929a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800929c:	64ba      	str	r2, [r7, #72]	; 0x48
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e5      	bne.n	800927c <UART_Start_Receive_IT+0x168>
 80092b0:	e04a      	b.n	8009348 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ba:	d107      	bne.n	80092cc <UART_Start_Receive_IT+0x1b8>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a26      	ldr	r2, [pc, #152]	; (8009360 <UART_Start_Receive_IT+0x24c>)
 80092c8:	671a      	str	r2, [r3, #112]	; 0x70
 80092ca:	e002      	b.n	80092d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a25      	ldr	r2, [pc, #148]	; (8009364 <UART_Start_Receive_IT+0x250>)
 80092d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d019      	beq.n	8009316 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	e853 3f00 	ldrex	r3, [r3]
 80092ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80092f6:	677b      	str	r3, [r7, #116]	; 0x74
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009300:	637b      	str	r3, [r7, #52]	; 0x34
 8009302:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e6      	bne.n	80092e2 <UART_Start_Receive_IT+0x1ce>
 8009314:	e018      	b.n	8009348 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	613b      	str	r3, [r7, #16]
   return(result);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f043 0320 	orr.w	r3, r3, #32
 800932a:	67bb      	str	r3, [r7, #120]	; 0x78
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009334:	623b      	str	r3, [r7, #32]
 8009336:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	69f9      	ldr	r1, [r7, #28]
 800933a:	6a3a      	ldr	r2, [r7, #32]
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	61bb      	str	r3, [r7, #24]
   return(result);
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e6      	bne.n	8009316 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	378c      	adds	r7, #140	; 0x8c
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	08009a71 	.word	0x08009a71
 800935c:	08009779 	.word	0x08009779
 8009360:	08009617 	.word	0x08009617
 8009364:	080094b7 	.word	0x080094b7

08009368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b095      	sub	sp, #84	; 0x54
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938e:	643b      	str	r3, [r7, #64]	; 0x40
 8009390:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e3      	bne.n	80093a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d118      	bne.n	8009414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f023 0310 	bic.w	r3, r3, #16
 80093f6:	647b      	str	r3, [r7, #68]	; 0x44
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009400:	61bb      	str	r3, [r7, #24]
 8009402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6979      	ldr	r1, [r7, #20]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	613b      	str	r3, [r7, #16]
   return(result);
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e6      	bne.n	80093e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009428:	bf00      	nop
 800942a:	3754      	adds	r7, #84	; 0x54
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7ff f996 	bl	8008784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60bb      	str	r3, [r7, #8]
   return(result);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6979      	ldr	r1, [r7, #20]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff f961 	bl	8008770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ae:	bf00      	nop
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b096      	sub	sp, #88	; 0x58
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ce:	2b22      	cmp	r3, #34	; 0x22
 80094d0:	f040 8095 	bne.w	80095fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094e2:	b2d9      	uxtb	r1, r3
 80094e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	400a      	ands	r2, r1
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d178      	bne.n	800960e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800952a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009530:	653b      	str	r3, [r7, #80]	; 0x50
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953a:	647b      	str	r3, [r7, #68]	; 0x44
 800953c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e6      	bne.n	800951c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	623b      	str	r3, [r7, #32]
   return(result);
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3308      	adds	r3, #8
 800956c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800956e:	633a      	str	r2, [r7, #48]	; 0x30
 8009570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e5      	bne.n	800954e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d12e      	bne.n	80095f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0310 	bic.w	r3, r3, #16
 80095b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095bc:	61fb      	str	r3, [r7, #28]
 80095be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	69b9      	ldr	r1, [r7, #24]
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	617b      	str	r3, [r7, #20]
   return(result);
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e6      	bne.n	800959e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f003 0310 	and.w	r3, r3, #16
 80095da:	2b10      	cmp	r3, #16
 80095dc:	d103      	bne.n	80095e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2210      	movs	r2, #16
 80095e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f8d2 	bl	8008798 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095f4:	e00b      	b.n	800960e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7f9 f994 	bl	8002924 <HAL_UART_RxCpltCallback>
}
 80095fc:	e007      	b.n	800960e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	699a      	ldr	r2, [r3, #24]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0208 	orr.w	r2, r2, #8
 800960c:	619a      	str	r2, [r3, #24]
}
 800960e:	bf00      	nop
 8009610:	3758      	adds	r7, #88	; 0x58
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b096      	sub	sp, #88	; 0x58
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009624:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962e:	2b22      	cmp	r3, #34	; 0x22
 8009630:	f040 8095 	bne.w	800975e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009642:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009644:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009648:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800964c:	4013      	ands	r3, r2
 800964e:	b29a      	uxth	r2, r3
 8009650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009652:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009658:	1c9a      	adds	r2, r3, #2
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009676:	b29b      	uxth	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d178      	bne.n	800976e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969a:	643b      	str	r3, [r7, #64]	; 0x40
 800969c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e6      	bne.n	800967c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3308      	adds	r3, #8
 80096b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	f023 0301 	bic.w	r3, r3, #1
 80096c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3308      	adds	r3, #8
 80096cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e5      	bne.n	80096ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d12e      	bne.n	8009756 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	60bb      	str	r3, [r7, #8]
   return(result);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f023 0310 	bic.w	r3, r3, #16
 8009712:	647b      	str	r3, [r7, #68]	; 0x44
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	613b      	str	r3, [r7, #16]
   return(result);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b10      	cmp	r3, #16
 800973c:	d103      	bne.n	8009746 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2210      	movs	r2, #16
 8009744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff f822 	bl	8008798 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009754:	e00b      	b.n	800976e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7f9 f8e4 	bl	8002924 <HAL_UART_RxCpltCallback>
}
 800975c:	e007      	b.n	800976e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f042 0208 	orr.w	r2, r2, #8
 800976c:	619a      	str	r2, [r3, #24]
}
 800976e:	bf00      	nop
 8009770:	3758      	adds	r7, #88	; 0x58
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b0a6      	sub	sp, #152	; 0x98
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009786:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ae:	2b22      	cmp	r3, #34	; 0x22
 80097b0:	f040 814f 	bne.w	8009a52 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097be:	e0f6      	b.n	80099ae <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80097ce:	b2d9      	uxtb	r1, r3
 80097d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097da:	400a      	ands	r2, r1
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b00      	cmp	r3, #0
 8009810:	d053      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d011      	beq.n	8009842 <UART_RxISR_8BIT_FIFOEN+0xca>
 800981e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2201      	movs	r2, #1
 8009830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009838:	f043 0201 	orr.w	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800984e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2202      	movs	r2, #2
 8009860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	f043 0204 	orr.w	r2, r3, #4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d011      	beq.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800987e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2204      	movs	r2, #4
 8009890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009898:	f043 0202 	orr.w	r2, r3, #2
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d006      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fe ff69 	bl	8008784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d173      	bne.n	80099ae <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80098d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80098ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80098f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e4      	bne.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800990c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3308      	adds	r3, #8
 800991e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009920:	657a      	str	r2, [r7, #84]	; 0x54
 8009922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009946:	2b01      	cmp	r3, #1
 8009948:	d12e      	bne.n	80099a8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	f023 0310 	bic.w	r3, r3, #16
 8009964:	67bb      	str	r3, [r7, #120]	; 0x78
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800996e:	643b      	str	r3, [r7, #64]	; 0x40
 8009970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e6      	bne.n	8009950 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b10      	cmp	r3, #16
 800998e:	d103      	bne.n	8009998 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2210      	movs	r2, #16
 8009996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7fe fef9 	bl	8008798 <HAL_UARTEx_RxEventCallback>
 80099a6:	e002      	b.n	80099ae <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7f8 ffbb 	bl	8002924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d006      	beq.n	80099c4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80099b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f47f aefe 	bne.w	80097c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d045      	beq.n	8009a62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d23e      	bcs.n	8009a62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3308      	adds	r3, #8
 80099ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099fa:	673b      	str	r3, [r7, #112]	; 0x70
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3308      	adds	r3, #8
 8009a02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e5      	bne.n	80099e4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a14      	ldr	r2, [pc, #80]	; (8009a6c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009a1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f043 0320 	orr.w	r3, r3, #32
 8009a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6979      	ldr	r1, [r7, #20]
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e6      	bne.n	8009a1e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a50:	e007      	b.n	8009a62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0208 	orr.w	r2, r2, #8
 8009a60:	619a      	str	r2, [r3, #24]
}
 8009a62:	bf00      	nop
 8009a64:	3798      	adds	r7, #152	; 0x98
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	080094b7 	.word	0x080094b7

08009a70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b0a8      	sub	sp, #160	; 0xa0
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a7e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa6:	2b22      	cmp	r3, #34	; 0x22
 8009aa8:	f040 8153 	bne.w	8009d52 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ab2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ab6:	e0fa      	b.n	8009cae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009aca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009ace:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ada:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae0:	1c9a      	adds	r2, r3, #2
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d053      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b34:	f043 0201 	orr.w	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d011      	beq.n	8009b6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00b      	beq.n	8009b6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	f043 0204 	orr.w	r2, r3, #4
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b72:	f003 0304 	and.w	r3, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d011      	beq.n	8009b9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b94:	f043 0202 	orr.w	r2, r3, #2
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7fe fdeb 	bl	8008784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d175      	bne.n	8009cae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bca:	e853 3f00 	ldrex	r3, [r3]
 8009bce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009be6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009bea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e4      	bne.n	8009bc2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c20:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e1      	bne.n	8009bf8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d12e      	bne.n	8009ca8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c60:	f023 0310 	bic.w	r3, r3, #16
 8009c64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e6      	bne.n	8009c50 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f003 0310 	and.w	r3, r3, #16
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d103      	bne.n	8009c98 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2210      	movs	r2, #16
 8009c96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fe fd79 	bl	8008798 <HAL_UARTEx_RxEventCallback>
 8009ca6:	e002      	b.n	8009cae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7f8 fe3b 	bl	8002924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f47f aefa 	bne.w	8009ab8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d045      	beq.n	8009d62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cdc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d23e      	bcs.n	8009d62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cfa:	677b      	str	r3, [r7, #116]	; 0x74
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d04:	633a      	str	r2, [r7, #48]	; 0x30
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e5      	bne.n	8009ce4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a14      	ldr	r2, [pc, #80]	; (8009d6c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009d1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f043 0320 	orr.w	r3, r3, #32
 8009d32:	673b      	str	r3, [r7, #112]	; 0x70
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69b9      	ldr	r1, [r7, #24]
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	617b      	str	r3, [r7, #20]
   return(result);
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e6      	bne.n	8009d1e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d50:	e007      	b.n	8009d62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f042 0208 	orr.w	r2, r2, #8
 8009d60:	619a      	str	r2, [r3, #24]
}
 8009d62:	bf00      	nop
 8009d64:	37a0      	adds	r7, #160	; 0xa0
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08009617 	.word	0x08009617

08009d70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d101      	bne.n	8009dc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e027      	b.n	8009e12 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2224      	movs	r2, #36	; 0x24
 8009dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0201 	bic.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009df0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e02d      	b.n	8009e92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2224      	movs	r2, #36	; 0x24
 8009e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0201 	bic.w	r2, r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f850 	bl	8009f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e02d      	b.n	8009f0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2224      	movs	r2, #36	; 0x24
 8009ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f812 	bl	8009f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f38:	e031      	b.n	8009f9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f3e:	2308      	movs	r3, #8
 8009f40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	0e5b      	lsrs	r3, r3, #25
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	0f5b      	lsrs	r3, r3, #29
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	7b3a      	ldrb	r2, [r7, #12]
 8009f66:	4911      	ldr	r1, [pc, #68]	; (8009fac <UARTEx_SetNbDataToProcess+0x94>)
 8009f68:	5c8a      	ldrb	r2, [r1, r2]
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f6e:	7b3a      	ldrb	r2, [r7, #12]
 8009f70:	490f      	ldr	r1, [pc, #60]	; (8009fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009f72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	7b7a      	ldrb	r2, [r7, #13]
 8009f84:	4909      	ldr	r1, [pc, #36]	; (8009fac <UARTEx_SetNbDataToProcess+0x94>)
 8009f86:	5c8a      	ldrb	r2, [r1, r2]
 8009f88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f8c:	7b7a      	ldrb	r2, [r7, #13]
 8009f8e:	4908      	ldr	r1, [pc, #32]	; (8009fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8009f90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	0800e9ec 	.word	0x0800e9ec
 8009fb0:	0800e9f4 	.word	0x0800e9f4

08009fb4 <atof>:
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	f001 bb19 	b.w	800b5ec <strtod>

08009fba <atoi>:
 8009fba:	220a      	movs	r2, #10
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f001 bbff 	b.w	800b7c0 <strtol>
	...

08009fc4 <__errno>:
 8009fc4:	4b01      	ldr	r3, [pc, #4]	; (8009fcc <__errno+0x8>)
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20000018 	.word	0x20000018

08009fd0 <__libc_init_array>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4d0d      	ldr	r5, [pc, #52]	; (800a008 <__libc_init_array+0x38>)
 8009fd4:	4c0d      	ldr	r4, [pc, #52]	; (800a00c <__libc_init_array+0x3c>)
 8009fd6:	1b64      	subs	r4, r4, r5
 8009fd8:	10a4      	asrs	r4, r4, #2
 8009fda:	2600      	movs	r6, #0
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	d109      	bne.n	8009ff4 <__libc_init_array+0x24>
 8009fe0:	4d0b      	ldr	r5, [pc, #44]	; (800a010 <__libc_init_array+0x40>)
 8009fe2:	4c0c      	ldr	r4, [pc, #48]	; (800a014 <__libc_init_array+0x44>)
 8009fe4:	f004 fb1c 	bl	800e620 <_init>
 8009fe8:	1b64      	subs	r4, r4, r5
 8009fea:	10a4      	asrs	r4, r4, #2
 8009fec:	2600      	movs	r6, #0
 8009fee:	42a6      	cmp	r6, r4
 8009ff0:	d105      	bne.n	8009ffe <__libc_init_array+0x2e>
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff8:	4798      	blx	r3
 8009ffa:	3601      	adds	r6, #1
 8009ffc:	e7ee      	b.n	8009fdc <__libc_init_array+0xc>
 8009ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a002:	4798      	blx	r3
 800a004:	3601      	adds	r6, #1
 800a006:	e7f2      	b.n	8009fee <__libc_init_array+0x1e>
 800a008:	0800ef00 	.word	0x0800ef00
 800a00c:	0800ef00 	.word	0x0800ef00
 800a010:	0800ef00 	.word	0x0800ef00
 800a014:	0800ef04 	.word	0x0800ef04

0800a018 <memset>:
 800a018:	4402      	add	r2, r0
 800a01a:	4603      	mov	r3, r0
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <memset+0xa>
 800a020:	4770      	bx	lr
 800a022:	f803 1b01 	strb.w	r1, [r3], #1
 800a026:	e7f9      	b.n	800a01c <memset+0x4>

0800a028 <__cvt>:
 800a028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	ec55 4b10 	vmov	r4, r5, d0
 800a030:	2d00      	cmp	r5, #0
 800a032:	460e      	mov	r6, r1
 800a034:	4619      	mov	r1, r3
 800a036:	462b      	mov	r3, r5
 800a038:	bfbb      	ittet	lt
 800a03a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a03e:	461d      	movlt	r5, r3
 800a040:	2300      	movge	r3, #0
 800a042:	232d      	movlt	r3, #45	; 0x2d
 800a044:	700b      	strb	r3, [r1, #0]
 800a046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a048:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a04c:	4691      	mov	r9, r2
 800a04e:	f023 0820 	bic.w	r8, r3, #32
 800a052:	bfbc      	itt	lt
 800a054:	4622      	movlt	r2, r4
 800a056:	4614      	movlt	r4, r2
 800a058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a05c:	d005      	beq.n	800a06a <__cvt+0x42>
 800a05e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a062:	d100      	bne.n	800a066 <__cvt+0x3e>
 800a064:	3601      	adds	r6, #1
 800a066:	2102      	movs	r1, #2
 800a068:	e000      	b.n	800a06c <__cvt+0x44>
 800a06a:	2103      	movs	r1, #3
 800a06c:	ab03      	add	r3, sp, #12
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	ab02      	add	r3, sp, #8
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	ec45 4b10 	vmov	d0, r4, r5
 800a078:	4653      	mov	r3, sl
 800a07a:	4632      	mov	r2, r6
 800a07c:	f001 fc54 	bl	800b928 <_dtoa_r>
 800a080:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a084:	4607      	mov	r7, r0
 800a086:	d102      	bne.n	800a08e <__cvt+0x66>
 800a088:	f019 0f01 	tst.w	r9, #1
 800a08c:	d022      	beq.n	800a0d4 <__cvt+0xac>
 800a08e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a092:	eb07 0906 	add.w	r9, r7, r6
 800a096:	d110      	bne.n	800a0ba <__cvt+0x92>
 800a098:	783b      	ldrb	r3, [r7, #0]
 800a09a:	2b30      	cmp	r3, #48	; 0x30
 800a09c:	d10a      	bne.n	800a0b4 <__cvt+0x8c>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 fd47 	bl	8000b38 <__aeabi_dcmpeq>
 800a0aa:	b918      	cbnz	r0, 800a0b4 <__cvt+0x8c>
 800a0ac:	f1c6 0601 	rsb	r6, r6, #1
 800a0b0:	f8ca 6000 	str.w	r6, [sl]
 800a0b4:	f8da 3000 	ldr.w	r3, [sl]
 800a0b8:	4499      	add	r9, r3
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 fd39 	bl	8000b38 <__aeabi_dcmpeq>
 800a0c6:	b108      	cbz	r0, 800a0cc <__cvt+0xa4>
 800a0c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0cc:	2230      	movs	r2, #48	; 0x30
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	454b      	cmp	r3, r9
 800a0d2:	d307      	bcc.n	800a0e4 <__cvt+0xbc>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0d8:	1bdb      	subs	r3, r3, r7
 800a0da:	4638      	mov	r0, r7
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	b004      	add	sp, #16
 800a0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e4:	1c59      	adds	r1, r3, #1
 800a0e6:	9103      	str	r1, [sp, #12]
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	e7f0      	b.n	800a0ce <__cvt+0xa6>

0800a0ec <__exponent>:
 800a0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	bfb8      	it	lt
 800a0f4:	4249      	neglt	r1, r1
 800a0f6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0fa:	bfb4      	ite	lt
 800a0fc:	222d      	movlt	r2, #45	; 0x2d
 800a0fe:	222b      	movge	r2, #43	; 0x2b
 800a100:	2909      	cmp	r1, #9
 800a102:	7042      	strb	r2, [r0, #1]
 800a104:	dd2a      	ble.n	800a15c <__exponent+0x70>
 800a106:	f10d 0407 	add.w	r4, sp, #7
 800a10a:	46a4      	mov	ip, r4
 800a10c:	270a      	movs	r7, #10
 800a10e:	46a6      	mov	lr, r4
 800a110:	460a      	mov	r2, r1
 800a112:	fb91 f6f7 	sdiv	r6, r1, r7
 800a116:	fb07 1516 	mls	r5, r7, r6, r1
 800a11a:	3530      	adds	r5, #48	; 0x30
 800a11c:	2a63      	cmp	r2, #99	; 0x63
 800a11e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a122:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a126:	4631      	mov	r1, r6
 800a128:	dcf1      	bgt.n	800a10e <__exponent+0x22>
 800a12a:	3130      	adds	r1, #48	; 0x30
 800a12c:	f1ae 0502 	sub.w	r5, lr, #2
 800a130:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a134:	1c44      	adds	r4, r0, #1
 800a136:	4629      	mov	r1, r5
 800a138:	4561      	cmp	r1, ip
 800a13a:	d30a      	bcc.n	800a152 <__exponent+0x66>
 800a13c:	f10d 0209 	add.w	r2, sp, #9
 800a140:	eba2 020e 	sub.w	r2, r2, lr
 800a144:	4565      	cmp	r5, ip
 800a146:	bf88      	it	hi
 800a148:	2200      	movhi	r2, #0
 800a14a:	4413      	add	r3, r2
 800a14c:	1a18      	subs	r0, r3, r0
 800a14e:	b003      	add	sp, #12
 800a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a156:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a15a:	e7ed      	b.n	800a138 <__exponent+0x4c>
 800a15c:	2330      	movs	r3, #48	; 0x30
 800a15e:	3130      	adds	r1, #48	; 0x30
 800a160:	7083      	strb	r3, [r0, #2]
 800a162:	70c1      	strb	r1, [r0, #3]
 800a164:	1d03      	adds	r3, r0, #4
 800a166:	e7f1      	b.n	800a14c <__exponent+0x60>

0800a168 <_printf_float>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	ed2d 8b02 	vpush	{d8}
 800a170:	b08d      	sub	sp, #52	; 0x34
 800a172:	460c      	mov	r4, r1
 800a174:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a178:	4616      	mov	r6, r2
 800a17a:	461f      	mov	r7, r3
 800a17c:	4605      	mov	r5, r0
 800a17e:	f002 fd43 	bl	800cc08 <_localeconv_r>
 800a182:	f8d0 a000 	ldr.w	sl, [r0]
 800a186:	4650      	mov	r0, sl
 800a188:	f7f6 f854 	bl	8000234 <strlen>
 800a18c:	2300      	movs	r3, #0
 800a18e:	930a      	str	r3, [sp, #40]	; 0x28
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	f8d8 3000 	ldr.w	r3, [r8]
 800a198:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a19c:	3307      	adds	r3, #7
 800a19e:	f023 0307 	bic.w	r3, r3, #7
 800a1a2:	f103 0208 	add.w	r2, r3, #8
 800a1a6:	f8c8 2000 	str.w	r2, [r8]
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1ba:	9307      	str	r3, [sp, #28]
 800a1bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1c0:	ee08 0a10 	vmov	s16, r0
 800a1c4:	4b9f      	ldr	r3, [pc, #636]	; (800a444 <_printf_float+0x2dc>)
 800a1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	f7f6 fce5 	bl	8000b9c <__aeabi_dcmpun>
 800a1d2:	bb88      	cbnz	r0, 800a238 <_printf_float+0xd0>
 800a1d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1d8:	4b9a      	ldr	r3, [pc, #616]	; (800a444 <_printf_float+0x2dc>)
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	f7f6 fcbf 	bl	8000b60 <__aeabi_dcmple>
 800a1e2:	bb48      	cbnz	r0, 800a238 <_printf_float+0xd0>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f7f6 fcae 	bl	8000b4c <__aeabi_dcmplt>
 800a1f0:	b110      	cbz	r0, 800a1f8 <_printf_float+0x90>
 800a1f2:	232d      	movs	r3, #45	; 0x2d
 800a1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f8:	4b93      	ldr	r3, [pc, #588]	; (800a448 <_printf_float+0x2e0>)
 800a1fa:	4894      	ldr	r0, [pc, #592]	; (800a44c <_printf_float+0x2e4>)
 800a1fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a200:	bf94      	ite	ls
 800a202:	4698      	movls	r8, r3
 800a204:	4680      	movhi	r8, r0
 800a206:	2303      	movs	r3, #3
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	f023 0204 	bic.w	r2, r3, #4
 800a210:	6022      	str	r2, [r4, #0]
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	9700      	str	r7, [sp, #0]
 800a218:	4633      	mov	r3, r6
 800a21a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f9d8 	bl	800a5d4 <_printf_common>
 800a224:	3001      	adds	r0, #1
 800a226:	f040 8090 	bne.w	800a34a <_printf_float+0x1e2>
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	b00d      	add	sp, #52	; 0x34
 800a230:	ecbd 8b02 	vpop	{d8}
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	4642      	mov	r2, r8
 800a23a:	464b      	mov	r3, r9
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f7f6 fcac 	bl	8000b9c <__aeabi_dcmpun>
 800a244:	b140      	cbz	r0, 800a258 <_printf_float+0xf0>
 800a246:	464b      	mov	r3, r9
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfbc      	itt	lt
 800a24c:	232d      	movlt	r3, #45	; 0x2d
 800a24e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a252:	487f      	ldr	r0, [pc, #508]	; (800a450 <_printf_float+0x2e8>)
 800a254:	4b7f      	ldr	r3, [pc, #508]	; (800a454 <_printf_float+0x2ec>)
 800a256:	e7d1      	b.n	800a1fc <_printf_float+0x94>
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a25e:	9206      	str	r2, [sp, #24]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	d13f      	bne.n	800a2e4 <_printf_float+0x17c>
 800a264:	2306      	movs	r3, #6
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	9b05      	ldr	r3, [sp, #20]
 800a26a:	6861      	ldr	r1, [r4, #4]
 800a26c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a270:	2300      	movs	r3, #0
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	ab0a      	add	r3, sp, #40	; 0x28
 800a276:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a27a:	ab09      	add	r3, sp, #36	; 0x24
 800a27c:	ec49 8b10 	vmov	d0, r8, r9
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	6022      	str	r2, [r4, #0]
 800a284:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a288:	4628      	mov	r0, r5
 800a28a:	f7ff fecd 	bl	800a028 <__cvt>
 800a28e:	9b06      	ldr	r3, [sp, #24]
 800a290:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a292:	2b47      	cmp	r3, #71	; 0x47
 800a294:	4680      	mov	r8, r0
 800a296:	d108      	bne.n	800a2aa <_printf_float+0x142>
 800a298:	1cc8      	adds	r0, r1, #3
 800a29a:	db02      	blt.n	800a2a2 <_printf_float+0x13a>
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	dd41      	ble.n	800a326 <_printf_float+0x1be>
 800a2a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2a6:	fa5f fb8b 	uxtb.w	fp, fp
 800a2aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2ae:	d820      	bhi.n	800a2f2 <_printf_float+0x18a>
 800a2b0:	3901      	subs	r1, #1
 800a2b2:	465a      	mov	r2, fp
 800a2b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2b8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ba:	f7ff ff17 	bl	800a0ec <__exponent>
 800a2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c0:	1813      	adds	r3, r2, r0
 800a2c2:	2a01      	cmp	r2, #1
 800a2c4:	4681      	mov	r9, r0
 800a2c6:	6123      	str	r3, [r4, #16]
 800a2c8:	dc02      	bgt.n	800a2d0 <_printf_float+0x168>
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	07d2      	lsls	r2, r2, #31
 800a2ce:	d501      	bpl.n	800a2d4 <_printf_float+0x16c>
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	6123      	str	r3, [r4, #16]
 800a2d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d09c      	beq.n	800a216 <_printf_float+0xae>
 800a2dc:	232d      	movs	r3, #45	; 0x2d
 800a2de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e2:	e798      	b.n	800a216 <_printf_float+0xae>
 800a2e4:	9a06      	ldr	r2, [sp, #24]
 800a2e6:	2a47      	cmp	r2, #71	; 0x47
 800a2e8:	d1be      	bne.n	800a268 <_printf_float+0x100>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1bc      	bne.n	800a268 <_printf_float+0x100>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e7b9      	b.n	800a266 <_printf_float+0xfe>
 800a2f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2f6:	d118      	bne.n	800a32a <_printf_float+0x1c2>
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	dd0b      	ble.n	800a316 <_printf_float+0x1ae>
 800a2fe:	6121      	str	r1, [r4, #16]
 800a300:	b913      	cbnz	r3, 800a308 <_printf_float+0x1a0>
 800a302:	6822      	ldr	r2, [r4, #0]
 800a304:	07d0      	lsls	r0, r2, #31
 800a306:	d502      	bpl.n	800a30e <_printf_float+0x1a6>
 800a308:	3301      	adds	r3, #1
 800a30a:	440b      	add	r3, r1
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	e7de      	b.n	800a2d4 <_printf_float+0x16c>
 800a316:	b913      	cbnz	r3, 800a31e <_printf_float+0x1b6>
 800a318:	6822      	ldr	r2, [r4, #0]
 800a31a:	07d2      	lsls	r2, r2, #31
 800a31c:	d501      	bpl.n	800a322 <_printf_float+0x1ba>
 800a31e:	3302      	adds	r3, #2
 800a320:	e7f4      	b.n	800a30c <_printf_float+0x1a4>
 800a322:	2301      	movs	r3, #1
 800a324:	e7f2      	b.n	800a30c <_printf_float+0x1a4>
 800a326:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32c:	4299      	cmp	r1, r3
 800a32e:	db05      	blt.n	800a33c <_printf_float+0x1d4>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	6121      	str	r1, [r4, #16]
 800a334:	07d8      	lsls	r0, r3, #31
 800a336:	d5ea      	bpl.n	800a30e <_printf_float+0x1a6>
 800a338:	1c4b      	adds	r3, r1, #1
 800a33a:	e7e7      	b.n	800a30c <_printf_float+0x1a4>
 800a33c:	2900      	cmp	r1, #0
 800a33e:	bfd4      	ite	le
 800a340:	f1c1 0202 	rsble	r2, r1, #2
 800a344:	2201      	movgt	r2, #1
 800a346:	4413      	add	r3, r2
 800a348:	e7e0      	b.n	800a30c <_printf_float+0x1a4>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	055a      	lsls	r2, r3, #21
 800a34e:	d407      	bmi.n	800a360 <_printf_float+0x1f8>
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	4642      	mov	r2, r8
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	d12c      	bne.n	800a3b8 <_printf_float+0x250>
 800a35e:	e764      	b.n	800a22a <_printf_float+0xc2>
 800a360:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a364:	f240 80e0 	bls.w	800a528 <_printf_float+0x3c0>
 800a368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	f7f6 fbe2 	bl	8000b38 <__aeabi_dcmpeq>
 800a374:	2800      	cmp	r0, #0
 800a376:	d034      	beq.n	800a3e2 <_printf_float+0x27a>
 800a378:	4a37      	ldr	r2, [pc, #220]	; (800a458 <_printf_float+0x2f0>)
 800a37a:	2301      	movs	r3, #1
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f af51 	beq.w	800a22a <_printf_float+0xc2>
 800a388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a38c:	429a      	cmp	r2, r3
 800a38e:	db02      	blt.n	800a396 <_printf_float+0x22e>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	07d8      	lsls	r0, r3, #31
 800a394:	d510      	bpl.n	800a3b8 <_printf_float+0x250>
 800a396:	ee18 3a10 	vmov	r3, s16
 800a39a:	4652      	mov	r2, sl
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f af41 	beq.w	800a22a <_printf_float+0xc2>
 800a3a8:	f04f 0800 	mov.w	r8, #0
 800a3ac:	f104 091a 	add.w	r9, r4, #26
 800a3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4543      	cmp	r3, r8
 800a3b6:	dc09      	bgt.n	800a3cc <_printf_float+0x264>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	079b      	lsls	r3, r3, #30
 800a3bc:	f100 8105 	bmi.w	800a5ca <_printf_float+0x462>
 800a3c0:	68e0      	ldr	r0, [r4, #12]
 800a3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	bfb8      	it	lt
 800a3c8:	4618      	movlt	r0, r3
 800a3ca:	e730      	b.n	800a22e <_printf_float+0xc6>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	464a      	mov	r2, r9
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f43f af27 	beq.w	800a22a <_printf_float+0xc2>
 800a3dc:	f108 0801 	add.w	r8, r8, #1
 800a3e0:	e7e6      	b.n	800a3b0 <_printf_float+0x248>
 800a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dc39      	bgt.n	800a45c <_printf_float+0x2f4>
 800a3e8:	4a1b      	ldr	r2, [pc, #108]	; (800a458 <_printf_float+0x2f0>)
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	f43f af19 	beq.w	800a22a <_printf_float+0xc2>
 800a3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	d102      	bne.n	800a406 <_printf_float+0x29e>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	07d9      	lsls	r1, r3, #31
 800a404:	d5d8      	bpl.n	800a3b8 <_printf_float+0x250>
 800a406:	ee18 3a10 	vmov	r3, s16
 800a40a:	4652      	mov	r2, sl
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f af09 	beq.w	800a22a <_printf_float+0xc2>
 800a418:	f04f 0900 	mov.w	r9, #0
 800a41c:	f104 0a1a 	add.w	sl, r4, #26
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	425b      	negs	r3, r3
 800a424:	454b      	cmp	r3, r9
 800a426:	dc01      	bgt.n	800a42c <_printf_float+0x2c4>
 800a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42a:	e792      	b.n	800a352 <_printf_float+0x1ea>
 800a42c:	2301      	movs	r3, #1
 800a42e:	4652      	mov	r2, sl
 800a430:	4631      	mov	r1, r6
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	f43f aef7 	beq.w	800a22a <_printf_float+0xc2>
 800a43c:	f109 0901 	add.w	r9, r9, #1
 800a440:	e7ee      	b.n	800a420 <_printf_float+0x2b8>
 800a442:	bf00      	nop
 800a444:	7fefffff 	.word	0x7fefffff
 800a448:	0800ea00 	.word	0x0800ea00
 800a44c:	0800ea04 	.word	0x0800ea04
 800a450:	0800ea0c 	.word	0x0800ea0c
 800a454:	0800ea08 	.word	0x0800ea08
 800a458:	0800ea10 	.word	0x0800ea10
 800a45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a45e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a460:	429a      	cmp	r2, r3
 800a462:	bfa8      	it	ge
 800a464:	461a      	movge	r2, r3
 800a466:	2a00      	cmp	r2, #0
 800a468:	4691      	mov	r9, r2
 800a46a:	dc37      	bgt.n	800a4dc <_printf_float+0x374>
 800a46c:	f04f 0b00 	mov.w	fp, #0
 800a470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a474:	f104 021a 	add.w	r2, r4, #26
 800a478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a47a:	9305      	str	r3, [sp, #20]
 800a47c:	eba3 0309 	sub.w	r3, r3, r9
 800a480:	455b      	cmp	r3, fp
 800a482:	dc33      	bgt.n	800a4ec <_printf_float+0x384>
 800a484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a488:	429a      	cmp	r2, r3
 800a48a:	db3b      	blt.n	800a504 <_printf_float+0x39c>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	07da      	lsls	r2, r3, #31
 800a490:	d438      	bmi.n	800a504 <_printf_float+0x39c>
 800a492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a494:	9a05      	ldr	r2, [sp, #20]
 800a496:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a498:	1a9a      	subs	r2, r3, r2
 800a49a:	eba3 0901 	sub.w	r9, r3, r1
 800a49e:	4591      	cmp	r9, r2
 800a4a0:	bfa8      	it	ge
 800a4a2:	4691      	movge	r9, r2
 800a4a4:	f1b9 0f00 	cmp.w	r9, #0
 800a4a8:	dc35      	bgt.n	800a516 <_printf_float+0x3ae>
 800a4aa:	f04f 0800 	mov.w	r8, #0
 800a4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4b2:	f104 0a1a 	add.w	sl, r4, #26
 800a4b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	eba3 0309 	sub.w	r3, r3, r9
 800a4c0:	4543      	cmp	r3, r8
 800a4c2:	f77f af79 	ble.w	800a3b8 <_printf_float+0x250>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f43f aeaa 	beq.w	800a22a <_printf_float+0xc2>
 800a4d6:	f108 0801 	add.w	r8, r8, #1
 800a4da:	e7ec      	b.n	800a4b6 <_printf_float+0x34e>
 800a4dc:	4613      	mov	r3, r2
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4642      	mov	r2, r8
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d1c0      	bne.n	800a46c <_printf_float+0x304>
 800a4ea:	e69e      	b.n	800a22a <_printf_float+0xc2>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	9205      	str	r2, [sp, #20]
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f ae97 	beq.w	800a22a <_printf_float+0xc2>
 800a4fc:	9a05      	ldr	r2, [sp, #20]
 800a4fe:	f10b 0b01 	add.w	fp, fp, #1
 800a502:	e7b9      	b.n	800a478 <_printf_float+0x310>
 800a504:	ee18 3a10 	vmov	r3, s16
 800a508:	4652      	mov	r2, sl
 800a50a:	4631      	mov	r1, r6
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b8      	blx	r7
 800a510:	3001      	adds	r0, #1
 800a512:	d1be      	bne.n	800a492 <_printf_float+0x32a>
 800a514:	e689      	b.n	800a22a <_printf_float+0xc2>
 800a516:	9a05      	ldr	r2, [sp, #20]
 800a518:	464b      	mov	r3, r9
 800a51a:	4442      	add	r2, r8
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	d1c1      	bne.n	800a4aa <_printf_float+0x342>
 800a526:	e680      	b.n	800a22a <_printf_float+0xc2>
 800a528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a52a:	2a01      	cmp	r2, #1
 800a52c:	dc01      	bgt.n	800a532 <_printf_float+0x3ca>
 800a52e:	07db      	lsls	r3, r3, #31
 800a530:	d538      	bpl.n	800a5a4 <_printf_float+0x43c>
 800a532:	2301      	movs	r3, #1
 800a534:	4642      	mov	r2, r8
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	f43f ae74 	beq.w	800a22a <_printf_float+0xc2>
 800a542:	ee18 3a10 	vmov	r3, s16
 800a546:	4652      	mov	r2, sl
 800a548:	4631      	mov	r1, r6
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b8      	blx	r7
 800a54e:	3001      	adds	r0, #1
 800a550:	f43f ae6b 	beq.w	800a22a <_printf_float+0xc2>
 800a554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a558:	2200      	movs	r2, #0
 800a55a:	2300      	movs	r3, #0
 800a55c:	f7f6 faec 	bl	8000b38 <__aeabi_dcmpeq>
 800a560:	b9d8      	cbnz	r0, 800a59a <_printf_float+0x432>
 800a562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a564:	f108 0201 	add.w	r2, r8, #1
 800a568:	3b01      	subs	r3, #1
 800a56a:	4631      	mov	r1, r6
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b8      	blx	r7
 800a570:	3001      	adds	r0, #1
 800a572:	d10e      	bne.n	800a592 <_printf_float+0x42a>
 800a574:	e659      	b.n	800a22a <_printf_float+0xc2>
 800a576:	2301      	movs	r3, #1
 800a578:	4652      	mov	r2, sl
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	f43f ae52 	beq.w	800a22a <_printf_float+0xc2>
 800a586:	f108 0801 	add.w	r8, r8, #1
 800a58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a58c:	3b01      	subs	r3, #1
 800a58e:	4543      	cmp	r3, r8
 800a590:	dcf1      	bgt.n	800a576 <_printf_float+0x40e>
 800a592:	464b      	mov	r3, r9
 800a594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a598:	e6dc      	b.n	800a354 <_printf_float+0x1ec>
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	f104 0a1a 	add.w	sl, r4, #26
 800a5a2:	e7f2      	b.n	800a58a <_printf_float+0x422>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	e7df      	b.n	800a56a <_printf_float+0x402>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	464a      	mov	r2, r9
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f ae38 	beq.w	800a22a <_printf_float+0xc2>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5c2:	1a5b      	subs	r3, r3, r1
 800a5c4:	4543      	cmp	r3, r8
 800a5c6:	dcf0      	bgt.n	800a5aa <_printf_float+0x442>
 800a5c8:	e6fa      	b.n	800a3c0 <_printf_float+0x258>
 800a5ca:	f04f 0800 	mov.w	r8, #0
 800a5ce:	f104 0919 	add.w	r9, r4, #25
 800a5d2:	e7f4      	b.n	800a5be <_printf_float+0x456>

0800a5d4 <_printf_common>:
 800a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	4616      	mov	r6, r2
 800a5da:	4699      	mov	r9, r3
 800a5dc:	688a      	ldr	r2, [r1, #8]
 800a5de:	690b      	ldr	r3, [r1, #16]
 800a5e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	bfb8      	it	lt
 800a5e8:	4613      	movlt	r3, r2
 800a5ea:	6033      	str	r3, [r6, #0]
 800a5ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	b10a      	cbz	r2, 800a5fa <_printf_common+0x26>
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	0699      	lsls	r1, r3, #26
 800a5fe:	bf42      	ittt	mi
 800a600:	6833      	ldrmi	r3, [r6, #0]
 800a602:	3302      	addmi	r3, #2
 800a604:	6033      	strmi	r3, [r6, #0]
 800a606:	6825      	ldr	r5, [r4, #0]
 800a608:	f015 0506 	ands.w	r5, r5, #6
 800a60c:	d106      	bne.n	800a61c <_printf_common+0x48>
 800a60e:	f104 0a19 	add.w	sl, r4, #25
 800a612:	68e3      	ldr	r3, [r4, #12]
 800a614:	6832      	ldr	r2, [r6, #0]
 800a616:	1a9b      	subs	r3, r3, r2
 800a618:	42ab      	cmp	r3, r5
 800a61a:	dc26      	bgt.n	800a66a <_printf_common+0x96>
 800a61c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a620:	1e13      	subs	r3, r2, #0
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	bf18      	it	ne
 800a626:	2301      	movne	r3, #1
 800a628:	0692      	lsls	r2, r2, #26
 800a62a:	d42b      	bmi.n	800a684 <_printf_common+0xb0>
 800a62c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a630:	4649      	mov	r1, r9
 800a632:	4638      	mov	r0, r7
 800a634:	47c0      	blx	r8
 800a636:	3001      	adds	r0, #1
 800a638:	d01e      	beq.n	800a678 <_printf_common+0xa4>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	68e5      	ldr	r5, [r4, #12]
 800a63e:	6832      	ldr	r2, [r6, #0]
 800a640:	f003 0306 	and.w	r3, r3, #6
 800a644:	2b04      	cmp	r3, #4
 800a646:	bf08      	it	eq
 800a648:	1aad      	subeq	r5, r5, r2
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	6922      	ldr	r2, [r4, #16]
 800a64e:	bf0c      	ite	eq
 800a650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a654:	2500      	movne	r5, #0
 800a656:	4293      	cmp	r3, r2
 800a658:	bfc4      	itt	gt
 800a65a:	1a9b      	subgt	r3, r3, r2
 800a65c:	18ed      	addgt	r5, r5, r3
 800a65e:	2600      	movs	r6, #0
 800a660:	341a      	adds	r4, #26
 800a662:	42b5      	cmp	r5, r6
 800a664:	d11a      	bne.n	800a69c <_printf_common+0xc8>
 800a666:	2000      	movs	r0, #0
 800a668:	e008      	b.n	800a67c <_printf_common+0xa8>
 800a66a:	2301      	movs	r3, #1
 800a66c:	4652      	mov	r2, sl
 800a66e:	4649      	mov	r1, r9
 800a670:	4638      	mov	r0, r7
 800a672:	47c0      	blx	r8
 800a674:	3001      	adds	r0, #1
 800a676:	d103      	bne.n	800a680 <_printf_common+0xac>
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a680:	3501      	adds	r5, #1
 800a682:	e7c6      	b.n	800a612 <_printf_common+0x3e>
 800a684:	18e1      	adds	r1, r4, r3
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	2030      	movs	r0, #48	; 0x30
 800a68a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a68e:	4422      	add	r2, r4
 800a690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a698:	3302      	adds	r3, #2
 800a69a:	e7c7      	b.n	800a62c <_printf_common+0x58>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	47c0      	blx	r8
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d0e6      	beq.n	800a678 <_printf_common+0xa4>
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	e7d9      	b.n	800a662 <_printf_common+0x8e>
	...

0800a6b0 <_printf_i>:
 800a6b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b4:	7e0f      	ldrb	r7, [r1, #24]
 800a6b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6b8:	2f78      	cmp	r7, #120	; 0x78
 800a6ba:	4691      	mov	r9, r2
 800a6bc:	4680      	mov	r8, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	469a      	mov	sl, r3
 800a6c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6c6:	d807      	bhi.n	800a6d8 <_printf_i+0x28>
 800a6c8:	2f62      	cmp	r7, #98	; 0x62
 800a6ca:	d80a      	bhi.n	800a6e2 <_printf_i+0x32>
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	f000 80d8 	beq.w	800a882 <_printf_i+0x1d2>
 800a6d2:	2f58      	cmp	r7, #88	; 0x58
 800a6d4:	f000 80a3 	beq.w	800a81e <_printf_i+0x16e>
 800a6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6e0:	e03a      	b.n	800a758 <_printf_i+0xa8>
 800a6e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6e6:	2b15      	cmp	r3, #21
 800a6e8:	d8f6      	bhi.n	800a6d8 <_printf_i+0x28>
 800a6ea:	a101      	add	r1, pc, #4	; (adr r1, 800a6f0 <_printf_i+0x40>)
 800a6ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f0:	0800a749 	.word	0x0800a749
 800a6f4:	0800a75d 	.word	0x0800a75d
 800a6f8:	0800a6d9 	.word	0x0800a6d9
 800a6fc:	0800a6d9 	.word	0x0800a6d9
 800a700:	0800a6d9 	.word	0x0800a6d9
 800a704:	0800a6d9 	.word	0x0800a6d9
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a6d9 	.word	0x0800a6d9
 800a710:	0800a6d9 	.word	0x0800a6d9
 800a714:	0800a6d9 	.word	0x0800a6d9
 800a718:	0800a6d9 	.word	0x0800a6d9
 800a71c:	0800a869 	.word	0x0800a869
 800a720:	0800a78d 	.word	0x0800a78d
 800a724:	0800a84b 	.word	0x0800a84b
 800a728:	0800a6d9 	.word	0x0800a6d9
 800a72c:	0800a6d9 	.word	0x0800a6d9
 800a730:	0800a88b 	.word	0x0800a88b
 800a734:	0800a6d9 	.word	0x0800a6d9
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a6d9 	.word	0x0800a6d9
 800a740:	0800a6d9 	.word	0x0800a6d9
 800a744:	0800a853 	.word	0x0800a853
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a758:	2301      	movs	r3, #1
 800a75a:	e0a3      	b.n	800a8a4 <_printf_i+0x1f4>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	6829      	ldr	r1, [r5, #0]
 800a760:	0606      	lsls	r6, r0, #24
 800a762:	f101 0304 	add.w	r3, r1, #4
 800a766:	d50a      	bpl.n	800a77e <_printf_i+0xce>
 800a768:	680e      	ldr	r6, [r1, #0]
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	da03      	bge.n	800a778 <_printf_i+0xc8>
 800a770:	232d      	movs	r3, #45	; 0x2d
 800a772:	4276      	negs	r6, r6
 800a774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a778:	485e      	ldr	r0, [pc, #376]	; (800a8f4 <_printf_i+0x244>)
 800a77a:	230a      	movs	r3, #10
 800a77c:	e019      	b.n	800a7b2 <_printf_i+0x102>
 800a77e:	680e      	ldr	r6, [r1, #0]
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a786:	bf18      	it	ne
 800a788:	b236      	sxthne	r6, r6
 800a78a:	e7ef      	b.n	800a76c <_printf_i+0xbc>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	6820      	ldr	r0, [r4, #0]
 800a790:	1d19      	adds	r1, r3, #4
 800a792:	6029      	str	r1, [r5, #0]
 800a794:	0601      	lsls	r1, r0, #24
 800a796:	d501      	bpl.n	800a79c <_printf_i+0xec>
 800a798:	681e      	ldr	r6, [r3, #0]
 800a79a:	e002      	b.n	800a7a2 <_printf_i+0xf2>
 800a79c:	0646      	lsls	r6, r0, #25
 800a79e:	d5fb      	bpl.n	800a798 <_printf_i+0xe8>
 800a7a0:	881e      	ldrh	r6, [r3, #0]
 800a7a2:	4854      	ldr	r0, [pc, #336]	; (800a8f4 <_printf_i+0x244>)
 800a7a4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7a6:	bf0c      	ite	eq
 800a7a8:	2308      	moveq	r3, #8
 800a7aa:	230a      	movne	r3, #10
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7b2:	6865      	ldr	r5, [r4, #4]
 800a7b4:	60a5      	str	r5, [r4, #8]
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	bfa2      	ittt	ge
 800a7ba:	6821      	ldrge	r1, [r4, #0]
 800a7bc:	f021 0104 	bicge.w	r1, r1, #4
 800a7c0:	6021      	strge	r1, [r4, #0]
 800a7c2:	b90e      	cbnz	r6, 800a7c8 <_printf_i+0x118>
 800a7c4:	2d00      	cmp	r5, #0
 800a7c6:	d04d      	beq.n	800a864 <_printf_i+0x1b4>
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ce:	fb03 6711 	mls	r7, r3, r1, r6
 800a7d2:	5dc7      	ldrb	r7, [r0, r7]
 800a7d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7d8:	4637      	mov	r7, r6
 800a7da:	42bb      	cmp	r3, r7
 800a7dc:	460e      	mov	r6, r1
 800a7de:	d9f4      	bls.n	800a7ca <_printf_i+0x11a>
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d10b      	bne.n	800a7fc <_printf_i+0x14c>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07de      	lsls	r6, r3, #31
 800a7e8:	d508      	bpl.n	800a7fc <_printf_i+0x14c>
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	6861      	ldr	r1, [r4, #4]
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	bfde      	ittt	le
 800a7f2:	2330      	movle	r3, #48	; 0x30
 800a7f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7fc:	1b52      	subs	r2, r2, r5
 800a7fe:	6122      	str	r2, [r4, #16]
 800a800:	f8cd a000 	str.w	sl, [sp]
 800a804:	464b      	mov	r3, r9
 800a806:	aa03      	add	r2, sp, #12
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff fee2 	bl	800a5d4 <_printf_common>
 800a810:	3001      	adds	r0, #1
 800a812:	d14c      	bne.n	800a8ae <_printf_i+0x1fe>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b004      	add	sp, #16
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	4835      	ldr	r0, [pc, #212]	; (800a8f4 <_printf_i+0x244>)
 800a820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a824:	6829      	ldr	r1, [r5, #0]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f851 6b04 	ldr.w	r6, [r1], #4
 800a82c:	6029      	str	r1, [r5, #0]
 800a82e:	061d      	lsls	r5, r3, #24
 800a830:	d514      	bpl.n	800a85c <_printf_i+0x1ac>
 800a832:	07df      	lsls	r7, r3, #31
 800a834:	bf44      	itt	mi
 800a836:	f043 0320 	orrmi.w	r3, r3, #32
 800a83a:	6023      	strmi	r3, [r4, #0]
 800a83c:	b91e      	cbnz	r6, 800a846 <_printf_i+0x196>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	f023 0320 	bic.w	r3, r3, #32
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	2310      	movs	r3, #16
 800a848:	e7b0      	b.n	800a7ac <_printf_i+0xfc>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	f043 0320 	orr.w	r3, r3, #32
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	2378      	movs	r3, #120	; 0x78
 800a854:	4828      	ldr	r0, [pc, #160]	; (800a8f8 <_printf_i+0x248>)
 800a856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a85a:	e7e3      	b.n	800a824 <_printf_i+0x174>
 800a85c:	0659      	lsls	r1, r3, #25
 800a85e:	bf48      	it	mi
 800a860:	b2b6      	uxthmi	r6, r6
 800a862:	e7e6      	b.n	800a832 <_printf_i+0x182>
 800a864:	4615      	mov	r5, r2
 800a866:	e7bb      	b.n	800a7e0 <_printf_i+0x130>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	6826      	ldr	r6, [r4, #0]
 800a86c:	6961      	ldr	r1, [r4, #20]
 800a86e:	1d18      	adds	r0, r3, #4
 800a870:	6028      	str	r0, [r5, #0]
 800a872:	0635      	lsls	r5, r6, #24
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	d501      	bpl.n	800a87c <_printf_i+0x1cc>
 800a878:	6019      	str	r1, [r3, #0]
 800a87a:	e002      	b.n	800a882 <_printf_i+0x1d2>
 800a87c:	0670      	lsls	r0, r6, #25
 800a87e:	d5fb      	bpl.n	800a878 <_printf_i+0x1c8>
 800a880:	8019      	strh	r1, [r3, #0]
 800a882:	2300      	movs	r3, #0
 800a884:	6123      	str	r3, [r4, #16]
 800a886:	4615      	mov	r5, r2
 800a888:	e7ba      	b.n	800a800 <_printf_i+0x150>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	1d1a      	adds	r2, r3, #4
 800a88e:	602a      	str	r2, [r5, #0]
 800a890:	681d      	ldr	r5, [r3, #0]
 800a892:	6862      	ldr	r2, [r4, #4]
 800a894:	2100      	movs	r1, #0
 800a896:	4628      	mov	r0, r5
 800a898:	f7f5 fcda 	bl	8000250 <memchr>
 800a89c:	b108      	cbz	r0, 800a8a2 <_printf_i+0x1f2>
 800a89e:	1b40      	subs	r0, r0, r5
 800a8a0:	6060      	str	r0, [r4, #4]
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ac:	e7a8      	b.n	800a800 <_printf_i+0x150>
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	462a      	mov	r2, r5
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	47d0      	blx	sl
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d0ab      	beq.n	800a814 <_printf_i+0x164>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	079b      	lsls	r3, r3, #30
 800a8c0:	d413      	bmi.n	800a8ea <_printf_i+0x23a>
 800a8c2:	68e0      	ldr	r0, [r4, #12]
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	4298      	cmp	r0, r3
 800a8c8:	bfb8      	it	lt
 800a8ca:	4618      	movlt	r0, r3
 800a8cc:	e7a4      	b.n	800a818 <_printf_i+0x168>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4632      	mov	r2, r6
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	47d0      	blx	sl
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d09b      	beq.n	800a814 <_printf_i+0x164>
 800a8dc:	3501      	adds	r5, #1
 800a8de:	68e3      	ldr	r3, [r4, #12]
 800a8e0:	9903      	ldr	r1, [sp, #12]
 800a8e2:	1a5b      	subs	r3, r3, r1
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	dcf2      	bgt.n	800a8ce <_printf_i+0x21e>
 800a8e8:	e7eb      	b.n	800a8c2 <_printf_i+0x212>
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	f104 0619 	add.w	r6, r4, #25
 800a8f0:	e7f5      	b.n	800a8de <_printf_i+0x22e>
 800a8f2:	bf00      	nop
 800a8f4:	0800ea12 	.word	0x0800ea12
 800a8f8:	0800ea23 	.word	0x0800ea23

0800a8fc <sniprintf>:
 800a8fc:	b40c      	push	{r2, r3}
 800a8fe:	b530      	push	{r4, r5, lr}
 800a900:	4b17      	ldr	r3, [pc, #92]	; (800a960 <sniprintf+0x64>)
 800a902:	1e0c      	subs	r4, r1, #0
 800a904:	681d      	ldr	r5, [r3, #0]
 800a906:	b09d      	sub	sp, #116	; 0x74
 800a908:	da08      	bge.n	800a91c <sniprintf+0x20>
 800a90a:	238b      	movs	r3, #139	; 0x8b
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	b01d      	add	sp, #116	; 0x74
 800a914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a918:	b002      	add	sp, #8
 800a91a:	4770      	bx	lr
 800a91c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a920:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a924:	bf14      	ite	ne
 800a926:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a92a:	4623      	moveq	r3, r4
 800a92c:	9304      	str	r3, [sp, #16]
 800a92e:	9307      	str	r3, [sp, #28]
 800a930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	9006      	str	r0, [sp, #24]
 800a938:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a93e:	ab21      	add	r3, sp, #132	; 0x84
 800a940:	a902      	add	r1, sp, #8
 800a942:	4628      	mov	r0, r5
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	f002 ff9f 	bl	800d888 <_svfiprintf_r>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	bfbc      	itt	lt
 800a94e:	238b      	movlt	r3, #139	; 0x8b
 800a950:	602b      	strlt	r3, [r5, #0]
 800a952:	2c00      	cmp	r4, #0
 800a954:	d0dd      	beq.n	800a912 <sniprintf+0x16>
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	e7d9      	b.n	800a912 <sniprintf+0x16>
 800a95e:	bf00      	nop
 800a960:	20000018 	.word	0x20000018

0800a964 <siprintf>:
 800a964:	b40e      	push	{r1, r2, r3}
 800a966:	b500      	push	{lr}
 800a968:	b09c      	sub	sp, #112	; 0x70
 800a96a:	ab1d      	add	r3, sp, #116	; 0x74
 800a96c:	9002      	str	r0, [sp, #8]
 800a96e:	9006      	str	r0, [sp, #24]
 800a970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a974:	4809      	ldr	r0, [pc, #36]	; (800a99c <siprintf+0x38>)
 800a976:	9107      	str	r1, [sp, #28]
 800a978:	9104      	str	r1, [sp, #16]
 800a97a:	4909      	ldr	r1, [pc, #36]	; (800a9a0 <siprintf+0x3c>)
 800a97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a980:	9105      	str	r1, [sp, #20]
 800a982:	6800      	ldr	r0, [r0, #0]
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	a902      	add	r1, sp, #8
 800a988:	f002 ff7e 	bl	800d888 <_svfiprintf_r>
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	2200      	movs	r2, #0
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	b01c      	add	sp, #112	; 0x70
 800a994:	f85d eb04 	ldr.w	lr, [sp], #4
 800a998:	b003      	add	sp, #12
 800a99a:	4770      	bx	lr
 800a99c:	20000018 	.word	0x20000018
 800a9a0:	ffff0208 	.word	0xffff0208

0800a9a4 <sulp>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	ec45 4b10 	vmov	d0, r4, r5
 800a9ae:	4616      	mov	r6, r2
 800a9b0:	f002 fcc8 	bl	800d344 <__ulp>
 800a9b4:	ec51 0b10 	vmov	r0, r1, d0
 800a9b8:	b17e      	cbz	r6, 800a9da <sulp+0x36>
 800a9ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd09      	ble.n	800a9da <sulp+0x36>
 800a9c6:	051b      	lsls	r3, r3, #20
 800a9c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9cc:	2400      	movs	r4, #0
 800a9ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9d2:	4622      	mov	r2, r4
 800a9d4:	462b      	mov	r3, r5
 800a9d6:	f7f5 fe47 	bl	8000668 <__aeabi_dmul>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	0000      	movs	r0, r0
	...

0800a9e0 <_strtod_l>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	b09d      	sub	sp, #116	; 0x74
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9318      	str	r3, [sp, #96]	; 0x60
 800a9f0:	4ba2      	ldr	r3, [pc, #648]	; (800ac7c <_strtod_l+0x29c>)
 800a9f2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	4688      	mov	r8, r1
 800a9fe:	f7f5 fc19 	bl	8000234 <strlen>
 800aa02:	f04f 0a00 	mov.w	sl, #0
 800aa06:	4605      	mov	r5, r0
 800aa08:	f04f 0b00 	mov.w	fp, #0
 800aa0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa12:	781a      	ldrb	r2, [r3, #0]
 800aa14:	2a2b      	cmp	r2, #43	; 0x2b
 800aa16:	d04e      	beq.n	800aab6 <_strtod_l+0xd6>
 800aa18:	d83b      	bhi.n	800aa92 <_strtod_l+0xb2>
 800aa1a:	2a0d      	cmp	r2, #13
 800aa1c:	d834      	bhi.n	800aa88 <_strtod_l+0xa8>
 800aa1e:	2a08      	cmp	r2, #8
 800aa20:	d834      	bhi.n	800aa8c <_strtod_l+0xac>
 800aa22:	2a00      	cmp	r2, #0
 800aa24:	d03e      	beq.n	800aaa4 <_strtod_l+0xc4>
 800aa26:	2300      	movs	r3, #0
 800aa28:	930a      	str	r3, [sp, #40]	; 0x28
 800aa2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aa2c:	7833      	ldrb	r3, [r6, #0]
 800aa2e:	2b30      	cmp	r3, #48	; 0x30
 800aa30:	f040 80b0 	bne.w	800ab94 <_strtod_l+0x1b4>
 800aa34:	7873      	ldrb	r3, [r6, #1]
 800aa36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa3a:	2b58      	cmp	r3, #88	; 0x58
 800aa3c:	d168      	bne.n	800ab10 <_strtod_l+0x130>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	ab18      	add	r3, sp, #96	; 0x60
 800aa44:	9702      	str	r7, [sp, #8]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4a8d      	ldr	r2, [pc, #564]	; (800ac80 <_strtod_l+0x2a0>)
 800aa4a:	ab19      	add	r3, sp, #100	; 0x64
 800aa4c:	a917      	add	r1, sp, #92	; 0x5c
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 fdd2 	bl	800c5f8 <__gethex>
 800aa54:	f010 0707 	ands.w	r7, r0, #7
 800aa58:	4605      	mov	r5, r0
 800aa5a:	d005      	beq.n	800aa68 <_strtod_l+0x88>
 800aa5c:	2f06      	cmp	r7, #6
 800aa5e:	d12c      	bne.n	800aaba <_strtod_l+0xda>
 800aa60:	3601      	adds	r6, #1
 800aa62:	2300      	movs	r3, #0
 800aa64:	9617      	str	r6, [sp, #92]	; 0x5c
 800aa66:	930a      	str	r3, [sp, #40]	; 0x28
 800aa68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 8590 	bne.w	800b590 <_strtod_l+0xbb0>
 800aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa72:	b1eb      	cbz	r3, 800aab0 <_strtod_l+0xd0>
 800aa74:	4652      	mov	r2, sl
 800aa76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa7a:	ec43 2b10 	vmov	d0, r2, r3
 800aa7e:	b01d      	add	sp, #116	; 0x74
 800aa80:	ecbd 8b02 	vpop	{d8}
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa88:	2a20      	cmp	r2, #32
 800aa8a:	d1cc      	bne.n	800aa26 <_strtod_l+0x46>
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa90:	e7be      	b.n	800aa10 <_strtod_l+0x30>
 800aa92:	2a2d      	cmp	r2, #45	; 0x2d
 800aa94:	d1c7      	bne.n	800aa26 <_strtod_l+0x46>
 800aa96:	2201      	movs	r2, #1
 800aa98:	920a      	str	r2, [sp, #40]	; 0x28
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1c2      	bne.n	800aa2a <_strtod_l+0x4a>
 800aaa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aaa6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f040 856e 	bne.w	800b58c <_strtod_l+0xbac>
 800aab0:	4652      	mov	r2, sl
 800aab2:	465b      	mov	r3, fp
 800aab4:	e7e1      	b.n	800aa7a <_strtod_l+0x9a>
 800aab6:	2200      	movs	r2, #0
 800aab8:	e7ee      	b.n	800aa98 <_strtod_l+0xb8>
 800aaba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aabc:	b13a      	cbz	r2, 800aace <_strtod_l+0xee>
 800aabe:	2135      	movs	r1, #53	; 0x35
 800aac0:	a81a      	add	r0, sp, #104	; 0x68
 800aac2:	f002 fd4a 	bl	800d55a <__copybits>
 800aac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aac8:	4620      	mov	r0, r4
 800aaca:	f002 f909 	bl	800cce0 <_Bfree>
 800aace:	3f01      	subs	r7, #1
 800aad0:	2f04      	cmp	r7, #4
 800aad2:	d806      	bhi.n	800aae2 <_strtod_l+0x102>
 800aad4:	e8df f007 	tbb	[pc, r7]
 800aad8:	1714030a 	.word	0x1714030a
 800aadc:	0a          	.byte	0x0a
 800aadd:	00          	.byte	0x00
 800aade:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aae2:	0728      	lsls	r0, r5, #28
 800aae4:	d5c0      	bpl.n	800aa68 <_strtod_l+0x88>
 800aae6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aaea:	e7bd      	b.n	800aa68 <_strtod_l+0x88>
 800aaec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800aaf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aaf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aaf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aafa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aafe:	e7f0      	b.n	800aae2 <_strtod_l+0x102>
 800ab00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ac84 <_strtod_l+0x2a4>
 800ab04:	e7ed      	b.n	800aae2 <_strtod_l+0x102>
 800ab06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ab0a:	f04f 3aff 	mov.w	sl, #4294967295
 800ab0e:	e7e8      	b.n	800aae2 <_strtod_l+0x102>
 800ab10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	2b30      	cmp	r3, #48	; 0x30
 800ab1a:	d0f9      	beq.n	800ab10 <_strtod_l+0x130>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0a3      	beq.n	800aa68 <_strtod_l+0x88>
 800ab20:	2301      	movs	r3, #1
 800ab22:	f04f 0900 	mov.w	r9, #0
 800ab26:	9304      	str	r3, [sp, #16]
 800ab28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ab30:	464f      	mov	r7, r9
 800ab32:	220a      	movs	r2, #10
 800ab34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ab36:	7806      	ldrb	r6, [r0, #0]
 800ab38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ab3c:	b2d9      	uxtb	r1, r3
 800ab3e:	2909      	cmp	r1, #9
 800ab40:	d92a      	bls.n	800ab98 <_strtod_l+0x1b8>
 800ab42:	9905      	ldr	r1, [sp, #20]
 800ab44:	462a      	mov	r2, r5
 800ab46:	f003 f913 	bl	800dd70 <strncmp>
 800ab4a:	b398      	cbz	r0, 800abb4 <_strtod_l+0x1d4>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	4632      	mov	r2, r6
 800ab50:	463d      	mov	r5, r7
 800ab52:	9005      	str	r0, [sp, #20]
 800ab54:	4603      	mov	r3, r0
 800ab56:	2a65      	cmp	r2, #101	; 0x65
 800ab58:	d001      	beq.n	800ab5e <_strtod_l+0x17e>
 800ab5a:	2a45      	cmp	r2, #69	; 0x45
 800ab5c:	d118      	bne.n	800ab90 <_strtod_l+0x1b0>
 800ab5e:	b91d      	cbnz	r5, 800ab68 <_strtod_l+0x188>
 800ab60:	9a04      	ldr	r2, [sp, #16]
 800ab62:	4302      	orrs	r2, r0
 800ab64:	d09e      	beq.n	800aaa4 <_strtod_l+0xc4>
 800ab66:	2500      	movs	r5, #0
 800ab68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ab6c:	f108 0201 	add.w	r2, r8, #1
 800ab70:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ab76:	2a2b      	cmp	r2, #43	; 0x2b
 800ab78:	d075      	beq.n	800ac66 <_strtod_l+0x286>
 800ab7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7c:	d07b      	beq.n	800ac76 <_strtod_l+0x296>
 800ab7e:	f04f 0c00 	mov.w	ip, #0
 800ab82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab86:	2909      	cmp	r1, #9
 800ab88:	f240 8082 	bls.w	800ac90 <_strtod_l+0x2b0>
 800ab8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab90:	2600      	movs	r6, #0
 800ab92:	e09d      	b.n	800acd0 <_strtod_l+0x2f0>
 800ab94:	2300      	movs	r3, #0
 800ab96:	e7c4      	b.n	800ab22 <_strtod_l+0x142>
 800ab98:	2f08      	cmp	r7, #8
 800ab9a:	bfd8      	it	le
 800ab9c:	9907      	ldrle	r1, [sp, #28]
 800ab9e:	f100 0001 	add.w	r0, r0, #1
 800aba2:	bfda      	itte	le
 800aba4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aba8:	9307      	strle	r3, [sp, #28]
 800abaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800abae:	3701      	adds	r7, #1
 800abb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800abb2:	e7bf      	b.n	800ab34 <_strtod_l+0x154>
 800abb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abb6:	195a      	adds	r2, r3, r5
 800abb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800abba:	5d5a      	ldrb	r2, [r3, r5]
 800abbc:	2f00      	cmp	r7, #0
 800abbe:	d037      	beq.n	800ac30 <_strtod_l+0x250>
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	463d      	mov	r5, r7
 800abc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800abc8:	2b09      	cmp	r3, #9
 800abca:	d912      	bls.n	800abf2 <_strtod_l+0x212>
 800abcc:	2301      	movs	r3, #1
 800abce:	e7c2      	b.n	800ab56 <_strtod_l+0x176>
 800abd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800abd6:	785a      	ldrb	r2, [r3, #1]
 800abd8:	3001      	adds	r0, #1
 800abda:	2a30      	cmp	r2, #48	; 0x30
 800abdc:	d0f8      	beq.n	800abd0 <_strtod_l+0x1f0>
 800abde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	f200 84d9 	bhi.w	800b59a <_strtod_l+0xbba>
 800abe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abea:	9005      	str	r0, [sp, #20]
 800abec:	2000      	movs	r0, #0
 800abee:	9308      	str	r3, [sp, #32]
 800abf0:	4605      	mov	r5, r0
 800abf2:	3a30      	subs	r2, #48	; 0x30
 800abf4:	f100 0301 	add.w	r3, r0, #1
 800abf8:	d014      	beq.n	800ac24 <_strtod_l+0x244>
 800abfa:	9905      	ldr	r1, [sp, #20]
 800abfc:	4419      	add	r1, r3
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	462b      	mov	r3, r5
 800ac02:	eb00 0e05 	add.w	lr, r0, r5
 800ac06:	210a      	movs	r1, #10
 800ac08:	4573      	cmp	r3, lr
 800ac0a:	d113      	bne.n	800ac34 <_strtod_l+0x254>
 800ac0c:	182b      	adds	r3, r5, r0
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	f105 0501 	add.w	r5, r5, #1
 800ac14:	4405      	add	r5, r0
 800ac16:	dc1c      	bgt.n	800ac52 <_strtod_l+0x272>
 800ac18:	9907      	ldr	r1, [sp, #28]
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	fb03 2301 	mla	r3, r3, r1, r2
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	2300      	movs	r3, #0
 800ac24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac26:	1c51      	adds	r1, r2, #1
 800ac28:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac2a:	7852      	ldrb	r2, [r2, #1]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	e7c9      	b.n	800abc4 <_strtod_l+0x1e4>
 800ac30:	4638      	mov	r0, r7
 800ac32:	e7d2      	b.n	800abda <_strtod_l+0x1fa>
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	dc04      	bgt.n	800ac42 <_strtod_l+0x262>
 800ac38:	9e07      	ldr	r6, [sp, #28]
 800ac3a:	434e      	muls	r6, r1
 800ac3c:	9607      	str	r6, [sp, #28]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	e7e2      	b.n	800ac08 <_strtod_l+0x228>
 800ac42:	f103 0c01 	add.w	ip, r3, #1
 800ac46:	f1bc 0f10 	cmp.w	ip, #16
 800ac4a:	bfd8      	it	le
 800ac4c:	fb01 f909 	mulle.w	r9, r1, r9
 800ac50:	e7f5      	b.n	800ac3e <_strtod_l+0x25e>
 800ac52:	2d10      	cmp	r5, #16
 800ac54:	bfdc      	itt	le
 800ac56:	230a      	movle	r3, #10
 800ac58:	fb03 2909 	mlale	r9, r3, r9, r2
 800ac5c:	e7e1      	b.n	800ac22 <_strtod_l+0x242>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	2301      	movs	r3, #1
 800ac64:	e77c      	b.n	800ab60 <_strtod_l+0x180>
 800ac66:	f04f 0c00 	mov.w	ip, #0
 800ac6a:	f108 0202 	add.w	r2, r8, #2
 800ac6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ac74:	e785      	b.n	800ab82 <_strtod_l+0x1a2>
 800ac76:	f04f 0c01 	mov.w	ip, #1
 800ac7a:	e7f6      	b.n	800ac6a <_strtod_l+0x28a>
 800ac7c:	0800ed18 	.word	0x0800ed18
 800ac80:	0800ea34 	.word	0x0800ea34
 800ac84:	7ff00000 	.word	0x7ff00000
 800ac88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac8a:	1c51      	adds	r1, r2, #1
 800ac8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac8e:	7852      	ldrb	r2, [r2, #1]
 800ac90:	2a30      	cmp	r2, #48	; 0x30
 800ac92:	d0f9      	beq.n	800ac88 <_strtod_l+0x2a8>
 800ac94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac98:	2908      	cmp	r1, #8
 800ac9a:	f63f af79 	bhi.w	800ab90 <_strtod_l+0x1b0>
 800ac9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aca4:	9206      	str	r2, [sp, #24]
 800aca6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aca8:	1c51      	adds	r1, r2, #1
 800acaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800acac:	7852      	ldrb	r2, [r2, #1]
 800acae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800acb2:	2e09      	cmp	r6, #9
 800acb4:	d937      	bls.n	800ad26 <_strtod_l+0x346>
 800acb6:	9e06      	ldr	r6, [sp, #24]
 800acb8:	1b89      	subs	r1, r1, r6
 800acba:	2908      	cmp	r1, #8
 800acbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800acc0:	dc02      	bgt.n	800acc8 <_strtod_l+0x2e8>
 800acc2:	4576      	cmp	r6, lr
 800acc4:	bfa8      	it	ge
 800acc6:	4676      	movge	r6, lr
 800acc8:	f1bc 0f00 	cmp.w	ip, #0
 800accc:	d000      	beq.n	800acd0 <_strtod_l+0x2f0>
 800acce:	4276      	negs	r6, r6
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	d14d      	bne.n	800ad70 <_strtod_l+0x390>
 800acd4:	9904      	ldr	r1, [sp, #16]
 800acd6:	4301      	orrs	r1, r0
 800acd8:	f47f aec6 	bne.w	800aa68 <_strtod_l+0x88>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f47f aee1 	bne.w	800aaa4 <_strtod_l+0xc4>
 800ace2:	2a69      	cmp	r2, #105	; 0x69
 800ace4:	d027      	beq.n	800ad36 <_strtod_l+0x356>
 800ace6:	dc24      	bgt.n	800ad32 <_strtod_l+0x352>
 800ace8:	2a49      	cmp	r2, #73	; 0x49
 800acea:	d024      	beq.n	800ad36 <_strtod_l+0x356>
 800acec:	2a4e      	cmp	r2, #78	; 0x4e
 800acee:	f47f aed9 	bne.w	800aaa4 <_strtod_l+0xc4>
 800acf2:	499f      	ldr	r1, [pc, #636]	; (800af70 <_strtod_l+0x590>)
 800acf4:	a817      	add	r0, sp, #92	; 0x5c
 800acf6:	f001 fed7 	bl	800caa8 <__match>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f aed2 	beq.w	800aaa4 <_strtod_l+0xc4>
 800ad00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b28      	cmp	r3, #40	; 0x28
 800ad06:	d12d      	bne.n	800ad64 <_strtod_l+0x384>
 800ad08:	499a      	ldr	r1, [pc, #616]	; (800af74 <_strtod_l+0x594>)
 800ad0a:	aa1a      	add	r2, sp, #104	; 0x68
 800ad0c:	a817      	add	r0, sp, #92	; 0x5c
 800ad0e:	f001 fedf 	bl	800cad0 <__hexnan>
 800ad12:	2805      	cmp	r0, #5
 800ad14:	d126      	bne.n	800ad64 <_strtod_l+0x384>
 800ad16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ad1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ad20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ad24:	e6a0      	b.n	800aa68 <_strtod_l+0x88>
 800ad26:	210a      	movs	r1, #10
 800ad28:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ad2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ad30:	e7b9      	b.n	800aca6 <_strtod_l+0x2c6>
 800ad32:	2a6e      	cmp	r2, #110	; 0x6e
 800ad34:	e7db      	b.n	800acee <_strtod_l+0x30e>
 800ad36:	4990      	ldr	r1, [pc, #576]	; (800af78 <_strtod_l+0x598>)
 800ad38:	a817      	add	r0, sp, #92	; 0x5c
 800ad3a:	f001 feb5 	bl	800caa8 <__match>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f43f aeb0 	beq.w	800aaa4 <_strtod_l+0xc4>
 800ad44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad46:	498d      	ldr	r1, [pc, #564]	; (800af7c <_strtod_l+0x59c>)
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	a817      	add	r0, sp, #92	; 0x5c
 800ad4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad4e:	f001 feab 	bl	800caa8 <__match>
 800ad52:	b910      	cbnz	r0, 800ad5a <_strtod_l+0x37a>
 800ad54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad56:	3301      	adds	r3, #1
 800ad58:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800af8c <_strtod_l+0x5ac>
 800ad5e:	f04f 0a00 	mov.w	sl, #0
 800ad62:	e681      	b.n	800aa68 <_strtod_l+0x88>
 800ad64:	4886      	ldr	r0, [pc, #536]	; (800af80 <_strtod_l+0x5a0>)
 800ad66:	f002 ffeb 	bl	800dd40 <nan>
 800ad6a:	ec5b ab10 	vmov	sl, fp, d0
 800ad6e:	e67b      	b.n	800aa68 <_strtod_l+0x88>
 800ad70:	9b05      	ldr	r3, [sp, #20]
 800ad72:	9807      	ldr	r0, [sp, #28]
 800ad74:	1af3      	subs	r3, r6, r3
 800ad76:	2f00      	cmp	r7, #0
 800ad78:	bf08      	it	eq
 800ad7a:	462f      	moveq	r7, r5
 800ad7c:	2d10      	cmp	r5, #16
 800ad7e:	9306      	str	r3, [sp, #24]
 800ad80:	46a8      	mov	r8, r5
 800ad82:	bfa8      	it	ge
 800ad84:	f04f 0810 	movge.w	r8, #16
 800ad88:	f7f5 fbf4 	bl	8000574 <__aeabi_ui2d>
 800ad8c:	2d09      	cmp	r5, #9
 800ad8e:	4682      	mov	sl, r0
 800ad90:	468b      	mov	fp, r1
 800ad92:	dd13      	ble.n	800adbc <_strtod_l+0x3dc>
 800ad94:	4b7b      	ldr	r3, [pc, #492]	; (800af84 <_strtod_l+0x5a4>)
 800ad96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad9e:	f7f5 fc63 	bl	8000668 <__aeabi_dmul>
 800ada2:	4682      	mov	sl, r0
 800ada4:	4648      	mov	r0, r9
 800ada6:	468b      	mov	fp, r1
 800ada8:	f7f5 fbe4 	bl	8000574 <__aeabi_ui2d>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4650      	mov	r0, sl
 800adb2:	4659      	mov	r1, fp
 800adb4:	f7f5 faa2 	bl	80002fc <__adddf3>
 800adb8:	4682      	mov	sl, r0
 800adba:	468b      	mov	fp, r1
 800adbc:	2d0f      	cmp	r5, #15
 800adbe:	dc38      	bgt.n	800ae32 <_strtod_l+0x452>
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f43f ae50 	beq.w	800aa68 <_strtod_l+0x88>
 800adc8:	dd24      	ble.n	800ae14 <_strtod_l+0x434>
 800adca:	2b16      	cmp	r3, #22
 800adcc:	dc0b      	bgt.n	800ade6 <_strtod_l+0x406>
 800adce:	496d      	ldr	r1, [pc, #436]	; (800af84 <_strtod_l+0x5a4>)
 800add0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800add4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add8:	4652      	mov	r2, sl
 800adda:	465b      	mov	r3, fp
 800addc:	f7f5 fc44 	bl	8000668 <__aeabi_dmul>
 800ade0:	4682      	mov	sl, r0
 800ade2:	468b      	mov	fp, r1
 800ade4:	e640      	b.n	800aa68 <_strtod_l+0x88>
 800ade6:	9a06      	ldr	r2, [sp, #24]
 800ade8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800adec:	4293      	cmp	r3, r2
 800adee:	db20      	blt.n	800ae32 <_strtod_l+0x452>
 800adf0:	4c64      	ldr	r4, [pc, #400]	; (800af84 <_strtod_l+0x5a4>)
 800adf2:	f1c5 050f 	rsb	r5, r5, #15
 800adf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adfa:	4652      	mov	r2, sl
 800adfc:	465b      	mov	r3, fp
 800adfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae02:	f7f5 fc31 	bl	8000668 <__aeabi_dmul>
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	1b5d      	subs	r5, r3, r5
 800ae0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae12:	e7e3      	b.n	800addc <_strtod_l+0x3fc>
 800ae14:	9b06      	ldr	r3, [sp, #24]
 800ae16:	3316      	adds	r3, #22
 800ae18:	db0b      	blt.n	800ae32 <_strtod_l+0x452>
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	1b9e      	subs	r6, r3, r6
 800ae1e:	4b59      	ldr	r3, [pc, #356]	; (800af84 <_strtod_l+0x5a4>)
 800ae20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ae24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae28:	4650      	mov	r0, sl
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	f7f5 fd46 	bl	80008bc <__aeabi_ddiv>
 800ae30:	e7d6      	b.n	800ade0 <_strtod_l+0x400>
 800ae32:	9b06      	ldr	r3, [sp, #24]
 800ae34:	eba5 0808 	sub.w	r8, r5, r8
 800ae38:	4498      	add	r8, r3
 800ae3a:	f1b8 0f00 	cmp.w	r8, #0
 800ae3e:	dd74      	ble.n	800af2a <_strtod_l+0x54a>
 800ae40:	f018 030f 	ands.w	r3, r8, #15
 800ae44:	d00a      	beq.n	800ae5c <_strtod_l+0x47c>
 800ae46:	494f      	ldr	r1, [pc, #316]	; (800af84 <_strtod_l+0x5a4>)
 800ae48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae4c:	4652      	mov	r2, sl
 800ae4e:	465b      	mov	r3, fp
 800ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae54:	f7f5 fc08 	bl	8000668 <__aeabi_dmul>
 800ae58:	4682      	mov	sl, r0
 800ae5a:	468b      	mov	fp, r1
 800ae5c:	f038 080f 	bics.w	r8, r8, #15
 800ae60:	d04f      	beq.n	800af02 <_strtod_l+0x522>
 800ae62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ae66:	dd22      	ble.n	800aeae <_strtod_l+0x4ce>
 800ae68:	2500      	movs	r5, #0
 800ae6a:	462e      	mov	r6, r5
 800ae6c:	9507      	str	r5, [sp, #28]
 800ae6e:	9505      	str	r5, [sp, #20]
 800ae70:	2322      	movs	r3, #34	; 0x22
 800ae72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800af8c <_strtod_l+0x5ac>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	f04f 0a00 	mov.w	sl, #0
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f adf2 	beq.w	800aa68 <_strtod_l+0x88>
 800ae84:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae86:	4620      	mov	r0, r4
 800ae88:	f001 ff2a 	bl	800cce0 <_Bfree>
 800ae8c:	9905      	ldr	r1, [sp, #20]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f001 ff26 	bl	800cce0 <_Bfree>
 800ae94:	4631      	mov	r1, r6
 800ae96:	4620      	mov	r0, r4
 800ae98:	f001 ff22 	bl	800cce0 <_Bfree>
 800ae9c:	9907      	ldr	r1, [sp, #28]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f001 ff1e 	bl	800cce0 <_Bfree>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4620      	mov	r0, r4
 800aea8:	f001 ff1a 	bl	800cce0 <_Bfree>
 800aeac:	e5dc      	b.n	800aa68 <_strtod_l+0x88>
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <_strtod_l+0x5a8>)
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aeb8:	4650      	mov	r0, sl
 800aeba:	4659      	mov	r1, fp
 800aebc:	4699      	mov	r9, r3
 800aebe:	f1b8 0f01 	cmp.w	r8, #1
 800aec2:	dc21      	bgt.n	800af08 <_strtod_l+0x528>
 800aec4:	b10b      	cbz	r3, 800aeca <_strtod_l+0x4ea>
 800aec6:	4682      	mov	sl, r0
 800aec8:	468b      	mov	fp, r1
 800aeca:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <_strtod_l+0x5a8>)
 800aecc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aed0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aed4:	4652      	mov	r2, sl
 800aed6:	465b      	mov	r3, fp
 800aed8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aedc:	f7f5 fbc4 	bl	8000668 <__aeabi_dmul>
 800aee0:	4b2a      	ldr	r3, [pc, #168]	; (800af8c <_strtod_l+0x5ac>)
 800aee2:	460a      	mov	r2, r1
 800aee4:	400b      	ands	r3, r1
 800aee6:	492a      	ldr	r1, [pc, #168]	; (800af90 <_strtod_l+0x5b0>)
 800aee8:	428b      	cmp	r3, r1
 800aeea:	4682      	mov	sl, r0
 800aeec:	d8bc      	bhi.n	800ae68 <_strtod_l+0x488>
 800aeee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aef2:	428b      	cmp	r3, r1
 800aef4:	bf86      	itte	hi
 800aef6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800af94 <_strtod_l+0x5b4>
 800aefa:	f04f 3aff 	movhi.w	sl, #4294967295
 800aefe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800af02:	2300      	movs	r3, #0
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	e084      	b.n	800b012 <_strtod_l+0x632>
 800af08:	f018 0f01 	tst.w	r8, #1
 800af0c:	d005      	beq.n	800af1a <_strtod_l+0x53a>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 fba8 	bl	8000668 <__aeabi_dmul>
 800af18:	2301      	movs	r3, #1
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	3208      	adds	r2, #8
 800af1e:	f109 0901 	add.w	r9, r9, #1
 800af22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af26:	9204      	str	r2, [sp, #16]
 800af28:	e7c9      	b.n	800aebe <_strtod_l+0x4de>
 800af2a:	d0ea      	beq.n	800af02 <_strtod_l+0x522>
 800af2c:	f1c8 0800 	rsb	r8, r8, #0
 800af30:	f018 020f 	ands.w	r2, r8, #15
 800af34:	d00a      	beq.n	800af4c <_strtod_l+0x56c>
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <_strtod_l+0x5a4>)
 800af38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af3c:	4650      	mov	r0, sl
 800af3e:	4659      	mov	r1, fp
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 fcba 	bl	80008bc <__aeabi_ddiv>
 800af48:	4682      	mov	sl, r0
 800af4a:	468b      	mov	fp, r1
 800af4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800af50:	d0d7      	beq.n	800af02 <_strtod_l+0x522>
 800af52:	f1b8 0f1f 	cmp.w	r8, #31
 800af56:	dd1f      	ble.n	800af98 <_strtod_l+0x5b8>
 800af58:	2500      	movs	r5, #0
 800af5a:	462e      	mov	r6, r5
 800af5c:	9507      	str	r5, [sp, #28]
 800af5e:	9505      	str	r5, [sp, #20]
 800af60:	2322      	movs	r3, #34	; 0x22
 800af62:	f04f 0a00 	mov.w	sl, #0
 800af66:	f04f 0b00 	mov.w	fp, #0
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	e786      	b.n	800ae7c <_strtod_l+0x49c>
 800af6e:	bf00      	nop
 800af70:	0800ea0d 	.word	0x0800ea0d
 800af74:	0800ea48 	.word	0x0800ea48
 800af78:	0800ea05 	.word	0x0800ea05
 800af7c:	0800ec3c 	.word	0x0800ec3c
 800af80:	0800eb37 	.word	0x0800eb37
 800af84:	0800edb0 	.word	0x0800edb0
 800af88:	0800ed88 	.word	0x0800ed88
 800af8c:	7ff00000 	.word	0x7ff00000
 800af90:	7ca00000 	.word	0x7ca00000
 800af94:	7fefffff 	.word	0x7fefffff
 800af98:	f018 0310 	ands.w	r3, r8, #16
 800af9c:	bf18      	it	ne
 800af9e:	236a      	movne	r3, #106	; 0x6a
 800afa0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b350 <_strtod_l+0x970>
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	4650      	mov	r0, sl
 800afa8:	4659      	mov	r1, fp
 800afaa:	2300      	movs	r3, #0
 800afac:	f018 0f01 	tst.w	r8, #1
 800afb0:	d004      	beq.n	800afbc <_strtod_l+0x5dc>
 800afb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800afb6:	f7f5 fb57 	bl	8000668 <__aeabi_dmul>
 800afba:	2301      	movs	r3, #1
 800afbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800afc0:	f109 0908 	add.w	r9, r9, #8
 800afc4:	d1f2      	bne.n	800afac <_strtod_l+0x5cc>
 800afc6:	b10b      	cbz	r3, 800afcc <_strtod_l+0x5ec>
 800afc8:	4682      	mov	sl, r0
 800afca:	468b      	mov	fp, r1
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	b1c3      	cbz	r3, 800b002 <_strtod_l+0x622>
 800afd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800afd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afd8:	2b00      	cmp	r3, #0
 800afda:	4659      	mov	r1, fp
 800afdc:	dd11      	ble.n	800b002 <_strtod_l+0x622>
 800afde:	2b1f      	cmp	r3, #31
 800afe0:	f340 8124 	ble.w	800b22c <_strtod_l+0x84c>
 800afe4:	2b34      	cmp	r3, #52	; 0x34
 800afe6:	bfde      	ittt	le
 800afe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800afec:	f04f 33ff 	movle.w	r3, #4294967295
 800aff0:	fa03 f202 	lslle.w	r2, r3, r2
 800aff4:	f04f 0a00 	mov.w	sl, #0
 800aff8:	bfcc      	ite	gt
 800affa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800affe:	ea02 0b01 	andle.w	fp, r2, r1
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4650      	mov	r0, sl
 800b008:	4659      	mov	r1, fp
 800b00a:	f7f5 fd95 	bl	8000b38 <__aeabi_dcmpeq>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d1a2      	bne.n	800af58 <_strtod_l+0x578>
 800b012:	9b07      	ldr	r3, [sp, #28]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	9908      	ldr	r1, [sp, #32]
 800b018:	462b      	mov	r3, r5
 800b01a:	463a      	mov	r2, r7
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 fec7 	bl	800cdb0 <__s2b>
 800b022:	9007      	str	r0, [sp, #28]
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f af1f 	beq.w	800ae68 <_strtod_l+0x488>
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	1b9e      	subs	r6, r3, r6
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	bfb4      	ite	lt
 800b034:	4633      	movlt	r3, r6
 800b036:	2300      	movge	r3, #0
 800b038:	930c      	str	r3, [sp, #48]	; 0x30
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	2500      	movs	r5, #0
 800b03e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b042:	9312      	str	r3, [sp, #72]	; 0x48
 800b044:	462e      	mov	r6, r5
 800b046:	9b07      	ldr	r3, [sp, #28]
 800b048:	4620      	mov	r0, r4
 800b04a:	6859      	ldr	r1, [r3, #4]
 800b04c:	f001 fe08 	bl	800cc60 <_Balloc>
 800b050:	9005      	str	r0, [sp, #20]
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f af0c 	beq.w	800ae70 <_strtod_l+0x490>
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f103 010c 	add.w	r1, r3, #12
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	300c      	adds	r0, #12
 800b066:	f001 fded 	bl	800cc44 <memcpy>
 800b06a:	ec4b ab10 	vmov	d0, sl, fp
 800b06e:	aa1a      	add	r2, sp, #104	; 0x68
 800b070:	a919      	add	r1, sp, #100	; 0x64
 800b072:	4620      	mov	r0, r4
 800b074:	f002 f9e2 	bl	800d43c <__d2b>
 800b078:	ec4b ab18 	vmov	d8, sl, fp
 800b07c:	9018      	str	r0, [sp, #96]	; 0x60
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f aef6 	beq.w	800ae70 <_strtod_l+0x490>
 800b084:	2101      	movs	r1, #1
 800b086:	4620      	mov	r0, r4
 800b088:	f001 ff2c 	bl	800cee4 <__i2b>
 800b08c:	4606      	mov	r6, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f aeee 	beq.w	800ae70 <_strtod_l+0x490>
 800b094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b096:	9904      	ldr	r1, [sp, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bfab      	itete	ge
 800b09c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b09e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b0a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b0a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b0a6:	bfac      	ite	ge
 800b0a8:	eb03 0902 	addge.w	r9, r3, r2
 800b0ac:	1ad7      	sublt	r7, r2, r3
 800b0ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0b0:	eba3 0801 	sub.w	r8, r3, r1
 800b0b4:	4490      	add	r8, r2
 800b0b6:	4ba1      	ldr	r3, [pc, #644]	; (800b33c <_strtod_l+0x95c>)
 800b0b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0bc:	4598      	cmp	r8, r3
 800b0be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0c2:	f280 80c7 	bge.w	800b254 <_strtod_l+0x874>
 800b0c6:	eba3 0308 	sub.w	r3, r3, r8
 800b0ca:	2b1f      	cmp	r3, #31
 800b0cc:	eba2 0203 	sub.w	r2, r2, r3
 800b0d0:	f04f 0101 	mov.w	r1, #1
 800b0d4:	f300 80b1 	bgt.w	800b23a <_strtod_l+0x85a>
 800b0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0dc:	930d      	str	r3, [sp, #52]	; 0x34
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	eb09 0802 	add.w	r8, r9, r2
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	45c1      	cmp	r9, r8
 800b0ea:	4417      	add	r7, r2
 800b0ec:	441f      	add	r7, r3
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	bfa8      	it	ge
 800b0f2:	4643      	movge	r3, r8
 800b0f4:	42bb      	cmp	r3, r7
 800b0f6:	bfa8      	it	ge
 800b0f8:	463b      	movge	r3, r7
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bfc2      	ittt	gt
 800b0fe:	eba8 0803 	subgt.w	r8, r8, r3
 800b102:	1aff      	subgt	r7, r7, r3
 800b104:	eba9 0903 	subgt.w	r9, r9, r3
 800b108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd17      	ble.n	800b13e <_strtod_l+0x75e>
 800b10e:	4631      	mov	r1, r6
 800b110:	461a      	mov	r2, r3
 800b112:	4620      	mov	r0, r4
 800b114:	f001 ffa6 	bl	800d064 <__pow5mult>
 800b118:	4606      	mov	r6, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f43f aea8 	beq.w	800ae70 <_strtod_l+0x490>
 800b120:	4601      	mov	r1, r0
 800b122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b124:	4620      	mov	r0, r4
 800b126:	f001 fef3 	bl	800cf10 <__multiply>
 800b12a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f43f ae9f 	beq.w	800ae70 <_strtod_l+0x490>
 800b132:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b134:	4620      	mov	r0, r4
 800b136:	f001 fdd3 	bl	800cce0 <_Bfree>
 800b13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13c:	9318      	str	r3, [sp, #96]	; 0x60
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	f300 808c 	bgt.w	800b25e <_strtod_l+0x87e>
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dd08      	ble.n	800b15e <_strtod_l+0x77e>
 800b14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b14e:	9905      	ldr	r1, [sp, #20]
 800b150:	4620      	mov	r0, r4
 800b152:	f001 ff87 	bl	800d064 <__pow5mult>
 800b156:	9005      	str	r0, [sp, #20]
 800b158:	2800      	cmp	r0, #0
 800b15a:	f43f ae89 	beq.w	800ae70 <_strtod_l+0x490>
 800b15e:	2f00      	cmp	r7, #0
 800b160:	dd08      	ble.n	800b174 <_strtod_l+0x794>
 800b162:	9905      	ldr	r1, [sp, #20]
 800b164:	463a      	mov	r2, r7
 800b166:	4620      	mov	r0, r4
 800b168:	f001 ffd6 	bl	800d118 <__lshift>
 800b16c:	9005      	str	r0, [sp, #20]
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f ae7e 	beq.w	800ae70 <_strtod_l+0x490>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	dd08      	ble.n	800b18c <_strtod_l+0x7ac>
 800b17a:	4631      	mov	r1, r6
 800b17c:	464a      	mov	r2, r9
 800b17e:	4620      	mov	r0, r4
 800b180:	f001 ffca 	bl	800d118 <__lshift>
 800b184:	4606      	mov	r6, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	f43f ae72 	beq.w	800ae70 <_strtod_l+0x490>
 800b18c:	9a05      	ldr	r2, [sp, #20]
 800b18e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b190:	4620      	mov	r0, r4
 800b192:	f002 f84d 	bl	800d230 <__mdiff>
 800b196:	4605      	mov	r5, r0
 800b198:	2800      	cmp	r0, #0
 800b19a:	f43f ae69 	beq.w	800ae70 <_strtod_l+0x490>
 800b19e:	68c3      	ldr	r3, [r0, #12]
 800b1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60c3      	str	r3, [r0, #12]
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	f002 f826 	bl	800d1f8 <__mcmp>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	da60      	bge.n	800b272 <_strtod_l+0x892>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b1b6:	f040 8082 	bne.w	800b2be <_strtod_l+0x8de>
 800b1ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d17d      	bne.n	800b2be <_strtod_l+0x8de>
 800b1c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	051b      	lsls	r3, r3, #20
 800b1ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1ce:	d976      	bls.n	800b2be <_strtod_l+0x8de>
 800b1d0:	696b      	ldr	r3, [r5, #20]
 800b1d2:	b913      	cbnz	r3, 800b1da <_strtod_l+0x7fa>
 800b1d4:	692b      	ldr	r3, [r5, #16]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	dd71      	ble.n	800b2be <_strtod_l+0x8de>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	2201      	movs	r2, #1
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 ff9a 	bl	800d118 <__lshift>
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	f002 f806 	bl	800d1f8 <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	dd66      	ble.n	800b2be <_strtod_l+0x8de>
 800b1f0:	9904      	ldr	r1, [sp, #16]
 800b1f2:	4a53      	ldr	r2, [pc, #332]	; (800b340 <_strtod_l+0x960>)
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	f000 8081 	beq.w	800b2fe <_strtod_l+0x91e>
 800b1fc:	ea02 010b 	and.w	r1, r2, fp
 800b200:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b204:	dc7b      	bgt.n	800b2fe <_strtod_l+0x91e>
 800b206:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b20a:	f77f aea9 	ble.w	800af60 <_strtod_l+0x580>
 800b20e:	4b4d      	ldr	r3, [pc, #308]	; (800b344 <_strtod_l+0x964>)
 800b210:	4650      	mov	r0, sl
 800b212:	4659      	mov	r1, fp
 800b214:	2200      	movs	r2, #0
 800b216:	f7f5 fa27 	bl	8000668 <__aeabi_dmul>
 800b21a:	460b      	mov	r3, r1
 800b21c:	4303      	orrs	r3, r0
 800b21e:	bf08      	it	eq
 800b220:	2322      	moveq	r3, #34	; 0x22
 800b222:	4682      	mov	sl, r0
 800b224:	468b      	mov	fp, r1
 800b226:	bf08      	it	eq
 800b228:	6023      	streq	r3, [r4, #0]
 800b22a:	e62b      	b.n	800ae84 <_strtod_l+0x4a4>
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	fa02 f303 	lsl.w	r3, r2, r3
 800b234:	ea03 0a0a 	and.w	sl, r3, sl
 800b238:	e6e3      	b.n	800b002 <_strtod_l+0x622>
 800b23a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b23e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b242:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b246:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b24a:	fa01 f308 	lsl.w	r3, r1, r8
 800b24e:	9308      	str	r3, [sp, #32]
 800b250:	910d      	str	r1, [sp, #52]	; 0x34
 800b252:	e746      	b.n	800b0e2 <_strtod_l+0x702>
 800b254:	2300      	movs	r3, #0
 800b256:	9308      	str	r3, [sp, #32]
 800b258:	2301      	movs	r3, #1
 800b25a:	930d      	str	r3, [sp, #52]	; 0x34
 800b25c:	e741      	b.n	800b0e2 <_strtod_l+0x702>
 800b25e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b260:	4642      	mov	r2, r8
 800b262:	4620      	mov	r0, r4
 800b264:	f001 ff58 	bl	800d118 <__lshift>
 800b268:	9018      	str	r0, [sp, #96]	; 0x60
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f47f af6b 	bne.w	800b146 <_strtod_l+0x766>
 800b270:	e5fe      	b.n	800ae70 <_strtod_l+0x490>
 800b272:	465f      	mov	r7, fp
 800b274:	d16e      	bne.n	800b354 <_strtod_l+0x974>
 800b276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b27c:	b342      	cbz	r2, 800b2d0 <_strtod_l+0x8f0>
 800b27e:	4a32      	ldr	r2, [pc, #200]	; (800b348 <_strtod_l+0x968>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d128      	bne.n	800b2d6 <_strtod_l+0x8f6>
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	4651      	mov	r1, sl
 800b288:	b1eb      	cbz	r3, 800b2c6 <_strtod_l+0x8e6>
 800b28a:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <_strtod_l+0x960>)
 800b28c:	403b      	ands	r3, r7
 800b28e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b292:	f04f 32ff 	mov.w	r2, #4294967295
 800b296:	d819      	bhi.n	800b2cc <_strtod_l+0x8ec>
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	d117      	bne.n	800b2d6 <_strtod_l+0x8f6>
 800b2a6:	4b29      	ldr	r3, [pc, #164]	; (800b34c <_strtod_l+0x96c>)
 800b2a8:	429f      	cmp	r7, r3
 800b2aa:	d102      	bne.n	800b2b2 <_strtod_l+0x8d2>
 800b2ac:	3101      	adds	r1, #1
 800b2ae:	f43f addf 	beq.w	800ae70 <_strtod_l+0x490>
 800b2b2:	4b23      	ldr	r3, [pc, #140]	; (800b340 <_strtod_l+0x960>)
 800b2b4:	403b      	ands	r3, r7
 800b2b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b2ba:	f04f 0a00 	mov.w	sl, #0
 800b2be:	9b04      	ldr	r3, [sp, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1a4      	bne.n	800b20e <_strtod_l+0x82e>
 800b2c4:	e5de      	b.n	800ae84 <_strtod_l+0x4a4>
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	e7ea      	b.n	800b2a2 <_strtod_l+0x8c2>
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	e7e8      	b.n	800b2a2 <_strtod_l+0x8c2>
 800b2d0:	ea53 030a 	orrs.w	r3, r3, sl
 800b2d4:	d08c      	beq.n	800b1f0 <_strtod_l+0x810>
 800b2d6:	9b08      	ldr	r3, [sp, #32]
 800b2d8:	b1db      	cbz	r3, 800b312 <_strtod_l+0x932>
 800b2da:	423b      	tst	r3, r7
 800b2dc:	d0ef      	beq.n	800b2be <_strtod_l+0x8de>
 800b2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e0:	9a04      	ldr	r2, [sp, #16]
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	b1c3      	cbz	r3, 800b31a <_strtod_l+0x93a>
 800b2e8:	f7ff fb5c 	bl	800a9a4 <sulp>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	ec51 0b18 	vmov	r0, r1, d8
 800b2f4:	f7f5 f802 	bl	80002fc <__adddf3>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	468b      	mov	fp, r1
 800b2fc:	e7df      	b.n	800b2be <_strtod_l+0x8de>
 800b2fe:	4013      	ands	r3, r2
 800b300:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b304:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b308:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b30c:	f04f 3aff 	mov.w	sl, #4294967295
 800b310:	e7d5      	b.n	800b2be <_strtod_l+0x8de>
 800b312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b314:	ea13 0f0a 	tst.w	r3, sl
 800b318:	e7e0      	b.n	800b2dc <_strtod_l+0x8fc>
 800b31a:	f7ff fb43 	bl	800a9a4 <sulp>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	ec51 0b18 	vmov	r0, r1, d8
 800b326:	f7f4 ffe7 	bl	80002f8 <__aeabi_dsub>
 800b32a:	2200      	movs	r2, #0
 800b32c:	2300      	movs	r3, #0
 800b32e:	4682      	mov	sl, r0
 800b330:	468b      	mov	fp, r1
 800b332:	f7f5 fc01 	bl	8000b38 <__aeabi_dcmpeq>
 800b336:	2800      	cmp	r0, #0
 800b338:	d0c1      	beq.n	800b2be <_strtod_l+0x8de>
 800b33a:	e611      	b.n	800af60 <_strtod_l+0x580>
 800b33c:	fffffc02 	.word	0xfffffc02
 800b340:	7ff00000 	.word	0x7ff00000
 800b344:	39500000 	.word	0x39500000
 800b348:	000fffff 	.word	0x000fffff
 800b34c:	7fefffff 	.word	0x7fefffff
 800b350:	0800ea60 	.word	0x0800ea60
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	f002 f8cc 	bl	800d4f4 <__ratio>
 800b35c:	ec59 8b10 	vmov	r8, r9, d0
 800b360:	ee10 0a10 	vmov	r0, s0
 800b364:	2200      	movs	r2, #0
 800b366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b36a:	4649      	mov	r1, r9
 800b36c:	f7f5 fbf8 	bl	8000b60 <__aeabi_dcmple>
 800b370:	2800      	cmp	r0, #0
 800b372:	d07a      	beq.n	800b46a <_strtod_l+0xa8a>
 800b374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04a      	beq.n	800b410 <_strtod_l+0xa30>
 800b37a:	4b95      	ldr	r3, [pc, #596]	; (800b5d0 <_strtod_l+0xbf0>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b382:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b5d0 <_strtod_l+0xbf0>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	4b92      	ldr	r3, [pc, #584]	; (800b5d4 <_strtod_l+0xbf4>)
 800b38c:	403b      	ands	r3, r7
 800b38e:	930d      	str	r3, [sp, #52]	; 0x34
 800b390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b392:	4b91      	ldr	r3, [pc, #580]	; (800b5d8 <_strtod_l+0xbf8>)
 800b394:	429a      	cmp	r2, r3
 800b396:	f040 80b0 	bne.w	800b4fa <_strtod_l+0xb1a>
 800b39a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b39e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b3a2:	ec4b ab10 	vmov	d0, sl, fp
 800b3a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3aa:	f001 ffcb 	bl	800d344 <__ulp>
 800b3ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3b2:	ec53 2b10 	vmov	r2, r3, d0
 800b3b6:	f7f5 f957 	bl	8000668 <__aeabi_dmul>
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	465b      	mov	r3, fp
 800b3be:	f7f4 ff9d 	bl	80002fc <__adddf3>
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4983      	ldr	r1, [pc, #524]	; (800b5d4 <_strtod_l+0xbf4>)
 800b3c6:	4a85      	ldr	r2, [pc, #532]	; (800b5dc <_strtod_l+0xbfc>)
 800b3c8:	4019      	ands	r1, r3
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	d960      	bls.n	800b492 <_strtod_l+0xab2>
 800b3d0:	ee18 3a90 	vmov	r3, s17
 800b3d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d104      	bne.n	800b3e6 <_strtod_l+0xa06>
 800b3dc:	ee18 3a10 	vmov	r3, s16
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f43f ad45 	beq.w	800ae70 <_strtod_l+0x490>
 800b3e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b5e8 <_strtod_l+0xc08>
 800b3ea:	f04f 3aff 	mov.w	sl, #4294967295
 800b3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f001 fc75 	bl	800cce0 <_Bfree>
 800b3f6:	9905      	ldr	r1, [sp, #20]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f001 fc71 	bl	800cce0 <_Bfree>
 800b3fe:	4631      	mov	r1, r6
 800b400:	4620      	mov	r0, r4
 800b402:	f001 fc6d 	bl	800cce0 <_Bfree>
 800b406:	4629      	mov	r1, r5
 800b408:	4620      	mov	r0, r4
 800b40a:	f001 fc69 	bl	800cce0 <_Bfree>
 800b40e:	e61a      	b.n	800b046 <_strtod_l+0x666>
 800b410:	f1ba 0f00 	cmp.w	sl, #0
 800b414:	d11b      	bne.n	800b44e <_strtod_l+0xa6e>
 800b416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b41a:	b9f3      	cbnz	r3, 800b45a <_strtod_l+0xa7a>
 800b41c:	4b6c      	ldr	r3, [pc, #432]	; (800b5d0 <_strtod_l+0xbf0>)
 800b41e:	2200      	movs	r2, #0
 800b420:	4640      	mov	r0, r8
 800b422:	4649      	mov	r1, r9
 800b424:	f7f5 fb92 	bl	8000b4c <__aeabi_dcmplt>
 800b428:	b9d0      	cbnz	r0, 800b460 <_strtod_l+0xa80>
 800b42a:	4640      	mov	r0, r8
 800b42c:	4649      	mov	r1, r9
 800b42e:	4b6c      	ldr	r3, [pc, #432]	; (800b5e0 <_strtod_l+0xc00>)
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f919 	bl	8000668 <__aeabi_dmul>
 800b436:	4680      	mov	r8, r0
 800b438:	4689      	mov	r9, r1
 800b43a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b43e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b442:	9315      	str	r3, [sp, #84]	; 0x54
 800b444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b44c:	e79d      	b.n	800b38a <_strtod_l+0x9aa>
 800b44e:	f1ba 0f01 	cmp.w	sl, #1
 800b452:	d102      	bne.n	800b45a <_strtod_l+0xa7a>
 800b454:	2f00      	cmp	r7, #0
 800b456:	f43f ad83 	beq.w	800af60 <_strtod_l+0x580>
 800b45a:	4b62      	ldr	r3, [pc, #392]	; (800b5e4 <_strtod_l+0xc04>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	e78e      	b.n	800b37e <_strtod_l+0x99e>
 800b460:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b5e0 <_strtod_l+0xc00>
 800b464:	f04f 0800 	mov.w	r8, #0
 800b468:	e7e7      	b.n	800b43a <_strtod_l+0xa5a>
 800b46a:	4b5d      	ldr	r3, [pc, #372]	; (800b5e0 <_strtod_l+0xc00>)
 800b46c:	4640      	mov	r0, r8
 800b46e:	4649      	mov	r1, r9
 800b470:	2200      	movs	r2, #0
 800b472:	f7f5 f8f9 	bl	8000668 <__aeabi_dmul>
 800b476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	b933      	cbnz	r3, 800b48c <_strtod_l+0xaac>
 800b47e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b482:	900e      	str	r0, [sp, #56]	; 0x38
 800b484:	930f      	str	r3, [sp, #60]	; 0x3c
 800b486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b48a:	e7dd      	b.n	800b448 <_strtod_l+0xa68>
 800b48c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b490:	e7f9      	b.n	800b486 <_strtod_l+0xaa6>
 800b492:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1a8      	bne.n	800b3ee <_strtod_l+0xa0e>
 800b49c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4a2:	0d1b      	lsrs	r3, r3, #20
 800b4a4:	051b      	lsls	r3, r3, #20
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d1a1      	bne.n	800b3ee <_strtod_l+0xa0e>
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f5 fc3b 	bl	8000d28 <__aeabi_d2lz>
 800b4b2:	f7f5 f8ab 	bl	800060c <__aeabi_l2d>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	4649      	mov	r1, r9
 800b4be:	f7f4 ff1b 	bl	80002f8 <__aeabi_dsub>
 800b4c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4c8:	ea43 030a 	orr.w	r3, r3, sl
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	4689      	mov	r9, r1
 800b4d2:	d055      	beq.n	800b580 <_strtod_l+0xba0>
 800b4d4:	a336      	add	r3, pc, #216	; (adr r3, 800b5b0 <_strtod_l+0xbd0>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f5 fb37 	bl	8000b4c <__aeabi_dcmplt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f47f acd0 	bne.w	800ae84 <_strtod_l+0x4a4>
 800b4e4:	a334      	add	r3, pc, #208	; (adr r3, 800b5b8 <_strtod_l+0xbd8>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f5 fb4b 	bl	8000b88 <__aeabi_dcmpgt>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f43f af7b 	beq.w	800b3ee <_strtod_l+0xa0e>
 800b4f8:	e4c4      	b.n	800ae84 <_strtod_l+0x4a4>
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	b333      	cbz	r3, 800b54c <_strtod_l+0xb6c>
 800b4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b500:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b504:	d822      	bhi.n	800b54c <_strtod_l+0xb6c>
 800b506:	a32e      	add	r3, pc, #184	; (adr r3, 800b5c0 <_strtod_l+0xbe0>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 fb26 	bl	8000b60 <__aeabi_dcmple>
 800b514:	b1a0      	cbz	r0, 800b540 <_strtod_l+0xb60>
 800b516:	4649      	mov	r1, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	f7f5 fb7d 	bl	8000c18 <__aeabi_d2uiz>
 800b51e:	2801      	cmp	r0, #1
 800b520:	bf38      	it	cc
 800b522:	2001      	movcc	r0, #1
 800b524:	f7f5 f826 	bl	8000574 <__aeabi_ui2d>
 800b528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b52a:	4680      	mov	r8, r0
 800b52c:	4689      	mov	r9, r1
 800b52e:	bb23      	cbnz	r3, 800b57a <_strtod_l+0xb9a>
 800b530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b534:	9010      	str	r0, [sp, #64]	; 0x40
 800b536:	9311      	str	r3, [sp, #68]	; 0x44
 800b538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b53c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b544:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b548:	1a9b      	subs	r3, r3, r2
 800b54a:	9309      	str	r3, [sp, #36]	; 0x24
 800b54c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b550:	eeb0 0a48 	vmov.f32	s0, s16
 800b554:	eef0 0a68 	vmov.f32	s1, s17
 800b558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b55c:	f001 fef2 	bl	800d344 <__ulp>
 800b560:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b564:	ec53 2b10 	vmov	r2, r3, d0
 800b568:	f7f5 f87e 	bl	8000668 <__aeabi_dmul>
 800b56c:	ec53 2b18 	vmov	r2, r3, d8
 800b570:	f7f4 fec4 	bl	80002fc <__adddf3>
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	e78d      	b.n	800b496 <_strtod_l+0xab6>
 800b57a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b57e:	e7db      	b.n	800b538 <_strtod_l+0xb58>
 800b580:	a311      	add	r3, pc, #68	; (adr r3, 800b5c8 <_strtod_l+0xbe8>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f5 fae1 	bl	8000b4c <__aeabi_dcmplt>
 800b58a:	e7b2      	b.n	800b4f2 <_strtod_l+0xb12>
 800b58c:	2300      	movs	r3, #0
 800b58e:	930a      	str	r3, [sp, #40]	; 0x28
 800b590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	f7ff ba6b 	b.w	800aa70 <_strtod_l+0x90>
 800b59a:	2a65      	cmp	r2, #101	; 0x65
 800b59c:	f43f ab5f 	beq.w	800ac5e <_strtod_l+0x27e>
 800b5a0:	2a45      	cmp	r2, #69	; 0x45
 800b5a2:	f43f ab5c 	beq.w	800ac5e <_strtod_l+0x27e>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f7ff bb94 	b.w	800acd4 <_strtod_l+0x2f4>
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	94a03595 	.word	0x94a03595
 800b5b4:	3fdfffff 	.word	0x3fdfffff
 800b5b8:	35afe535 	.word	0x35afe535
 800b5bc:	3fe00000 	.word	0x3fe00000
 800b5c0:	ffc00000 	.word	0xffc00000
 800b5c4:	41dfffff 	.word	0x41dfffff
 800b5c8:	94a03595 	.word	0x94a03595
 800b5cc:	3fcfffff 	.word	0x3fcfffff
 800b5d0:	3ff00000 	.word	0x3ff00000
 800b5d4:	7ff00000 	.word	0x7ff00000
 800b5d8:	7fe00000 	.word	0x7fe00000
 800b5dc:	7c9fffff 	.word	0x7c9fffff
 800b5e0:	3fe00000 	.word	0x3fe00000
 800b5e4:	bff00000 	.word	0xbff00000
 800b5e8:	7fefffff 	.word	0x7fefffff

0800b5ec <strtod>:
 800b5ec:	460a      	mov	r2, r1
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4802      	ldr	r0, [pc, #8]	; (800b5fc <strtod+0x10>)
 800b5f2:	4b03      	ldr	r3, [pc, #12]	; (800b600 <strtod+0x14>)
 800b5f4:	6800      	ldr	r0, [r0, #0]
 800b5f6:	f7ff b9f3 	b.w	800a9e0 <_strtod_l>
 800b5fa:	bf00      	nop
 800b5fc:	20000018 	.word	0x20000018
 800b600:	20000080 	.word	0x20000080

0800b604 <strtok>:
 800b604:	4b16      	ldr	r3, [pc, #88]	; (800b660 <strtok+0x5c>)
 800b606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b608:	681e      	ldr	r6, [r3, #0]
 800b60a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b60c:	4605      	mov	r5, r0
 800b60e:	b9fc      	cbnz	r4, 800b650 <strtok+0x4c>
 800b610:	2050      	movs	r0, #80	; 0x50
 800b612:	9101      	str	r1, [sp, #4]
 800b614:	f001 fafc 	bl	800cc10 <malloc>
 800b618:	9901      	ldr	r1, [sp, #4]
 800b61a:	65b0      	str	r0, [r6, #88]	; 0x58
 800b61c:	4602      	mov	r2, r0
 800b61e:	b920      	cbnz	r0, 800b62a <strtok+0x26>
 800b620:	4b10      	ldr	r3, [pc, #64]	; (800b664 <strtok+0x60>)
 800b622:	4811      	ldr	r0, [pc, #68]	; (800b668 <strtok+0x64>)
 800b624:	2157      	movs	r1, #87	; 0x57
 800b626:	f000 f8d5 	bl	800b7d4 <__assert_func>
 800b62a:	e9c0 4400 	strd	r4, r4, [r0]
 800b62e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b632:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b636:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b63a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b63e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b642:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b646:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b64a:	6184      	str	r4, [r0, #24]
 800b64c:	7704      	strb	r4, [r0, #28]
 800b64e:	6244      	str	r4, [r0, #36]	; 0x24
 800b650:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b652:	2301      	movs	r3, #1
 800b654:	4628      	mov	r0, r5
 800b656:	b002      	add	sp, #8
 800b658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b65c:	f000 b806 	b.w	800b66c <__strtok_r>
 800b660:	20000018 	.word	0x20000018
 800b664:	0800ea88 	.word	0x0800ea88
 800b668:	0800ea9f 	.word	0x0800ea9f

0800b66c <__strtok_r>:
 800b66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66e:	b908      	cbnz	r0, 800b674 <__strtok_r+0x8>
 800b670:	6810      	ldr	r0, [r2, #0]
 800b672:	b188      	cbz	r0, 800b698 <__strtok_r+0x2c>
 800b674:	4604      	mov	r4, r0
 800b676:	4620      	mov	r0, r4
 800b678:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b67c:	460f      	mov	r7, r1
 800b67e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b682:	b91e      	cbnz	r6, 800b68c <__strtok_r+0x20>
 800b684:	b965      	cbnz	r5, 800b6a0 <__strtok_r+0x34>
 800b686:	6015      	str	r5, [r2, #0]
 800b688:	4628      	mov	r0, r5
 800b68a:	e005      	b.n	800b698 <__strtok_r+0x2c>
 800b68c:	42b5      	cmp	r5, r6
 800b68e:	d1f6      	bne.n	800b67e <__strtok_r+0x12>
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f0      	bne.n	800b676 <__strtok_r+0xa>
 800b694:	6014      	str	r4, [r2, #0]
 800b696:	7003      	strb	r3, [r0, #0]
 800b698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b69a:	461c      	mov	r4, r3
 800b69c:	e00c      	b.n	800b6b8 <__strtok_r+0x4c>
 800b69e:	b915      	cbnz	r5, 800b6a6 <__strtok_r+0x3a>
 800b6a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6a4:	460e      	mov	r6, r1
 800b6a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6aa:	42ab      	cmp	r3, r5
 800b6ac:	d1f7      	bne.n	800b69e <__strtok_r+0x32>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0f3      	beq.n	800b69a <__strtok_r+0x2e>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b6b8:	6014      	str	r4, [r2, #0]
 800b6ba:	e7ed      	b.n	800b698 <__strtok_r+0x2c>

0800b6bc <_strtol_l.constprop.0>:
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c2:	d001      	beq.n	800b6c8 <_strtol_l.constprop.0+0xc>
 800b6c4:	2b24      	cmp	r3, #36	; 0x24
 800b6c6:	d906      	bls.n	800b6d6 <_strtol_l.constprop.0+0x1a>
 800b6c8:	f7fe fc7c 	bl	8009fc4 <__errno>
 800b6cc:	2316      	movs	r3, #22
 800b6ce:	6003      	str	r3, [r0, #0]
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7bc <_strtol_l.constprop.0+0x100>
 800b6da:	460d      	mov	r5, r1
 800b6dc:	462e      	mov	r6, r5
 800b6de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b6e6:	f017 0708 	ands.w	r7, r7, #8
 800b6ea:	d1f7      	bne.n	800b6dc <_strtol_l.constprop.0+0x20>
 800b6ec:	2c2d      	cmp	r4, #45	; 0x2d
 800b6ee:	d132      	bne.n	800b756 <_strtol_l.constprop.0+0x9a>
 800b6f0:	782c      	ldrb	r4, [r5, #0]
 800b6f2:	2701      	movs	r7, #1
 800b6f4:	1cb5      	adds	r5, r6, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d05b      	beq.n	800b7b2 <_strtol_l.constprop.0+0xf6>
 800b6fa:	2b10      	cmp	r3, #16
 800b6fc:	d109      	bne.n	800b712 <_strtol_l.constprop.0+0x56>
 800b6fe:	2c30      	cmp	r4, #48	; 0x30
 800b700:	d107      	bne.n	800b712 <_strtol_l.constprop.0+0x56>
 800b702:	782c      	ldrb	r4, [r5, #0]
 800b704:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b708:	2c58      	cmp	r4, #88	; 0x58
 800b70a:	d14d      	bne.n	800b7a8 <_strtol_l.constprop.0+0xec>
 800b70c:	786c      	ldrb	r4, [r5, #1]
 800b70e:	2310      	movs	r3, #16
 800b710:	3502      	adds	r5, #2
 800b712:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b716:	f108 38ff 	add.w	r8, r8, #4294967295
 800b71a:	f04f 0c00 	mov.w	ip, #0
 800b71e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b722:	4666      	mov	r6, ip
 800b724:	fb03 8a19 	mls	sl, r3, r9, r8
 800b728:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b72c:	f1be 0f09 	cmp.w	lr, #9
 800b730:	d816      	bhi.n	800b760 <_strtol_l.constprop.0+0xa4>
 800b732:	4674      	mov	r4, lr
 800b734:	42a3      	cmp	r3, r4
 800b736:	dd24      	ble.n	800b782 <_strtol_l.constprop.0+0xc6>
 800b738:	f1bc 0f00 	cmp.w	ip, #0
 800b73c:	db1e      	blt.n	800b77c <_strtol_l.constprop.0+0xc0>
 800b73e:	45b1      	cmp	r9, r6
 800b740:	d31c      	bcc.n	800b77c <_strtol_l.constprop.0+0xc0>
 800b742:	d101      	bne.n	800b748 <_strtol_l.constprop.0+0x8c>
 800b744:	45a2      	cmp	sl, r4
 800b746:	db19      	blt.n	800b77c <_strtol_l.constprop.0+0xc0>
 800b748:	fb06 4603 	mla	r6, r6, r3, r4
 800b74c:	f04f 0c01 	mov.w	ip, #1
 800b750:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b754:	e7e8      	b.n	800b728 <_strtol_l.constprop.0+0x6c>
 800b756:	2c2b      	cmp	r4, #43	; 0x2b
 800b758:	bf04      	itt	eq
 800b75a:	782c      	ldrbeq	r4, [r5, #0]
 800b75c:	1cb5      	addeq	r5, r6, #2
 800b75e:	e7ca      	b.n	800b6f6 <_strtol_l.constprop.0+0x3a>
 800b760:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b764:	f1be 0f19 	cmp.w	lr, #25
 800b768:	d801      	bhi.n	800b76e <_strtol_l.constprop.0+0xb2>
 800b76a:	3c37      	subs	r4, #55	; 0x37
 800b76c:	e7e2      	b.n	800b734 <_strtol_l.constprop.0+0x78>
 800b76e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b772:	f1be 0f19 	cmp.w	lr, #25
 800b776:	d804      	bhi.n	800b782 <_strtol_l.constprop.0+0xc6>
 800b778:	3c57      	subs	r4, #87	; 0x57
 800b77a:	e7db      	b.n	800b734 <_strtol_l.constprop.0+0x78>
 800b77c:	f04f 3cff 	mov.w	ip, #4294967295
 800b780:	e7e6      	b.n	800b750 <_strtol_l.constprop.0+0x94>
 800b782:	f1bc 0f00 	cmp.w	ip, #0
 800b786:	da05      	bge.n	800b794 <_strtol_l.constprop.0+0xd8>
 800b788:	2322      	movs	r3, #34	; 0x22
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	4646      	mov	r6, r8
 800b78e:	b942      	cbnz	r2, 800b7a2 <_strtol_l.constprop.0+0xe6>
 800b790:	4630      	mov	r0, r6
 800b792:	e79e      	b.n	800b6d2 <_strtol_l.constprop.0+0x16>
 800b794:	b107      	cbz	r7, 800b798 <_strtol_l.constprop.0+0xdc>
 800b796:	4276      	negs	r6, r6
 800b798:	2a00      	cmp	r2, #0
 800b79a:	d0f9      	beq.n	800b790 <_strtol_l.constprop.0+0xd4>
 800b79c:	f1bc 0f00 	cmp.w	ip, #0
 800b7a0:	d000      	beq.n	800b7a4 <_strtol_l.constprop.0+0xe8>
 800b7a2:	1e69      	subs	r1, r5, #1
 800b7a4:	6011      	str	r1, [r2, #0]
 800b7a6:	e7f3      	b.n	800b790 <_strtol_l.constprop.0+0xd4>
 800b7a8:	2430      	movs	r4, #48	; 0x30
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1b1      	bne.n	800b712 <_strtol_l.constprop.0+0x56>
 800b7ae:	2308      	movs	r3, #8
 800b7b0:	e7af      	b.n	800b712 <_strtol_l.constprop.0+0x56>
 800b7b2:	2c30      	cmp	r4, #48	; 0x30
 800b7b4:	d0a5      	beq.n	800b702 <_strtol_l.constprop.0+0x46>
 800b7b6:	230a      	movs	r3, #10
 800b7b8:	e7ab      	b.n	800b712 <_strtol_l.constprop.0+0x56>
 800b7ba:	bf00      	nop
 800b7bc:	0800eb39 	.word	0x0800eb39

0800b7c0 <strtol>:
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	460a      	mov	r2, r1
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	4802      	ldr	r0, [pc, #8]	; (800b7d0 <strtol+0x10>)
 800b7c8:	6800      	ldr	r0, [r0, #0]
 800b7ca:	f7ff bf77 	b.w	800b6bc <_strtol_l.constprop.0>
 800b7ce:	bf00      	nop
 800b7d0:	20000018 	.word	0x20000018

0800b7d4 <__assert_func>:
 800b7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7d6:	4614      	mov	r4, r2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4b09      	ldr	r3, [pc, #36]	; (800b800 <__assert_func+0x2c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	68d8      	ldr	r0, [r3, #12]
 800b7e2:	b14c      	cbz	r4, 800b7f8 <__assert_func+0x24>
 800b7e4:	4b07      	ldr	r3, [pc, #28]	; (800b804 <__assert_func+0x30>)
 800b7e6:	9100      	str	r1, [sp, #0]
 800b7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7ec:	4906      	ldr	r1, [pc, #24]	; (800b808 <__assert_func+0x34>)
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	f000 fe88 	bl	800c504 <fiprintf>
 800b7f4:	f002 fb9e 	bl	800df34 <abort>
 800b7f8:	4b04      	ldr	r3, [pc, #16]	; (800b80c <__assert_func+0x38>)
 800b7fa:	461c      	mov	r4, r3
 800b7fc:	e7f3      	b.n	800b7e6 <__assert_func+0x12>
 800b7fe:	bf00      	nop
 800b800:	20000018 	.word	0x20000018
 800b804:	0800eafc 	.word	0x0800eafc
 800b808:	0800eb09 	.word	0x0800eb09
 800b80c:	0800eb37 	.word	0x0800eb37

0800b810 <quorem>:
 800b810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	6903      	ldr	r3, [r0, #16]
 800b816:	690c      	ldr	r4, [r1, #16]
 800b818:	42a3      	cmp	r3, r4
 800b81a:	4607      	mov	r7, r0
 800b81c:	f2c0 8081 	blt.w	800b922 <quorem+0x112>
 800b820:	3c01      	subs	r4, #1
 800b822:	f101 0814 	add.w	r8, r1, #20
 800b826:	f100 0514 	add.w	r5, r0, #20
 800b82a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b838:	3301      	adds	r3, #1
 800b83a:	429a      	cmp	r2, r3
 800b83c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b844:	fbb2 f6f3 	udiv	r6, r2, r3
 800b848:	d331      	bcc.n	800b8ae <quorem+0x9e>
 800b84a:	f04f 0e00 	mov.w	lr, #0
 800b84e:	4640      	mov	r0, r8
 800b850:	46ac      	mov	ip, r5
 800b852:	46f2      	mov	sl, lr
 800b854:	f850 2b04 	ldr.w	r2, [r0], #4
 800b858:	b293      	uxth	r3, r2
 800b85a:	fb06 e303 	mla	r3, r6, r3, lr
 800b85e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b862:	b29b      	uxth	r3, r3
 800b864:	ebaa 0303 	sub.w	r3, sl, r3
 800b868:	f8dc a000 	ldr.w	sl, [ip]
 800b86c:	0c12      	lsrs	r2, r2, #16
 800b86e:	fa13 f38a 	uxtah	r3, r3, sl
 800b872:	fb06 e202 	mla	r2, r6, r2, lr
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b87e:	b292      	uxth	r2, r2
 800b880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b888:	f8bd 3000 	ldrh.w	r3, [sp]
 800b88c:	4581      	cmp	r9, r0
 800b88e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b892:	f84c 3b04 	str.w	r3, [ip], #4
 800b896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b89a:	d2db      	bcs.n	800b854 <quorem+0x44>
 800b89c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8a0:	b92b      	cbnz	r3, 800b8ae <quorem+0x9e>
 800b8a2:	9b01      	ldr	r3, [sp, #4]
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	429d      	cmp	r5, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	d32e      	bcc.n	800b90a <quorem+0xfa>
 800b8ac:	613c      	str	r4, [r7, #16]
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f001 fca2 	bl	800d1f8 <__mcmp>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	db24      	blt.n	800b902 <quorem+0xf2>
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f04f 0c00 	mov.w	ip, #0
 800b8c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b8c8:	b293      	uxth	r3, r2
 800b8ca:	ebac 0303 	sub.w	r3, ip, r3
 800b8ce:	0c12      	lsrs	r2, r2, #16
 800b8d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b8d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e2:	45c1      	cmp	r9, r8
 800b8e4:	f840 3b04 	str.w	r3, [r0], #4
 800b8e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8ec:	d2e8      	bcs.n	800b8c0 <quorem+0xb0>
 800b8ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8f6:	b922      	cbnz	r2, 800b902 <quorem+0xf2>
 800b8f8:	3b04      	subs	r3, #4
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	d30a      	bcc.n	800b916 <quorem+0x106>
 800b900:	613c      	str	r4, [r7, #16]
 800b902:	4630      	mov	r0, r6
 800b904:	b003      	add	sp, #12
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	3b04      	subs	r3, #4
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d1cc      	bne.n	800b8ac <quorem+0x9c>
 800b912:	3c01      	subs	r4, #1
 800b914:	e7c7      	b.n	800b8a6 <quorem+0x96>
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	3b04      	subs	r3, #4
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d1f0      	bne.n	800b900 <quorem+0xf0>
 800b91e:	3c01      	subs	r4, #1
 800b920:	e7eb      	b.n	800b8fa <quorem+0xea>
 800b922:	2000      	movs	r0, #0
 800b924:	e7ee      	b.n	800b904 <quorem+0xf4>
	...

0800b928 <_dtoa_r>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	ed2d 8b04 	vpush	{d8-d9}
 800b930:	ec57 6b10 	vmov	r6, r7, d0
 800b934:	b093      	sub	sp, #76	; 0x4c
 800b936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b93c:	9106      	str	r1, [sp, #24]
 800b93e:	ee10 aa10 	vmov	sl, s0
 800b942:	4604      	mov	r4, r0
 800b944:	9209      	str	r2, [sp, #36]	; 0x24
 800b946:	930c      	str	r3, [sp, #48]	; 0x30
 800b948:	46bb      	mov	fp, r7
 800b94a:	b975      	cbnz	r5, 800b96a <_dtoa_r+0x42>
 800b94c:	2010      	movs	r0, #16
 800b94e:	f001 f95f 	bl	800cc10 <malloc>
 800b952:	4602      	mov	r2, r0
 800b954:	6260      	str	r0, [r4, #36]	; 0x24
 800b956:	b920      	cbnz	r0, 800b962 <_dtoa_r+0x3a>
 800b958:	4ba7      	ldr	r3, [pc, #668]	; (800bbf8 <_dtoa_r+0x2d0>)
 800b95a:	21ea      	movs	r1, #234	; 0xea
 800b95c:	48a7      	ldr	r0, [pc, #668]	; (800bbfc <_dtoa_r+0x2d4>)
 800b95e:	f7ff ff39 	bl	800b7d4 <__assert_func>
 800b962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b966:	6005      	str	r5, [r0, #0]
 800b968:	60c5      	str	r5, [r0, #12]
 800b96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	b151      	cbz	r1, 800b986 <_dtoa_r+0x5e>
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	604a      	str	r2, [r1, #4]
 800b974:	2301      	movs	r3, #1
 800b976:	4093      	lsls	r3, r2
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f001 f9b0 	bl	800cce0 <_Bfree>
 800b980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	1e3b      	subs	r3, r7, #0
 800b988:	bfaa      	itet	ge
 800b98a:	2300      	movge	r3, #0
 800b98c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b990:	f8c8 3000 	strge.w	r3, [r8]
 800b994:	4b9a      	ldr	r3, [pc, #616]	; (800bc00 <_dtoa_r+0x2d8>)
 800b996:	bfbc      	itt	lt
 800b998:	2201      	movlt	r2, #1
 800b99a:	f8c8 2000 	strlt.w	r2, [r8]
 800b99e:	ea33 030b 	bics.w	r3, r3, fp
 800b9a2:	d11b      	bne.n	800b9dc <_dtoa_r+0xb4>
 800b9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9b0:	4333      	orrs	r3, r6
 800b9b2:	f000 8592 	beq.w	800c4da <_dtoa_r+0xbb2>
 800b9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b8:	b963      	cbnz	r3, 800b9d4 <_dtoa_r+0xac>
 800b9ba:	4b92      	ldr	r3, [pc, #584]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9bc:	e022      	b.n	800ba04 <_dtoa_r+0xdc>
 800b9be:	4b92      	ldr	r3, [pc, #584]	; (800bc08 <_dtoa_r+0x2e0>)
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	9801      	ldr	r0, [sp, #4]
 800b9ca:	b013      	add	sp, #76	; 0x4c
 800b9cc:	ecbd 8b04 	vpop	{d8-d9}
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	4b8b      	ldr	r3, [pc, #556]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	3303      	adds	r3, #3
 800b9da:	e7f3      	b.n	800b9c4 <_dtoa_r+0x9c>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f5 f8a8 	bl	8000b38 <__aeabi_dcmpeq>
 800b9e8:	ec4b ab19 	vmov	d9, sl, fp
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	b158      	cbz	r0, 800ba08 <_dtoa_r+0xe0>
 800b9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 856b 	beq.w	800c4d4 <_dtoa_r+0xbac>
 800b9fe:	4883      	ldr	r0, [pc, #524]	; (800bc0c <_dtoa_r+0x2e4>)
 800ba00:	6018      	str	r0, [r3, #0]
 800ba02:	1e43      	subs	r3, r0, #1
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	e7df      	b.n	800b9c8 <_dtoa_r+0xa0>
 800ba08:	ec4b ab10 	vmov	d0, sl, fp
 800ba0c:	aa10      	add	r2, sp, #64	; 0x40
 800ba0e:	a911      	add	r1, sp, #68	; 0x44
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 fd13 	bl	800d43c <__d2b>
 800ba16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba1a:	ee08 0a10 	vmov	s16, r0
 800ba1e:	2d00      	cmp	r5, #0
 800ba20:	f000 8084 	beq.w	800bb2c <_dtoa_r+0x204>
 800ba24:	ee19 3a90 	vmov	r3, s19
 800ba28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba30:	4656      	mov	r6, sl
 800ba32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba3e:	4b74      	ldr	r3, [pc, #464]	; (800bc10 <_dtoa_r+0x2e8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc57 	bl	80002f8 <__aeabi_dsub>
 800ba4a:	a365      	add	r3, pc, #404	; (adr r3, 800bbe0 <_dtoa_r+0x2b8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fe0a 	bl	8000668 <__aeabi_dmul>
 800ba54:	a364      	add	r3, pc, #400	; (adr r3, 800bbe8 <_dtoa_r+0x2c0>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fc4f 	bl	80002fc <__adddf3>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4628      	mov	r0, r5
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f4 fd96 	bl	8000594 <__aeabi_i2d>
 800ba68:	a361      	add	r3, pc, #388	; (adr r3, 800bbf0 <_dtoa_r+0x2c8>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fdfb 	bl	8000668 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fc3f 	bl	80002fc <__adddf3>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f5 f8a1 	bl	8000bc8 <__aeabi_d2iz>
 800ba86:	2200      	movs	r2, #0
 800ba88:	9000      	str	r0, [sp, #0]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f5 f85c 	bl	8000b4c <__aeabi_dcmplt>
 800ba94:	b150      	cbz	r0, 800baac <_dtoa_r+0x184>
 800ba96:	9800      	ldr	r0, [sp, #0]
 800ba98:	f7f4 fd7c 	bl	8000594 <__aeabi_i2d>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f5 f84a 	bl	8000b38 <__aeabi_dcmpeq>
 800baa4:	b910      	cbnz	r0, 800baac <_dtoa_r+0x184>
 800baa6:	9b00      	ldr	r3, [sp, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	2b16      	cmp	r3, #22
 800bab0:	d85a      	bhi.n	800bb68 <_dtoa_r+0x240>
 800bab2:	9a00      	ldr	r2, [sp, #0]
 800bab4:	4b57      	ldr	r3, [pc, #348]	; (800bc14 <_dtoa_r+0x2ec>)
 800bab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	ec51 0b19 	vmov	r0, r1, d9
 800bac2:	f7f5 f843 	bl	8000b4c <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d050      	beq.n	800bb6c <_dtoa_r+0x244>
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	3b01      	subs	r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	1b5d      	subs	r5, r3, r5
 800bad8:	1e6b      	subs	r3, r5, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	bf45      	ittet	mi
 800bade:	f1c5 0301 	rsbmi	r3, r5, #1
 800bae2:	9304      	strmi	r3, [sp, #16]
 800bae4:	2300      	movpl	r3, #0
 800bae6:	2300      	movmi	r3, #0
 800bae8:	bf4c      	ite	mi
 800baea:	9305      	strmi	r3, [sp, #20]
 800baec:	9304      	strpl	r3, [sp, #16]
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db3d      	blt.n	800bb70 <_dtoa_r+0x248>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	9a00      	ldr	r2, [sp, #0]
 800baf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bafa:	4413      	add	r3, r2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	2300      	movs	r3, #0
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	f200 8089 	bhi.w	800bc1c <_dtoa_r+0x2f4>
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	bfc4      	itt	gt
 800bb0e:	3b04      	subgt	r3, #4
 800bb10:	9306      	strgt	r3, [sp, #24]
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	f1a3 0302 	sub.w	r3, r3, #2
 800bb18:	bfcc      	ite	gt
 800bb1a:	2500      	movgt	r5, #0
 800bb1c:	2501      	movle	r5, #1
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	f200 8087 	bhi.w	800bc32 <_dtoa_r+0x30a>
 800bb24:	e8df f003 	tbb	[pc, r3]
 800bb28:	59383a2d 	.word	0x59383a2d
 800bb2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb30:	441d      	add	r5, r3
 800bb32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	bfc1      	itttt	gt
 800bb3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb42:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb4a:	bfda      	itte	le
 800bb4c:	f1c3 0320 	rsble	r3, r3, #32
 800bb50:	fa06 f003 	lslle.w	r0, r6, r3
 800bb54:	4318      	orrgt	r0, r3
 800bb56:	f7f4 fd0d 	bl	8000574 <__aeabi_ui2d>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb62:	3d01      	subs	r5, #1
 800bb64:	930e      	str	r3, [sp, #56]	; 0x38
 800bb66:	e76a      	b.n	800ba3e <_dtoa_r+0x116>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7b2      	b.n	800bad2 <_dtoa_r+0x1aa>
 800bb6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb6e:	e7b1      	b.n	800bad4 <_dtoa_r+0x1ac>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	9a00      	ldr	r2, [sp, #0]
 800bb74:	1a9b      	subs	r3, r3, r2
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	4253      	negs	r3, r2
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb80:	e7bf      	b.n	800bb02 <_dtoa_r+0x1da>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc55      	bgt.n	800bc38 <_dtoa_r+0x310>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb92:	461a      	mov	r2, r3
 800bb94:	9209      	str	r2, [sp, #36]	; 0x24
 800bb96:	e00c      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f3      	b.n	800bb84 <_dtoa_r+0x25c>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba0:	9308      	str	r3, [sp, #32]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	bfb8      	it	lt
 800bbb0:	2301      	movlt	r3, #1
 800bbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	6042      	str	r2, [r0, #4]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	f102 0614 	add.w	r6, r2, #20
 800bbbe:	429e      	cmp	r6, r3
 800bbc0:	6841      	ldr	r1, [r0, #4]
 800bbc2:	d93d      	bls.n	800bc40 <_dtoa_r+0x318>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f001 f84b 	bl	800cc60 <_Balloc>
 800bbca:	9001      	str	r0, [sp, #4]
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d13b      	bne.n	800bc48 <_dtoa_r+0x320>
 800bbd0:	4b11      	ldr	r3, [pc, #68]	; (800bc18 <_dtoa_r+0x2f0>)
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbd8:	e6c0      	b.n	800b95c <_dtoa_r+0x34>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7df      	b.n	800bb9e <_dtoa_r+0x276>
 800bbde:	bf00      	nop
 800bbe0:	636f4361 	.word	0x636f4361
 800bbe4:	3fd287a7 	.word	0x3fd287a7
 800bbe8:	8b60c8b3 	.word	0x8b60c8b3
 800bbec:	3fc68a28 	.word	0x3fc68a28
 800bbf0:	509f79fb 	.word	0x509f79fb
 800bbf4:	3fd34413 	.word	0x3fd34413
 800bbf8:	0800ea88 	.word	0x0800ea88
 800bbfc:	0800ec46 	.word	0x0800ec46
 800bc00:	7ff00000 	.word	0x7ff00000
 800bc04:	0800ec42 	.word	0x0800ec42
 800bc08:	0800ec39 	.word	0x0800ec39
 800bc0c:	0800ea11 	.word	0x0800ea11
 800bc10:	3ff80000 	.word	0x3ff80000
 800bc14:	0800edb0 	.word	0x0800edb0
 800bc18:	0800eca1 	.word	0x0800eca1
 800bc1c:	2501      	movs	r5, #1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9306      	str	r3, [sp, #24]
 800bc22:	9508      	str	r5, [sp, #32]
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295
 800bc28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2312      	movs	r3, #18
 800bc30:	e7b0      	b.n	800bb94 <_dtoa_r+0x26c>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9308      	str	r3, [sp, #32]
 800bc36:	e7f5      	b.n	800bc24 <_dtoa_r+0x2fc>
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc3e:	e7b8      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bc40:	3101      	adds	r1, #1
 800bc42:	6041      	str	r1, [r0, #4]
 800bc44:	0052      	lsls	r2, r2, #1
 800bc46:	e7b8      	b.n	800bbba <_dtoa_r+0x292>
 800bc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc4a:	9a01      	ldr	r2, [sp, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	2b0e      	cmp	r3, #14
 800bc52:	f200 809d 	bhi.w	800bd90 <_dtoa_r+0x468>
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	f000 809a 	beq.w	800bd90 <_dtoa_r+0x468>
 800bc5c:	9b00      	ldr	r3, [sp, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd32      	ble.n	800bcc8 <_dtoa_r+0x3a0>
 800bc62:	4ab7      	ldr	r2, [pc, #732]	; (800bf40 <_dtoa_r+0x618>)
 800bc64:	f003 030f 	and.w	r3, r3, #15
 800bc68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	05d8      	lsls	r0, r3, #23
 800bc74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc78:	d516      	bpl.n	800bca8 <_dtoa_r+0x380>
 800bc7a:	4bb2      	ldr	r3, [pc, #712]	; (800bf44 <_dtoa_r+0x61c>)
 800bc7c:	ec51 0b19 	vmov	r0, r1, d9
 800bc80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc84:	f7f4 fe1a 	bl	80008bc <__aeabi_ddiv>
 800bc88:	f007 070f 	and.w	r7, r7, #15
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	468b      	mov	fp, r1
 800bc90:	2503      	movs	r5, #3
 800bc92:	4eac      	ldr	r6, [pc, #688]	; (800bf44 <_dtoa_r+0x61c>)
 800bc94:	b957      	cbnz	r7, 800bcac <_dtoa_r+0x384>
 800bc96:	4642      	mov	r2, r8
 800bc98:	464b      	mov	r3, r9
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	f7f4 fe0d 	bl	80008bc <__aeabi_ddiv>
 800bca2:	4682      	mov	sl, r0
 800bca4:	468b      	mov	fp, r1
 800bca6:	e028      	b.n	800bcfa <_dtoa_r+0x3d2>
 800bca8:	2502      	movs	r5, #2
 800bcaa:	e7f2      	b.n	800bc92 <_dtoa_r+0x36a>
 800bcac:	07f9      	lsls	r1, r7, #31
 800bcae:	d508      	bpl.n	800bcc2 <_dtoa_r+0x39a>
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb8:	f7f4 fcd6 	bl	8000668 <__aeabi_dmul>
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	107f      	asrs	r7, r7, #1
 800bcc4:	3608      	adds	r6, #8
 800bcc6:	e7e5      	b.n	800bc94 <_dtoa_r+0x36c>
 800bcc8:	f000 809b 	beq.w	800be02 <_dtoa_r+0x4da>
 800bccc:	9b00      	ldr	r3, [sp, #0]
 800bcce:	4f9d      	ldr	r7, [pc, #628]	; (800bf44 <_dtoa_r+0x61c>)
 800bcd0:	425e      	negs	r6, r3
 800bcd2:	4b9b      	ldr	r3, [pc, #620]	; (800bf40 <_dtoa_r+0x618>)
 800bcd4:	f006 020f 	and.w	r2, r6, #15
 800bcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	ec51 0b19 	vmov	r0, r1, d9
 800bce4:	f7f4 fcc0 	bl	8000668 <__aeabi_dmul>
 800bce8:	1136      	asrs	r6, r6, #4
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2502      	movs	r5, #2
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	d17a      	bne.n	800bdec <_dtoa_r+0x4c4>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1d3      	bne.n	800bca2 <_dtoa_r+0x37a>
 800bcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8082 	beq.w	800be06 <_dtoa_r+0x4de>
 800bd02:	4b91      	ldr	r3, [pc, #580]	; (800bf48 <_dtoa_r+0x620>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	4650      	mov	r0, sl
 800bd08:	4659      	mov	r1, fp
 800bd0a:	f7f4 ff1f 	bl	8000b4c <__aeabi_dcmplt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d079      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d076      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dd36      	ble.n	800bd8c <_dtoa_r+0x464>
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	1e5f      	subs	r7, r3, #1
 800bd26:	2200      	movs	r2, #0
 800bd28:	4b88      	ldr	r3, [pc, #544]	; (800bf4c <_dtoa_r+0x624>)
 800bd2a:	f7f4 fc9d 	bl	8000668 <__aeabi_dmul>
 800bd2e:	9e02      	ldr	r6, [sp, #8]
 800bd30:	4682      	mov	sl, r0
 800bd32:	468b      	mov	fp, r1
 800bd34:	3501      	adds	r5, #1
 800bd36:	4628      	mov	r0, r5
 800bd38:	f7f4 fc2c 	bl	8000594 <__aeabi_i2d>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 fc92 	bl	8000668 <__aeabi_dmul>
 800bd44:	4b82      	ldr	r3, [pc, #520]	; (800bf50 <_dtoa_r+0x628>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7f4 fad8 	bl	80002fc <__adddf3>
 800bd4c:	46d0      	mov	r8, sl
 800bd4e:	46d9      	mov	r9, fp
 800bd50:	4682      	mov	sl, r0
 800bd52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d158      	bne.n	800be0c <_dtoa_r+0x4e4>
 800bd5a:	4b7e      	ldr	r3, [pc, #504]	; (800bf54 <_dtoa_r+0x62c>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fac9 	bl	80002f8 <__aeabi_dsub>
 800bd66:	4652      	mov	r2, sl
 800bd68:	465b      	mov	r3, fp
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	4689      	mov	r9, r1
 800bd6e:	f7f4 ff0b 	bl	8000b88 <__aeabi_dcmpgt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f040 8295 	bne.w	800c2a2 <_dtoa_r+0x97a>
 800bd78:	4652      	mov	r2, sl
 800bd7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 fee3 	bl	8000b4c <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f040 8289 	bne.w	800c29e <_dtoa_r+0x976>
 800bd8c:	ec5b ab19 	vmov	sl, fp, d9
 800bd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f2c0 8148 	blt.w	800c028 <_dtoa_r+0x700>
 800bd98:	9a00      	ldr	r2, [sp, #0]
 800bd9a:	2a0e      	cmp	r2, #14
 800bd9c:	f300 8144 	bgt.w	800c028 <_dtoa_r+0x700>
 800bda0:	4b67      	ldr	r3, [pc, #412]	; (800bf40 <_dtoa_r+0x618>)
 800bda2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bda6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f280 80d5 	bge.w	800bf5c <_dtoa_r+0x634>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f300 80d1 	bgt.w	800bf5c <_dtoa_r+0x634>
 800bdba:	f040 826f 	bne.w	800c29c <_dtoa_r+0x974>
 800bdbe:	4b65      	ldr	r3, [pc, #404]	; (800bf54 <_dtoa_r+0x62c>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	f7f4 fc4f 	bl	8000668 <__aeabi_dmul>
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	f7f4 fed1 	bl	8000b74 <__aeabi_dcmpge>
 800bdd2:	9e03      	ldr	r6, [sp, #12]
 800bdd4:	4637      	mov	r7, r6
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f040 8245 	bne.w	800c266 <_dtoa_r+0x93e>
 800bddc:	9d01      	ldr	r5, [sp, #4]
 800bdde:	2331      	movs	r3, #49	; 0x31
 800bde0:	f805 3b01 	strb.w	r3, [r5], #1
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	e240      	b.n	800c26e <_dtoa_r+0x946>
 800bdec:	07f2      	lsls	r2, r6, #31
 800bdee:	d505      	bpl.n	800bdfc <_dtoa_r+0x4d4>
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	f7f4 fc38 	bl	8000668 <__aeabi_dmul>
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	1076      	asrs	r6, r6, #1
 800bdfe:	3708      	adds	r7, #8
 800be00:	e777      	b.n	800bcf2 <_dtoa_r+0x3ca>
 800be02:	2502      	movs	r5, #2
 800be04:	e779      	b.n	800bcfa <_dtoa_r+0x3d2>
 800be06:	9f00      	ldr	r7, [sp, #0]
 800be08:	9e03      	ldr	r6, [sp, #12]
 800be0a:	e794      	b.n	800bd36 <_dtoa_r+0x40e>
 800be0c:	9901      	ldr	r1, [sp, #4]
 800be0e:	4b4c      	ldr	r3, [pc, #304]	; (800bf40 <_dtoa_r+0x618>)
 800be10:	4431      	add	r1, r6
 800be12:	910d      	str	r1, [sp, #52]	; 0x34
 800be14:	9908      	ldr	r1, [sp, #32]
 800be16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be1e:	2900      	cmp	r1, #0
 800be20:	d043      	beq.n	800beaa <_dtoa_r+0x582>
 800be22:	494d      	ldr	r1, [pc, #308]	; (800bf58 <_dtoa_r+0x630>)
 800be24:	2000      	movs	r0, #0
 800be26:	f7f4 fd49 	bl	80008bc <__aeabi_ddiv>
 800be2a:	4652      	mov	r2, sl
 800be2c:	465b      	mov	r3, fp
 800be2e:	f7f4 fa63 	bl	80002f8 <__aeabi_dsub>
 800be32:	9d01      	ldr	r5, [sp, #4]
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	4649      	mov	r1, r9
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7f4 fec4 	bl	8000bc8 <__aeabi_d2iz>
 800be40:	4606      	mov	r6, r0
 800be42:	f7f4 fba7 	bl	8000594 <__aeabi_i2d>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fa53 	bl	80002f8 <__aeabi_dsub>
 800be52:	3630      	adds	r6, #48	; 0x30
 800be54:	f805 6b01 	strb.w	r6, [r5], #1
 800be58:	4652      	mov	r2, sl
 800be5a:	465b      	mov	r3, fp
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	f7f4 fe74 	bl	8000b4c <__aeabi_dcmplt>
 800be64:	2800      	cmp	r0, #0
 800be66:	d163      	bne.n	800bf30 <_dtoa_r+0x608>
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	4936      	ldr	r1, [pc, #216]	; (800bf48 <_dtoa_r+0x620>)
 800be6e:	2000      	movs	r0, #0
 800be70:	f7f4 fa42 	bl	80002f8 <__aeabi_dsub>
 800be74:	4652      	mov	r2, sl
 800be76:	465b      	mov	r3, fp
 800be78:	f7f4 fe68 	bl	8000b4c <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f040 80b5 	bne.w	800bfec <_dtoa_r+0x6c4>
 800be82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be84:	429d      	cmp	r5, r3
 800be86:	d081      	beq.n	800bd8c <_dtoa_r+0x464>
 800be88:	4b30      	ldr	r3, [pc, #192]	; (800bf4c <_dtoa_r+0x624>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	4650      	mov	r0, sl
 800be8e:	4659      	mov	r1, fp
 800be90:	f7f4 fbea 	bl	8000668 <__aeabi_dmul>
 800be94:	4b2d      	ldr	r3, [pc, #180]	; (800bf4c <_dtoa_r+0x624>)
 800be96:	4682      	mov	sl, r0
 800be98:	468b      	mov	fp, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	2200      	movs	r2, #0
 800bea0:	f7f4 fbe2 	bl	8000668 <__aeabi_dmul>
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	e7c6      	b.n	800be38 <_dtoa_r+0x510>
 800beaa:	4650      	mov	r0, sl
 800beac:	4659      	mov	r1, fp
 800beae:	f7f4 fbdb 	bl	8000668 <__aeabi_dmul>
 800beb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beb4:	9d01      	ldr	r5, [sp, #4]
 800beb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	4649      	mov	r1, r9
 800bebe:	4640      	mov	r0, r8
 800bec0:	f7f4 fe82 	bl	8000bc8 <__aeabi_d2iz>
 800bec4:	4606      	mov	r6, r0
 800bec6:	f7f4 fb65 	bl	8000594 <__aeabi_i2d>
 800beca:	3630      	adds	r6, #48	; 0x30
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 fa10 	bl	80002f8 <__aeabi_dsub>
 800bed8:	f805 6b01 	strb.w	r6, [r5], #1
 800bedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bede:	429d      	cmp	r5, r3
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	d124      	bne.n	800bf34 <_dtoa_r+0x60c>
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <_dtoa_r+0x630>)
 800beec:	4650      	mov	r0, sl
 800beee:	4659      	mov	r1, fp
 800bef0:	f7f4 fa04 	bl	80002fc <__adddf3>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 fe44 	bl	8000b88 <__aeabi_dcmpgt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d173      	bne.n	800bfec <_dtoa_r+0x6c4>
 800bf04:	4652      	mov	r2, sl
 800bf06:	465b      	mov	r3, fp
 800bf08:	4913      	ldr	r1, [pc, #76]	; (800bf58 <_dtoa_r+0x630>)
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7f4 f9f4 	bl	80002f8 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4640      	mov	r0, r8
 800bf16:	4649      	mov	r1, r9
 800bf18:	f7f4 fe18 	bl	8000b4c <__aeabi_dcmplt>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f43f af35 	beq.w	800bd8c <_dtoa_r+0x464>
 800bf22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf24:	1e6b      	subs	r3, r5, #1
 800bf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf2c:	2b30      	cmp	r3, #48	; 0x30
 800bf2e:	d0f8      	beq.n	800bf22 <_dtoa_r+0x5fa>
 800bf30:	9700      	str	r7, [sp, #0]
 800bf32:	e049      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <_dtoa_r+0x624>)
 800bf36:	f7f4 fb97 	bl	8000668 <__aeabi_dmul>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	e7bd      	b.n	800bebc <_dtoa_r+0x594>
 800bf40:	0800edb0 	.word	0x0800edb0
 800bf44:	0800ed88 	.word	0x0800ed88
 800bf48:	3ff00000 	.word	0x3ff00000
 800bf4c:	40240000 	.word	0x40240000
 800bf50:	401c0000 	.word	0x401c0000
 800bf54:	40140000 	.word	0x40140000
 800bf58:	3fe00000 	.word	0x3fe00000
 800bf5c:	9d01      	ldr	r5, [sp, #4]
 800bf5e:	4656      	mov	r6, sl
 800bf60:	465f      	mov	r7, fp
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fca7 	bl	80008bc <__aeabi_ddiv>
 800bf6e:	f7f4 fe2b 	bl	8000bc8 <__aeabi_d2iz>
 800bf72:	4682      	mov	sl, r0
 800bf74:	f7f4 fb0e 	bl	8000594 <__aeabi_i2d>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	f7f4 fb74 	bl	8000668 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf8c:	f7f4 f9b4 	bl	80002f8 <__aeabi_dsub>
 800bf90:	f805 6b01 	strb.w	r6, [r5], #1
 800bf94:	9e01      	ldr	r6, [sp, #4]
 800bf96:	9f03      	ldr	r7, [sp, #12]
 800bf98:	1bae      	subs	r6, r5, r6
 800bf9a:	42b7      	cmp	r7, r6
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	d135      	bne.n	800c00e <_dtoa_r+0x6e6>
 800bfa2:	f7f4 f9ab 	bl	80002fc <__adddf3>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f7f4 fdeb 	bl	8000b88 <__aeabi_dcmpgt>
 800bfb2:	b9d0      	cbnz	r0, 800bfea <_dtoa_r+0x6c2>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fdbc 	bl	8000b38 <__aeabi_dcmpeq>
 800bfc0:	b110      	cbz	r0, 800bfc8 <_dtoa_r+0x6a0>
 800bfc2:	f01a 0f01 	tst.w	sl, #1
 800bfc6:	d110      	bne.n	800bfea <_dtoa_r+0x6c2>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	ee18 1a10 	vmov	r1, s16
 800bfce:	f000 fe87 	bl	800cce0 <_Bfree>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9800      	ldr	r0, [sp, #0]
 800bfd6:	702b      	strb	r3, [r5, #0]
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfda:	3001      	adds	r0, #1
 800bfdc:	6018      	str	r0, [r3, #0]
 800bfde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f43f acf1 	beq.w	800b9c8 <_dtoa_r+0xa0>
 800bfe6:	601d      	str	r5, [r3, #0]
 800bfe8:	e4ee      	b.n	800b9c8 <_dtoa_r+0xa0>
 800bfea:	9f00      	ldr	r7, [sp, #0]
 800bfec:	462b      	mov	r3, r5
 800bfee:	461d      	mov	r5, r3
 800bff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff4:	2a39      	cmp	r2, #57	; 0x39
 800bff6:	d106      	bne.n	800c006 <_dtoa_r+0x6de>
 800bff8:	9a01      	ldr	r2, [sp, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1f7      	bne.n	800bfee <_dtoa_r+0x6c6>
 800bffe:	9901      	ldr	r1, [sp, #4]
 800c000:	2230      	movs	r2, #48	; 0x30
 800c002:	3701      	adds	r7, #1
 800c004:	700a      	strb	r2, [r1, #0]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	3201      	adds	r2, #1
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	e790      	b.n	800bf30 <_dtoa_r+0x608>
 800c00e:	4ba6      	ldr	r3, [pc, #664]	; (800c2a8 <_dtoa_r+0x980>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 fb29 	bl	8000668 <__aeabi_dmul>
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f7f4 fd8b 	bl	8000b38 <__aeabi_dcmpeq>
 800c022:	2800      	cmp	r0, #0
 800c024:	d09d      	beq.n	800bf62 <_dtoa_r+0x63a>
 800c026:	e7cf      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c028:	9a08      	ldr	r2, [sp, #32]
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	f000 80d7 	beq.w	800c1de <_dtoa_r+0x8b6>
 800c030:	9a06      	ldr	r2, [sp, #24]
 800c032:	2a01      	cmp	r2, #1
 800c034:	f300 80ba 	bgt.w	800c1ac <_dtoa_r+0x884>
 800c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	f000 80b2 	beq.w	800c1a4 <_dtoa_r+0x87c>
 800c040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c044:	9e07      	ldr	r6, [sp, #28]
 800c046:	9d04      	ldr	r5, [sp, #16]
 800c048:	9a04      	ldr	r2, [sp, #16]
 800c04a:	441a      	add	r2, r3
 800c04c:	9204      	str	r2, [sp, #16]
 800c04e:	9a05      	ldr	r2, [sp, #20]
 800c050:	2101      	movs	r1, #1
 800c052:	441a      	add	r2, r3
 800c054:	4620      	mov	r0, r4
 800c056:	9205      	str	r2, [sp, #20]
 800c058:	f000 ff44 	bl	800cee4 <__i2b>
 800c05c:	4607      	mov	r7, r0
 800c05e:	2d00      	cmp	r5, #0
 800c060:	dd0c      	ble.n	800c07c <_dtoa_r+0x754>
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dd09      	ble.n	800c07c <_dtoa_r+0x754>
 800c068:	42ab      	cmp	r3, r5
 800c06a:	9a04      	ldr	r2, [sp, #16]
 800c06c:	bfa8      	it	ge
 800c06e:	462b      	movge	r3, r5
 800c070:	1ad2      	subs	r2, r2, r3
 800c072:	9204      	str	r2, [sp, #16]
 800c074:	9a05      	ldr	r2, [sp, #20]
 800c076:	1aed      	subs	r5, r5, r3
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	b31b      	cbz	r3, 800c0c8 <_dtoa_r+0x7a0>
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80af 	beq.w	800c1e6 <_dtoa_r+0x8be>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd13      	ble.n	800c0b4 <_dtoa_r+0x78c>
 800c08c:	4639      	mov	r1, r7
 800c08e:	4632      	mov	r2, r6
 800c090:	4620      	mov	r0, r4
 800c092:	f000 ffe7 	bl	800d064 <__pow5mult>
 800c096:	ee18 2a10 	vmov	r2, s16
 800c09a:	4601      	mov	r1, r0
 800c09c:	4607      	mov	r7, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 ff36 	bl	800cf10 <__multiply>
 800c0a4:	ee18 1a10 	vmov	r1, s16
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fe18 	bl	800cce0 <_Bfree>
 800c0b0:	ee08 8a10 	vmov	s16, r8
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	1b9a      	subs	r2, r3, r6
 800c0b8:	d006      	beq.n	800c0c8 <_dtoa_r+0x7a0>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 ffd0 	bl	800d064 <__pow5mult>
 800c0c4:	ee08 0a10 	vmov	s16, r0
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 ff0a 	bl	800cee4 <__i2b>
 800c0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	f340 8088 	ble.w	800c1ea <_dtoa_r+0x8c2>
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 ffc0 	bl	800d064 <__pow5mult>
 800c0e4:	9b06      	ldr	r3, [sp, #24]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	f340 8081 	ble.w	800c1f0 <_dtoa_r+0x8c8>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	6933      	ldr	r3, [r6, #16]
 800c0f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0f8:	6918      	ldr	r0, [r3, #16]
 800c0fa:	f000 fea3 	bl	800ce44 <__hi0bits>
 800c0fe:	f1c0 0020 	rsb	r0, r0, #32
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	4418      	add	r0, r3
 800c106:	f010 001f 	ands.w	r0, r0, #31
 800c10a:	f000 8092 	beq.w	800c232 <_dtoa_r+0x90a>
 800c10e:	f1c0 0320 	rsb	r3, r0, #32
 800c112:	2b04      	cmp	r3, #4
 800c114:	f340 808a 	ble.w	800c22c <_dtoa_r+0x904>
 800c118:	f1c0 001c 	rsb	r0, r0, #28
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	4403      	add	r3, r0
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	4403      	add	r3, r0
 800c126:	4405      	add	r5, r0
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd07      	ble.n	800c140 <_dtoa_r+0x818>
 800c130:	ee18 1a10 	vmov	r1, s16
 800c134:	461a      	mov	r2, r3
 800c136:	4620      	mov	r0, r4
 800c138:	f000 ffee 	bl	800d118 <__lshift>
 800c13c:	ee08 0a10 	vmov	s16, r0
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	dd05      	ble.n	800c152 <_dtoa_r+0x82a>
 800c146:	4631      	mov	r1, r6
 800c148:	461a      	mov	r2, r3
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 ffe4 	bl	800d118 <__lshift>
 800c150:	4606      	mov	r6, r0
 800c152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d06e      	beq.n	800c236 <_dtoa_r+0x90e>
 800c158:	ee18 0a10 	vmov	r0, s16
 800c15c:	4631      	mov	r1, r6
 800c15e:	f001 f84b 	bl	800d1f8 <__mcmp>
 800c162:	2800      	cmp	r0, #0
 800c164:	da67      	bge.n	800c236 <_dtoa_r+0x90e>
 800c166:	9b00      	ldr	r3, [sp, #0]
 800c168:	3b01      	subs	r3, #1
 800c16a:	ee18 1a10 	vmov	r1, s16
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	220a      	movs	r2, #10
 800c172:	2300      	movs	r3, #0
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fdd5 	bl	800cd24 <__multadd>
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	ee08 0a10 	vmov	s16, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81b1 	beq.w	800c4e8 <_dtoa_r+0xbc0>
 800c186:	2300      	movs	r3, #0
 800c188:	4639      	mov	r1, r7
 800c18a:	220a      	movs	r2, #10
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fdc9 	bl	800cd24 <__multadd>
 800c192:	9b02      	ldr	r3, [sp, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	4607      	mov	r7, r0
 800c198:	f300 808e 	bgt.w	800c2b8 <_dtoa_r+0x990>
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	dc51      	bgt.n	800c246 <_dtoa_r+0x91e>
 800c1a2:	e089      	b.n	800c2b8 <_dtoa_r+0x990>
 800c1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1aa:	e74b      	b.n	800c044 <_dtoa_r+0x71c>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	1e5e      	subs	r6, r3, #1
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	42b3      	cmp	r3, r6
 800c1b4:	bfbf      	itttt	lt
 800c1b6:	9b07      	ldrlt	r3, [sp, #28]
 800c1b8:	9607      	strlt	r6, [sp, #28]
 800c1ba:	1af2      	sublt	r2, r6, r3
 800c1bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1be:	bfb6      	itet	lt
 800c1c0:	189b      	addlt	r3, r3, r2
 800c1c2:	1b9e      	subge	r6, r3, r6
 800c1c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	bfb8      	it	lt
 800c1ca:	2600      	movlt	r6, #0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bfb7      	itett	lt
 800c1d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1d8:	1a9d      	sublt	r5, r3, r2
 800c1da:	2300      	movlt	r3, #0
 800c1dc:	e734      	b.n	800c048 <_dtoa_r+0x720>
 800c1de:	9e07      	ldr	r6, [sp, #28]
 800c1e0:	9d04      	ldr	r5, [sp, #16]
 800c1e2:	9f08      	ldr	r7, [sp, #32]
 800c1e4:	e73b      	b.n	800c05e <_dtoa_r+0x736>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	e767      	b.n	800c0ba <_dtoa_r+0x792>
 800c1ea:	9b06      	ldr	r3, [sp, #24]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	dc18      	bgt.n	800c222 <_dtoa_r+0x8fa>
 800c1f0:	f1ba 0f00 	cmp.w	sl, #0
 800c1f4:	d115      	bne.n	800c222 <_dtoa_r+0x8fa>
 800c1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1fa:	b993      	cbnz	r3, 800c222 <_dtoa_r+0x8fa>
 800c1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c200:	0d1b      	lsrs	r3, r3, #20
 800c202:	051b      	lsls	r3, r3, #20
 800c204:	b183      	cbz	r3, 800c228 <_dtoa_r+0x900>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	3301      	adds	r3, #1
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	f04f 0801 	mov.w	r8, #1
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f47f af6a 	bne.w	800c0f2 <_dtoa_r+0x7ca>
 800c21e:	2001      	movs	r0, #1
 800c220:	e76f      	b.n	800c102 <_dtoa_r+0x7da>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	e7f6      	b.n	800c216 <_dtoa_r+0x8ee>
 800c228:	4698      	mov	r8, r3
 800c22a:	e7f4      	b.n	800c216 <_dtoa_r+0x8ee>
 800c22c:	f43f af7d 	beq.w	800c12a <_dtoa_r+0x802>
 800c230:	4618      	mov	r0, r3
 800c232:	301c      	adds	r0, #28
 800c234:	e772      	b.n	800c11c <_dtoa_r+0x7f4>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc37      	bgt.n	800c2ac <_dtoa_r+0x984>
 800c23c:	9b06      	ldr	r3, [sp, #24]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	dd34      	ble.n	800c2ac <_dtoa_r+0x984>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	b96b      	cbnz	r3, 800c266 <_dtoa_r+0x93e>
 800c24a:	4631      	mov	r1, r6
 800c24c:	2205      	movs	r2, #5
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 fd68 	bl	800cd24 <__multadd>
 800c254:	4601      	mov	r1, r0
 800c256:	4606      	mov	r6, r0
 800c258:	ee18 0a10 	vmov	r0, s16
 800c25c:	f000 ffcc 	bl	800d1f8 <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	f73f adbb 	bgt.w	800bddc <_dtoa_r+0x4b4>
 800c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c268:	9d01      	ldr	r5, [sp, #4]
 800c26a:	43db      	mvns	r3, r3
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	4631      	mov	r1, r6
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fd33 	bl	800cce0 <_Bfree>
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	f43f aea4 	beq.w	800bfc8 <_dtoa_r+0x6a0>
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	d005      	beq.n	800c292 <_dtoa_r+0x96a>
 800c286:	45b8      	cmp	r8, r7
 800c288:	d003      	beq.n	800c292 <_dtoa_r+0x96a>
 800c28a:	4641      	mov	r1, r8
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 fd27 	bl	800cce0 <_Bfree>
 800c292:	4639      	mov	r1, r7
 800c294:	4620      	mov	r0, r4
 800c296:	f000 fd23 	bl	800cce0 <_Bfree>
 800c29a:	e695      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c29c:	2600      	movs	r6, #0
 800c29e:	4637      	mov	r7, r6
 800c2a0:	e7e1      	b.n	800c266 <_dtoa_r+0x93e>
 800c2a2:	9700      	str	r7, [sp, #0]
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	e599      	b.n	800bddc <_dtoa_r+0x4b4>
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	9b08      	ldr	r3, [sp, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80ca 	beq.w	800c448 <_dtoa_r+0xb20>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	9302      	str	r3, [sp, #8]
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	dd05      	ble.n	800c2c8 <_dtoa_r+0x9a0>
 800c2bc:	4639      	mov	r1, r7
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 ff29 	bl	800d118 <__lshift>
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	f1b8 0f00 	cmp.w	r8, #0
 800c2cc:	d05b      	beq.n	800c386 <_dtoa_r+0xa5e>
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fcc5 	bl	800cc60 <_Balloc>
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	b928      	cbnz	r0, 800c2e6 <_dtoa_r+0x9be>
 800c2da:	4b87      	ldr	r3, [pc, #540]	; (800c4f8 <_dtoa_r+0xbd0>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2e2:	f7ff bb3b 	b.w	800b95c <_dtoa_r+0x34>
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	0092      	lsls	r2, r2, #2
 800c2ec:	f107 010c 	add.w	r1, r7, #12
 800c2f0:	300c      	adds	r0, #12
 800c2f2:	f000 fca7 	bl	800cc44 <memcpy>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 ff0c 	bl	800d118 <__lshift>
 800c300:	9b01      	ldr	r3, [sp, #4]
 800c302:	f103 0901 	add.w	r9, r3, #1
 800c306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c30a:	4413      	add	r3, r2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	f00a 0301 	and.w	r3, sl, #1
 800c312:	46b8      	mov	r8, r7
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	4607      	mov	r7, r0
 800c318:	4631      	mov	r1, r6
 800c31a:	ee18 0a10 	vmov	r0, s16
 800c31e:	f7ff fa77 	bl	800b810 <quorem>
 800c322:	4641      	mov	r1, r8
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c32a:	ee18 0a10 	vmov	r0, s16
 800c32e:	f000 ff63 	bl	800d1f8 <__mcmp>
 800c332:	463a      	mov	r2, r7
 800c334:	9003      	str	r0, [sp, #12]
 800c336:	4631      	mov	r1, r6
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 ff79 	bl	800d230 <__mdiff>
 800c33e:	68c2      	ldr	r2, [r0, #12]
 800c340:	f109 3bff 	add.w	fp, r9, #4294967295
 800c344:	4605      	mov	r5, r0
 800c346:	bb02      	cbnz	r2, 800c38a <_dtoa_r+0xa62>
 800c348:	4601      	mov	r1, r0
 800c34a:	ee18 0a10 	vmov	r0, s16
 800c34e:	f000 ff53 	bl	800d1f8 <__mcmp>
 800c352:	4602      	mov	r2, r0
 800c354:	4629      	mov	r1, r5
 800c356:	4620      	mov	r0, r4
 800c358:	9207      	str	r2, [sp, #28]
 800c35a:	f000 fcc1 	bl	800cce0 <_Bfree>
 800c35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c362:	ea43 0102 	orr.w	r1, r3, r2
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	430b      	orrs	r3, r1
 800c36a:	464d      	mov	r5, r9
 800c36c:	d10f      	bne.n	800c38e <_dtoa_r+0xa66>
 800c36e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c372:	d02a      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	dd02      	ble.n	800c380 <_dtoa_r+0xa58>
 800c37a:	9b02      	ldr	r3, [sp, #8]
 800c37c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c380:	f88b a000 	strb.w	sl, [fp]
 800c384:	e775      	b.n	800c272 <_dtoa_r+0x94a>
 800c386:	4638      	mov	r0, r7
 800c388:	e7ba      	b.n	800c300 <_dtoa_r+0x9d8>
 800c38a:	2201      	movs	r2, #1
 800c38c:	e7e2      	b.n	800c354 <_dtoa_r+0xa2c>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	db04      	blt.n	800c39e <_dtoa_r+0xa76>
 800c394:	9906      	ldr	r1, [sp, #24]
 800c396:	430b      	orrs	r3, r1
 800c398:	9904      	ldr	r1, [sp, #16]
 800c39a:	430b      	orrs	r3, r1
 800c39c:	d122      	bne.n	800c3e4 <_dtoa_r+0xabc>
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	ddee      	ble.n	800c380 <_dtoa_r+0xa58>
 800c3a2:	ee18 1a10 	vmov	r1, s16
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 feb5 	bl	800d118 <__lshift>
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	ee08 0a10 	vmov	s16, r0
 800c3b4:	f000 ff20 	bl	800d1f8 <__mcmp>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dc03      	bgt.n	800c3c4 <_dtoa_r+0xa9c>
 800c3bc:	d1e0      	bne.n	800c380 <_dtoa_r+0xa58>
 800c3be:	f01a 0f01 	tst.w	sl, #1
 800c3c2:	d0dd      	beq.n	800c380 <_dtoa_r+0xa58>
 800c3c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c8:	d1d7      	bne.n	800c37a <_dtoa_r+0xa52>
 800c3ca:	2339      	movs	r3, #57	; 0x39
 800c3cc:	f88b 3000 	strb.w	r3, [fp]
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	461d      	mov	r5, r3
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3da:	2a39      	cmp	r2, #57	; 0x39
 800c3dc:	d071      	beq.n	800c4c2 <_dtoa_r+0xb9a>
 800c3de:	3201      	adds	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e746      	b.n	800c272 <_dtoa_r+0x94a>
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	dd07      	ble.n	800c3f8 <_dtoa_r+0xad0>
 800c3e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3ec:	d0ed      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c3ee:	f10a 0301 	add.w	r3, sl, #1
 800c3f2:	f88b 3000 	strb.w	r3, [fp]
 800c3f6:	e73c      	b.n	800c272 <_dtoa_r+0x94a>
 800c3f8:	9b05      	ldr	r3, [sp, #20]
 800c3fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3fe:	4599      	cmp	r9, r3
 800c400:	d047      	beq.n	800c492 <_dtoa_r+0xb6a>
 800c402:	ee18 1a10 	vmov	r1, s16
 800c406:	2300      	movs	r3, #0
 800c408:	220a      	movs	r2, #10
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 fc8a 	bl	800cd24 <__multadd>
 800c410:	45b8      	cmp	r8, r7
 800c412:	ee08 0a10 	vmov	s16, r0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	f04f 020a 	mov.w	r2, #10
 800c41e:	4641      	mov	r1, r8
 800c420:	4620      	mov	r0, r4
 800c422:	d106      	bne.n	800c432 <_dtoa_r+0xb0a>
 800c424:	f000 fc7e 	bl	800cd24 <__multadd>
 800c428:	4680      	mov	r8, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	f109 0901 	add.w	r9, r9, #1
 800c430:	e772      	b.n	800c318 <_dtoa_r+0x9f0>
 800c432:	f000 fc77 	bl	800cd24 <__multadd>
 800c436:	4639      	mov	r1, r7
 800c438:	4680      	mov	r8, r0
 800c43a:	2300      	movs	r3, #0
 800c43c:	220a      	movs	r2, #10
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 fc70 	bl	800cd24 <__multadd>
 800c444:	4607      	mov	r7, r0
 800c446:	e7f1      	b.n	800c42c <_dtoa_r+0xb04>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	9d01      	ldr	r5, [sp, #4]
 800c44e:	ee18 0a10 	vmov	r0, s16
 800c452:	4631      	mov	r1, r6
 800c454:	f7ff f9dc 	bl	800b810 <quorem>
 800c458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	f805 ab01 	strb.w	sl, [r5], #1
 800c462:	1aea      	subs	r2, r5, r3
 800c464:	9b02      	ldr	r3, [sp, #8]
 800c466:	4293      	cmp	r3, r2
 800c468:	dd09      	ble.n	800c47e <_dtoa_r+0xb56>
 800c46a:	ee18 1a10 	vmov	r1, s16
 800c46e:	2300      	movs	r3, #0
 800c470:	220a      	movs	r2, #10
 800c472:	4620      	mov	r0, r4
 800c474:	f000 fc56 	bl	800cd24 <__multadd>
 800c478:	ee08 0a10 	vmov	s16, r0
 800c47c:	e7e7      	b.n	800c44e <_dtoa_r+0xb26>
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	bfc8      	it	gt
 800c484:	461d      	movgt	r5, r3
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	bfd8      	it	le
 800c48a:	2501      	movle	r5, #1
 800c48c:	441d      	add	r5, r3
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	ee18 1a10 	vmov	r1, s16
 800c496:	2201      	movs	r2, #1
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 fe3d 	bl	800d118 <__lshift>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	ee08 0a10 	vmov	s16, r0
 800c4a4:	f000 fea8 	bl	800d1f8 <__mcmp>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dc91      	bgt.n	800c3d0 <_dtoa_r+0xaa8>
 800c4ac:	d102      	bne.n	800c4b4 <_dtoa_r+0xb8c>
 800c4ae:	f01a 0f01 	tst.w	sl, #1
 800c4b2:	d18d      	bne.n	800c3d0 <_dtoa_r+0xaa8>
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	461d      	mov	r5, r3
 800c4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4bc:	2a30      	cmp	r2, #48	; 0x30
 800c4be:	d0fa      	beq.n	800c4b6 <_dtoa_r+0xb8e>
 800c4c0:	e6d7      	b.n	800c272 <_dtoa_r+0x94a>
 800c4c2:	9a01      	ldr	r2, [sp, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d184      	bne.n	800c3d2 <_dtoa_r+0xaaa>
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	2331      	movs	r3, #49	; 0x31
 800c4d0:	7013      	strb	r3, [r2, #0]
 800c4d2:	e6ce      	b.n	800c272 <_dtoa_r+0x94a>
 800c4d4:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <_dtoa_r+0xbd4>)
 800c4d6:	f7ff ba95 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f47f aa6e 	bne.w	800b9be <_dtoa_r+0x96>
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <_dtoa_r+0xbd8>)
 800c4e4:	f7ff ba8e 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4e8:	9b02      	ldr	r3, [sp, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dcae      	bgt.n	800c44c <_dtoa_r+0xb24>
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	f73f aea8 	bgt.w	800c246 <_dtoa_r+0x91e>
 800c4f6:	e7a9      	b.n	800c44c <_dtoa_r+0xb24>
 800c4f8:	0800eca1 	.word	0x0800eca1
 800c4fc:	0800ea10 	.word	0x0800ea10
 800c500:	0800ec39 	.word	0x0800ec39

0800c504 <fiprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b503      	push	{r0, r1, lr}
 800c508:	4601      	mov	r1, r0
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	4805      	ldr	r0, [pc, #20]	; (800c524 <fiprintf+0x20>)
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f001 fae1 	bl	800dadc <_vfiprintf_r>
 800c51a:	b002      	add	sp, #8
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	20000018 	.word	0x20000018

0800c528 <rshift>:
 800c528:	6903      	ldr	r3, [r0, #16]
 800c52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c536:	f100 0414 	add.w	r4, r0, #20
 800c53a:	dd45      	ble.n	800c5c8 <rshift+0xa0>
 800c53c:	f011 011f 	ands.w	r1, r1, #31
 800c540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c548:	d10c      	bne.n	800c564 <rshift+0x3c>
 800c54a:	f100 0710 	add.w	r7, r0, #16
 800c54e:	4629      	mov	r1, r5
 800c550:	42b1      	cmp	r1, r6
 800c552:	d334      	bcc.n	800c5be <rshift+0x96>
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	1eea      	subs	r2, r5, #3
 800c55a:	4296      	cmp	r6, r2
 800c55c:	bf38      	it	cc
 800c55e:	2300      	movcc	r3, #0
 800c560:	4423      	add	r3, r4
 800c562:	e015      	b.n	800c590 <rshift+0x68>
 800c564:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c568:	f1c1 0820 	rsb	r8, r1, #32
 800c56c:	40cf      	lsrs	r7, r1
 800c56e:	f105 0e04 	add.w	lr, r5, #4
 800c572:	46a1      	mov	r9, r4
 800c574:	4576      	cmp	r6, lr
 800c576:	46f4      	mov	ip, lr
 800c578:	d815      	bhi.n	800c5a6 <rshift+0x7e>
 800c57a:	1a9a      	subs	r2, r3, r2
 800c57c:	0092      	lsls	r2, r2, #2
 800c57e:	3a04      	subs	r2, #4
 800c580:	3501      	adds	r5, #1
 800c582:	42ae      	cmp	r6, r5
 800c584:	bf38      	it	cc
 800c586:	2200      	movcc	r2, #0
 800c588:	18a3      	adds	r3, r4, r2
 800c58a:	50a7      	str	r7, [r4, r2]
 800c58c:	b107      	cbz	r7, 800c590 <rshift+0x68>
 800c58e:	3304      	adds	r3, #4
 800c590:	1b1a      	subs	r2, r3, r4
 800c592:	42a3      	cmp	r3, r4
 800c594:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c598:	bf08      	it	eq
 800c59a:	2300      	moveq	r3, #0
 800c59c:	6102      	str	r2, [r0, #16]
 800c59e:	bf08      	it	eq
 800c5a0:	6143      	streq	r3, [r0, #20]
 800c5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5a6:	f8dc c000 	ldr.w	ip, [ip]
 800c5aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ae:	ea4c 0707 	orr.w	r7, ip, r7
 800c5b2:	f849 7b04 	str.w	r7, [r9], #4
 800c5b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5ba:	40cf      	lsrs	r7, r1
 800c5bc:	e7da      	b.n	800c574 <rshift+0x4c>
 800c5be:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5c6:	e7c3      	b.n	800c550 <rshift+0x28>
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	e7e1      	b.n	800c590 <rshift+0x68>

0800c5cc <__hexdig_fun>:
 800c5cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5d0:	2b09      	cmp	r3, #9
 800c5d2:	d802      	bhi.n	800c5da <__hexdig_fun+0xe>
 800c5d4:	3820      	subs	r0, #32
 800c5d6:	b2c0      	uxtb	r0, r0
 800c5d8:	4770      	bx	lr
 800c5da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5de:	2b05      	cmp	r3, #5
 800c5e0:	d801      	bhi.n	800c5e6 <__hexdig_fun+0x1a>
 800c5e2:	3847      	subs	r0, #71	; 0x47
 800c5e4:	e7f7      	b.n	800c5d6 <__hexdig_fun+0xa>
 800c5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5ea:	2b05      	cmp	r3, #5
 800c5ec:	d801      	bhi.n	800c5f2 <__hexdig_fun+0x26>
 800c5ee:	3827      	subs	r0, #39	; 0x27
 800c5f0:	e7f1      	b.n	800c5d6 <__hexdig_fun+0xa>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <__gethex>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b02 	vpush	{d8}
 800c600:	b089      	sub	sp, #36	; 0x24
 800c602:	ee08 0a10 	vmov	s16, r0
 800c606:	9304      	str	r3, [sp, #16]
 800c608:	4bb4      	ldr	r3, [pc, #720]	; (800c8dc <__gethex+0x2e4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	4618      	mov	r0, r3
 800c610:	468b      	mov	fp, r1
 800c612:	4690      	mov	r8, r2
 800c614:	f7f3 fe0e 	bl	8000234 <strlen>
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	f8db 2000 	ldr.w	r2, [fp]
 800c61e:	4403      	add	r3, r0
 800c620:	4682      	mov	sl, r0
 800c622:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	1c93      	adds	r3, r2, #2
 800c62a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c62e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c632:	32fe      	adds	r2, #254	; 0xfe
 800c634:	18d1      	adds	r1, r2, r3
 800c636:	461f      	mov	r7, r3
 800c638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c63c:	9100      	str	r1, [sp, #0]
 800c63e:	2830      	cmp	r0, #48	; 0x30
 800c640:	d0f8      	beq.n	800c634 <__gethex+0x3c>
 800c642:	f7ff ffc3 	bl	800c5cc <__hexdig_fun>
 800c646:	4604      	mov	r4, r0
 800c648:	2800      	cmp	r0, #0
 800c64a:	d13a      	bne.n	800c6c2 <__gethex+0xca>
 800c64c:	9901      	ldr	r1, [sp, #4]
 800c64e:	4652      	mov	r2, sl
 800c650:	4638      	mov	r0, r7
 800c652:	f001 fb8d 	bl	800dd70 <strncmp>
 800c656:	4605      	mov	r5, r0
 800c658:	2800      	cmp	r0, #0
 800c65a:	d168      	bne.n	800c72e <__gethex+0x136>
 800c65c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c660:	eb07 060a 	add.w	r6, r7, sl
 800c664:	f7ff ffb2 	bl	800c5cc <__hexdig_fun>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d062      	beq.n	800c732 <__gethex+0x13a>
 800c66c:	4633      	mov	r3, r6
 800c66e:	7818      	ldrb	r0, [r3, #0]
 800c670:	2830      	cmp	r0, #48	; 0x30
 800c672:	461f      	mov	r7, r3
 800c674:	f103 0301 	add.w	r3, r3, #1
 800c678:	d0f9      	beq.n	800c66e <__gethex+0x76>
 800c67a:	f7ff ffa7 	bl	800c5cc <__hexdig_fun>
 800c67e:	2301      	movs	r3, #1
 800c680:	fab0 f480 	clz	r4, r0
 800c684:	0964      	lsrs	r4, r4, #5
 800c686:	4635      	mov	r5, r6
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	463a      	mov	r2, r7
 800c68c:	4616      	mov	r6, r2
 800c68e:	3201      	adds	r2, #1
 800c690:	7830      	ldrb	r0, [r6, #0]
 800c692:	f7ff ff9b 	bl	800c5cc <__hexdig_fun>
 800c696:	2800      	cmp	r0, #0
 800c698:	d1f8      	bne.n	800c68c <__gethex+0x94>
 800c69a:	9901      	ldr	r1, [sp, #4]
 800c69c:	4652      	mov	r2, sl
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f001 fb66 	bl	800dd70 <strncmp>
 800c6a4:	b980      	cbnz	r0, 800c6c8 <__gethex+0xd0>
 800c6a6:	b94d      	cbnz	r5, 800c6bc <__gethex+0xc4>
 800c6a8:	eb06 050a 	add.w	r5, r6, sl
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4616      	mov	r6, r2
 800c6b0:	3201      	adds	r2, #1
 800c6b2:	7830      	ldrb	r0, [r6, #0]
 800c6b4:	f7ff ff8a 	bl	800c5cc <__hexdig_fun>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1f8      	bne.n	800c6ae <__gethex+0xb6>
 800c6bc:	1bad      	subs	r5, r5, r6
 800c6be:	00ad      	lsls	r5, r5, #2
 800c6c0:	e004      	b.n	800c6cc <__gethex+0xd4>
 800c6c2:	2400      	movs	r4, #0
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	e7e0      	b.n	800c68a <__gethex+0x92>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d1f7      	bne.n	800c6bc <__gethex+0xc4>
 800c6cc:	7833      	ldrb	r3, [r6, #0]
 800c6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6d2:	2b50      	cmp	r3, #80	; 0x50
 800c6d4:	d13b      	bne.n	800c74e <__gethex+0x156>
 800c6d6:	7873      	ldrb	r3, [r6, #1]
 800c6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800c6da:	d02c      	beq.n	800c736 <__gethex+0x13e>
 800c6dc:	2b2d      	cmp	r3, #45	; 0x2d
 800c6de:	d02e      	beq.n	800c73e <__gethex+0x146>
 800c6e0:	1c71      	adds	r1, r6, #1
 800c6e2:	f04f 0900 	mov.w	r9, #0
 800c6e6:	7808      	ldrb	r0, [r1, #0]
 800c6e8:	f7ff ff70 	bl	800c5cc <__hexdig_fun>
 800c6ec:	1e43      	subs	r3, r0, #1
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b18      	cmp	r3, #24
 800c6f2:	d82c      	bhi.n	800c74e <__gethex+0x156>
 800c6f4:	f1a0 0210 	sub.w	r2, r0, #16
 800c6f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6fc:	f7ff ff66 	bl	800c5cc <__hexdig_fun>
 800c700:	1e43      	subs	r3, r0, #1
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b18      	cmp	r3, #24
 800c706:	d91d      	bls.n	800c744 <__gethex+0x14c>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	d000      	beq.n	800c710 <__gethex+0x118>
 800c70e:	4252      	negs	r2, r2
 800c710:	4415      	add	r5, r2
 800c712:	f8cb 1000 	str.w	r1, [fp]
 800c716:	b1e4      	cbz	r4, 800c752 <__gethex+0x15a>
 800c718:	9b00      	ldr	r3, [sp, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bf14      	ite	ne
 800c71e:	2700      	movne	r7, #0
 800c720:	2706      	moveq	r7, #6
 800c722:	4638      	mov	r0, r7
 800c724:	b009      	add	sp, #36	; 0x24
 800c726:	ecbd 8b02 	vpop	{d8}
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	463e      	mov	r6, r7
 800c730:	4625      	mov	r5, r4
 800c732:	2401      	movs	r4, #1
 800c734:	e7ca      	b.n	800c6cc <__gethex+0xd4>
 800c736:	f04f 0900 	mov.w	r9, #0
 800c73a:	1cb1      	adds	r1, r6, #2
 800c73c:	e7d3      	b.n	800c6e6 <__gethex+0xee>
 800c73e:	f04f 0901 	mov.w	r9, #1
 800c742:	e7fa      	b.n	800c73a <__gethex+0x142>
 800c744:	230a      	movs	r3, #10
 800c746:	fb03 0202 	mla	r2, r3, r2, r0
 800c74a:	3a10      	subs	r2, #16
 800c74c:	e7d4      	b.n	800c6f8 <__gethex+0x100>
 800c74e:	4631      	mov	r1, r6
 800c750:	e7df      	b.n	800c712 <__gethex+0x11a>
 800c752:	1bf3      	subs	r3, r6, r7
 800c754:	3b01      	subs	r3, #1
 800c756:	4621      	mov	r1, r4
 800c758:	2b07      	cmp	r3, #7
 800c75a:	dc0b      	bgt.n	800c774 <__gethex+0x17c>
 800c75c:	ee18 0a10 	vmov	r0, s16
 800c760:	f000 fa7e 	bl	800cc60 <_Balloc>
 800c764:	4604      	mov	r4, r0
 800c766:	b940      	cbnz	r0, 800c77a <__gethex+0x182>
 800c768:	4b5d      	ldr	r3, [pc, #372]	; (800c8e0 <__gethex+0x2e8>)
 800c76a:	4602      	mov	r2, r0
 800c76c:	21de      	movs	r1, #222	; 0xde
 800c76e:	485d      	ldr	r0, [pc, #372]	; (800c8e4 <__gethex+0x2ec>)
 800c770:	f7ff f830 	bl	800b7d4 <__assert_func>
 800c774:	3101      	adds	r1, #1
 800c776:	105b      	asrs	r3, r3, #1
 800c778:	e7ee      	b.n	800c758 <__gethex+0x160>
 800c77a:	f100 0914 	add.w	r9, r0, #20
 800c77e:	f04f 0b00 	mov.w	fp, #0
 800c782:	f1ca 0301 	rsb	r3, sl, #1
 800c786:	f8cd 9008 	str.w	r9, [sp, #8]
 800c78a:	f8cd b000 	str.w	fp, [sp]
 800c78e:	9306      	str	r3, [sp, #24]
 800c790:	42b7      	cmp	r7, r6
 800c792:	d340      	bcc.n	800c816 <__gethex+0x21e>
 800c794:	9802      	ldr	r0, [sp, #8]
 800c796:	9b00      	ldr	r3, [sp, #0]
 800c798:	f840 3b04 	str.w	r3, [r0], #4
 800c79c:	eba0 0009 	sub.w	r0, r0, r9
 800c7a0:	1080      	asrs	r0, r0, #2
 800c7a2:	0146      	lsls	r6, r0, #5
 800c7a4:	6120      	str	r0, [r4, #16]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fb4c 	bl	800ce44 <__hi0bits>
 800c7ac:	1a30      	subs	r0, r6, r0
 800c7ae:	f8d8 6000 	ldr.w	r6, [r8]
 800c7b2:	42b0      	cmp	r0, r6
 800c7b4:	dd63      	ble.n	800c87e <__gethex+0x286>
 800c7b6:	1b87      	subs	r7, r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fef0 	bl	800d5a0 <__any_on>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	b1a8      	cbz	r0, 800c7f0 <__gethex+0x1f8>
 800c7c4:	1e7b      	subs	r3, r7, #1
 800c7c6:	1159      	asrs	r1, r3, #5
 800c7c8:	f003 021f 	and.w	r2, r3, #31
 800c7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7d0:	f04f 0a01 	mov.w	sl, #1
 800c7d4:	fa0a f202 	lsl.w	r2, sl, r2
 800c7d8:	420a      	tst	r2, r1
 800c7da:	d009      	beq.n	800c7f0 <__gethex+0x1f8>
 800c7dc:	4553      	cmp	r3, sl
 800c7de:	dd05      	ble.n	800c7ec <__gethex+0x1f4>
 800c7e0:	1eb9      	subs	r1, r7, #2
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fedc 	bl	800d5a0 <__any_on>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d145      	bne.n	800c878 <__gethex+0x280>
 800c7ec:	f04f 0a02 	mov.w	sl, #2
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f7ff fe98 	bl	800c528 <rshift>
 800c7f8:	443d      	add	r5, r7
 800c7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fe:	42ab      	cmp	r3, r5
 800c800:	da4c      	bge.n	800c89c <__gethex+0x2a4>
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	4621      	mov	r1, r4
 800c808:	f000 fa6a 	bl	800cce0 <_Bfree>
 800c80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c80e:	2300      	movs	r3, #0
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	27a3      	movs	r7, #163	; 0xa3
 800c814:	e785      	b.n	800c722 <__gethex+0x12a>
 800c816:	1e73      	subs	r3, r6, #1
 800c818:	9a05      	ldr	r2, [sp, #20]
 800c81a:	9303      	str	r3, [sp, #12]
 800c81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c820:	4293      	cmp	r3, r2
 800c822:	d019      	beq.n	800c858 <__gethex+0x260>
 800c824:	f1bb 0f20 	cmp.w	fp, #32
 800c828:	d107      	bne.n	800c83a <__gethex+0x242>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	9a00      	ldr	r2, [sp, #0]
 800c82e:	f843 2b04 	str.w	r2, [r3], #4
 800c832:	9302      	str	r3, [sp, #8]
 800c834:	2300      	movs	r3, #0
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	469b      	mov	fp, r3
 800c83a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c83e:	f7ff fec5 	bl	800c5cc <__hexdig_fun>
 800c842:	9b00      	ldr	r3, [sp, #0]
 800c844:	f000 000f 	and.w	r0, r0, #15
 800c848:	fa00 f00b 	lsl.w	r0, r0, fp
 800c84c:	4303      	orrs	r3, r0
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	f10b 0b04 	add.w	fp, fp, #4
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	e00d      	b.n	800c874 <__gethex+0x27c>
 800c858:	9b03      	ldr	r3, [sp, #12]
 800c85a:	9a06      	ldr	r2, [sp, #24]
 800c85c:	4413      	add	r3, r2
 800c85e:	42bb      	cmp	r3, r7
 800c860:	d3e0      	bcc.n	800c824 <__gethex+0x22c>
 800c862:	4618      	mov	r0, r3
 800c864:	9901      	ldr	r1, [sp, #4]
 800c866:	9307      	str	r3, [sp, #28]
 800c868:	4652      	mov	r2, sl
 800c86a:	f001 fa81 	bl	800dd70 <strncmp>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	2800      	cmp	r0, #0
 800c872:	d1d7      	bne.n	800c824 <__gethex+0x22c>
 800c874:	461e      	mov	r6, r3
 800c876:	e78b      	b.n	800c790 <__gethex+0x198>
 800c878:	f04f 0a03 	mov.w	sl, #3
 800c87c:	e7b8      	b.n	800c7f0 <__gethex+0x1f8>
 800c87e:	da0a      	bge.n	800c896 <__gethex+0x29e>
 800c880:	1a37      	subs	r7, r6, r0
 800c882:	4621      	mov	r1, r4
 800c884:	ee18 0a10 	vmov	r0, s16
 800c888:	463a      	mov	r2, r7
 800c88a:	f000 fc45 	bl	800d118 <__lshift>
 800c88e:	1bed      	subs	r5, r5, r7
 800c890:	4604      	mov	r4, r0
 800c892:	f100 0914 	add.w	r9, r0, #20
 800c896:	f04f 0a00 	mov.w	sl, #0
 800c89a:	e7ae      	b.n	800c7fa <__gethex+0x202>
 800c89c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8a0:	42a8      	cmp	r0, r5
 800c8a2:	dd72      	ble.n	800c98a <__gethex+0x392>
 800c8a4:	1b45      	subs	r5, r0, r5
 800c8a6:	42ae      	cmp	r6, r5
 800c8a8:	dc36      	bgt.n	800c918 <__gethex+0x320>
 800c8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d02a      	beq.n	800c908 <__gethex+0x310>
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d02c      	beq.n	800c910 <__gethex+0x318>
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d11c      	bne.n	800c8f4 <__gethex+0x2fc>
 800c8ba:	42ae      	cmp	r6, r5
 800c8bc:	d11a      	bne.n	800c8f4 <__gethex+0x2fc>
 800c8be:	2e01      	cmp	r6, #1
 800c8c0:	d112      	bne.n	800c8e8 <__gethex+0x2f0>
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	f8c9 3000 	str.w	r3, [r9]
 800c8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8d4:	2762      	movs	r7, #98	; 0x62
 800c8d6:	601c      	str	r4, [r3, #0]
 800c8d8:	e723      	b.n	800c722 <__gethex+0x12a>
 800c8da:	bf00      	nop
 800c8dc:	0800ed18 	.word	0x0800ed18
 800c8e0:	0800eca1 	.word	0x0800eca1
 800c8e4:	0800ecb2 	.word	0x0800ecb2
 800c8e8:	1e71      	subs	r1, r6, #1
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 fe58 	bl	800d5a0 <__any_on>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d1e6      	bne.n	800c8c2 <__gethex+0x2ca>
 800c8f4:	ee18 0a10 	vmov	r0, s16
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f000 f9f1 	bl	800cce0 <_Bfree>
 800c8fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c900:	2300      	movs	r3, #0
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	2750      	movs	r7, #80	; 0x50
 800c906:	e70c      	b.n	800c722 <__gethex+0x12a>
 800c908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f2      	bne.n	800c8f4 <__gethex+0x2fc>
 800c90e:	e7d8      	b.n	800c8c2 <__gethex+0x2ca>
 800c910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1d5      	bne.n	800c8c2 <__gethex+0x2ca>
 800c916:	e7ed      	b.n	800c8f4 <__gethex+0x2fc>
 800c918:	1e6f      	subs	r7, r5, #1
 800c91a:	f1ba 0f00 	cmp.w	sl, #0
 800c91e:	d131      	bne.n	800c984 <__gethex+0x38c>
 800c920:	b127      	cbz	r7, 800c92c <__gethex+0x334>
 800c922:	4639      	mov	r1, r7
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fe3b 	bl	800d5a0 <__any_on>
 800c92a:	4682      	mov	sl, r0
 800c92c:	117b      	asrs	r3, r7, #5
 800c92e:	2101      	movs	r1, #1
 800c930:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c934:	f007 071f 	and.w	r7, r7, #31
 800c938:	fa01 f707 	lsl.w	r7, r1, r7
 800c93c:	421f      	tst	r7, r3
 800c93e:	4629      	mov	r1, r5
 800c940:	4620      	mov	r0, r4
 800c942:	bf18      	it	ne
 800c944:	f04a 0a02 	orrne.w	sl, sl, #2
 800c948:	1b76      	subs	r6, r6, r5
 800c94a:	f7ff fded 	bl	800c528 <rshift>
 800c94e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c952:	2702      	movs	r7, #2
 800c954:	f1ba 0f00 	cmp.w	sl, #0
 800c958:	d048      	beq.n	800c9ec <__gethex+0x3f4>
 800c95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d015      	beq.n	800c98e <__gethex+0x396>
 800c962:	2b03      	cmp	r3, #3
 800c964:	d017      	beq.n	800c996 <__gethex+0x39e>
 800c966:	2b01      	cmp	r3, #1
 800c968:	d109      	bne.n	800c97e <__gethex+0x386>
 800c96a:	f01a 0f02 	tst.w	sl, #2
 800c96e:	d006      	beq.n	800c97e <__gethex+0x386>
 800c970:	f8d9 0000 	ldr.w	r0, [r9]
 800c974:	ea4a 0a00 	orr.w	sl, sl, r0
 800c978:	f01a 0f01 	tst.w	sl, #1
 800c97c:	d10e      	bne.n	800c99c <__gethex+0x3a4>
 800c97e:	f047 0710 	orr.w	r7, r7, #16
 800c982:	e033      	b.n	800c9ec <__gethex+0x3f4>
 800c984:	f04f 0a01 	mov.w	sl, #1
 800c988:	e7d0      	b.n	800c92c <__gethex+0x334>
 800c98a:	2701      	movs	r7, #1
 800c98c:	e7e2      	b.n	800c954 <__gethex+0x35c>
 800c98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c990:	f1c3 0301 	rsb	r3, r3, #1
 800c994:	9315      	str	r3, [sp, #84]	; 0x54
 800c996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0f0      	beq.n	800c97e <__gethex+0x386>
 800c99c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9a0:	f104 0314 	add.w	r3, r4, #20
 800c9a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9ac:	f04f 0c00 	mov.w	ip, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9ba:	d01c      	beq.n	800c9f6 <__gethex+0x3fe>
 800c9bc:	3201      	adds	r2, #1
 800c9be:	6002      	str	r2, [r0, #0]
 800c9c0:	2f02      	cmp	r7, #2
 800c9c2:	f104 0314 	add.w	r3, r4, #20
 800c9c6:	d13f      	bne.n	800ca48 <__gethex+0x450>
 800c9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800c9cc:	3a01      	subs	r2, #1
 800c9ce:	42b2      	cmp	r2, r6
 800c9d0:	d10a      	bne.n	800c9e8 <__gethex+0x3f0>
 800c9d2:	1171      	asrs	r1, r6, #5
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9da:	f006 061f 	and.w	r6, r6, #31
 800c9de:	fa02 f606 	lsl.w	r6, r2, r6
 800c9e2:	421e      	tst	r6, r3
 800c9e4:	bf18      	it	ne
 800c9e6:	4617      	movne	r7, r2
 800c9e8:	f047 0720 	orr.w	r7, r7, #32
 800c9ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9ee:	601c      	str	r4, [r3, #0]
 800c9f0:	9b04      	ldr	r3, [sp, #16]
 800c9f2:	601d      	str	r5, [r3, #0]
 800c9f4:	e695      	b.n	800c722 <__gethex+0x12a>
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9fc:	d8d8      	bhi.n	800c9b0 <__gethex+0x3b8>
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	459b      	cmp	fp, r3
 800ca02:	db19      	blt.n	800ca38 <__gethex+0x440>
 800ca04:	6861      	ldr	r1, [r4, #4]
 800ca06:	ee18 0a10 	vmov	r0, s16
 800ca0a:	3101      	adds	r1, #1
 800ca0c:	f000 f928 	bl	800cc60 <_Balloc>
 800ca10:	4681      	mov	r9, r0
 800ca12:	b918      	cbnz	r0, 800ca1c <__gethex+0x424>
 800ca14:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <__gethex+0x488>)
 800ca16:	4602      	mov	r2, r0
 800ca18:	2184      	movs	r1, #132	; 0x84
 800ca1a:	e6a8      	b.n	800c76e <__gethex+0x176>
 800ca1c:	6922      	ldr	r2, [r4, #16]
 800ca1e:	3202      	adds	r2, #2
 800ca20:	f104 010c 	add.w	r1, r4, #12
 800ca24:	0092      	lsls	r2, r2, #2
 800ca26:	300c      	adds	r0, #12
 800ca28:	f000 f90c 	bl	800cc44 <memcpy>
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	ee18 0a10 	vmov	r0, s16
 800ca32:	f000 f955 	bl	800cce0 <_Bfree>
 800ca36:	464c      	mov	r4, r9
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca40:	6122      	str	r2, [r4, #16]
 800ca42:	2201      	movs	r2, #1
 800ca44:	615a      	str	r2, [r3, #20]
 800ca46:	e7bb      	b.n	800c9c0 <__gethex+0x3c8>
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	455a      	cmp	r2, fp
 800ca4c:	dd0b      	ble.n	800ca66 <__gethex+0x46e>
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4620      	mov	r0, r4
 800ca52:	f7ff fd69 	bl	800c528 <rshift>
 800ca56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	f6ff aed0 	blt.w	800c802 <__gethex+0x20a>
 800ca62:	2701      	movs	r7, #1
 800ca64:	e7c0      	b.n	800c9e8 <__gethex+0x3f0>
 800ca66:	f016 061f 	ands.w	r6, r6, #31
 800ca6a:	d0fa      	beq.n	800ca62 <__gethex+0x46a>
 800ca6c:	4453      	add	r3, sl
 800ca6e:	f1c6 0620 	rsb	r6, r6, #32
 800ca72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca76:	f000 f9e5 	bl	800ce44 <__hi0bits>
 800ca7a:	42b0      	cmp	r0, r6
 800ca7c:	dbe7      	blt.n	800ca4e <__gethex+0x456>
 800ca7e:	e7f0      	b.n	800ca62 <__gethex+0x46a>
 800ca80:	0800eca1 	.word	0x0800eca1

0800ca84 <L_shift>:
 800ca84:	f1c2 0208 	rsb	r2, r2, #8
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	f1c2 0620 	rsb	r6, r2, #32
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6804      	ldr	r4, [r0, #0]
 800ca94:	fa03 f506 	lsl.w	r5, r3, r6
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	40d3      	lsrs	r3, r2
 800ca9c:	6004      	str	r4, [r0, #0]
 800ca9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800caa2:	4288      	cmp	r0, r1
 800caa4:	d3f4      	bcc.n	800ca90 <L_shift+0xc>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__match>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab2:	b914      	cbnz	r4, 800caba <__match+0x12>
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cac2:	2d19      	cmp	r5, #25
 800cac4:	bf98      	it	ls
 800cac6:	3220      	addls	r2, #32
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d0f0      	beq.n	800caae <__match+0x6>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f3      	b.n	800cab8 <__match+0x10>

0800cad0 <__hexnan>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	680b      	ldr	r3, [r1, #0]
 800cad6:	115e      	asrs	r6, r3, #5
 800cad8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cadc:	f013 031f 	ands.w	r3, r3, #31
 800cae0:	b087      	sub	sp, #28
 800cae2:	bf18      	it	ne
 800cae4:	3604      	addne	r6, #4
 800cae6:	2500      	movs	r5, #0
 800cae8:	1f37      	subs	r7, r6, #4
 800caea:	4690      	mov	r8, r2
 800caec:	6802      	ldr	r2, [r0, #0]
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	4682      	mov	sl, r0
 800caf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800caf6:	46b9      	mov	r9, r7
 800caf8:	463c      	mov	r4, r7
 800cafa:	9502      	str	r5, [sp, #8]
 800cafc:	46ab      	mov	fp, r5
 800cafe:	7851      	ldrb	r1, [r2, #1]
 800cb00:	1c53      	adds	r3, r2, #1
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	b341      	cbz	r1, 800cb58 <__hexnan+0x88>
 800cb06:	4608      	mov	r0, r1
 800cb08:	9205      	str	r2, [sp, #20]
 800cb0a:	9104      	str	r1, [sp, #16]
 800cb0c:	f7ff fd5e 	bl	800c5cc <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d14f      	bne.n	800cbb4 <__hexnan+0xe4>
 800cb14:	9904      	ldr	r1, [sp, #16]
 800cb16:	9a05      	ldr	r2, [sp, #20]
 800cb18:	2920      	cmp	r1, #32
 800cb1a:	d818      	bhi.n	800cb4e <__hexnan+0x7e>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	dd13      	ble.n	800cb4a <__hexnan+0x7a>
 800cb22:	454c      	cmp	r4, r9
 800cb24:	d206      	bcs.n	800cb34 <__hexnan+0x64>
 800cb26:	2d07      	cmp	r5, #7
 800cb28:	dc04      	bgt.n	800cb34 <__hexnan+0x64>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff ffa8 	bl	800ca84 <L_shift>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d950      	bls.n	800cbda <__hexnan+0x10a>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	464c      	mov	r4, r9
 800cb48:	461d      	mov	r5, r3
 800cb4a:	9a03      	ldr	r2, [sp, #12]
 800cb4c:	e7d7      	b.n	800cafe <__hexnan+0x2e>
 800cb4e:	2929      	cmp	r1, #41	; 0x29
 800cb50:	d156      	bne.n	800cc00 <__hexnan+0x130>
 800cb52:	3202      	adds	r2, #2
 800cb54:	f8ca 2000 	str.w	r2, [sl]
 800cb58:	f1bb 0f00 	cmp.w	fp, #0
 800cb5c:	d050      	beq.n	800cc00 <__hexnan+0x130>
 800cb5e:	454c      	cmp	r4, r9
 800cb60:	d206      	bcs.n	800cb70 <__hexnan+0xa0>
 800cb62:	2d07      	cmp	r5, #7
 800cb64:	dc04      	bgt.n	800cb70 <__hexnan+0xa0>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7ff ff8a 	bl	800ca84 <L_shift>
 800cb70:	4544      	cmp	r4, r8
 800cb72:	d934      	bls.n	800cbde <__hexnan+0x10e>
 800cb74:	f1a8 0204 	sub.w	r2, r8, #4
 800cb78:	4623      	mov	r3, r4
 800cb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb82:	429f      	cmp	r7, r3
 800cb84:	d2f9      	bcs.n	800cb7a <__hexnan+0xaa>
 800cb86:	1b3b      	subs	r3, r7, r4
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	3401      	adds	r4, #1
 800cb90:	3e03      	subs	r6, #3
 800cb92:	42b4      	cmp	r4, r6
 800cb94:	bf88      	it	hi
 800cb96:	2304      	movhi	r3, #4
 800cb98:	4443      	add	r3, r8
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f843 2b04 	str.w	r2, [r3], #4
 800cba0:	429f      	cmp	r7, r3
 800cba2:	d2fb      	bcs.n	800cb9c <__hexnan+0xcc>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	b91b      	cbnz	r3, 800cbb0 <__hexnan+0xe0>
 800cba8:	4547      	cmp	r7, r8
 800cbaa:	d127      	bne.n	800cbfc <__hexnan+0x12c>
 800cbac:	2301      	movs	r3, #1
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2005      	movs	r0, #5
 800cbb2:	e026      	b.n	800cc02 <__hexnan+0x132>
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	2d08      	cmp	r5, #8
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	dd06      	ble.n	800cbcc <__hexnan+0xfc>
 800cbbe:	4544      	cmp	r4, r8
 800cbc0:	d9c3      	bls.n	800cb4a <__hexnan+0x7a>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbc8:	2501      	movs	r5, #1
 800cbca:	3c04      	subs	r4, #4
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f000 000f 	and.w	r0, r0, #15
 800cbd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cbd6:	6022      	str	r2, [r4, #0]
 800cbd8:	e7b7      	b.n	800cb4a <__hexnan+0x7a>
 800cbda:	2508      	movs	r5, #8
 800cbdc:	e7b5      	b.n	800cb4a <__hexnan+0x7a>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0df      	beq.n	800cba4 <__hexnan+0xd4>
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	f1c3 0320 	rsb	r3, r3, #32
 800cbec:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbf4:	401a      	ands	r2, r3
 800cbf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbfa:	e7d3      	b.n	800cba4 <__hexnan+0xd4>
 800cbfc:	3f04      	subs	r7, #4
 800cbfe:	e7d1      	b.n	800cba4 <__hexnan+0xd4>
 800cc00:	2004      	movs	r0, #4
 800cc02:	b007      	add	sp, #28
 800cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc08 <_localeconv_r>:
 800cc08:	4800      	ldr	r0, [pc, #0]	; (800cc0c <_localeconv_r+0x4>)
 800cc0a:	4770      	bx	lr
 800cc0c:	20000170 	.word	0x20000170

0800cc10 <malloc>:
 800cc10:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <malloc+0xc>)
 800cc12:	4601      	mov	r1, r0
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	f000 bd67 	b.w	800d6e8 <_malloc_r>
 800cc1a:	bf00      	nop
 800cc1c:	20000018 	.word	0x20000018

0800cc20 <__ascii_mbtowc>:
 800cc20:	b082      	sub	sp, #8
 800cc22:	b901      	cbnz	r1, 800cc26 <__ascii_mbtowc+0x6>
 800cc24:	a901      	add	r1, sp, #4
 800cc26:	b142      	cbz	r2, 800cc3a <__ascii_mbtowc+0x1a>
 800cc28:	b14b      	cbz	r3, 800cc3e <__ascii_mbtowc+0x1e>
 800cc2a:	7813      	ldrb	r3, [r2, #0]
 800cc2c:	600b      	str	r3, [r1, #0]
 800cc2e:	7812      	ldrb	r2, [r2, #0]
 800cc30:	1e10      	subs	r0, r2, #0
 800cc32:	bf18      	it	ne
 800cc34:	2001      	movne	r0, #1
 800cc36:	b002      	add	sp, #8
 800cc38:	4770      	bx	lr
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	e7fb      	b.n	800cc36 <__ascii_mbtowc+0x16>
 800cc3e:	f06f 0001 	mvn.w	r0, #1
 800cc42:	e7f8      	b.n	800cc36 <__ascii_mbtowc+0x16>

0800cc44 <memcpy>:
 800cc44:	440a      	add	r2, r1
 800cc46:	4291      	cmp	r1, r2
 800cc48:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc4c:	d100      	bne.n	800cc50 <memcpy+0xc>
 800cc4e:	4770      	bx	lr
 800cc50:	b510      	push	{r4, lr}
 800cc52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc5a:	4291      	cmp	r1, r2
 800cc5c:	d1f9      	bne.n	800cc52 <memcpy+0xe>
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <_Balloc>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	b976      	cbnz	r6, 800cc88 <_Balloc+0x28>
 800cc6a:	2010      	movs	r0, #16
 800cc6c:	f7ff ffd0 	bl	800cc10 <malloc>
 800cc70:	4602      	mov	r2, r0
 800cc72:	6260      	str	r0, [r4, #36]	; 0x24
 800cc74:	b920      	cbnz	r0, 800cc80 <_Balloc+0x20>
 800cc76:	4b18      	ldr	r3, [pc, #96]	; (800ccd8 <_Balloc+0x78>)
 800cc78:	4818      	ldr	r0, [pc, #96]	; (800ccdc <_Balloc+0x7c>)
 800cc7a:	2166      	movs	r1, #102	; 0x66
 800cc7c:	f7fe fdaa 	bl	800b7d4 <__assert_func>
 800cc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc84:	6006      	str	r6, [r0, #0]
 800cc86:	60c6      	str	r6, [r0, #12]
 800cc88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc8a:	68f3      	ldr	r3, [r6, #12]
 800cc8c:	b183      	cbz	r3, 800ccb0 <_Balloc+0x50>
 800cc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc96:	b9b8      	cbnz	r0, 800ccc8 <_Balloc+0x68>
 800cc98:	2101      	movs	r1, #1
 800cc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc9e:	1d72      	adds	r2, r6, #5
 800cca0:	0092      	lsls	r2, r2, #2
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fc9d 	bl	800d5e2 <_calloc_r>
 800cca8:	b160      	cbz	r0, 800ccc4 <_Balloc+0x64>
 800ccaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccae:	e00e      	b.n	800ccce <_Balloc+0x6e>
 800ccb0:	2221      	movs	r2, #33	; 0x21
 800ccb2:	2104      	movs	r1, #4
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fc94 	bl	800d5e2 <_calloc_r>
 800ccba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccbc:	60f0      	str	r0, [r6, #12]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e4      	bne.n	800cc8e <_Balloc+0x2e>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	6802      	ldr	r2, [r0, #0]
 800ccca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccd4:	e7f7      	b.n	800ccc6 <_Balloc+0x66>
 800ccd6:	bf00      	nop
 800ccd8:	0800ea88 	.word	0x0800ea88
 800ccdc:	0800ed2c 	.word	0x0800ed2c

0800cce0 <_Bfree>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cce4:	4605      	mov	r5, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	b976      	cbnz	r6, 800cd08 <_Bfree+0x28>
 800ccea:	2010      	movs	r0, #16
 800ccec:	f7ff ff90 	bl	800cc10 <malloc>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6268      	str	r0, [r5, #36]	; 0x24
 800ccf4:	b920      	cbnz	r0, 800cd00 <_Bfree+0x20>
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <_Bfree+0x3c>)
 800ccf8:	4809      	ldr	r0, [pc, #36]	; (800cd20 <_Bfree+0x40>)
 800ccfa:	218a      	movs	r1, #138	; 0x8a
 800ccfc:	f7fe fd6a 	bl	800b7d4 <__assert_func>
 800cd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd04:	6006      	str	r6, [r0, #0]
 800cd06:	60c6      	str	r6, [r0, #12]
 800cd08:	b13c      	cbz	r4, 800cd1a <_Bfree+0x3a>
 800cd0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd0c:	6862      	ldr	r2, [r4, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd14:	6021      	str	r1, [r4, #0]
 800cd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	0800ea88 	.word	0x0800ea88
 800cd20:	0800ed2c 	.word	0x0800ed2c

0800cd24 <__multadd>:
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	690d      	ldr	r5, [r1, #16]
 800cd2a:	4607      	mov	r7, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	461e      	mov	r6, r3
 800cd30:	f101 0c14 	add.w	ip, r1, #20
 800cd34:	2000      	movs	r0, #0
 800cd36:	f8dc 3000 	ldr.w	r3, [ip]
 800cd3a:	b299      	uxth	r1, r3
 800cd3c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd40:	0c1e      	lsrs	r6, r3, #16
 800cd42:	0c0b      	lsrs	r3, r1, #16
 800cd44:	fb02 3306 	mla	r3, r2, r6, r3
 800cd48:	b289      	uxth	r1, r1
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd50:	4285      	cmp	r5, r0
 800cd52:	f84c 1b04 	str.w	r1, [ip], #4
 800cd56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd5a:	dcec      	bgt.n	800cd36 <__multadd+0x12>
 800cd5c:	b30e      	cbz	r6, 800cda2 <__multadd+0x7e>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	dc19      	bgt.n	800cd98 <__multadd+0x74>
 800cd64:	6861      	ldr	r1, [r4, #4]
 800cd66:	4638      	mov	r0, r7
 800cd68:	3101      	adds	r1, #1
 800cd6a:	f7ff ff79 	bl	800cc60 <_Balloc>
 800cd6e:	4680      	mov	r8, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__multadd+0x5a>
 800cd72:	4602      	mov	r2, r0
 800cd74:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <__multadd+0x84>)
 800cd76:	480d      	ldr	r0, [pc, #52]	; (800cdac <__multadd+0x88>)
 800cd78:	21b5      	movs	r1, #181	; 0xb5
 800cd7a:	f7fe fd2b 	bl	800b7d4 <__assert_func>
 800cd7e:	6922      	ldr	r2, [r4, #16]
 800cd80:	3202      	adds	r2, #2
 800cd82:	f104 010c 	add.w	r1, r4, #12
 800cd86:	0092      	lsls	r2, r2, #2
 800cd88:	300c      	adds	r0, #12
 800cd8a:	f7ff ff5b 	bl	800cc44 <memcpy>
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff ffa5 	bl	800cce0 <_Bfree>
 800cd96:	4644      	mov	r4, r8
 800cd98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd9c:	3501      	adds	r5, #1
 800cd9e:	615e      	str	r6, [r3, #20]
 800cda0:	6125      	str	r5, [r4, #16]
 800cda2:	4620      	mov	r0, r4
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	0800eca1 	.word	0x0800eca1
 800cdac:	0800ed2c 	.word	0x0800ed2c

0800cdb0 <__s2b>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	4615      	mov	r5, r2
 800cdb8:	461f      	mov	r7, r3
 800cdba:	2209      	movs	r2, #9
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	db09      	blt.n	800cde0 <__s2b+0x30>
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff ff47 	bl	800cc60 <_Balloc>
 800cdd2:	b940      	cbnz	r0, 800cde6 <__s2b+0x36>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	4b19      	ldr	r3, [pc, #100]	; (800ce3c <__s2b+0x8c>)
 800cdd8:	4819      	ldr	r0, [pc, #100]	; (800ce40 <__s2b+0x90>)
 800cdda:	21ce      	movs	r1, #206	; 0xce
 800cddc:	f7fe fcfa 	bl	800b7d4 <__assert_func>
 800cde0:	0052      	lsls	r2, r2, #1
 800cde2:	3101      	adds	r1, #1
 800cde4:	e7f0      	b.n	800cdc8 <__s2b+0x18>
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	6143      	str	r3, [r0, #20]
 800cdea:	2d09      	cmp	r5, #9
 800cdec:	f04f 0301 	mov.w	r3, #1
 800cdf0:	6103      	str	r3, [r0, #16]
 800cdf2:	dd16      	ble.n	800ce22 <__s2b+0x72>
 800cdf4:	f104 0909 	add.w	r9, r4, #9
 800cdf8:	46c8      	mov	r8, r9
 800cdfa:	442c      	add	r4, r5
 800cdfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce00:	4601      	mov	r1, r0
 800ce02:	3b30      	subs	r3, #48	; 0x30
 800ce04:	220a      	movs	r2, #10
 800ce06:	4630      	mov	r0, r6
 800ce08:	f7ff ff8c 	bl	800cd24 <__multadd>
 800ce0c:	45a0      	cmp	r8, r4
 800ce0e:	d1f5      	bne.n	800cdfc <__s2b+0x4c>
 800ce10:	f1a5 0408 	sub.w	r4, r5, #8
 800ce14:	444c      	add	r4, r9
 800ce16:	1b2d      	subs	r5, r5, r4
 800ce18:	1963      	adds	r3, r4, r5
 800ce1a:	42bb      	cmp	r3, r7
 800ce1c:	db04      	blt.n	800ce28 <__s2b+0x78>
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce22:	340a      	adds	r4, #10
 800ce24:	2509      	movs	r5, #9
 800ce26:	e7f6      	b.n	800ce16 <__s2b+0x66>
 800ce28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	3b30      	subs	r3, #48	; 0x30
 800ce30:	220a      	movs	r2, #10
 800ce32:	4630      	mov	r0, r6
 800ce34:	f7ff ff76 	bl	800cd24 <__multadd>
 800ce38:	e7ee      	b.n	800ce18 <__s2b+0x68>
 800ce3a:	bf00      	nop
 800ce3c:	0800eca1 	.word	0x0800eca1
 800ce40:	0800ed2c 	.word	0x0800ed2c

0800ce44 <__hi0bits>:
 800ce44:	0c03      	lsrs	r3, r0, #16
 800ce46:	041b      	lsls	r3, r3, #16
 800ce48:	b9d3      	cbnz	r3, 800ce80 <__hi0bits+0x3c>
 800ce4a:	0400      	lsls	r0, r0, #16
 800ce4c:	2310      	movs	r3, #16
 800ce4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce52:	bf04      	itt	eq
 800ce54:	0200      	lsleq	r0, r0, #8
 800ce56:	3308      	addeq	r3, #8
 800ce58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce5c:	bf04      	itt	eq
 800ce5e:	0100      	lsleq	r0, r0, #4
 800ce60:	3304      	addeq	r3, #4
 800ce62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce66:	bf04      	itt	eq
 800ce68:	0080      	lsleq	r0, r0, #2
 800ce6a:	3302      	addeq	r3, #2
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	db05      	blt.n	800ce7c <__hi0bits+0x38>
 800ce70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce74:	f103 0301 	add.w	r3, r3, #1
 800ce78:	bf08      	it	eq
 800ce7a:	2320      	moveq	r3, #32
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	4770      	bx	lr
 800ce80:	2300      	movs	r3, #0
 800ce82:	e7e4      	b.n	800ce4e <__hi0bits+0xa>

0800ce84 <__lo0bits>:
 800ce84:	6803      	ldr	r3, [r0, #0]
 800ce86:	f013 0207 	ands.w	r2, r3, #7
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	d00b      	beq.n	800cea6 <__lo0bits+0x22>
 800ce8e:	07da      	lsls	r2, r3, #31
 800ce90:	d423      	bmi.n	800ceda <__lo0bits+0x56>
 800ce92:	0798      	lsls	r0, r3, #30
 800ce94:	bf49      	itett	mi
 800ce96:	085b      	lsrmi	r3, r3, #1
 800ce98:	089b      	lsrpl	r3, r3, #2
 800ce9a:	2001      	movmi	r0, #1
 800ce9c:	600b      	strmi	r3, [r1, #0]
 800ce9e:	bf5c      	itt	pl
 800cea0:	600b      	strpl	r3, [r1, #0]
 800cea2:	2002      	movpl	r0, #2
 800cea4:	4770      	bx	lr
 800cea6:	b298      	uxth	r0, r3
 800cea8:	b9a8      	cbnz	r0, 800ced6 <__lo0bits+0x52>
 800ceaa:	0c1b      	lsrs	r3, r3, #16
 800ceac:	2010      	movs	r0, #16
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	b90a      	cbnz	r2, 800ceb6 <__lo0bits+0x32>
 800ceb2:	3008      	adds	r0, #8
 800ceb4:	0a1b      	lsrs	r3, r3, #8
 800ceb6:	071a      	lsls	r2, r3, #28
 800ceb8:	bf04      	itt	eq
 800ceba:	091b      	lsreq	r3, r3, #4
 800cebc:	3004      	addeq	r0, #4
 800cebe:	079a      	lsls	r2, r3, #30
 800cec0:	bf04      	itt	eq
 800cec2:	089b      	lsreq	r3, r3, #2
 800cec4:	3002      	addeq	r0, #2
 800cec6:	07da      	lsls	r2, r3, #31
 800cec8:	d403      	bmi.n	800ced2 <__lo0bits+0x4e>
 800ceca:	085b      	lsrs	r3, r3, #1
 800cecc:	f100 0001 	add.w	r0, r0, #1
 800ced0:	d005      	beq.n	800cede <__lo0bits+0x5a>
 800ced2:	600b      	str	r3, [r1, #0]
 800ced4:	4770      	bx	lr
 800ced6:	4610      	mov	r0, r2
 800ced8:	e7e9      	b.n	800ceae <__lo0bits+0x2a>
 800ceda:	2000      	movs	r0, #0
 800cedc:	4770      	bx	lr
 800cede:	2020      	movs	r0, #32
 800cee0:	4770      	bx	lr
	...

0800cee4 <__i2b>:
 800cee4:	b510      	push	{r4, lr}
 800cee6:	460c      	mov	r4, r1
 800cee8:	2101      	movs	r1, #1
 800ceea:	f7ff feb9 	bl	800cc60 <_Balloc>
 800ceee:	4602      	mov	r2, r0
 800cef0:	b928      	cbnz	r0, 800cefe <__i2b+0x1a>
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <__i2b+0x24>)
 800cef4:	4805      	ldr	r0, [pc, #20]	; (800cf0c <__i2b+0x28>)
 800cef6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cefa:	f7fe fc6b 	bl	800b7d4 <__assert_func>
 800cefe:	2301      	movs	r3, #1
 800cf00:	6144      	str	r4, [r0, #20]
 800cf02:	6103      	str	r3, [r0, #16]
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	bf00      	nop
 800cf08:	0800eca1 	.word	0x0800eca1
 800cf0c:	0800ed2c 	.word	0x0800ed2c

0800cf10 <__multiply>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	4691      	mov	r9, r2
 800cf16:	690a      	ldr	r2, [r1, #16]
 800cf18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	bfb8      	it	lt
 800cf20:	460b      	movlt	r3, r1
 800cf22:	460c      	mov	r4, r1
 800cf24:	bfbc      	itt	lt
 800cf26:	464c      	movlt	r4, r9
 800cf28:	4699      	movlt	r9, r3
 800cf2a:	6927      	ldr	r7, [r4, #16]
 800cf2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf30:	68a3      	ldr	r3, [r4, #8]
 800cf32:	6861      	ldr	r1, [r4, #4]
 800cf34:	eb07 060a 	add.w	r6, r7, sl
 800cf38:	42b3      	cmp	r3, r6
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	bfb8      	it	lt
 800cf3e:	3101      	addlt	r1, #1
 800cf40:	f7ff fe8e 	bl	800cc60 <_Balloc>
 800cf44:	b930      	cbnz	r0, 800cf54 <__multiply+0x44>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4b44      	ldr	r3, [pc, #272]	; (800d05c <__multiply+0x14c>)
 800cf4a:	4845      	ldr	r0, [pc, #276]	; (800d060 <__multiply+0x150>)
 800cf4c:	f240 115d 	movw	r1, #349	; 0x15d
 800cf50:	f7fe fc40 	bl	800b7d4 <__assert_func>
 800cf54:	f100 0514 	add.w	r5, r0, #20
 800cf58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	2200      	movs	r2, #0
 800cf60:	4543      	cmp	r3, r8
 800cf62:	d321      	bcc.n	800cfa8 <__multiply+0x98>
 800cf64:	f104 0314 	add.w	r3, r4, #20
 800cf68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf6c:	f109 0314 	add.w	r3, r9, #20
 800cf70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf74:	9202      	str	r2, [sp, #8]
 800cf76:	1b3a      	subs	r2, r7, r4
 800cf78:	3a15      	subs	r2, #21
 800cf7a:	f022 0203 	bic.w	r2, r2, #3
 800cf7e:	3204      	adds	r2, #4
 800cf80:	f104 0115 	add.w	r1, r4, #21
 800cf84:	428f      	cmp	r7, r1
 800cf86:	bf38      	it	cc
 800cf88:	2204      	movcc	r2, #4
 800cf8a:	9201      	str	r2, [sp, #4]
 800cf8c:	9a02      	ldr	r2, [sp, #8]
 800cf8e:	9303      	str	r3, [sp, #12]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d80c      	bhi.n	800cfae <__multiply+0x9e>
 800cf94:	2e00      	cmp	r6, #0
 800cf96:	dd03      	ble.n	800cfa0 <__multiply+0x90>
 800cf98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d05a      	beq.n	800d056 <__multiply+0x146>
 800cfa0:	6106      	str	r6, [r0, #16]
 800cfa2:	b005      	add	sp, #20
 800cfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa8:	f843 2b04 	str.w	r2, [r3], #4
 800cfac:	e7d8      	b.n	800cf60 <__multiply+0x50>
 800cfae:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfb2:	f1ba 0f00 	cmp.w	sl, #0
 800cfb6:	d024      	beq.n	800d002 <__multiply+0xf2>
 800cfb8:	f104 0e14 	add.w	lr, r4, #20
 800cfbc:	46a9      	mov	r9, r5
 800cfbe:	f04f 0c00 	mov.w	ip, #0
 800cfc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfc6:	f8d9 1000 	ldr.w	r1, [r9]
 800cfca:	fa1f fb82 	uxth.w	fp, r2
 800cfce:	b289      	uxth	r1, r1
 800cfd0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfd8:	f8d9 2000 	ldr.w	r2, [r9]
 800cfdc:	4461      	add	r1, ip
 800cfde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfe2:	fb0a c20b 	mla	r2, sl, fp, ip
 800cfe6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfea:	b289      	uxth	r1, r1
 800cfec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cff0:	4577      	cmp	r7, lr
 800cff2:	f849 1b04 	str.w	r1, [r9], #4
 800cff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cffa:	d8e2      	bhi.n	800cfc2 <__multiply+0xb2>
 800cffc:	9a01      	ldr	r2, [sp, #4]
 800cffe:	f845 c002 	str.w	ip, [r5, r2]
 800d002:	9a03      	ldr	r2, [sp, #12]
 800d004:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d008:	3304      	adds	r3, #4
 800d00a:	f1b9 0f00 	cmp.w	r9, #0
 800d00e:	d020      	beq.n	800d052 <__multiply+0x142>
 800d010:	6829      	ldr	r1, [r5, #0]
 800d012:	f104 0c14 	add.w	ip, r4, #20
 800d016:	46ae      	mov	lr, r5
 800d018:	f04f 0a00 	mov.w	sl, #0
 800d01c:	f8bc b000 	ldrh.w	fp, [ip]
 800d020:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d024:	fb09 220b 	mla	r2, r9, fp, r2
 800d028:	4492      	add	sl, r2
 800d02a:	b289      	uxth	r1, r1
 800d02c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d030:	f84e 1b04 	str.w	r1, [lr], #4
 800d034:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d038:	f8be 1000 	ldrh.w	r1, [lr]
 800d03c:	0c12      	lsrs	r2, r2, #16
 800d03e:	fb09 1102 	mla	r1, r9, r2, r1
 800d042:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d046:	4567      	cmp	r7, ip
 800d048:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d04c:	d8e6      	bhi.n	800d01c <__multiply+0x10c>
 800d04e:	9a01      	ldr	r2, [sp, #4]
 800d050:	50a9      	str	r1, [r5, r2]
 800d052:	3504      	adds	r5, #4
 800d054:	e79a      	b.n	800cf8c <__multiply+0x7c>
 800d056:	3e01      	subs	r6, #1
 800d058:	e79c      	b.n	800cf94 <__multiply+0x84>
 800d05a:	bf00      	nop
 800d05c:	0800eca1 	.word	0x0800eca1
 800d060:	0800ed2c 	.word	0x0800ed2c

0800d064 <__pow5mult>:
 800d064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d068:	4615      	mov	r5, r2
 800d06a:	f012 0203 	ands.w	r2, r2, #3
 800d06e:	4606      	mov	r6, r0
 800d070:	460f      	mov	r7, r1
 800d072:	d007      	beq.n	800d084 <__pow5mult+0x20>
 800d074:	4c25      	ldr	r4, [pc, #148]	; (800d10c <__pow5mult+0xa8>)
 800d076:	3a01      	subs	r2, #1
 800d078:	2300      	movs	r3, #0
 800d07a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d07e:	f7ff fe51 	bl	800cd24 <__multadd>
 800d082:	4607      	mov	r7, r0
 800d084:	10ad      	asrs	r5, r5, #2
 800d086:	d03d      	beq.n	800d104 <__pow5mult+0xa0>
 800d088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d08a:	b97c      	cbnz	r4, 800d0ac <__pow5mult+0x48>
 800d08c:	2010      	movs	r0, #16
 800d08e:	f7ff fdbf 	bl	800cc10 <malloc>
 800d092:	4602      	mov	r2, r0
 800d094:	6270      	str	r0, [r6, #36]	; 0x24
 800d096:	b928      	cbnz	r0, 800d0a4 <__pow5mult+0x40>
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <__pow5mult+0xac>)
 800d09a:	481e      	ldr	r0, [pc, #120]	; (800d114 <__pow5mult+0xb0>)
 800d09c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0a0:	f7fe fb98 	bl	800b7d4 <__assert_func>
 800d0a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0a8:	6004      	str	r4, [r0, #0]
 800d0aa:	60c4      	str	r4, [r0, #12]
 800d0ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0b4:	b94c      	cbnz	r4, 800d0ca <__pow5mult+0x66>
 800d0b6:	f240 2171 	movw	r1, #625	; 0x271
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ff12 	bl	800cee4 <__i2b>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	6003      	str	r3, [r0, #0]
 800d0ca:	f04f 0900 	mov.w	r9, #0
 800d0ce:	07eb      	lsls	r3, r5, #31
 800d0d0:	d50a      	bpl.n	800d0e8 <__pow5mult+0x84>
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff ff1a 	bl	800cf10 <__multiply>
 800d0dc:	4639      	mov	r1, r7
 800d0de:	4680      	mov	r8, r0
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff fdfd 	bl	800cce0 <_Bfree>
 800d0e6:	4647      	mov	r7, r8
 800d0e8:	106d      	asrs	r5, r5, #1
 800d0ea:	d00b      	beq.n	800d104 <__pow5mult+0xa0>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	b938      	cbnz	r0, 800d100 <__pow5mult+0x9c>
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff ff0b 	bl	800cf10 <__multiply>
 800d0fa:	6020      	str	r0, [r4, #0]
 800d0fc:	f8c0 9000 	str.w	r9, [r0]
 800d100:	4604      	mov	r4, r0
 800d102:	e7e4      	b.n	800d0ce <__pow5mult+0x6a>
 800d104:	4638      	mov	r0, r7
 800d106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10a:	bf00      	nop
 800d10c:	0800ee78 	.word	0x0800ee78
 800d110:	0800ea88 	.word	0x0800ea88
 800d114:	0800ed2c 	.word	0x0800ed2c

0800d118 <__lshift>:
 800d118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d11c:	460c      	mov	r4, r1
 800d11e:	6849      	ldr	r1, [r1, #4]
 800d120:	6923      	ldr	r3, [r4, #16]
 800d122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d126:	68a3      	ldr	r3, [r4, #8]
 800d128:	4607      	mov	r7, r0
 800d12a:	4691      	mov	r9, r2
 800d12c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d130:	f108 0601 	add.w	r6, r8, #1
 800d134:	42b3      	cmp	r3, r6
 800d136:	db0b      	blt.n	800d150 <__lshift+0x38>
 800d138:	4638      	mov	r0, r7
 800d13a:	f7ff fd91 	bl	800cc60 <_Balloc>
 800d13e:	4605      	mov	r5, r0
 800d140:	b948      	cbnz	r0, 800d156 <__lshift+0x3e>
 800d142:	4602      	mov	r2, r0
 800d144:	4b2a      	ldr	r3, [pc, #168]	; (800d1f0 <__lshift+0xd8>)
 800d146:	482b      	ldr	r0, [pc, #172]	; (800d1f4 <__lshift+0xdc>)
 800d148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d14c:	f7fe fb42 	bl	800b7d4 <__assert_func>
 800d150:	3101      	adds	r1, #1
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	e7ee      	b.n	800d134 <__lshift+0x1c>
 800d156:	2300      	movs	r3, #0
 800d158:	f100 0114 	add.w	r1, r0, #20
 800d15c:	f100 0210 	add.w	r2, r0, #16
 800d160:	4618      	mov	r0, r3
 800d162:	4553      	cmp	r3, sl
 800d164:	db37      	blt.n	800d1d6 <__lshift+0xbe>
 800d166:	6920      	ldr	r0, [r4, #16]
 800d168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d16c:	f104 0314 	add.w	r3, r4, #20
 800d170:	f019 091f 	ands.w	r9, r9, #31
 800d174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d178:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d17c:	d02f      	beq.n	800d1de <__lshift+0xc6>
 800d17e:	f1c9 0e20 	rsb	lr, r9, #32
 800d182:	468a      	mov	sl, r1
 800d184:	f04f 0c00 	mov.w	ip, #0
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	fa02 f209 	lsl.w	r2, r2, r9
 800d18e:	ea42 020c 	orr.w	r2, r2, ip
 800d192:	f84a 2b04 	str.w	r2, [sl], #4
 800d196:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19a:	4298      	cmp	r0, r3
 800d19c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1a0:	d8f2      	bhi.n	800d188 <__lshift+0x70>
 800d1a2:	1b03      	subs	r3, r0, r4
 800d1a4:	3b15      	subs	r3, #21
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	f104 0215 	add.w	r2, r4, #21
 800d1b0:	4290      	cmp	r0, r2
 800d1b2:	bf38      	it	cc
 800d1b4:	2304      	movcc	r3, #4
 800d1b6:	f841 c003 	str.w	ip, [r1, r3]
 800d1ba:	f1bc 0f00 	cmp.w	ip, #0
 800d1be:	d001      	beq.n	800d1c4 <__lshift+0xac>
 800d1c0:	f108 0602 	add.w	r6, r8, #2
 800d1c4:	3e01      	subs	r6, #1
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	612e      	str	r6, [r5, #16]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7ff fd88 	bl	800cce0 <_Bfree>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1da:	3301      	adds	r3, #1
 800d1dc:	e7c1      	b.n	800d162 <__lshift+0x4a>
 800d1de:	3904      	subs	r1, #4
 800d1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1e8:	4298      	cmp	r0, r3
 800d1ea:	d8f9      	bhi.n	800d1e0 <__lshift+0xc8>
 800d1ec:	e7ea      	b.n	800d1c4 <__lshift+0xac>
 800d1ee:	bf00      	nop
 800d1f0:	0800eca1 	.word	0x0800eca1
 800d1f4:	0800ed2c 	.word	0x0800ed2c

0800d1f8 <__mcmp>:
 800d1f8:	b530      	push	{r4, r5, lr}
 800d1fa:	6902      	ldr	r2, [r0, #16]
 800d1fc:	690c      	ldr	r4, [r1, #16]
 800d1fe:	1b12      	subs	r2, r2, r4
 800d200:	d10e      	bne.n	800d220 <__mcmp+0x28>
 800d202:	f100 0314 	add.w	r3, r0, #20
 800d206:	3114      	adds	r1, #20
 800d208:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d20c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d210:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d214:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d218:	42a5      	cmp	r5, r4
 800d21a:	d003      	beq.n	800d224 <__mcmp+0x2c>
 800d21c:	d305      	bcc.n	800d22a <__mcmp+0x32>
 800d21e:	2201      	movs	r2, #1
 800d220:	4610      	mov	r0, r2
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	4283      	cmp	r3, r0
 800d226:	d3f3      	bcc.n	800d210 <__mcmp+0x18>
 800d228:	e7fa      	b.n	800d220 <__mcmp+0x28>
 800d22a:	f04f 32ff 	mov.w	r2, #4294967295
 800d22e:	e7f7      	b.n	800d220 <__mcmp+0x28>

0800d230 <__mdiff>:
 800d230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	460c      	mov	r4, r1
 800d236:	4606      	mov	r6, r0
 800d238:	4611      	mov	r1, r2
 800d23a:	4620      	mov	r0, r4
 800d23c:	4690      	mov	r8, r2
 800d23e:	f7ff ffdb 	bl	800d1f8 <__mcmp>
 800d242:	1e05      	subs	r5, r0, #0
 800d244:	d110      	bne.n	800d268 <__mdiff+0x38>
 800d246:	4629      	mov	r1, r5
 800d248:	4630      	mov	r0, r6
 800d24a:	f7ff fd09 	bl	800cc60 <_Balloc>
 800d24e:	b930      	cbnz	r0, 800d25e <__mdiff+0x2e>
 800d250:	4b3a      	ldr	r3, [pc, #232]	; (800d33c <__mdiff+0x10c>)
 800d252:	4602      	mov	r2, r0
 800d254:	f240 2132 	movw	r1, #562	; 0x232
 800d258:	4839      	ldr	r0, [pc, #228]	; (800d340 <__mdiff+0x110>)
 800d25a:	f7fe fabb 	bl	800b7d4 <__assert_func>
 800d25e:	2301      	movs	r3, #1
 800d260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	bfa4      	itt	ge
 800d26a:	4643      	movge	r3, r8
 800d26c:	46a0      	movge	r8, r4
 800d26e:	4630      	mov	r0, r6
 800d270:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d274:	bfa6      	itte	ge
 800d276:	461c      	movge	r4, r3
 800d278:	2500      	movge	r5, #0
 800d27a:	2501      	movlt	r5, #1
 800d27c:	f7ff fcf0 	bl	800cc60 <_Balloc>
 800d280:	b920      	cbnz	r0, 800d28c <__mdiff+0x5c>
 800d282:	4b2e      	ldr	r3, [pc, #184]	; (800d33c <__mdiff+0x10c>)
 800d284:	4602      	mov	r2, r0
 800d286:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d28a:	e7e5      	b.n	800d258 <__mdiff+0x28>
 800d28c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d290:	6926      	ldr	r6, [r4, #16]
 800d292:	60c5      	str	r5, [r0, #12]
 800d294:	f104 0914 	add.w	r9, r4, #20
 800d298:	f108 0514 	add.w	r5, r8, #20
 800d29c:	f100 0e14 	add.w	lr, r0, #20
 800d2a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2a8:	f108 0210 	add.w	r2, r8, #16
 800d2ac:	46f2      	mov	sl, lr
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2b8:	fa1f f883 	uxth.w	r8, r3
 800d2bc:	fa11 f18b 	uxtah	r1, r1, fp
 800d2c0:	0c1b      	lsrs	r3, r3, #16
 800d2c2:	eba1 0808 	sub.w	r8, r1, r8
 800d2c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2ce:	fa1f f888 	uxth.w	r8, r8
 800d2d2:	1419      	asrs	r1, r3, #16
 800d2d4:	454e      	cmp	r6, r9
 800d2d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2da:	f84a 3b04 	str.w	r3, [sl], #4
 800d2de:	d8e7      	bhi.n	800d2b0 <__mdiff+0x80>
 800d2e0:	1b33      	subs	r3, r6, r4
 800d2e2:	3b15      	subs	r3, #21
 800d2e4:	f023 0303 	bic.w	r3, r3, #3
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	3415      	adds	r4, #21
 800d2ec:	42a6      	cmp	r6, r4
 800d2ee:	bf38      	it	cc
 800d2f0:	2304      	movcc	r3, #4
 800d2f2:	441d      	add	r5, r3
 800d2f4:	4473      	add	r3, lr
 800d2f6:	469e      	mov	lr, r3
 800d2f8:	462e      	mov	r6, r5
 800d2fa:	4566      	cmp	r6, ip
 800d2fc:	d30e      	bcc.n	800d31c <__mdiff+0xec>
 800d2fe:	f10c 0203 	add.w	r2, ip, #3
 800d302:	1b52      	subs	r2, r2, r5
 800d304:	f022 0203 	bic.w	r2, r2, #3
 800d308:	3d03      	subs	r5, #3
 800d30a:	45ac      	cmp	ip, r5
 800d30c:	bf38      	it	cc
 800d30e:	2200      	movcc	r2, #0
 800d310:	441a      	add	r2, r3
 800d312:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d316:	b17b      	cbz	r3, 800d338 <__mdiff+0x108>
 800d318:	6107      	str	r7, [r0, #16]
 800d31a:	e7a3      	b.n	800d264 <__mdiff+0x34>
 800d31c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d320:	fa11 f288 	uxtah	r2, r1, r8
 800d324:	1414      	asrs	r4, r2, #16
 800d326:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d32a:	b292      	uxth	r2, r2
 800d32c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d330:	f84e 2b04 	str.w	r2, [lr], #4
 800d334:	1421      	asrs	r1, r4, #16
 800d336:	e7e0      	b.n	800d2fa <__mdiff+0xca>
 800d338:	3f01      	subs	r7, #1
 800d33a:	e7ea      	b.n	800d312 <__mdiff+0xe2>
 800d33c:	0800eca1 	.word	0x0800eca1
 800d340:	0800ed2c 	.word	0x0800ed2c

0800d344 <__ulp>:
 800d344:	b082      	sub	sp, #8
 800d346:	ed8d 0b00 	vstr	d0, [sp]
 800d34a:	9b01      	ldr	r3, [sp, #4]
 800d34c:	4912      	ldr	r1, [pc, #72]	; (800d398 <__ulp+0x54>)
 800d34e:	4019      	ands	r1, r3
 800d350:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d354:	2900      	cmp	r1, #0
 800d356:	dd05      	ble.n	800d364 <__ulp+0x20>
 800d358:	2200      	movs	r2, #0
 800d35a:	460b      	mov	r3, r1
 800d35c:	ec43 2b10 	vmov	d0, r2, r3
 800d360:	b002      	add	sp, #8
 800d362:	4770      	bx	lr
 800d364:	4249      	negs	r1, r1
 800d366:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d36a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	da04      	bge.n	800d382 <__ulp+0x3e>
 800d378:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d37c:	fa41 f300 	asr.w	r3, r1, r0
 800d380:	e7ec      	b.n	800d35c <__ulp+0x18>
 800d382:	f1a0 0114 	sub.w	r1, r0, #20
 800d386:	291e      	cmp	r1, #30
 800d388:	bfda      	itte	le
 800d38a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d38e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d392:	2101      	movgt	r1, #1
 800d394:	460a      	mov	r2, r1
 800d396:	e7e1      	b.n	800d35c <__ulp+0x18>
 800d398:	7ff00000 	.word	0x7ff00000

0800d39c <__b2d>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	6905      	ldr	r5, [r0, #16]
 800d3a0:	f100 0714 	add.w	r7, r0, #20
 800d3a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3a8:	1f2e      	subs	r6, r5, #4
 800d3aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7ff fd48 	bl	800ce44 <__hi0bits>
 800d3b4:	f1c0 0320 	rsb	r3, r0, #32
 800d3b8:	280a      	cmp	r0, #10
 800d3ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d438 <__b2d+0x9c>
 800d3be:	600b      	str	r3, [r1, #0]
 800d3c0:	dc14      	bgt.n	800d3ec <__b2d+0x50>
 800d3c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d3c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d3ca:	42b7      	cmp	r7, r6
 800d3cc:	ea41 030c 	orr.w	r3, r1, ip
 800d3d0:	bf34      	ite	cc
 800d3d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3d6:	2100      	movcs	r1, #0
 800d3d8:	3015      	adds	r0, #21
 800d3da:	fa04 f000 	lsl.w	r0, r4, r0
 800d3de:	fa21 f10e 	lsr.w	r1, r1, lr
 800d3e2:	ea40 0201 	orr.w	r2, r0, r1
 800d3e6:	ec43 2b10 	vmov	d0, r2, r3
 800d3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ec:	42b7      	cmp	r7, r6
 800d3ee:	bf3a      	itte	cc
 800d3f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d3f8:	2100      	movcs	r1, #0
 800d3fa:	380b      	subs	r0, #11
 800d3fc:	d017      	beq.n	800d42e <__b2d+0x92>
 800d3fe:	f1c0 0c20 	rsb	ip, r0, #32
 800d402:	fa04 f500 	lsl.w	r5, r4, r0
 800d406:	42be      	cmp	r6, r7
 800d408:	fa21 f40c 	lsr.w	r4, r1, ip
 800d40c:	ea45 0504 	orr.w	r5, r5, r4
 800d410:	bf8c      	ite	hi
 800d412:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d416:	2400      	movls	r4, #0
 800d418:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d41c:	fa01 f000 	lsl.w	r0, r1, r0
 800d420:	fa24 f40c 	lsr.w	r4, r4, ip
 800d424:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d428:	ea40 0204 	orr.w	r2, r0, r4
 800d42c:	e7db      	b.n	800d3e6 <__b2d+0x4a>
 800d42e:	ea44 030c 	orr.w	r3, r4, ip
 800d432:	460a      	mov	r2, r1
 800d434:	e7d7      	b.n	800d3e6 <__b2d+0x4a>
 800d436:	bf00      	nop
 800d438:	3ff00000 	.word	0x3ff00000

0800d43c <__d2b>:
 800d43c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d440:	4689      	mov	r9, r1
 800d442:	2101      	movs	r1, #1
 800d444:	ec57 6b10 	vmov	r6, r7, d0
 800d448:	4690      	mov	r8, r2
 800d44a:	f7ff fc09 	bl	800cc60 <_Balloc>
 800d44e:	4604      	mov	r4, r0
 800d450:	b930      	cbnz	r0, 800d460 <__d2b+0x24>
 800d452:	4602      	mov	r2, r0
 800d454:	4b25      	ldr	r3, [pc, #148]	; (800d4ec <__d2b+0xb0>)
 800d456:	4826      	ldr	r0, [pc, #152]	; (800d4f0 <__d2b+0xb4>)
 800d458:	f240 310a 	movw	r1, #778	; 0x30a
 800d45c:	f7fe f9ba 	bl	800b7d4 <__assert_func>
 800d460:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d464:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d468:	bb35      	cbnz	r5, 800d4b8 <__d2b+0x7c>
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	d028      	beq.n	800d4c2 <__d2b+0x86>
 800d470:	4668      	mov	r0, sp
 800d472:	9600      	str	r6, [sp, #0]
 800d474:	f7ff fd06 	bl	800ce84 <__lo0bits>
 800d478:	9900      	ldr	r1, [sp, #0]
 800d47a:	b300      	cbz	r0, 800d4be <__d2b+0x82>
 800d47c:	9a01      	ldr	r2, [sp, #4]
 800d47e:	f1c0 0320 	rsb	r3, r0, #32
 800d482:	fa02 f303 	lsl.w	r3, r2, r3
 800d486:	430b      	orrs	r3, r1
 800d488:	40c2      	lsrs	r2, r0
 800d48a:	6163      	str	r3, [r4, #20]
 800d48c:	9201      	str	r2, [sp, #4]
 800d48e:	9b01      	ldr	r3, [sp, #4]
 800d490:	61a3      	str	r3, [r4, #24]
 800d492:	2b00      	cmp	r3, #0
 800d494:	bf14      	ite	ne
 800d496:	2202      	movne	r2, #2
 800d498:	2201      	moveq	r2, #1
 800d49a:	6122      	str	r2, [r4, #16]
 800d49c:	b1d5      	cbz	r5, 800d4d4 <__d2b+0x98>
 800d49e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4a2:	4405      	add	r5, r0
 800d4a4:	f8c9 5000 	str.w	r5, [r9]
 800d4a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4ac:	f8c8 0000 	str.w	r0, [r8]
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	b003      	add	sp, #12
 800d4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4bc:	e7d5      	b.n	800d46a <__d2b+0x2e>
 800d4be:	6161      	str	r1, [r4, #20]
 800d4c0:	e7e5      	b.n	800d48e <__d2b+0x52>
 800d4c2:	a801      	add	r0, sp, #4
 800d4c4:	f7ff fcde 	bl	800ce84 <__lo0bits>
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	6163      	str	r3, [r4, #20]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	6122      	str	r2, [r4, #16]
 800d4d0:	3020      	adds	r0, #32
 800d4d2:	e7e3      	b.n	800d49c <__d2b+0x60>
 800d4d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4dc:	f8c9 0000 	str.w	r0, [r9]
 800d4e0:	6918      	ldr	r0, [r3, #16]
 800d4e2:	f7ff fcaf 	bl	800ce44 <__hi0bits>
 800d4e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ea:	e7df      	b.n	800d4ac <__d2b+0x70>
 800d4ec:	0800eca1 	.word	0x0800eca1
 800d4f0:	0800ed2c 	.word	0x0800ed2c

0800d4f4 <__ratio>:
 800d4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	4688      	mov	r8, r1
 800d4fa:	4669      	mov	r1, sp
 800d4fc:	4681      	mov	r9, r0
 800d4fe:	f7ff ff4d 	bl	800d39c <__b2d>
 800d502:	a901      	add	r1, sp, #4
 800d504:	4640      	mov	r0, r8
 800d506:	ec55 4b10 	vmov	r4, r5, d0
 800d50a:	f7ff ff47 	bl	800d39c <__b2d>
 800d50e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d512:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d516:	eba3 0c02 	sub.w	ip, r3, r2
 800d51a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d524:	ec51 0b10 	vmov	r0, r1, d0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bfd6      	itet	le
 800d52c:	460a      	movle	r2, r1
 800d52e:	462a      	movgt	r2, r5
 800d530:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d534:	468b      	mov	fp, r1
 800d536:	462f      	mov	r7, r5
 800d538:	bfd4      	ite	le
 800d53a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d53e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d542:	4620      	mov	r0, r4
 800d544:	ee10 2a10 	vmov	r2, s0
 800d548:	465b      	mov	r3, fp
 800d54a:	4639      	mov	r1, r7
 800d54c:	f7f3 f9b6 	bl	80008bc <__aeabi_ddiv>
 800d550:	ec41 0b10 	vmov	d0, r0, r1
 800d554:	b003      	add	sp, #12
 800d556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d55a <__copybits>:
 800d55a:	3901      	subs	r1, #1
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	1149      	asrs	r1, r1, #5
 800d560:	6914      	ldr	r4, [r2, #16]
 800d562:	3101      	adds	r1, #1
 800d564:	f102 0314 	add.w	r3, r2, #20
 800d568:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d56c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d570:	1f05      	subs	r5, r0, #4
 800d572:	42a3      	cmp	r3, r4
 800d574:	d30c      	bcc.n	800d590 <__copybits+0x36>
 800d576:	1aa3      	subs	r3, r4, r2
 800d578:	3b11      	subs	r3, #17
 800d57a:	f023 0303 	bic.w	r3, r3, #3
 800d57e:	3211      	adds	r2, #17
 800d580:	42a2      	cmp	r2, r4
 800d582:	bf88      	it	hi
 800d584:	2300      	movhi	r3, #0
 800d586:	4418      	add	r0, r3
 800d588:	2300      	movs	r3, #0
 800d58a:	4288      	cmp	r0, r1
 800d58c:	d305      	bcc.n	800d59a <__copybits+0x40>
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	f853 6b04 	ldr.w	r6, [r3], #4
 800d594:	f845 6f04 	str.w	r6, [r5, #4]!
 800d598:	e7eb      	b.n	800d572 <__copybits+0x18>
 800d59a:	f840 3b04 	str.w	r3, [r0], #4
 800d59e:	e7f4      	b.n	800d58a <__copybits+0x30>

0800d5a0 <__any_on>:
 800d5a0:	f100 0214 	add.w	r2, r0, #20
 800d5a4:	6900      	ldr	r0, [r0, #16]
 800d5a6:	114b      	asrs	r3, r1, #5
 800d5a8:	4298      	cmp	r0, r3
 800d5aa:	b510      	push	{r4, lr}
 800d5ac:	db11      	blt.n	800d5d2 <__any_on+0x32>
 800d5ae:	dd0a      	ble.n	800d5c6 <__any_on+0x26>
 800d5b0:	f011 011f 	ands.w	r1, r1, #31
 800d5b4:	d007      	beq.n	800d5c6 <__any_on+0x26>
 800d5b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5ba:	fa24 f001 	lsr.w	r0, r4, r1
 800d5be:	fa00 f101 	lsl.w	r1, r0, r1
 800d5c2:	428c      	cmp	r4, r1
 800d5c4:	d10b      	bne.n	800d5de <__any_on+0x3e>
 800d5c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d803      	bhi.n	800d5d6 <__any_on+0x36>
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	e7f7      	b.n	800d5c6 <__any_on+0x26>
 800d5d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5da:	2900      	cmp	r1, #0
 800d5dc:	d0f5      	beq.n	800d5ca <__any_on+0x2a>
 800d5de:	2001      	movs	r0, #1
 800d5e0:	e7f6      	b.n	800d5d0 <__any_on+0x30>

0800d5e2 <_calloc_r>:
 800d5e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5e4:	fba1 2402 	umull	r2, r4, r1, r2
 800d5e8:	b94c      	cbnz	r4, 800d5fe <_calloc_r+0x1c>
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	9201      	str	r2, [sp, #4]
 800d5ee:	f000 f87b 	bl	800d6e8 <_malloc_r>
 800d5f2:	9a01      	ldr	r2, [sp, #4]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	b930      	cbnz	r0, 800d606 <_calloc_r+0x24>
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	b003      	add	sp, #12
 800d5fc:	bd30      	pop	{r4, r5, pc}
 800d5fe:	220c      	movs	r2, #12
 800d600:	6002      	str	r2, [r0, #0]
 800d602:	2500      	movs	r5, #0
 800d604:	e7f8      	b.n	800d5f8 <_calloc_r+0x16>
 800d606:	4621      	mov	r1, r4
 800d608:	f7fc fd06 	bl	800a018 <memset>
 800d60c:	e7f4      	b.n	800d5f8 <_calloc_r+0x16>
	...

0800d610 <_free_r>:
 800d610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d612:	2900      	cmp	r1, #0
 800d614:	d044      	beq.n	800d6a0 <_free_r+0x90>
 800d616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d61a:	9001      	str	r0, [sp, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f1a1 0404 	sub.w	r4, r1, #4
 800d622:	bfb8      	it	lt
 800d624:	18e4      	addlt	r4, r4, r3
 800d626:	f000 fec7 	bl	800e3b8 <__malloc_lock>
 800d62a:	4a1e      	ldr	r2, [pc, #120]	; (800d6a4 <_free_r+0x94>)
 800d62c:	9801      	ldr	r0, [sp, #4]
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	b933      	cbnz	r3, 800d640 <_free_r+0x30>
 800d632:	6063      	str	r3, [r4, #4]
 800d634:	6014      	str	r4, [r2, #0]
 800d636:	b003      	add	sp, #12
 800d638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d63c:	f000 bec2 	b.w	800e3c4 <__malloc_unlock>
 800d640:	42a3      	cmp	r3, r4
 800d642:	d908      	bls.n	800d656 <_free_r+0x46>
 800d644:	6825      	ldr	r5, [r4, #0]
 800d646:	1961      	adds	r1, r4, r5
 800d648:	428b      	cmp	r3, r1
 800d64a:	bf01      	itttt	eq
 800d64c:	6819      	ldreq	r1, [r3, #0]
 800d64e:	685b      	ldreq	r3, [r3, #4]
 800d650:	1949      	addeq	r1, r1, r5
 800d652:	6021      	streq	r1, [r4, #0]
 800d654:	e7ed      	b.n	800d632 <_free_r+0x22>
 800d656:	461a      	mov	r2, r3
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	b10b      	cbz	r3, 800d660 <_free_r+0x50>
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	d9fa      	bls.n	800d656 <_free_r+0x46>
 800d660:	6811      	ldr	r1, [r2, #0]
 800d662:	1855      	adds	r5, r2, r1
 800d664:	42a5      	cmp	r5, r4
 800d666:	d10b      	bne.n	800d680 <_free_r+0x70>
 800d668:	6824      	ldr	r4, [r4, #0]
 800d66a:	4421      	add	r1, r4
 800d66c:	1854      	adds	r4, r2, r1
 800d66e:	42a3      	cmp	r3, r4
 800d670:	6011      	str	r1, [r2, #0]
 800d672:	d1e0      	bne.n	800d636 <_free_r+0x26>
 800d674:	681c      	ldr	r4, [r3, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	6053      	str	r3, [r2, #4]
 800d67a:	4421      	add	r1, r4
 800d67c:	6011      	str	r1, [r2, #0]
 800d67e:	e7da      	b.n	800d636 <_free_r+0x26>
 800d680:	d902      	bls.n	800d688 <_free_r+0x78>
 800d682:	230c      	movs	r3, #12
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	e7d6      	b.n	800d636 <_free_r+0x26>
 800d688:	6825      	ldr	r5, [r4, #0]
 800d68a:	1961      	adds	r1, r4, r5
 800d68c:	428b      	cmp	r3, r1
 800d68e:	bf04      	itt	eq
 800d690:	6819      	ldreq	r1, [r3, #0]
 800d692:	685b      	ldreq	r3, [r3, #4]
 800d694:	6063      	str	r3, [r4, #4]
 800d696:	bf04      	itt	eq
 800d698:	1949      	addeq	r1, r1, r5
 800d69a:	6021      	streq	r1, [r4, #0]
 800d69c:	6054      	str	r4, [r2, #4]
 800d69e:	e7ca      	b.n	800d636 <_free_r+0x26>
 800d6a0:	b003      	add	sp, #12
 800d6a2:	bd30      	pop	{r4, r5, pc}
 800d6a4:	20000608 	.word	0x20000608

0800d6a8 <sbrk_aligned>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	4e0e      	ldr	r6, [pc, #56]	; (800d6e4 <sbrk_aligned+0x3c>)
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	6831      	ldr	r1, [r6, #0]
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	b911      	cbnz	r1, 800d6ba <sbrk_aligned+0x12>
 800d6b4:	f000 fb4c 	bl	800dd50 <_sbrk_r>
 800d6b8:	6030      	str	r0, [r6, #0]
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f000 fb47 	bl	800dd50 <_sbrk_r>
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d00a      	beq.n	800d6dc <sbrk_aligned+0x34>
 800d6c6:	1cc4      	adds	r4, r0, #3
 800d6c8:	f024 0403 	bic.w	r4, r4, #3
 800d6cc:	42a0      	cmp	r0, r4
 800d6ce:	d007      	beq.n	800d6e0 <sbrk_aligned+0x38>
 800d6d0:	1a21      	subs	r1, r4, r0
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 fb3c 	bl	800dd50 <_sbrk_r>
 800d6d8:	3001      	adds	r0, #1
 800d6da:	d101      	bne.n	800d6e0 <sbrk_aligned+0x38>
 800d6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	bd70      	pop	{r4, r5, r6, pc}
 800d6e4:	2000060c 	.word	0x2000060c

0800d6e8 <_malloc_r>:
 800d6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ec:	1ccd      	adds	r5, r1, #3
 800d6ee:	f025 0503 	bic.w	r5, r5, #3
 800d6f2:	3508      	adds	r5, #8
 800d6f4:	2d0c      	cmp	r5, #12
 800d6f6:	bf38      	it	cc
 800d6f8:	250c      	movcc	r5, #12
 800d6fa:	2d00      	cmp	r5, #0
 800d6fc:	4607      	mov	r7, r0
 800d6fe:	db01      	blt.n	800d704 <_malloc_r+0x1c>
 800d700:	42a9      	cmp	r1, r5
 800d702:	d905      	bls.n	800d710 <_malloc_r+0x28>
 800d704:	230c      	movs	r3, #12
 800d706:	603b      	str	r3, [r7, #0]
 800d708:	2600      	movs	r6, #0
 800d70a:	4630      	mov	r0, r6
 800d70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d710:	4e2e      	ldr	r6, [pc, #184]	; (800d7cc <_malloc_r+0xe4>)
 800d712:	f000 fe51 	bl	800e3b8 <__malloc_lock>
 800d716:	6833      	ldr	r3, [r6, #0]
 800d718:	461c      	mov	r4, r3
 800d71a:	bb34      	cbnz	r4, 800d76a <_malloc_r+0x82>
 800d71c:	4629      	mov	r1, r5
 800d71e:	4638      	mov	r0, r7
 800d720:	f7ff ffc2 	bl	800d6a8 <sbrk_aligned>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	4604      	mov	r4, r0
 800d728:	d14d      	bne.n	800d7c6 <_malloc_r+0xde>
 800d72a:	6834      	ldr	r4, [r6, #0]
 800d72c:	4626      	mov	r6, r4
 800d72e:	2e00      	cmp	r6, #0
 800d730:	d140      	bne.n	800d7b4 <_malloc_r+0xcc>
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	4631      	mov	r1, r6
 800d736:	4638      	mov	r0, r7
 800d738:	eb04 0803 	add.w	r8, r4, r3
 800d73c:	f000 fb08 	bl	800dd50 <_sbrk_r>
 800d740:	4580      	cmp	r8, r0
 800d742:	d13a      	bne.n	800d7ba <_malloc_r+0xd2>
 800d744:	6821      	ldr	r1, [r4, #0]
 800d746:	3503      	adds	r5, #3
 800d748:	1a6d      	subs	r5, r5, r1
 800d74a:	f025 0503 	bic.w	r5, r5, #3
 800d74e:	3508      	adds	r5, #8
 800d750:	2d0c      	cmp	r5, #12
 800d752:	bf38      	it	cc
 800d754:	250c      	movcc	r5, #12
 800d756:	4629      	mov	r1, r5
 800d758:	4638      	mov	r0, r7
 800d75a:	f7ff ffa5 	bl	800d6a8 <sbrk_aligned>
 800d75e:	3001      	adds	r0, #1
 800d760:	d02b      	beq.n	800d7ba <_malloc_r+0xd2>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	442b      	add	r3, r5
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	e00e      	b.n	800d788 <_malloc_r+0xa0>
 800d76a:	6822      	ldr	r2, [r4, #0]
 800d76c:	1b52      	subs	r2, r2, r5
 800d76e:	d41e      	bmi.n	800d7ae <_malloc_r+0xc6>
 800d770:	2a0b      	cmp	r2, #11
 800d772:	d916      	bls.n	800d7a2 <_malloc_r+0xba>
 800d774:	1961      	adds	r1, r4, r5
 800d776:	42a3      	cmp	r3, r4
 800d778:	6025      	str	r5, [r4, #0]
 800d77a:	bf18      	it	ne
 800d77c:	6059      	strne	r1, [r3, #4]
 800d77e:	6863      	ldr	r3, [r4, #4]
 800d780:	bf08      	it	eq
 800d782:	6031      	streq	r1, [r6, #0]
 800d784:	5162      	str	r2, [r4, r5]
 800d786:	604b      	str	r3, [r1, #4]
 800d788:	4638      	mov	r0, r7
 800d78a:	f104 060b 	add.w	r6, r4, #11
 800d78e:	f000 fe19 	bl	800e3c4 <__malloc_unlock>
 800d792:	f026 0607 	bic.w	r6, r6, #7
 800d796:	1d23      	adds	r3, r4, #4
 800d798:	1af2      	subs	r2, r6, r3
 800d79a:	d0b6      	beq.n	800d70a <_malloc_r+0x22>
 800d79c:	1b9b      	subs	r3, r3, r6
 800d79e:	50a3      	str	r3, [r4, r2]
 800d7a0:	e7b3      	b.n	800d70a <_malloc_r+0x22>
 800d7a2:	6862      	ldr	r2, [r4, #4]
 800d7a4:	42a3      	cmp	r3, r4
 800d7a6:	bf0c      	ite	eq
 800d7a8:	6032      	streq	r2, [r6, #0]
 800d7aa:	605a      	strne	r2, [r3, #4]
 800d7ac:	e7ec      	b.n	800d788 <_malloc_r+0xa0>
 800d7ae:	4623      	mov	r3, r4
 800d7b0:	6864      	ldr	r4, [r4, #4]
 800d7b2:	e7b2      	b.n	800d71a <_malloc_r+0x32>
 800d7b4:	4634      	mov	r4, r6
 800d7b6:	6876      	ldr	r6, [r6, #4]
 800d7b8:	e7b9      	b.n	800d72e <_malloc_r+0x46>
 800d7ba:	230c      	movs	r3, #12
 800d7bc:	603b      	str	r3, [r7, #0]
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f000 fe00 	bl	800e3c4 <__malloc_unlock>
 800d7c4:	e7a1      	b.n	800d70a <_malloc_r+0x22>
 800d7c6:	6025      	str	r5, [r4, #0]
 800d7c8:	e7de      	b.n	800d788 <_malloc_r+0xa0>
 800d7ca:	bf00      	nop
 800d7cc:	20000608 	.word	0x20000608

0800d7d0 <__ssputs_r>:
 800d7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d4:	688e      	ldr	r6, [r1, #8]
 800d7d6:	429e      	cmp	r6, r3
 800d7d8:	4682      	mov	sl, r0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	4690      	mov	r8, r2
 800d7de:	461f      	mov	r7, r3
 800d7e0:	d838      	bhi.n	800d854 <__ssputs_r+0x84>
 800d7e2:	898a      	ldrh	r2, [r1, #12]
 800d7e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7e8:	d032      	beq.n	800d850 <__ssputs_r+0x80>
 800d7ea:	6825      	ldr	r5, [r4, #0]
 800d7ec:	6909      	ldr	r1, [r1, #16]
 800d7ee:	eba5 0901 	sub.w	r9, r5, r1
 800d7f2:	6965      	ldr	r5, [r4, #20]
 800d7f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	444b      	add	r3, r9
 800d800:	106d      	asrs	r5, r5, #1
 800d802:	429d      	cmp	r5, r3
 800d804:	bf38      	it	cc
 800d806:	461d      	movcc	r5, r3
 800d808:	0553      	lsls	r3, r2, #21
 800d80a:	d531      	bpl.n	800d870 <__ssputs_r+0xa0>
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7ff ff6b 	bl	800d6e8 <_malloc_r>
 800d812:	4606      	mov	r6, r0
 800d814:	b950      	cbnz	r0, 800d82c <__ssputs_r+0x5c>
 800d816:	230c      	movs	r3, #12
 800d818:	f8ca 3000 	str.w	r3, [sl]
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82c:	6921      	ldr	r1, [r4, #16]
 800d82e:	464a      	mov	r2, r9
 800d830:	f7ff fa08 	bl	800cc44 <memcpy>
 800d834:	89a3      	ldrh	r3, [r4, #12]
 800d836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d83e:	81a3      	strh	r3, [r4, #12]
 800d840:	6126      	str	r6, [r4, #16]
 800d842:	6165      	str	r5, [r4, #20]
 800d844:	444e      	add	r6, r9
 800d846:	eba5 0509 	sub.w	r5, r5, r9
 800d84a:	6026      	str	r6, [r4, #0]
 800d84c:	60a5      	str	r5, [r4, #8]
 800d84e:	463e      	mov	r6, r7
 800d850:	42be      	cmp	r6, r7
 800d852:	d900      	bls.n	800d856 <__ssputs_r+0x86>
 800d854:	463e      	mov	r6, r7
 800d856:	6820      	ldr	r0, [r4, #0]
 800d858:	4632      	mov	r2, r6
 800d85a:	4641      	mov	r1, r8
 800d85c:	f000 fd92 	bl	800e384 <memmove>
 800d860:	68a3      	ldr	r3, [r4, #8]
 800d862:	1b9b      	subs	r3, r3, r6
 800d864:	60a3      	str	r3, [r4, #8]
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	4433      	add	r3, r6
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	2000      	movs	r0, #0
 800d86e:	e7db      	b.n	800d828 <__ssputs_r+0x58>
 800d870:	462a      	mov	r2, r5
 800d872:	f000 fdad 	bl	800e3d0 <_realloc_r>
 800d876:	4606      	mov	r6, r0
 800d878:	2800      	cmp	r0, #0
 800d87a:	d1e1      	bne.n	800d840 <__ssputs_r+0x70>
 800d87c:	6921      	ldr	r1, [r4, #16]
 800d87e:	4650      	mov	r0, sl
 800d880:	f7ff fec6 	bl	800d610 <_free_r>
 800d884:	e7c7      	b.n	800d816 <__ssputs_r+0x46>
	...

0800d888 <_svfiprintf_r>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	4698      	mov	r8, r3
 800d88e:	898b      	ldrh	r3, [r1, #12]
 800d890:	061b      	lsls	r3, r3, #24
 800d892:	b09d      	sub	sp, #116	; 0x74
 800d894:	4607      	mov	r7, r0
 800d896:	460d      	mov	r5, r1
 800d898:	4614      	mov	r4, r2
 800d89a:	d50e      	bpl.n	800d8ba <_svfiprintf_r+0x32>
 800d89c:	690b      	ldr	r3, [r1, #16]
 800d89e:	b963      	cbnz	r3, 800d8ba <_svfiprintf_r+0x32>
 800d8a0:	2140      	movs	r1, #64	; 0x40
 800d8a2:	f7ff ff21 	bl	800d6e8 <_malloc_r>
 800d8a6:	6028      	str	r0, [r5, #0]
 800d8a8:	6128      	str	r0, [r5, #16]
 800d8aa:	b920      	cbnz	r0, 800d8b6 <_svfiprintf_r+0x2e>
 800d8ac:	230c      	movs	r3, #12
 800d8ae:	603b      	str	r3, [r7, #0]
 800d8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b4:	e0d1      	b.n	800da5a <_svfiprintf_r+0x1d2>
 800d8b6:	2340      	movs	r3, #64	; 0x40
 800d8b8:	616b      	str	r3, [r5, #20]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8be:	2320      	movs	r3, #32
 800d8c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c8:	2330      	movs	r3, #48	; 0x30
 800d8ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da74 <_svfiprintf_r+0x1ec>
 800d8ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8d2:	f04f 0901 	mov.w	r9, #1
 800d8d6:	4623      	mov	r3, r4
 800d8d8:	469a      	mov	sl, r3
 800d8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8de:	b10a      	cbz	r2, 800d8e4 <_svfiprintf_r+0x5c>
 800d8e0:	2a25      	cmp	r2, #37	; 0x25
 800d8e2:	d1f9      	bne.n	800d8d8 <_svfiprintf_r+0x50>
 800d8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8e8:	d00b      	beq.n	800d902 <_svfiprintf_r+0x7a>
 800d8ea:	465b      	mov	r3, fp
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	f7ff ff6d 	bl	800d7d0 <__ssputs_r>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	f000 80aa 	beq.w	800da50 <_svfiprintf_r+0x1c8>
 800d8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8fe:	445a      	add	r2, fp
 800d900:	9209      	str	r2, [sp, #36]	; 0x24
 800d902:	f89a 3000 	ldrb.w	r3, [sl]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 80a2 	beq.w	800da50 <_svfiprintf_r+0x1c8>
 800d90c:	2300      	movs	r3, #0
 800d90e:	f04f 32ff 	mov.w	r2, #4294967295
 800d912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d916:	f10a 0a01 	add.w	sl, sl, #1
 800d91a:	9304      	str	r3, [sp, #16]
 800d91c:	9307      	str	r3, [sp, #28]
 800d91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d922:	931a      	str	r3, [sp, #104]	; 0x68
 800d924:	4654      	mov	r4, sl
 800d926:	2205      	movs	r2, #5
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	4851      	ldr	r0, [pc, #324]	; (800da74 <_svfiprintf_r+0x1ec>)
 800d92e:	f7f2 fc8f 	bl	8000250 <memchr>
 800d932:	9a04      	ldr	r2, [sp, #16]
 800d934:	b9d8      	cbnz	r0, 800d96e <_svfiprintf_r+0xe6>
 800d936:	06d0      	lsls	r0, r2, #27
 800d938:	bf44      	itt	mi
 800d93a:	2320      	movmi	r3, #32
 800d93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d940:	0711      	lsls	r1, r2, #28
 800d942:	bf44      	itt	mi
 800d944:	232b      	movmi	r3, #43	; 0x2b
 800d946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d94a:	f89a 3000 	ldrb.w	r3, [sl]
 800d94e:	2b2a      	cmp	r3, #42	; 0x2a
 800d950:	d015      	beq.n	800d97e <_svfiprintf_r+0xf6>
 800d952:	9a07      	ldr	r2, [sp, #28]
 800d954:	4654      	mov	r4, sl
 800d956:	2000      	movs	r0, #0
 800d958:	f04f 0c0a 	mov.w	ip, #10
 800d95c:	4621      	mov	r1, r4
 800d95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d962:	3b30      	subs	r3, #48	; 0x30
 800d964:	2b09      	cmp	r3, #9
 800d966:	d94e      	bls.n	800da06 <_svfiprintf_r+0x17e>
 800d968:	b1b0      	cbz	r0, 800d998 <_svfiprintf_r+0x110>
 800d96a:	9207      	str	r2, [sp, #28]
 800d96c:	e014      	b.n	800d998 <_svfiprintf_r+0x110>
 800d96e:	eba0 0308 	sub.w	r3, r0, r8
 800d972:	fa09 f303 	lsl.w	r3, r9, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	46a2      	mov	sl, r4
 800d97c:	e7d2      	b.n	800d924 <_svfiprintf_r+0x9c>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	1d19      	adds	r1, r3, #4
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	9103      	str	r1, [sp, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	bfbb      	ittet	lt
 800d98a:	425b      	neglt	r3, r3
 800d98c:	f042 0202 	orrlt.w	r2, r2, #2
 800d990:	9307      	strge	r3, [sp, #28]
 800d992:	9307      	strlt	r3, [sp, #28]
 800d994:	bfb8      	it	lt
 800d996:	9204      	strlt	r2, [sp, #16]
 800d998:	7823      	ldrb	r3, [r4, #0]
 800d99a:	2b2e      	cmp	r3, #46	; 0x2e
 800d99c:	d10c      	bne.n	800d9b8 <_svfiprintf_r+0x130>
 800d99e:	7863      	ldrb	r3, [r4, #1]
 800d9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9a2:	d135      	bne.n	800da10 <_svfiprintf_r+0x188>
 800d9a4:	9b03      	ldr	r3, [sp, #12]
 800d9a6:	1d1a      	adds	r2, r3, #4
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	9203      	str	r2, [sp, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	bfb8      	it	lt
 800d9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9b4:	3402      	adds	r4, #2
 800d9b6:	9305      	str	r3, [sp, #20]
 800d9b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da84 <_svfiprintf_r+0x1fc>
 800d9bc:	7821      	ldrb	r1, [r4, #0]
 800d9be:	2203      	movs	r2, #3
 800d9c0:	4650      	mov	r0, sl
 800d9c2:	f7f2 fc45 	bl	8000250 <memchr>
 800d9c6:	b140      	cbz	r0, 800d9da <_svfiprintf_r+0x152>
 800d9c8:	2340      	movs	r3, #64	; 0x40
 800d9ca:	eba0 000a 	sub.w	r0, r0, sl
 800d9ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	4303      	orrs	r3, r0
 800d9d6:	3401      	adds	r4, #1
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9de:	4826      	ldr	r0, [pc, #152]	; (800da78 <_svfiprintf_r+0x1f0>)
 800d9e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9e4:	2206      	movs	r2, #6
 800d9e6:	f7f2 fc33 	bl	8000250 <memchr>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d038      	beq.n	800da60 <_svfiprintf_r+0x1d8>
 800d9ee:	4b23      	ldr	r3, [pc, #140]	; (800da7c <_svfiprintf_r+0x1f4>)
 800d9f0:	bb1b      	cbnz	r3, 800da3a <_svfiprintf_r+0x1b2>
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	3307      	adds	r3, #7
 800d9f6:	f023 0307 	bic.w	r3, r3, #7
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	9303      	str	r3, [sp, #12]
 800d9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da00:	4433      	add	r3, r6
 800da02:	9309      	str	r3, [sp, #36]	; 0x24
 800da04:	e767      	b.n	800d8d6 <_svfiprintf_r+0x4e>
 800da06:	fb0c 3202 	mla	r2, ip, r2, r3
 800da0a:	460c      	mov	r4, r1
 800da0c:	2001      	movs	r0, #1
 800da0e:	e7a5      	b.n	800d95c <_svfiprintf_r+0xd4>
 800da10:	2300      	movs	r3, #0
 800da12:	3401      	adds	r4, #1
 800da14:	9305      	str	r3, [sp, #20]
 800da16:	4619      	mov	r1, r3
 800da18:	f04f 0c0a 	mov.w	ip, #10
 800da1c:	4620      	mov	r0, r4
 800da1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da22:	3a30      	subs	r2, #48	; 0x30
 800da24:	2a09      	cmp	r2, #9
 800da26:	d903      	bls.n	800da30 <_svfiprintf_r+0x1a8>
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0c5      	beq.n	800d9b8 <_svfiprintf_r+0x130>
 800da2c:	9105      	str	r1, [sp, #20]
 800da2e:	e7c3      	b.n	800d9b8 <_svfiprintf_r+0x130>
 800da30:	fb0c 2101 	mla	r1, ip, r1, r2
 800da34:	4604      	mov	r4, r0
 800da36:	2301      	movs	r3, #1
 800da38:	e7f0      	b.n	800da1c <_svfiprintf_r+0x194>
 800da3a:	ab03      	add	r3, sp, #12
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	462a      	mov	r2, r5
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <_svfiprintf_r+0x1f8>)
 800da42:	a904      	add	r1, sp, #16
 800da44:	4638      	mov	r0, r7
 800da46:	f7fc fb8f 	bl	800a168 <_printf_float>
 800da4a:	1c42      	adds	r2, r0, #1
 800da4c:	4606      	mov	r6, r0
 800da4e:	d1d6      	bne.n	800d9fe <_svfiprintf_r+0x176>
 800da50:	89ab      	ldrh	r3, [r5, #12]
 800da52:	065b      	lsls	r3, r3, #25
 800da54:	f53f af2c 	bmi.w	800d8b0 <_svfiprintf_r+0x28>
 800da58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da5a:	b01d      	add	sp, #116	; 0x74
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da60:	ab03      	add	r3, sp, #12
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	462a      	mov	r2, r5
 800da66:	4b06      	ldr	r3, [pc, #24]	; (800da80 <_svfiprintf_r+0x1f8>)
 800da68:	a904      	add	r1, sp, #16
 800da6a:	4638      	mov	r0, r7
 800da6c:	f7fc fe20 	bl	800a6b0 <_printf_i>
 800da70:	e7eb      	b.n	800da4a <_svfiprintf_r+0x1c2>
 800da72:	bf00      	nop
 800da74:	0800ee84 	.word	0x0800ee84
 800da78:	0800ee8e 	.word	0x0800ee8e
 800da7c:	0800a169 	.word	0x0800a169
 800da80:	0800d7d1 	.word	0x0800d7d1
 800da84:	0800ee8a 	.word	0x0800ee8a

0800da88 <__sfputc_r>:
 800da88:	6893      	ldr	r3, [r2, #8]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	b410      	push	{r4}
 800da90:	6093      	str	r3, [r2, #8]
 800da92:	da08      	bge.n	800daa6 <__sfputc_r+0x1e>
 800da94:	6994      	ldr	r4, [r2, #24]
 800da96:	42a3      	cmp	r3, r4
 800da98:	db01      	blt.n	800da9e <__sfputc_r+0x16>
 800da9a:	290a      	cmp	r1, #10
 800da9c:	d103      	bne.n	800daa6 <__sfputc_r+0x1e>
 800da9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa2:	f000 b979 	b.w	800dd98 <__swbuf_r>
 800daa6:	6813      	ldr	r3, [r2, #0]
 800daa8:	1c58      	adds	r0, r3, #1
 800daaa:	6010      	str	r0, [r2, #0]
 800daac:	7019      	strb	r1, [r3, #0]
 800daae:	4608      	mov	r0, r1
 800dab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <__sfputs_r>:
 800dab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab8:	4606      	mov	r6, r0
 800daba:	460f      	mov	r7, r1
 800dabc:	4614      	mov	r4, r2
 800dabe:	18d5      	adds	r5, r2, r3
 800dac0:	42ac      	cmp	r4, r5
 800dac2:	d101      	bne.n	800dac8 <__sfputs_r+0x12>
 800dac4:	2000      	movs	r0, #0
 800dac6:	e007      	b.n	800dad8 <__sfputs_r+0x22>
 800dac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dacc:	463a      	mov	r2, r7
 800dace:	4630      	mov	r0, r6
 800dad0:	f7ff ffda 	bl	800da88 <__sfputc_r>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d1f3      	bne.n	800dac0 <__sfputs_r+0xa>
 800dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dadc <_vfiprintf_r>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460d      	mov	r5, r1
 800dae2:	b09d      	sub	sp, #116	; 0x74
 800dae4:	4614      	mov	r4, r2
 800dae6:	4698      	mov	r8, r3
 800dae8:	4606      	mov	r6, r0
 800daea:	b118      	cbz	r0, 800daf4 <_vfiprintf_r+0x18>
 800daec:	6983      	ldr	r3, [r0, #24]
 800daee:	b90b      	cbnz	r3, 800daf4 <_vfiprintf_r+0x18>
 800daf0:	f000 fb42 	bl	800e178 <__sinit>
 800daf4:	4b89      	ldr	r3, [pc, #548]	; (800dd1c <_vfiprintf_r+0x240>)
 800daf6:	429d      	cmp	r5, r3
 800daf8:	d11b      	bne.n	800db32 <_vfiprintf_r+0x56>
 800dafa:	6875      	ldr	r5, [r6, #4]
 800dafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dafe:	07d9      	lsls	r1, r3, #31
 800db00:	d405      	bmi.n	800db0e <_vfiprintf_r+0x32>
 800db02:	89ab      	ldrh	r3, [r5, #12]
 800db04:	059a      	lsls	r2, r3, #22
 800db06:	d402      	bmi.n	800db0e <_vfiprintf_r+0x32>
 800db08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db0a:	f000 fbd3 	bl	800e2b4 <__retarget_lock_acquire_recursive>
 800db0e:	89ab      	ldrh	r3, [r5, #12]
 800db10:	071b      	lsls	r3, r3, #28
 800db12:	d501      	bpl.n	800db18 <_vfiprintf_r+0x3c>
 800db14:	692b      	ldr	r3, [r5, #16]
 800db16:	b9eb      	cbnz	r3, 800db54 <_vfiprintf_r+0x78>
 800db18:	4629      	mov	r1, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	f000 f99c 	bl	800de58 <__swsetup_r>
 800db20:	b1c0      	cbz	r0, 800db54 <_vfiprintf_r+0x78>
 800db22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db24:	07dc      	lsls	r4, r3, #31
 800db26:	d50e      	bpl.n	800db46 <_vfiprintf_r+0x6a>
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	b01d      	add	sp, #116	; 0x74
 800db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db32:	4b7b      	ldr	r3, [pc, #492]	; (800dd20 <_vfiprintf_r+0x244>)
 800db34:	429d      	cmp	r5, r3
 800db36:	d101      	bne.n	800db3c <_vfiprintf_r+0x60>
 800db38:	68b5      	ldr	r5, [r6, #8]
 800db3a:	e7df      	b.n	800dafc <_vfiprintf_r+0x20>
 800db3c:	4b79      	ldr	r3, [pc, #484]	; (800dd24 <_vfiprintf_r+0x248>)
 800db3e:	429d      	cmp	r5, r3
 800db40:	bf08      	it	eq
 800db42:	68f5      	ldreq	r5, [r6, #12]
 800db44:	e7da      	b.n	800dafc <_vfiprintf_r+0x20>
 800db46:	89ab      	ldrh	r3, [r5, #12]
 800db48:	0598      	lsls	r0, r3, #22
 800db4a:	d4ed      	bmi.n	800db28 <_vfiprintf_r+0x4c>
 800db4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db4e:	f000 fbb2 	bl	800e2b6 <__retarget_lock_release_recursive>
 800db52:	e7e9      	b.n	800db28 <_vfiprintf_r+0x4c>
 800db54:	2300      	movs	r3, #0
 800db56:	9309      	str	r3, [sp, #36]	; 0x24
 800db58:	2320      	movs	r3, #32
 800db5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db62:	2330      	movs	r3, #48	; 0x30
 800db64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd28 <_vfiprintf_r+0x24c>
 800db68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db6c:	f04f 0901 	mov.w	r9, #1
 800db70:	4623      	mov	r3, r4
 800db72:	469a      	mov	sl, r3
 800db74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db78:	b10a      	cbz	r2, 800db7e <_vfiprintf_r+0xa2>
 800db7a:	2a25      	cmp	r2, #37	; 0x25
 800db7c:	d1f9      	bne.n	800db72 <_vfiprintf_r+0x96>
 800db7e:	ebba 0b04 	subs.w	fp, sl, r4
 800db82:	d00b      	beq.n	800db9c <_vfiprintf_r+0xc0>
 800db84:	465b      	mov	r3, fp
 800db86:	4622      	mov	r2, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	4630      	mov	r0, r6
 800db8c:	f7ff ff93 	bl	800dab6 <__sfputs_r>
 800db90:	3001      	adds	r0, #1
 800db92:	f000 80aa 	beq.w	800dcea <_vfiprintf_r+0x20e>
 800db96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db98:	445a      	add	r2, fp
 800db9a:	9209      	str	r2, [sp, #36]	; 0x24
 800db9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f000 80a2 	beq.w	800dcea <_vfiprintf_r+0x20e>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbb0:	f10a 0a01 	add.w	sl, sl, #1
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	9307      	str	r3, [sp, #28]
 800dbb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbbc:	931a      	str	r3, [sp, #104]	; 0x68
 800dbbe:	4654      	mov	r4, sl
 800dbc0:	2205      	movs	r2, #5
 800dbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc6:	4858      	ldr	r0, [pc, #352]	; (800dd28 <_vfiprintf_r+0x24c>)
 800dbc8:	f7f2 fb42 	bl	8000250 <memchr>
 800dbcc:	9a04      	ldr	r2, [sp, #16]
 800dbce:	b9d8      	cbnz	r0, 800dc08 <_vfiprintf_r+0x12c>
 800dbd0:	06d1      	lsls	r1, r2, #27
 800dbd2:	bf44      	itt	mi
 800dbd4:	2320      	movmi	r3, #32
 800dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbda:	0713      	lsls	r3, r2, #28
 800dbdc:	bf44      	itt	mi
 800dbde:	232b      	movmi	r3, #43	; 0x2b
 800dbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbea:	d015      	beq.n	800dc18 <_vfiprintf_r+0x13c>
 800dbec:	9a07      	ldr	r2, [sp, #28]
 800dbee:	4654      	mov	r4, sl
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	f04f 0c0a 	mov.w	ip, #10
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbfc:	3b30      	subs	r3, #48	; 0x30
 800dbfe:	2b09      	cmp	r3, #9
 800dc00:	d94e      	bls.n	800dca0 <_vfiprintf_r+0x1c4>
 800dc02:	b1b0      	cbz	r0, 800dc32 <_vfiprintf_r+0x156>
 800dc04:	9207      	str	r2, [sp, #28]
 800dc06:	e014      	b.n	800dc32 <_vfiprintf_r+0x156>
 800dc08:	eba0 0308 	sub.w	r3, r0, r8
 800dc0c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc10:	4313      	orrs	r3, r2
 800dc12:	9304      	str	r3, [sp, #16]
 800dc14:	46a2      	mov	sl, r4
 800dc16:	e7d2      	b.n	800dbbe <_vfiprintf_r+0xe2>
 800dc18:	9b03      	ldr	r3, [sp, #12]
 800dc1a:	1d19      	adds	r1, r3, #4
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	9103      	str	r1, [sp, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bfbb      	ittet	lt
 800dc24:	425b      	neglt	r3, r3
 800dc26:	f042 0202 	orrlt.w	r2, r2, #2
 800dc2a:	9307      	strge	r3, [sp, #28]
 800dc2c:	9307      	strlt	r3, [sp, #28]
 800dc2e:	bfb8      	it	lt
 800dc30:	9204      	strlt	r2, [sp, #16]
 800dc32:	7823      	ldrb	r3, [r4, #0]
 800dc34:	2b2e      	cmp	r3, #46	; 0x2e
 800dc36:	d10c      	bne.n	800dc52 <_vfiprintf_r+0x176>
 800dc38:	7863      	ldrb	r3, [r4, #1]
 800dc3a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc3c:	d135      	bne.n	800dcaa <_vfiprintf_r+0x1ce>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	1d1a      	adds	r2, r3, #4
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	9203      	str	r2, [sp, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	bfb8      	it	lt
 800dc4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc4e:	3402      	adds	r4, #2
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd38 <_vfiprintf_r+0x25c>
 800dc56:	7821      	ldrb	r1, [r4, #0]
 800dc58:	2203      	movs	r2, #3
 800dc5a:	4650      	mov	r0, sl
 800dc5c:	f7f2 faf8 	bl	8000250 <memchr>
 800dc60:	b140      	cbz	r0, 800dc74 <_vfiprintf_r+0x198>
 800dc62:	2340      	movs	r3, #64	; 0x40
 800dc64:	eba0 000a 	sub.w	r0, r0, sl
 800dc68:	fa03 f000 	lsl.w	r0, r3, r0
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	4303      	orrs	r3, r0
 800dc70:	3401      	adds	r4, #1
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc78:	482c      	ldr	r0, [pc, #176]	; (800dd2c <_vfiprintf_r+0x250>)
 800dc7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc7e:	2206      	movs	r2, #6
 800dc80:	f7f2 fae6 	bl	8000250 <memchr>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d03f      	beq.n	800dd08 <_vfiprintf_r+0x22c>
 800dc88:	4b29      	ldr	r3, [pc, #164]	; (800dd30 <_vfiprintf_r+0x254>)
 800dc8a:	bb1b      	cbnz	r3, 800dcd4 <_vfiprintf_r+0x1f8>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	3307      	adds	r3, #7
 800dc90:	f023 0307 	bic.w	r3, r3, #7
 800dc94:	3308      	adds	r3, #8
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9a:	443b      	add	r3, r7
 800dc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9e:	e767      	b.n	800db70 <_vfiprintf_r+0x94>
 800dca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dca4:	460c      	mov	r4, r1
 800dca6:	2001      	movs	r0, #1
 800dca8:	e7a5      	b.n	800dbf6 <_vfiprintf_r+0x11a>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	3401      	adds	r4, #1
 800dcae:	9305      	str	r3, [sp, #20]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	f04f 0c0a 	mov.w	ip, #10
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcbc:	3a30      	subs	r2, #48	; 0x30
 800dcbe:	2a09      	cmp	r2, #9
 800dcc0:	d903      	bls.n	800dcca <_vfiprintf_r+0x1ee>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0c5      	beq.n	800dc52 <_vfiprintf_r+0x176>
 800dcc6:	9105      	str	r1, [sp, #20]
 800dcc8:	e7c3      	b.n	800dc52 <_vfiprintf_r+0x176>
 800dcca:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcce:	4604      	mov	r4, r0
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e7f0      	b.n	800dcb6 <_vfiprintf_r+0x1da>
 800dcd4:	ab03      	add	r3, sp, #12
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	462a      	mov	r2, r5
 800dcda:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <_vfiprintf_r+0x258>)
 800dcdc:	a904      	add	r1, sp, #16
 800dcde:	4630      	mov	r0, r6
 800dce0:	f7fc fa42 	bl	800a168 <_printf_float>
 800dce4:	4607      	mov	r7, r0
 800dce6:	1c78      	adds	r0, r7, #1
 800dce8:	d1d6      	bne.n	800dc98 <_vfiprintf_r+0x1bc>
 800dcea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcec:	07d9      	lsls	r1, r3, #31
 800dcee:	d405      	bmi.n	800dcfc <_vfiprintf_r+0x220>
 800dcf0:	89ab      	ldrh	r3, [r5, #12]
 800dcf2:	059a      	lsls	r2, r3, #22
 800dcf4:	d402      	bmi.n	800dcfc <_vfiprintf_r+0x220>
 800dcf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf8:	f000 fadd 	bl	800e2b6 <__retarget_lock_release_recursive>
 800dcfc:	89ab      	ldrh	r3, [r5, #12]
 800dcfe:	065b      	lsls	r3, r3, #25
 800dd00:	f53f af12 	bmi.w	800db28 <_vfiprintf_r+0x4c>
 800dd04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd06:	e711      	b.n	800db2c <_vfiprintf_r+0x50>
 800dd08:	ab03      	add	r3, sp, #12
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	462a      	mov	r2, r5
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <_vfiprintf_r+0x258>)
 800dd10:	a904      	add	r1, sp, #16
 800dd12:	4630      	mov	r0, r6
 800dd14:	f7fc fccc 	bl	800a6b0 <_printf_i>
 800dd18:	e7e4      	b.n	800dce4 <_vfiprintf_r+0x208>
 800dd1a:	bf00      	nop
 800dd1c:	0800eeb8 	.word	0x0800eeb8
 800dd20:	0800eed8 	.word	0x0800eed8
 800dd24:	0800ee98 	.word	0x0800ee98
 800dd28:	0800ee84 	.word	0x0800ee84
 800dd2c:	0800ee8e 	.word	0x0800ee8e
 800dd30:	0800a169 	.word	0x0800a169
 800dd34:	0800dab7 	.word	0x0800dab7
 800dd38:	0800ee8a 	.word	0x0800ee8a
 800dd3c:	00000000 	.word	0x00000000

0800dd40 <nan>:
 800dd40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd48 <nan+0x8>
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	00000000 	.word	0x00000000
 800dd4c:	7ff80000 	.word	0x7ff80000

0800dd50 <_sbrk_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d06      	ldr	r5, [pc, #24]	; (800dd6c <_sbrk_r+0x1c>)
 800dd54:	2300      	movs	r3, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	f7f4 fb20 	bl	80023a0 <_sbrk>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d102      	bne.n	800dd6a <_sbrk_r+0x1a>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b103      	cbz	r3, 800dd6a <_sbrk_r+0x1a>
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	bd38      	pop	{r3, r4, r5, pc}
 800dd6c:	20000614 	.word	0x20000614

0800dd70 <strncmp>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	b17a      	cbz	r2, 800dd94 <strncmp+0x24>
 800dd74:	4603      	mov	r3, r0
 800dd76:	3901      	subs	r1, #1
 800dd78:	1884      	adds	r4, r0, r2
 800dd7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd82:	4290      	cmp	r0, r2
 800dd84:	d101      	bne.n	800dd8a <strncmp+0x1a>
 800dd86:	42a3      	cmp	r3, r4
 800dd88:	d101      	bne.n	800dd8e <strncmp+0x1e>
 800dd8a:	1a80      	subs	r0, r0, r2
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d1f3      	bne.n	800dd7a <strncmp+0xa>
 800dd92:	e7fa      	b.n	800dd8a <strncmp+0x1a>
 800dd94:	4610      	mov	r0, r2
 800dd96:	e7f9      	b.n	800dd8c <strncmp+0x1c>

0800dd98 <__swbuf_r>:
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9a:	460e      	mov	r6, r1
 800dd9c:	4614      	mov	r4, r2
 800dd9e:	4605      	mov	r5, r0
 800dda0:	b118      	cbz	r0, 800ddaa <__swbuf_r+0x12>
 800dda2:	6983      	ldr	r3, [r0, #24]
 800dda4:	b90b      	cbnz	r3, 800ddaa <__swbuf_r+0x12>
 800dda6:	f000 f9e7 	bl	800e178 <__sinit>
 800ddaa:	4b21      	ldr	r3, [pc, #132]	; (800de30 <__swbuf_r+0x98>)
 800ddac:	429c      	cmp	r4, r3
 800ddae:	d12b      	bne.n	800de08 <__swbuf_r+0x70>
 800ddb0:	686c      	ldr	r4, [r5, #4]
 800ddb2:	69a3      	ldr	r3, [r4, #24]
 800ddb4:	60a3      	str	r3, [r4, #8]
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	071a      	lsls	r2, r3, #28
 800ddba:	d52f      	bpl.n	800de1c <__swbuf_r+0x84>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	b36b      	cbz	r3, 800de1c <__swbuf_r+0x84>
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	6820      	ldr	r0, [r4, #0]
 800ddc4:	1ac0      	subs	r0, r0, r3
 800ddc6:	6963      	ldr	r3, [r4, #20]
 800ddc8:	b2f6      	uxtb	r6, r6
 800ddca:	4283      	cmp	r3, r0
 800ddcc:	4637      	mov	r7, r6
 800ddce:	dc04      	bgt.n	800ddda <__swbuf_r+0x42>
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 f93c 	bl	800e050 <_fflush_r>
 800ddd8:	bb30      	cbnz	r0, 800de28 <__swbuf_r+0x90>
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	60a3      	str	r3, [r4, #8]
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	6022      	str	r2, [r4, #0]
 800dde6:	701e      	strb	r6, [r3, #0]
 800dde8:	6963      	ldr	r3, [r4, #20]
 800ddea:	3001      	adds	r0, #1
 800ddec:	4283      	cmp	r3, r0
 800ddee:	d004      	beq.n	800ddfa <__swbuf_r+0x62>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	07db      	lsls	r3, r3, #31
 800ddf4:	d506      	bpl.n	800de04 <__swbuf_r+0x6c>
 800ddf6:	2e0a      	cmp	r6, #10
 800ddf8:	d104      	bne.n	800de04 <__swbuf_r+0x6c>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f000 f927 	bl	800e050 <_fflush_r>
 800de02:	b988      	cbnz	r0, 800de28 <__swbuf_r+0x90>
 800de04:	4638      	mov	r0, r7
 800de06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de08:	4b0a      	ldr	r3, [pc, #40]	; (800de34 <__swbuf_r+0x9c>)
 800de0a:	429c      	cmp	r4, r3
 800de0c:	d101      	bne.n	800de12 <__swbuf_r+0x7a>
 800de0e:	68ac      	ldr	r4, [r5, #8]
 800de10:	e7cf      	b.n	800ddb2 <__swbuf_r+0x1a>
 800de12:	4b09      	ldr	r3, [pc, #36]	; (800de38 <__swbuf_r+0xa0>)
 800de14:	429c      	cmp	r4, r3
 800de16:	bf08      	it	eq
 800de18:	68ec      	ldreq	r4, [r5, #12]
 800de1a:	e7ca      	b.n	800ddb2 <__swbuf_r+0x1a>
 800de1c:	4621      	mov	r1, r4
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 f81a 	bl	800de58 <__swsetup_r>
 800de24:	2800      	cmp	r0, #0
 800de26:	d0cb      	beq.n	800ddc0 <__swbuf_r+0x28>
 800de28:	f04f 37ff 	mov.w	r7, #4294967295
 800de2c:	e7ea      	b.n	800de04 <__swbuf_r+0x6c>
 800de2e:	bf00      	nop
 800de30:	0800eeb8 	.word	0x0800eeb8
 800de34:	0800eed8 	.word	0x0800eed8
 800de38:	0800ee98 	.word	0x0800ee98

0800de3c <__ascii_wctomb>:
 800de3c:	b149      	cbz	r1, 800de52 <__ascii_wctomb+0x16>
 800de3e:	2aff      	cmp	r2, #255	; 0xff
 800de40:	bf85      	ittet	hi
 800de42:	238a      	movhi	r3, #138	; 0x8a
 800de44:	6003      	strhi	r3, [r0, #0]
 800de46:	700a      	strbls	r2, [r1, #0]
 800de48:	f04f 30ff 	movhi.w	r0, #4294967295
 800de4c:	bf98      	it	ls
 800de4e:	2001      	movls	r0, #1
 800de50:	4770      	bx	lr
 800de52:	4608      	mov	r0, r1
 800de54:	4770      	bx	lr
	...

0800de58 <__swsetup_r>:
 800de58:	4b32      	ldr	r3, [pc, #200]	; (800df24 <__swsetup_r+0xcc>)
 800de5a:	b570      	push	{r4, r5, r6, lr}
 800de5c:	681d      	ldr	r5, [r3, #0]
 800de5e:	4606      	mov	r6, r0
 800de60:	460c      	mov	r4, r1
 800de62:	b125      	cbz	r5, 800de6e <__swsetup_r+0x16>
 800de64:	69ab      	ldr	r3, [r5, #24]
 800de66:	b913      	cbnz	r3, 800de6e <__swsetup_r+0x16>
 800de68:	4628      	mov	r0, r5
 800de6a:	f000 f985 	bl	800e178 <__sinit>
 800de6e:	4b2e      	ldr	r3, [pc, #184]	; (800df28 <__swsetup_r+0xd0>)
 800de70:	429c      	cmp	r4, r3
 800de72:	d10f      	bne.n	800de94 <__swsetup_r+0x3c>
 800de74:	686c      	ldr	r4, [r5, #4]
 800de76:	89a3      	ldrh	r3, [r4, #12]
 800de78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de7c:	0719      	lsls	r1, r3, #28
 800de7e:	d42c      	bmi.n	800deda <__swsetup_r+0x82>
 800de80:	06dd      	lsls	r5, r3, #27
 800de82:	d411      	bmi.n	800dea8 <__swsetup_r+0x50>
 800de84:	2309      	movs	r3, #9
 800de86:	6033      	str	r3, [r6, #0]
 800de88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295
 800de92:	e03e      	b.n	800df12 <__swsetup_r+0xba>
 800de94:	4b25      	ldr	r3, [pc, #148]	; (800df2c <__swsetup_r+0xd4>)
 800de96:	429c      	cmp	r4, r3
 800de98:	d101      	bne.n	800de9e <__swsetup_r+0x46>
 800de9a:	68ac      	ldr	r4, [r5, #8]
 800de9c:	e7eb      	b.n	800de76 <__swsetup_r+0x1e>
 800de9e:	4b24      	ldr	r3, [pc, #144]	; (800df30 <__swsetup_r+0xd8>)
 800dea0:	429c      	cmp	r4, r3
 800dea2:	bf08      	it	eq
 800dea4:	68ec      	ldreq	r4, [r5, #12]
 800dea6:	e7e6      	b.n	800de76 <__swsetup_r+0x1e>
 800dea8:	0758      	lsls	r0, r3, #29
 800deaa:	d512      	bpl.n	800ded2 <__swsetup_r+0x7a>
 800deac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deae:	b141      	cbz	r1, 800dec2 <__swsetup_r+0x6a>
 800deb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deb4:	4299      	cmp	r1, r3
 800deb6:	d002      	beq.n	800debe <__swsetup_r+0x66>
 800deb8:	4630      	mov	r0, r6
 800deba:	f7ff fba9 	bl	800d610 <_free_r>
 800debe:	2300      	movs	r3, #0
 800dec0:	6363      	str	r3, [r4, #52]	; 0x34
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dec8:	81a3      	strh	r3, [r4, #12]
 800deca:	2300      	movs	r3, #0
 800decc:	6063      	str	r3, [r4, #4]
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	6023      	str	r3, [r4, #0]
 800ded2:	89a3      	ldrh	r3, [r4, #12]
 800ded4:	f043 0308 	orr.w	r3, r3, #8
 800ded8:	81a3      	strh	r3, [r4, #12]
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	b94b      	cbnz	r3, 800def2 <__swsetup_r+0x9a>
 800dede:	89a3      	ldrh	r3, [r4, #12]
 800dee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dee8:	d003      	beq.n	800def2 <__swsetup_r+0x9a>
 800deea:	4621      	mov	r1, r4
 800deec:	4630      	mov	r0, r6
 800deee:	f000 fa09 	bl	800e304 <__smakebuf_r>
 800def2:	89a0      	ldrh	r0, [r4, #12]
 800def4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800def8:	f010 0301 	ands.w	r3, r0, #1
 800defc:	d00a      	beq.n	800df14 <__swsetup_r+0xbc>
 800defe:	2300      	movs	r3, #0
 800df00:	60a3      	str	r3, [r4, #8]
 800df02:	6963      	ldr	r3, [r4, #20]
 800df04:	425b      	negs	r3, r3
 800df06:	61a3      	str	r3, [r4, #24]
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	b943      	cbnz	r3, 800df1e <__swsetup_r+0xc6>
 800df0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df10:	d1ba      	bne.n	800de88 <__swsetup_r+0x30>
 800df12:	bd70      	pop	{r4, r5, r6, pc}
 800df14:	0781      	lsls	r1, r0, #30
 800df16:	bf58      	it	pl
 800df18:	6963      	ldrpl	r3, [r4, #20]
 800df1a:	60a3      	str	r3, [r4, #8]
 800df1c:	e7f4      	b.n	800df08 <__swsetup_r+0xb0>
 800df1e:	2000      	movs	r0, #0
 800df20:	e7f7      	b.n	800df12 <__swsetup_r+0xba>
 800df22:	bf00      	nop
 800df24:	20000018 	.word	0x20000018
 800df28:	0800eeb8 	.word	0x0800eeb8
 800df2c:	0800eed8 	.word	0x0800eed8
 800df30:	0800ee98 	.word	0x0800ee98

0800df34 <abort>:
 800df34:	b508      	push	{r3, lr}
 800df36:	2006      	movs	r0, #6
 800df38:	f000 faa2 	bl	800e480 <raise>
 800df3c:	2001      	movs	r0, #1
 800df3e:	f7f4 f9b7 	bl	80022b0 <_exit>
	...

0800df44 <__sflush_r>:
 800df44:	898a      	ldrh	r2, [r1, #12]
 800df46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4a:	4605      	mov	r5, r0
 800df4c:	0710      	lsls	r0, r2, #28
 800df4e:	460c      	mov	r4, r1
 800df50:	d458      	bmi.n	800e004 <__sflush_r+0xc0>
 800df52:	684b      	ldr	r3, [r1, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	dc05      	bgt.n	800df64 <__sflush_r+0x20>
 800df58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dc02      	bgt.n	800df64 <__sflush_r+0x20>
 800df5e:	2000      	movs	r0, #0
 800df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df66:	2e00      	cmp	r6, #0
 800df68:	d0f9      	beq.n	800df5e <__sflush_r+0x1a>
 800df6a:	2300      	movs	r3, #0
 800df6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df70:	682f      	ldr	r7, [r5, #0]
 800df72:	602b      	str	r3, [r5, #0]
 800df74:	d032      	beq.n	800dfdc <__sflush_r+0x98>
 800df76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	075a      	lsls	r2, r3, #29
 800df7c:	d505      	bpl.n	800df8a <__sflush_r+0x46>
 800df7e:	6863      	ldr	r3, [r4, #4]
 800df80:	1ac0      	subs	r0, r0, r3
 800df82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df84:	b10b      	cbz	r3, 800df8a <__sflush_r+0x46>
 800df86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df88:	1ac0      	subs	r0, r0, r3
 800df8a:	2300      	movs	r3, #0
 800df8c:	4602      	mov	r2, r0
 800df8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df90:	6a21      	ldr	r1, [r4, #32]
 800df92:	4628      	mov	r0, r5
 800df94:	47b0      	blx	r6
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	d106      	bne.n	800dfaa <__sflush_r+0x66>
 800df9c:	6829      	ldr	r1, [r5, #0]
 800df9e:	291d      	cmp	r1, #29
 800dfa0:	d82c      	bhi.n	800dffc <__sflush_r+0xb8>
 800dfa2:	4a2a      	ldr	r2, [pc, #168]	; (800e04c <__sflush_r+0x108>)
 800dfa4:	40ca      	lsrs	r2, r1
 800dfa6:	07d6      	lsls	r6, r2, #31
 800dfa8:	d528      	bpl.n	800dffc <__sflush_r+0xb8>
 800dfaa:	2200      	movs	r2, #0
 800dfac:	6062      	str	r2, [r4, #4]
 800dfae:	04d9      	lsls	r1, r3, #19
 800dfb0:	6922      	ldr	r2, [r4, #16]
 800dfb2:	6022      	str	r2, [r4, #0]
 800dfb4:	d504      	bpl.n	800dfc0 <__sflush_r+0x7c>
 800dfb6:	1c42      	adds	r2, r0, #1
 800dfb8:	d101      	bne.n	800dfbe <__sflush_r+0x7a>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	b903      	cbnz	r3, 800dfc0 <__sflush_r+0x7c>
 800dfbe:	6560      	str	r0, [r4, #84]	; 0x54
 800dfc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfc2:	602f      	str	r7, [r5, #0]
 800dfc4:	2900      	cmp	r1, #0
 800dfc6:	d0ca      	beq.n	800df5e <__sflush_r+0x1a>
 800dfc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfcc:	4299      	cmp	r1, r3
 800dfce:	d002      	beq.n	800dfd6 <__sflush_r+0x92>
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f7ff fb1d 	bl	800d610 <_free_r>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	6360      	str	r0, [r4, #52]	; 0x34
 800dfda:	e7c1      	b.n	800df60 <__sflush_r+0x1c>
 800dfdc:	6a21      	ldr	r1, [r4, #32]
 800dfde:	2301      	movs	r3, #1
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	47b0      	blx	r6
 800dfe4:	1c41      	adds	r1, r0, #1
 800dfe6:	d1c7      	bne.n	800df78 <__sflush_r+0x34>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0c4      	beq.n	800df78 <__sflush_r+0x34>
 800dfee:	2b1d      	cmp	r3, #29
 800dff0:	d001      	beq.n	800dff6 <__sflush_r+0xb2>
 800dff2:	2b16      	cmp	r3, #22
 800dff4:	d101      	bne.n	800dffa <__sflush_r+0xb6>
 800dff6:	602f      	str	r7, [r5, #0]
 800dff8:	e7b1      	b.n	800df5e <__sflush_r+0x1a>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	e7ad      	b.n	800df60 <__sflush_r+0x1c>
 800e004:	690f      	ldr	r7, [r1, #16]
 800e006:	2f00      	cmp	r7, #0
 800e008:	d0a9      	beq.n	800df5e <__sflush_r+0x1a>
 800e00a:	0793      	lsls	r3, r2, #30
 800e00c:	680e      	ldr	r6, [r1, #0]
 800e00e:	bf08      	it	eq
 800e010:	694b      	ldreq	r3, [r1, #20]
 800e012:	600f      	str	r7, [r1, #0]
 800e014:	bf18      	it	ne
 800e016:	2300      	movne	r3, #0
 800e018:	eba6 0807 	sub.w	r8, r6, r7
 800e01c:	608b      	str	r3, [r1, #8]
 800e01e:	f1b8 0f00 	cmp.w	r8, #0
 800e022:	dd9c      	ble.n	800df5e <__sflush_r+0x1a>
 800e024:	6a21      	ldr	r1, [r4, #32]
 800e026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e028:	4643      	mov	r3, r8
 800e02a:	463a      	mov	r2, r7
 800e02c:	4628      	mov	r0, r5
 800e02e:	47b0      	blx	r6
 800e030:	2800      	cmp	r0, #0
 800e032:	dc06      	bgt.n	800e042 <__sflush_r+0xfe>
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	e78e      	b.n	800df60 <__sflush_r+0x1c>
 800e042:	4407      	add	r7, r0
 800e044:	eba8 0800 	sub.w	r8, r8, r0
 800e048:	e7e9      	b.n	800e01e <__sflush_r+0xda>
 800e04a:	bf00      	nop
 800e04c:	20400001 	.word	0x20400001

0800e050 <_fflush_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	690b      	ldr	r3, [r1, #16]
 800e054:	4605      	mov	r5, r0
 800e056:	460c      	mov	r4, r1
 800e058:	b913      	cbnz	r3, 800e060 <_fflush_r+0x10>
 800e05a:	2500      	movs	r5, #0
 800e05c:	4628      	mov	r0, r5
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	b118      	cbz	r0, 800e06a <_fflush_r+0x1a>
 800e062:	6983      	ldr	r3, [r0, #24]
 800e064:	b90b      	cbnz	r3, 800e06a <_fflush_r+0x1a>
 800e066:	f000 f887 	bl	800e178 <__sinit>
 800e06a:	4b14      	ldr	r3, [pc, #80]	; (800e0bc <_fflush_r+0x6c>)
 800e06c:	429c      	cmp	r4, r3
 800e06e:	d11b      	bne.n	800e0a8 <_fflush_r+0x58>
 800e070:	686c      	ldr	r4, [r5, #4]
 800e072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d0ef      	beq.n	800e05a <_fflush_r+0xa>
 800e07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e07c:	07d0      	lsls	r0, r2, #31
 800e07e:	d404      	bmi.n	800e08a <_fflush_r+0x3a>
 800e080:	0599      	lsls	r1, r3, #22
 800e082:	d402      	bmi.n	800e08a <_fflush_r+0x3a>
 800e084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e086:	f000 f915 	bl	800e2b4 <__retarget_lock_acquire_recursive>
 800e08a:	4628      	mov	r0, r5
 800e08c:	4621      	mov	r1, r4
 800e08e:	f7ff ff59 	bl	800df44 <__sflush_r>
 800e092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e094:	07da      	lsls	r2, r3, #31
 800e096:	4605      	mov	r5, r0
 800e098:	d4e0      	bmi.n	800e05c <_fflush_r+0xc>
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	059b      	lsls	r3, r3, #22
 800e09e:	d4dd      	bmi.n	800e05c <_fflush_r+0xc>
 800e0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0a2:	f000 f908 	bl	800e2b6 <__retarget_lock_release_recursive>
 800e0a6:	e7d9      	b.n	800e05c <_fflush_r+0xc>
 800e0a8:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <_fflush_r+0x70>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d101      	bne.n	800e0b2 <_fflush_r+0x62>
 800e0ae:	68ac      	ldr	r4, [r5, #8]
 800e0b0:	e7df      	b.n	800e072 <_fflush_r+0x22>
 800e0b2:	4b04      	ldr	r3, [pc, #16]	; (800e0c4 <_fflush_r+0x74>)
 800e0b4:	429c      	cmp	r4, r3
 800e0b6:	bf08      	it	eq
 800e0b8:	68ec      	ldreq	r4, [r5, #12]
 800e0ba:	e7da      	b.n	800e072 <_fflush_r+0x22>
 800e0bc:	0800eeb8 	.word	0x0800eeb8
 800e0c0:	0800eed8 	.word	0x0800eed8
 800e0c4:	0800ee98 	.word	0x0800ee98

0800e0c8 <std>:
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	b510      	push	{r4, lr}
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0d6:	6083      	str	r3, [r0, #8]
 800e0d8:	8181      	strh	r1, [r0, #12]
 800e0da:	6643      	str	r3, [r0, #100]	; 0x64
 800e0dc:	81c2      	strh	r2, [r0, #14]
 800e0de:	6183      	str	r3, [r0, #24]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	2208      	movs	r2, #8
 800e0e4:	305c      	adds	r0, #92	; 0x5c
 800e0e6:	f7fb ff97 	bl	800a018 <memset>
 800e0ea:	4b05      	ldr	r3, [pc, #20]	; (800e100 <std+0x38>)
 800e0ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e0ee:	4b05      	ldr	r3, [pc, #20]	; (800e104 <std+0x3c>)
 800e0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0f2:	4b05      	ldr	r3, [pc, #20]	; (800e108 <std+0x40>)
 800e0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0f6:	4b05      	ldr	r3, [pc, #20]	; (800e10c <std+0x44>)
 800e0f8:	6224      	str	r4, [r4, #32]
 800e0fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e0fc:	bd10      	pop	{r4, pc}
 800e0fe:	bf00      	nop
 800e100:	0800e4b9 	.word	0x0800e4b9
 800e104:	0800e4db 	.word	0x0800e4db
 800e108:	0800e513 	.word	0x0800e513
 800e10c:	0800e537 	.word	0x0800e537

0800e110 <_cleanup_r>:
 800e110:	4901      	ldr	r1, [pc, #4]	; (800e118 <_cleanup_r+0x8>)
 800e112:	f000 b8af 	b.w	800e274 <_fwalk_reent>
 800e116:	bf00      	nop
 800e118:	0800e051 	.word	0x0800e051

0800e11c <__sfmoreglue>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	2268      	movs	r2, #104	; 0x68
 800e120:	1e4d      	subs	r5, r1, #1
 800e122:	4355      	muls	r5, r2
 800e124:	460e      	mov	r6, r1
 800e126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e12a:	f7ff fadd 	bl	800d6e8 <_malloc_r>
 800e12e:	4604      	mov	r4, r0
 800e130:	b140      	cbz	r0, 800e144 <__sfmoreglue+0x28>
 800e132:	2100      	movs	r1, #0
 800e134:	e9c0 1600 	strd	r1, r6, [r0]
 800e138:	300c      	adds	r0, #12
 800e13a:	60a0      	str	r0, [r4, #8]
 800e13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e140:	f7fb ff6a 	bl	800a018 <memset>
 800e144:	4620      	mov	r0, r4
 800e146:	bd70      	pop	{r4, r5, r6, pc}

0800e148 <__sfp_lock_acquire>:
 800e148:	4801      	ldr	r0, [pc, #4]	; (800e150 <__sfp_lock_acquire+0x8>)
 800e14a:	f000 b8b3 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e14e:	bf00      	nop
 800e150:	20000611 	.word	0x20000611

0800e154 <__sfp_lock_release>:
 800e154:	4801      	ldr	r0, [pc, #4]	; (800e15c <__sfp_lock_release+0x8>)
 800e156:	f000 b8ae 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e15a:	bf00      	nop
 800e15c:	20000611 	.word	0x20000611

0800e160 <__sinit_lock_acquire>:
 800e160:	4801      	ldr	r0, [pc, #4]	; (800e168 <__sinit_lock_acquire+0x8>)
 800e162:	f000 b8a7 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e166:	bf00      	nop
 800e168:	20000612 	.word	0x20000612

0800e16c <__sinit_lock_release>:
 800e16c:	4801      	ldr	r0, [pc, #4]	; (800e174 <__sinit_lock_release+0x8>)
 800e16e:	f000 b8a2 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e172:	bf00      	nop
 800e174:	20000612 	.word	0x20000612

0800e178 <__sinit>:
 800e178:	b510      	push	{r4, lr}
 800e17a:	4604      	mov	r4, r0
 800e17c:	f7ff fff0 	bl	800e160 <__sinit_lock_acquire>
 800e180:	69a3      	ldr	r3, [r4, #24]
 800e182:	b11b      	cbz	r3, 800e18c <__sinit+0x14>
 800e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e188:	f7ff bff0 	b.w	800e16c <__sinit_lock_release>
 800e18c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e190:	6523      	str	r3, [r4, #80]	; 0x50
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <__sinit+0x68>)
 800e194:	4a13      	ldr	r2, [pc, #76]	; (800e1e4 <__sinit+0x6c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	62a2      	str	r2, [r4, #40]	; 0x28
 800e19a:	42a3      	cmp	r3, r4
 800e19c:	bf04      	itt	eq
 800e19e:	2301      	moveq	r3, #1
 800e1a0:	61a3      	streq	r3, [r4, #24]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f000 f820 	bl	800e1e8 <__sfp>
 800e1a8:	6060      	str	r0, [r4, #4]
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 f81c 	bl	800e1e8 <__sfp>
 800e1b0:	60a0      	str	r0, [r4, #8]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f818 	bl	800e1e8 <__sfp>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	60e0      	str	r0, [r4, #12]
 800e1bc:	2104      	movs	r1, #4
 800e1be:	6860      	ldr	r0, [r4, #4]
 800e1c0:	f7ff ff82 	bl	800e0c8 <std>
 800e1c4:	68a0      	ldr	r0, [r4, #8]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	2109      	movs	r1, #9
 800e1ca:	f7ff ff7d 	bl	800e0c8 <std>
 800e1ce:	68e0      	ldr	r0, [r4, #12]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	2112      	movs	r1, #18
 800e1d4:	f7ff ff78 	bl	800e0c8 <std>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	61a3      	str	r3, [r4, #24]
 800e1dc:	e7d2      	b.n	800e184 <__sinit+0xc>
 800e1de:	bf00      	nop
 800e1e0:	0800e9fc 	.word	0x0800e9fc
 800e1e4:	0800e111 	.word	0x0800e111

0800e1e8 <__sfp>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	4607      	mov	r7, r0
 800e1ec:	f7ff ffac 	bl	800e148 <__sfp_lock_acquire>
 800e1f0:	4b1e      	ldr	r3, [pc, #120]	; (800e26c <__sfp+0x84>)
 800e1f2:	681e      	ldr	r6, [r3, #0]
 800e1f4:	69b3      	ldr	r3, [r6, #24]
 800e1f6:	b913      	cbnz	r3, 800e1fe <__sfp+0x16>
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7ff ffbd 	bl	800e178 <__sinit>
 800e1fe:	3648      	adds	r6, #72	; 0x48
 800e200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e204:	3b01      	subs	r3, #1
 800e206:	d503      	bpl.n	800e210 <__sfp+0x28>
 800e208:	6833      	ldr	r3, [r6, #0]
 800e20a:	b30b      	cbz	r3, 800e250 <__sfp+0x68>
 800e20c:	6836      	ldr	r6, [r6, #0]
 800e20e:	e7f7      	b.n	800e200 <__sfp+0x18>
 800e210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e214:	b9d5      	cbnz	r5, 800e24c <__sfp+0x64>
 800e216:	4b16      	ldr	r3, [pc, #88]	; (800e270 <__sfp+0x88>)
 800e218:	60e3      	str	r3, [r4, #12]
 800e21a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e21e:	6665      	str	r5, [r4, #100]	; 0x64
 800e220:	f000 f847 	bl	800e2b2 <__retarget_lock_init_recursive>
 800e224:	f7ff ff96 	bl	800e154 <__sfp_lock_release>
 800e228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e22c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e230:	6025      	str	r5, [r4, #0]
 800e232:	61a5      	str	r5, [r4, #24]
 800e234:	2208      	movs	r2, #8
 800e236:	4629      	mov	r1, r5
 800e238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e23c:	f7fb feec 	bl	800a018 <memset>
 800e240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e248:	4620      	mov	r0, r4
 800e24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e24c:	3468      	adds	r4, #104	; 0x68
 800e24e:	e7d9      	b.n	800e204 <__sfp+0x1c>
 800e250:	2104      	movs	r1, #4
 800e252:	4638      	mov	r0, r7
 800e254:	f7ff ff62 	bl	800e11c <__sfmoreglue>
 800e258:	4604      	mov	r4, r0
 800e25a:	6030      	str	r0, [r6, #0]
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d1d5      	bne.n	800e20c <__sfp+0x24>
 800e260:	f7ff ff78 	bl	800e154 <__sfp_lock_release>
 800e264:	230c      	movs	r3, #12
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	e7ee      	b.n	800e248 <__sfp+0x60>
 800e26a:	bf00      	nop
 800e26c:	0800e9fc 	.word	0x0800e9fc
 800e270:	ffff0001 	.word	0xffff0001

0800e274 <_fwalk_reent>:
 800e274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e278:	4606      	mov	r6, r0
 800e27a:	4688      	mov	r8, r1
 800e27c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e280:	2700      	movs	r7, #0
 800e282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e286:	f1b9 0901 	subs.w	r9, r9, #1
 800e28a:	d505      	bpl.n	800e298 <_fwalk_reent+0x24>
 800e28c:	6824      	ldr	r4, [r4, #0]
 800e28e:	2c00      	cmp	r4, #0
 800e290:	d1f7      	bne.n	800e282 <_fwalk_reent+0xe>
 800e292:	4638      	mov	r0, r7
 800e294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e298:	89ab      	ldrh	r3, [r5, #12]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d907      	bls.n	800e2ae <_fwalk_reent+0x3a>
 800e29e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	d003      	beq.n	800e2ae <_fwalk_reent+0x3a>
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	47c0      	blx	r8
 800e2ac:	4307      	orrs	r7, r0
 800e2ae:	3568      	adds	r5, #104	; 0x68
 800e2b0:	e7e9      	b.n	800e286 <_fwalk_reent+0x12>

0800e2b2 <__retarget_lock_init_recursive>:
 800e2b2:	4770      	bx	lr

0800e2b4 <__retarget_lock_acquire_recursive>:
 800e2b4:	4770      	bx	lr

0800e2b6 <__retarget_lock_release_recursive>:
 800e2b6:	4770      	bx	lr

0800e2b8 <__swhatbuf_r>:
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	460e      	mov	r6, r1
 800e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c0:	2900      	cmp	r1, #0
 800e2c2:	b096      	sub	sp, #88	; 0x58
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	461d      	mov	r5, r3
 800e2c8:	da08      	bge.n	800e2dc <__swhatbuf_r+0x24>
 800e2ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	602a      	str	r2, [r5, #0]
 800e2d2:	061a      	lsls	r2, r3, #24
 800e2d4:	d410      	bmi.n	800e2f8 <__swhatbuf_r+0x40>
 800e2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2da:	e00e      	b.n	800e2fa <__swhatbuf_r+0x42>
 800e2dc:	466a      	mov	r2, sp
 800e2de:	f000 f951 	bl	800e584 <_fstat_r>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	dbf1      	blt.n	800e2ca <__swhatbuf_r+0x12>
 800e2e6:	9a01      	ldr	r2, [sp, #4]
 800e2e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2f0:	425a      	negs	r2, r3
 800e2f2:	415a      	adcs	r2, r3
 800e2f4:	602a      	str	r2, [r5, #0]
 800e2f6:	e7ee      	b.n	800e2d6 <__swhatbuf_r+0x1e>
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	b016      	add	sp, #88	; 0x58
 800e300:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e304 <__smakebuf_r>:
 800e304:	898b      	ldrh	r3, [r1, #12]
 800e306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e308:	079d      	lsls	r5, r3, #30
 800e30a:	4606      	mov	r6, r0
 800e30c:	460c      	mov	r4, r1
 800e30e:	d507      	bpl.n	800e320 <__smakebuf_r+0x1c>
 800e310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	6123      	str	r3, [r4, #16]
 800e318:	2301      	movs	r3, #1
 800e31a:	6163      	str	r3, [r4, #20]
 800e31c:	b002      	add	sp, #8
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	ab01      	add	r3, sp, #4
 800e322:	466a      	mov	r2, sp
 800e324:	f7ff ffc8 	bl	800e2b8 <__swhatbuf_r>
 800e328:	9900      	ldr	r1, [sp, #0]
 800e32a:	4605      	mov	r5, r0
 800e32c:	4630      	mov	r0, r6
 800e32e:	f7ff f9db 	bl	800d6e8 <_malloc_r>
 800e332:	b948      	cbnz	r0, 800e348 <__smakebuf_r+0x44>
 800e334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e338:	059a      	lsls	r2, r3, #22
 800e33a:	d4ef      	bmi.n	800e31c <__smakebuf_r+0x18>
 800e33c:	f023 0303 	bic.w	r3, r3, #3
 800e340:	f043 0302 	orr.w	r3, r3, #2
 800e344:	81a3      	strh	r3, [r4, #12]
 800e346:	e7e3      	b.n	800e310 <__smakebuf_r+0xc>
 800e348:	4b0d      	ldr	r3, [pc, #52]	; (800e380 <__smakebuf_r+0x7c>)
 800e34a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e34c:	89a3      	ldrh	r3, [r4, #12]
 800e34e:	6020      	str	r0, [r4, #0]
 800e350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e354:	81a3      	strh	r3, [r4, #12]
 800e356:	9b00      	ldr	r3, [sp, #0]
 800e358:	6163      	str	r3, [r4, #20]
 800e35a:	9b01      	ldr	r3, [sp, #4]
 800e35c:	6120      	str	r0, [r4, #16]
 800e35e:	b15b      	cbz	r3, 800e378 <__smakebuf_r+0x74>
 800e360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e364:	4630      	mov	r0, r6
 800e366:	f000 f91f 	bl	800e5a8 <_isatty_r>
 800e36a:	b128      	cbz	r0, 800e378 <__smakebuf_r+0x74>
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	f043 0301 	orr.w	r3, r3, #1
 800e376:	81a3      	strh	r3, [r4, #12]
 800e378:	89a0      	ldrh	r0, [r4, #12]
 800e37a:	4305      	orrs	r5, r0
 800e37c:	81a5      	strh	r5, [r4, #12]
 800e37e:	e7cd      	b.n	800e31c <__smakebuf_r+0x18>
 800e380:	0800e111 	.word	0x0800e111

0800e384 <memmove>:
 800e384:	4288      	cmp	r0, r1
 800e386:	b510      	push	{r4, lr}
 800e388:	eb01 0402 	add.w	r4, r1, r2
 800e38c:	d902      	bls.n	800e394 <memmove+0x10>
 800e38e:	4284      	cmp	r4, r0
 800e390:	4623      	mov	r3, r4
 800e392:	d807      	bhi.n	800e3a4 <memmove+0x20>
 800e394:	1e43      	subs	r3, r0, #1
 800e396:	42a1      	cmp	r1, r4
 800e398:	d008      	beq.n	800e3ac <memmove+0x28>
 800e39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3a2:	e7f8      	b.n	800e396 <memmove+0x12>
 800e3a4:	4402      	add	r2, r0
 800e3a6:	4601      	mov	r1, r0
 800e3a8:	428a      	cmp	r2, r1
 800e3aa:	d100      	bne.n	800e3ae <memmove+0x2a>
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3b6:	e7f7      	b.n	800e3a8 <memmove+0x24>

0800e3b8 <__malloc_lock>:
 800e3b8:	4801      	ldr	r0, [pc, #4]	; (800e3c0 <__malloc_lock+0x8>)
 800e3ba:	f7ff bf7b 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e3be:	bf00      	nop
 800e3c0:	20000610 	.word	0x20000610

0800e3c4 <__malloc_unlock>:
 800e3c4:	4801      	ldr	r0, [pc, #4]	; (800e3cc <__malloc_unlock+0x8>)
 800e3c6:	f7ff bf76 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e3ca:	bf00      	nop
 800e3cc:	20000610 	.word	0x20000610

0800e3d0 <_realloc_r>:
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	4680      	mov	r8, r0
 800e3d6:	4614      	mov	r4, r2
 800e3d8:	460e      	mov	r6, r1
 800e3da:	b921      	cbnz	r1, 800e3e6 <_realloc_r+0x16>
 800e3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	f7ff b981 	b.w	800d6e8 <_malloc_r>
 800e3e6:	b92a      	cbnz	r2, 800e3f4 <_realloc_r+0x24>
 800e3e8:	f7ff f912 	bl	800d610 <_free_r>
 800e3ec:	4625      	mov	r5, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f4:	f000 f8fa 	bl	800e5ec <_malloc_usable_size_r>
 800e3f8:	4284      	cmp	r4, r0
 800e3fa:	4607      	mov	r7, r0
 800e3fc:	d802      	bhi.n	800e404 <_realloc_r+0x34>
 800e3fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e402:	d812      	bhi.n	800e42a <_realloc_r+0x5a>
 800e404:	4621      	mov	r1, r4
 800e406:	4640      	mov	r0, r8
 800e408:	f7ff f96e 	bl	800d6e8 <_malloc_r>
 800e40c:	4605      	mov	r5, r0
 800e40e:	2800      	cmp	r0, #0
 800e410:	d0ed      	beq.n	800e3ee <_realloc_r+0x1e>
 800e412:	42bc      	cmp	r4, r7
 800e414:	4622      	mov	r2, r4
 800e416:	4631      	mov	r1, r6
 800e418:	bf28      	it	cs
 800e41a:	463a      	movcs	r2, r7
 800e41c:	f7fe fc12 	bl	800cc44 <memcpy>
 800e420:	4631      	mov	r1, r6
 800e422:	4640      	mov	r0, r8
 800e424:	f7ff f8f4 	bl	800d610 <_free_r>
 800e428:	e7e1      	b.n	800e3ee <_realloc_r+0x1e>
 800e42a:	4635      	mov	r5, r6
 800e42c:	e7df      	b.n	800e3ee <_realloc_r+0x1e>

0800e42e <_raise_r>:
 800e42e:	291f      	cmp	r1, #31
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4604      	mov	r4, r0
 800e434:	460d      	mov	r5, r1
 800e436:	d904      	bls.n	800e442 <_raise_r+0x14>
 800e438:	2316      	movs	r3, #22
 800e43a:	6003      	str	r3, [r0, #0]
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295
 800e440:	bd38      	pop	{r3, r4, r5, pc}
 800e442:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e444:	b112      	cbz	r2, 800e44c <_raise_r+0x1e>
 800e446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e44a:	b94b      	cbnz	r3, 800e460 <_raise_r+0x32>
 800e44c:	4620      	mov	r0, r4
 800e44e:	f000 f831 	bl	800e4b4 <_getpid_r>
 800e452:	462a      	mov	r2, r5
 800e454:	4601      	mov	r1, r0
 800e456:	4620      	mov	r0, r4
 800e458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e45c:	f000 b818 	b.w	800e490 <_kill_r>
 800e460:	2b01      	cmp	r3, #1
 800e462:	d00a      	beq.n	800e47a <_raise_r+0x4c>
 800e464:	1c59      	adds	r1, r3, #1
 800e466:	d103      	bne.n	800e470 <_raise_r+0x42>
 800e468:	2316      	movs	r3, #22
 800e46a:	6003      	str	r3, [r0, #0]
 800e46c:	2001      	movs	r0, #1
 800e46e:	e7e7      	b.n	800e440 <_raise_r+0x12>
 800e470:	2400      	movs	r4, #0
 800e472:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e476:	4628      	mov	r0, r5
 800e478:	4798      	blx	r3
 800e47a:	2000      	movs	r0, #0
 800e47c:	e7e0      	b.n	800e440 <_raise_r+0x12>
	...

0800e480 <raise>:
 800e480:	4b02      	ldr	r3, [pc, #8]	; (800e48c <raise+0xc>)
 800e482:	4601      	mov	r1, r0
 800e484:	6818      	ldr	r0, [r3, #0]
 800e486:	f7ff bfd2 	b.w	800e42e <_raise_r>
 800e48a:	bf00      	nop
 800e48c:	20000018 	.word	0x20000018

0800e490 <_kill_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4d07      	ldr	r5, [pc, #28]	; (800e4b0 <_kill_r+0x20>)
 800e494:	2300      	movs	r3, #0
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	4611      	mov	r1, r2
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f7f3 fef7 	bl	8002290 <_kill>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	d102      	bne.n	800e4ac <_kill_r+0x1c>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	b103      	cbz	r3, 800e4ac <_kill_r+0x1c>
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000614 	.word	0x20000614

0800e4b4 <_getpid_r>:
 800e4b4:	f7f3 bee4 	b.w	8002280 <_getpid>

0800e4b8 <__sread>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c0:	f000 f89c 	bl	800e5fc <_read_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	bfab      	itete	ge
 800e4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e4cc:	181b      	addge	r3, r3, r0
 800e4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4d2:	bfac      	ite	ge
 800e4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4d6:	81a3      	strhlt	r3, [r4, #12]
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <__swrite>:
 800e4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4de:	461f      	mov	r7, r3
 800e4e0:	898b      	ldrh	r3, [r1, #12]
 800e4e2:	05db      	lsls	r3, r3, #23
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	d505      	bpl.n	800e4f8 <__swrite+0x1e>
 800e4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f000 f868 	bl	800e5c8 <_lseek_r>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	4632      	mov	r2, r6
 800e506:	463b      	mov	r3, r7
 800e508:	4628      	mov	r0, r5
 800e50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	f000 b817 	b.w	800e540 <_write_r>

0800e512 <__sseek>:
 800e512:	b510      	push	{r4, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	f000 f855 	bl	800e5c8 <_lseek_r>
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	bf15      	itete	ne
 800e524:	6560      	strne	r0, [r4, #84]	; 0x54
 800e526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e52e:	81a3      	strheq	r3, [r4, #12]
 800e530:	bf18      	it	ne
 800e532:	81a3      	strhne	r3, [r4, #12]
 800e534:	bd10      	pop	{r4, pc}

0800e536 <__sclose>:
 800e536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53a:	f000 b813 	b.w	800e564 <_close_r>
	...

0800e540 <_write_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d07      	ldr	r5, [pc, #28]	; (800e560 <_write_r+0x20>)
 800e544:	4604      	mov	r4, r0
 800e546:	4608      	mov	r0, r1
 800e548:	4611      	mov	r1, r2
 800e54a:	2200      	movs	r2, #0
 800e54c:	602a      	str	r2, [r5, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	f7f3 fed5 	bl	80022fe <_write>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d102      	bne.n	800e55e <_write_r+0x1e>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	b103      	cbz	r3, 800e55e <_write_r+0x1e>
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20000614 	.word	0x20000614

0800e564 <_close_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4d06      	ldr	r5, [pc, #24]	; (800e580 <_close_r+0x1c>)
 800e568:	2300      	movs	r3, #0
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	f7f3 fee1 	bl	8002336 <_close>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_close_r+0x1a>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_close_r+0x1a>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	20000614 	.word	0x20000614

0800e584 <_fstat_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	; (800e5a4 <_fstat_r+0x20>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f7f3 fedc 	bl	800234e <_fstat>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d102      	bne.n	800e5a0 <_fstat_r+0x1c>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b103      	cbz	r3, 800e5a0 <_fstat_r+0x1c>
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000614 	.word	0x20000614

0800e5a8 <_isatty_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	; (800e5c4 <_isatty_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f3 fedb 	bl	800236e <_isatty>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_isatty_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_isatty_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	20000614 	.word	0x20000614

0800e5c8 <_lseek_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4d07      	ldr	r5, [pc, #28]	; (800e5e8 <_lseek_r+0x20>)
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	4608      	mov	r0, r1
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	602a      	str	r2, [r5, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	f7f3 fed4 	bl	8002384 <_lseek>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_lseek_r+0x1e>
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_lseek_r+0x1e>
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	20000614 	.word	0x20000614

0800e5ec <_malloc_usable_size_r>:
 800e5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5f0:	1f18      	subs	r0, r3, #4
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	bfbc      	itt	lt
 800e5f6:	580b      	ldrlt	r3, [r1, r0]
 800e5f8:	18c0      	addlt	r0, r0, r3
 800e5fa:	4770      	bx	lr

0800e5fc <_read_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4d07      	ldr	r5, [pc, #28]	; (800e61c <_read_r+0x20>)
 800e600:	4604      	mov	r4, r0
 800e602:	4608      	mov	r0, r1
 800e604:	4611      	mov	r1, r2
 800e606:	2200      	movs	r2, #0
 800e608:	602a      	str	r2, [r5, #0]
 800e60a:	461a      	mov	r2, r3
 800e60c:	f7f3 fe5a 	bl	80022c4 <_read>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d102      	bne.n	800e61a <_read_r+0x1e>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	b103      	cbz	r3, 800e61a <_read_r+0x1e>
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	20000614 	.word	0x20000614

0800e620 <_init>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	bf00      	nop
 800e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e626:	bc08      	pop	{r3}
 800e628:	469e      	mov	lr, r3
 800e62a:	4770      	bx	lr

0800e62c <_fini>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	bf00      	nop
 800e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e632:	bc08      	pop	{r3}
 800e634:	469e      	mov	lr, r3
 800e636:	4770      	bx	lr
