
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e230  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800e410  0800e410  0001e410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecf8  0800ecf8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecf8  0800ecf8  0001ecf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed00  0800ed00  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed00  0800ed00  0001ed00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed04  0800ed04  0001ed04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ed08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001e8  0800eef0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800eef0  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d547  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391c  00000000  00000000  0003d75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00041080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00042720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab46  00000000  00000000  00043c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba5f  00000000  00000000  0006e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114129  00000000  00000000  0008a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075cc  00000000  00000000  0019e358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e3f8 	.word	0x0800e3f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800e3f8 	.word	0x0800e3f8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2220      	movs	r2, #32
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f008 feb7 	bl	8009df4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC1_Init+0xec>)
 8001088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC1_Init+0xec>)
 8001090:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC1_Init+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <MX_ADC1_Init+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_ADC1_Init+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_ADC1_Init+0xec>)
 80010bc:	2201      	movs	r2, #1
 80010be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_ADC1_Init+0xec>)
 80010f6:	f001 fecf 	bl	8002e98 <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001100:	f000 fae6 	bl	80016d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_ADC1_Init+0xec>)
 8001110:	f002 ffb6 	bl	8004080 <HAL_ADCEx_MultiModeConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 fad9 	bl	80016d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ADC1_Init+0xf0>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	237f      	movs	r3, #127	; 0x7f
 800112c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0xec>)
 800113c:	f002 f956 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001146:	f000 fac3 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000238 	.word	0x20000238
 8001158:	04300002 	.word	0x04300002

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	; 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2254      	movs	r2, #84	; 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fe39 	bl	8009df4 <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d15f      	bne.n	800124c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001190:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fc6f 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f000 fa92 	bl	80016d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a22      	ldr	r2, [pc, #136]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_MspInit+0xf8>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 fc5f 	bl	8004ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_ADC_MspInit+0x100>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 80011fe:	2205      	movs	r2, #5
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800121e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001222:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001232:	f003 f90d 	bl	8004450 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800123c:	f000 fa48 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_ADC_MspInit+0xfc>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3778      	adds	r7, #120	; 0x78
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	200002a4 	.word	0x200002a4
 800125c:	40020008 	.word	0x40020008

08001260 <HAL_ADC_ConvCpltCallback>:

/**
 * Change the value of the dmaFlag to high level when the ADC buffer is full
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_ADC_ConvCpltCallback+0x24>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d102      	bne.n	8001276 <HAL_ADC_ConvCpltCallback+0x16>
  {
	  adcDMAflag=1;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_ADC_ConvCpltCallback+0x28>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  }

}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000238 	.word	0x20000238
 8001288:	2000022c 	.word	0x2000022c
 800128c:	00000000 	.word	0x00000000

08001290 <meanADCValue>:
/**
 * @brief Make the mean of the current value stocked in the buffer and stock it in the hallCurrentValue variable
 * @note use the command "measure current" on the commandshell to display the current value
 */
void meanADCValue (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	int i;
	int sum=0;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
	if (adcDMAflag==1)
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <meanADCValue+0x100>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d167      	bne.n	8001372 <meanADCValue+0xe2>
	{
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e009      	b.n	80012bc <meanADCValue+0x2c>
		{
			sum=sum+ adcBuffer[i];
 80012a8:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <meanADCValue+0x104>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	603b      	str	r3, [r7, #0]
		for (i=0; i<ADC_HALL_BUFFER; i=i+1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b09      	cmp	r3, #9
 80012c0:	ddf2      	ble.n	80012a8 <meanADCValue+0x18>
		}

		hallVoltageValue= ((sum/ADC_HALL_BUFFER)*3.3/4096.0)+OFFSET_DEFAULT_ADC;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <meanADCValue+0x108>)
 80012c6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ca:	1092      	asrs	r2, r2, #2
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f95f 	bl	8000594 <__aeabi_i2d>
 80012d6:	a32a      	add	r3, pc, #168	; (adr r3, 8001380 <meanADCValue+0xf0>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f9c4 	bl	8000668 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <meanADCValue+0x10c>)
 80012ee:	f7ff fae5 	bl	80008bc <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a323      	add	r3, pc, #140	; (adr r3, 8001388 <meanADCValue+0xf8>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe fffa 	bl	80002f8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fca4 	bl	8000c58 <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <meanADCValue+0x110>)
 8001314:	6013      	str	r3, [r2, #0]
		hallCurrentValue= (hallVoltageValue-VOLTAGE_HALL_OC)*HALL_GAIN;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <meanADCValue+0x110>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f94c 	bl	80005b8 <__aeabi_f2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <meanADCValue+0x114>)
 8001326:	f7fe ffe7 	bl	80002f8 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <meanADCValue+0x118>)
 8001338:	f7ff f996 	bl	8000668 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <meanADCValue+0x11c>)
 800134a:	f7ff f98d 	bl	8000668 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <meanADCValue+0x120>)
 800135c:	f7ff faae 	bl	80008bc <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fc76 	bl	8000c58 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <meanADCValue+0x124>)
 8001370:	6013      	str	r3, [r2, #0]

	}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	66666666 	.word	0x66666666
 8001384:	400a6666 	.word	0x400a6666
 8001388:	99999999 	.word	0x99999999
 800138c:	3f999999 	.word	0x3f999999
 8001390:	2000022c 	.word	0x2000022c
 8001394:	20000204 	.word	0x20000204
 8001398:	66666667 	.word	0x66666667
 800139c:	40b00000 	.word	0x40b00000
 80013a0:	20000230 	.word	0x20000230
 80013a4:	40040000 	.word	0x40040000
 80013a8:	40280000 	.word	0x40280000
 80013ac:	40080000 	.word	0x40080000
 80013b0:	400c0000 	.word	0x400c0000
 80013b4:	20000234 	.word	0x20000234

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_DMA_Init+0x50>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <MX_DMA_Init+0x50>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_DMA_Init+0x50>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x50>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x50>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x50>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	200b      	movs	r0, #11
 80013f4:	f003 f804 	bl	8004400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f8:	200b      	movs	r0, #11
 80013fa:	f003 f81b 	bl	8004434 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xe4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_GPIO_Init+0xe4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2108      	movs	r1, #8
 800146e:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001470:	f003 fca2 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f003 fc9c 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4817      	ldr	r0, [pc, #92]	; (80014f4 <MX_GPIO_Init+0xe8>)
 8001498:	f003 fb0c 	bl	8004ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800149c:	2308      	movs	r3, #8
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_GPIO_Init+0xe8>)
 80014b4:	f003 fafe 	bl	8004ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 faef 	bl	8004ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f002 ff90 	bl	8004400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e0:	2028      	movs	r0, #40	; 0x28
 80014e2:	f002 ffa7 	bl	8004434 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800

080014f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014fc:	f001 fa2b 	bl	8002956 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001500:	f000 f866 	bl	80015d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001504:	f7ff ff82 	bl	800140c <MX_GPIO_Init>
	MX_DMA_Init();
 8001508:	f7ff ff56 	bl	80013b8 <MX_DMA_Init>
	MX_TIM1_Init();
 800150c:	f000 fe22 	bl	8002154 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001510:	f001 f8b0 	bl	8002674 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001514:	f7ff fda8 	bl	8001068 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001518:	f000 fedc 	bl	80022d4 <MX_TIM2_Init>
	MX_TIM3_Init();
 800151c:	f000 ff28 	bl	8002370 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001520:	f000 ff7c 	bl	800241c <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001524:	2201      	movs	r2, #1
 8001526:	491f      	ldr	r1, [pc, #124]	; (80015a4 <main+0xac>)
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <main+0xb0>)
 800152a:	f006 fca1 	bl	8007e70 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f001 fa48 	bl	80029c4 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8001534:	481d      	ldr	r0, [pc, #116]	; (80015ac <main+0xb4>)
 8001536:	f004 fd49 	bl	8005fcc <HAL_TIM_Base_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800153a:	217f      	movs	r1, #127	; 0x7f
 800153c:	481c      	ldr	r0, [pc, #112]	; (80015b0 <main+0xb8>)
 800153e:	f002 fd3d 	bl	8003fbc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_HALL_BUFFER);
 8001542:	220a      	movs	r2, #10
 8001544:	491b      	ldr	r1, [pc, #108]	; (80015b4 <main+0xbc>)
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <main+0xb8>)
 8001548:	f001 fe68 	bl	800321c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800154c:	213c      	movs	r1, #60	; 0x3c
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <main+0xc0>)
 8001550:	f005 f83e 	bl	80065d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001554:	4819      	ldr	r0, [pc, #100]	; (80015bc <main+0xc4>)
 8001556:	f004 fda9 	bl	80060ac <HAL_TIM_Base_Start_IT>
	TIM3->CNT=TIM3->ARR/2;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <main+0xc8>)
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <main+0xc8>)
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	6253      	str	r3, [r2, #36]	; 0x24
	shellInit();
 8001564:	f000 fa28 	bl	80019b8 <shellInit>
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <main+0xcc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <main+0x90>
			if(shellGetChar()){
 8001570:	f000 fa5a 	bl	8001a28 <shellGetChar>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <main+0x8a>
				shellExec();
 800157a:	f000 fac9 	bl	8001b10 <shellExec>
				shellPrompt();
 800157e:	f000 fa33 	bl	80019e8 <shellPrompt>
			}
			uartRxReceived = 0;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <main+0xcc>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
		}
		if (adcDMAflag)
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <main+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0eb      	beq.n	8001568 <main+0x70>
		{
			if (startFlag){
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <main+0xd4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <main+0xa4>
				asserCurrent();
 8001598:	f000 f932 	bl	8001800 <asserCurrent>
			}
			adcDMAflag=0;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <main+0xd0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
		if(uartRxReceived){
 80015a2:	e7e1      	b.n	8001568 <main+0x70>
 80015a4:	20000510 	.word	0x20000510
 80015a8:	20000558 	.word	0x20000558
 80015ac:	20000428 	.word	0x20000428
 80015b0:	20000238 	.word	0x20000238
 80015b4:	20000204 	.word	0x20000204
 80015b8:	20000474 	.word	0x20000474
 80015bc:	200004c0 	.word	0x200004c0
 80015c0:	40000400 	.word	0x40000400
 80015c4:	2000050c 	.word	0x2000050c
 80015c8:	2000022c 	.word	0x2000022c
 80015cc:	20000310 	.word	0x20000310

080015d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2238      	movs	r2, #56	; 0x38
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 fc08 	bl	8009df4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 fc2a 	bl	8004e4c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001602:	2302      	movs	r3, #2
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001606:	2303      	movs	r3, #3
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800160a:	2306      	movs	r3, #6
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800160e:	2355      	movs	r3, #85	; 0x55
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001612:	2302      	movs	r3, #2
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001616:	2302      	movs	r3, #2
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800161a:	2302      	movs	r3, #2
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fcc6 	bl	8004fb4 <HAL_RCC_OscConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800162e:	f000 f84f 	bl	80016d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2303      	movs	r3, #3
 8001638:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2104      	movs	r1, #4
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ffca 	bl	80055e4 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8001656:	f000 f83b 	bl	80016d0 <Error_Handler>
	}
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	; 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Use the interruption on the blue Button to lunch the power module according to the datasheet
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin== BUTTON_Pin)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_EXTI_Callback+0x16>
	{
		motorPowerOn();
 8001674:	f000 f832 	bl	80016dc <motorPowerOn>
	}

}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a measure of the incremental encoder wired to TIM3 and put the counter on the middle value for the next measure
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */


	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d102      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 8001692:	f001 f979 	bl	8002988 <HAL_IncTick>
	else if (htim->Instance == TIM5){
		codeurValue= TIM3->CNT;
		TIM3->CNT = TIM3->ARR/2;
	}
	/* USER CODE END Callback 1 */
}
 8001696:	e00e      	b.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim->Instance == TIM5){
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d109      	bne.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x36>
		codeurValue= TIM3->CNT;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016aa:	601a      	str	r2, [r3, #0]
		TIM3->CNT = TIM3->ARR/2;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40001000 	.word	0x40001000
 80016c4:	40000c00 	.word	0x40000c00
 80016c8:	40000400 	.word	0x40000400
 80016cc:	2000030c 	.word	0x2000030c

080016d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <motorPowerOn>:

/**
 * @brief  Switch on the motor driver
 * @retval None
 */
void motorPowerOn(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80016e2:	2120      	movs	r1, #32
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f003 fb7e 	bl	8004de8 <HAL_GPIO_TogglePin>
	//Phase de démarage//
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET );
 80016ec:	2201      	movs	r2, #1
 80016ee:	2108      	movs	r1, #8
 80016f0:	481b      	ldr	r0, [pc, #108]	; (8001760 <motorPowerOn+0x84>)
 80016f2:	f003 fb61 	bl	8004db8 <HAL_GPIO_WritePin>
	setAlpha(50);
 80016f6:	2032      	movs	r0, #50	; 0x32
 80016f8:	f000 f85a 	bl	80017b0 <setAlpha>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 80016fc:	2100      	movs	r1, #0
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <motorPowerOn+0x88>)
 8001700:	f004 fdae 	bl	8006260 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	4817      	ldr	r0, [pc, #92]	; (8001764 <motorPowerOn+0x88>)
 8001708:	f006 f856 	bl	80077b8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2 );
 800170c:	2104      	movs	r1, #4
 800170e:	4815      	ldr	r0, [pc, #84]	; (8001764 <motorPowerOn+0x88>)
 8001710:	f004 fda6 	bl	8006260 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001714:	2104      	movs	r1, #4
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <motorPowerOn+0x88>)
 8001718:	f006 f84e 	bl	80077b8 <HAL_TIMEx_PWMN_Start>


	int i=0;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
	while (i<33)
 8001720:	e002      	b.n	8001728 <motorPowerOn+0x4c>
	{
		i++;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3301      	adds	r3, #1
 8001726:	607b      	str	r3, [r7, #4]
	while (i<33)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b20      	cmp	r3, #32
 800172c:	ddf9      	ble.n	8001722 <motorPowerOn+0x46>
	}
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2108      	movs	r1, #8
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <motorPowerOn+0x84>)
 8001734:	f003 fb40 	bl	8004db8 <HAL_GPIO_WritePin>

	consignCurrent=0;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <motorPowerOn+0x8c>)
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
	startFlag=1;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <motorPowerOn+0x90>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
	alphaKiOld=0.5;
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <motorPowerOn+0x94>)
 8001748:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800174c:	601a      	str	r2, [r3, #0]
	epsOld=0;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <motorPowerOn+0x98>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]


}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	48000800 	.word	0x48000800
 8001764:	200003dc 	.word	0x200003dc
 8001768:	20000308 	.word	0x20000308
 800176c:	20000310 	.word	0x20000310
 8001770:	20000000 	.word	0x20000000
 8001774:	2000031c 	.word	0x2000031c

08001778 <motorPowerOff>:

/**
 * @brief  Switch off the motor driver
 * @retval None
 */
void motorPowerOff(void){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800177c:	2120      	movs	r1, #32
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f003 fb31 	bl	8004de8 <HAL_GPIO_TogglePin>
	startFlag=0;
 8001786:	4b02      	ldr	r3, [pc, #8]	; (8001790 <motorPowerOff+0x18>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000310 	.word	0x20000310

08001794 <motorSetSpeed>:
/**
 * @brief  Set the motor speed
 * @param  speed : target speed of the motor
 * @retval None
 */
void motorSetSpeed(int speed){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800179c:	2120      	movs	r1, #32
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f003 fb21 	bl	8004de8 <HAL_GPIO_TogglePin>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <setAlpha>:
 * @brief  Set the dutyCycle
 * @param  alpha : target alpha of the Transitors
 * @retval None
 */
void setAlpha(int alpha1)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	TIM1->CCR1=alpha1*(TIM1->ARR)/100;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <setAlpha+0x48>)
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	fb02 f303 	mul.w	r3, r2, r3
 80017c2:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <setAlpha+0x48>)
 80017c4:	490d      	ldr	r1, [pc, #52]	; (80017fc <setAlpha+0x4c>)
 80017c6:	fba1 1303 	umull	r1, r3, r1, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=(100-alpha1)*(TIM1->ARR)/100;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <setAlpha+0x48>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <setAlpha+0x48>)
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <setAlpha+0x4c>)
 80017e2:	fba1 1303 	umull	r1, r3, r1, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	51eb851f 	.word	0x51eb851f

08001800 <asserCurrent>:
/**
 * @brief Set the duty cycle thanks to a PI regulation to match with the wanted value.
 * It use a parallel PI regulation
 */
void asserCurrent (void)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	meanADCValue();
 8001806:	f7ff fd43 	bl	8001290 <meanADCValue>

	float eps= consignCurrent - hallCurrentValue;
 800180a:	4b61      	ldr	r3, [pc, #388]	; (8001990 <asserCurrent+0x190>)
 800180c:	ed93 7a00 	vldr	s14, [r3]
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <asserCurrent+0x194>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Proportional part
	if (Kp*eps < 0){
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe feca 	bl	80005b8 <__aeabi_f2d>
 8001824:	a356      	add	r3, pc, #344	; (adr r3, 8001980 <asserCurrent+0x180>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff1d 	bl	8000668 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f7ff f985 	bl	8000b4c <__aeabi_dcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <asserCurrent+0x52>
		alphaKp=0.0;
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <asserCurrent+0x198>)
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e021      	b.n	8001896 <asserCurrent+0x96>
	}
	else if (Kp*eps > 1) {
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe feb0 	bl	80005b8 <__aeabi_f2d>
 8001858:	a349      	add	r3, pc, #292	; (adr r3, 8001980 <asserCurrent+0x180>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe ff03 	bl	8000668 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <asserCurrent+0x19c>)
 8001870:	f7ff f98a 	bl	8000b88 <__aeabi_dcmpgt>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <asserCurrent+0x84>
		alphaKp=1.0;
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <asserCurrent+0x198>)
 800187c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e008      	b.n	8001896 <asserCurrent+0x96>
	}
	else {
		alphaKp=eps*(float)Kp;
 8001884:	edd7 7a01 	vldr	s15, [r7, #4]
 8001888:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80019a0 <asserCurrent+0x1a0>
 800188c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001890:	4b41      	ldr	r3, [pc, #260]	; (8001998 <asserCurrent+0x198>)
 8001892:	edc3 7a00 	vstr	s15, [r3]
	}

	// Integral part

	alphaKi=alphaKiOld+((Ki*Te)/2)*(eps+epsOld);
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <asserCurrent+0x1a4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe8c 	bl	80005b8 <__aeabi_f2d>
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <asserCurrent+0x1a8>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	ee17 0a90 	vmov	r0, s15
 80018b6:	f7fe fe7f 	bl	80005b8 <__aeabi_f2d>
 80018ba:	a333      	add	r3, pc, #204	; (adr r3, 8001988 <asserCurrent+0x188>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fed2 	bl	8000668 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe fd16 	bl	80002fc <__adddf3>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f9be 	bl	8000c58 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a33      	ldr	r2, [pc, #204]	; (80019ac <asserCurrent+0x1ac>)
 80018e0:	6013      	str	r3, [r2, #0]
	if (alphaKi < 0){
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <asserCurrent+0x1ac>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d504      	bpl.n	80018fc <asserCurrent+0xfc>
		alphaKi=0.0;
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <asserCurrent+0x1ac>)
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00d      	b.n	8001918 <asserCurrent+0x118>
	}
	else if (alphaKi > 1) {
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <asserCurrent+0x1ac>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	dd03      	ble.n	8001918 <asserCurrent+0x118>
		alphaKi=1.0;
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <asserCurrent+0x1ac>)
 8001912:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001916:	601a      	str	r2, [r3, #0]
	}

	alphaKiOld=alphaKi;
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <asserCurrent+0x1ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <asserCurrent+0x1a4>)
 800191e:	6013      	str	r3, [r2, #0]
	epsOld=eps;
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <asserCurrent+0x1a8>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]

	// Summ of the two coeff

	alpha=(int)((alphaKi+alphaKp)*100);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <asserCurrent+0x1ac>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <asserCurrent+0x198>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019b0 <asserCurrent+0x1b0>
 800193a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001942:	ee17 2a90 	vmov	r2, s15
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <asserCurrent+0x1b4>)
 8001948:	601a      	str	r2, [r3, #0]

	if (alpha < 0){
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <asserCurrent+0x1b4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da03      	bge.n	800195a <asserCurrent+0x15a>
		alpha=0;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <asserCurrent+0x1b4>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e006      	b.n	8001968 <asserCurrent+0x168>
	}
	else if (alpha > 100) {
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <asserCurrent+0x1b4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	dd02      	ble.n	8001968 <asserCurrent+0x168>
		alpha=100;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <asserCurrent+0x1b4>)
 8001964:	2264      	movs	r2, #100	; 0x64
 8001966:	601a      	str	r2, [r3, #0]
	}
	setAlpha(alpha);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <asserCurrent+0x1b4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff1f 	bl	80017b0 <setAlpha>

}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bdb0      	pop	{r4, r5, r7, pc}
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	eb1c432d 	.word	0xeb1c432d
 8001984:	3f2a36e2 	.word	0x3f2a36e2
 8001988:	bc6a7efa 	.word	0xbc6a7efa
 800198c:	3f189374 	.word	0x3f189374
 8001990:	20000308 	.word	0x20000308
 8001994:	20000234 	.word	0x20000234
 8001998:	20000314 	.word	0x20000314
 800199c:	3ff00000 	.word	0x3ff00000
 80019a0:	3951b717 	.word	0x3951b717
 80019a4:	20000000 	.word	0x20000000
 80019a8:	2000031c 	.word	0x2000031c
 80019ac:	20000318 	.word	0x20000318
 80019b0:	42c80000 	.word	0x42c80000
 80019b4:	20000004 	.word	0x20000004

080019b8 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	226c      	movs	r2, #108	; 0x6c
 80019c2:	4906      	ldr	r1, [pc, #24]	; (80019dc <shellInit+0x24>)
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <shellInit+0x28>)
 80019c6:	f006 f9bc 	bl	8007d42 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	221a      	movs	r2, #26
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <shellInit+0x2c>)
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <shellInit+0x28>)
 80019d4:	f006 f9b5 	bl	8007d42 <HAL_UART_Transmit>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800e4c8 	.word	0x0800e4c8
 80019e0:	20000558 	.word	0x20000558
 80019e4:	0800e4ac 	.word	0x0800e4ac

080019e8 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	221a      	movs	r2, #26
 80019f2:	4903      	ldr	r1, [pc, #12]	; (8001a00 <shellPrompt+0x18>)
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <shellPrompt+0x1c>)
 80019f6:	f006 f9a4 	bl	8007d42 <HAL_UART_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800e4ac 	.word	0x0800e4ac
 8001a04:	20000558 	.word	0x20000558

08001a08 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	2214      	movs	r2, #20
 8001a12:	4903      	ldr	r1, [pc, #12]	; (8001a20 <shellCmdNotFound+0x18>)
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <shellCmdNotFound+0x1c>)
 8001a16:	f006 f994 	bl	8007d42 <HAL_UART_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	0800e7a8 	.word	0x0800e7a8
 8001a24:	20000558 	.word	0x20000558

08001a28 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <shellGetChar+0xc8>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b0d      	cmp	r3, #13
 8001a38:	d002      	beq.n	8001a40 <shellGetChar+0x18>
 8001a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a3c:	d02f      	beq.n	8001a9e <shellGetChar+0x76>
 8001a3e:	e040      	b.n	8001ac2 <shellGetChar+0x9a>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	2203      	movs	r2, #3
 8001a46:	492b      	ldr	r1, [pc, #172]	; (8001af4 <shellGetChar+0xcc>)
 8001a48:	482b      	ldr	r0, [pc, #172]	; (8001af8 <shellGetChar+0xd0>)
 8001a4a:	f006 f97a 	bl	8007d42 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <shellGetChar+0xd4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <shellGetChar+0xd8>)
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <shellGetChar+0xdc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001a60:	4929      	ldr	r1, [pc, #164]	; (8001b08 <shellGetChar+0xe0>)
 8001a62:	4827      	ldr	r0, [pc, #156]	; (8001b00 <shellGetChar+0xd8>)
 8001a64:	f009 fcba 	bl	800b3dc <strtok>
 8001a68:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001a6a:	e00f      	b.n	8001a8c <shellGetChar+0x64>
			argv[argc++] = token;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <shellGetChar+0xdc>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	b2d1      	uxtb	r1, r2
 8001a74:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <shellGetChar+0xdc>)
 8001a76:	7011      	strb	r1, [r2, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <shellGetChar+0xe4>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001a82:	4921      	ldr	r1, [pc, #132]	; (8001b08 <shellGetChar+0xe0>)
 8001a84:	2000      	movs	r0, #0
 8001a86:	f009 fca9 	bl	800b3dc <strtok>
 8001a8a:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ec      	bne.n	8001a6c <shellGetChar+0x44>
		}

		idxCmd = 0;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <shellGetChar+0xd4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
		break;
 8001a9c:	e023      	b.n	8001ae6 <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <shellGetChar+0xd4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1e5a      	subs	r2, r3, #1
 8001aa4:	b2d1      	uxtb	r1, r2
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <shellGetChar+0xd4>)
 8001aa8:	7011      	strb	r1, [r2, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <shellGetChar+0xd8>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	490d      	ldr	r1, [pc, #52]	; (8001af0 <shellGetChar+0xc8>)
 8001aba:	480f      	ldr	r0, [pc, #60]	; (8001af8 <shellGetChar+0xd0>)
 8001abc:	f006 f941 	bl	8007d42 <HAL_UART_Transmit>
		break;
 8001ac0:	e011      	b.n	8001ae6 <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <shellGetChar+0xd4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	b2d1      	uxtb	r1, r2
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <shellGetChar+0xd4>)
 8001acc:	7011      	strb	r1, [r2, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <shellGetChar+0xc8>)
 8001ad2:	7819      	ldrb	r1, [r3, #0]
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <shellGetChar+0xd8>)
 8001ad6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	2201      	movs	r2, #1
 8001ade:	4904      	ldr	r1, [pc, #16]	; (8001af0 <shellGetChar+0xc8>)
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <shellGetChar+0xd0>)
 8001ae2:	f006 f92e 	bl	8007d42 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000510 	.word	0x20000510
 8001af4:	0800e534 	.word	0x0800e534
 8001af8:	20000558 	.word	0x20000558
 8001afc:	20000360 	.word	0x20000360
 8001b00:	20000320 	.word	0x20000320
 8001b04:	20000388 	.word	0x20000388
 8001b08:	0800e410 	.word	0x0800e410
 8001b0c:	20000364 	.word	0x20000364

08001b10 <shellExec>:
  * use the "set current" command to set the current value that you want.
  * use the "measure current [float]" command to display the current value.
  * use the "measure speed" commande to display the speed of the motor.
  * @retval None
  */
void shellExec(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8001b14:	4b93      	ldr	r3, [pc, #588]	; (8001d64 <shellExec+0x254>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4993      	ldr	r1, [pc, #588]	; (8001d68 <shellExec+0x258>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb80 	bl	8000220 <strcmp>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 809b 	bne.w	8001c5e <shellExec+0x14e>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001b28:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <shellExec+0x254>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	498f      	ldr	r1, [pc, #572]	; (8001d6c <shellExec+0x25c>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb76 	bl	8000220 <strcmp>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d137      	bne.n	8001baa <shellExec+0x9a>
 8001b3a:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <shellExec+0x254>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	498c      	ldr	r1, [pc, #560]	; (8001d70 <shellExec+0x260>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb6d 	bl	8000220 <strcmp>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <shellExec+0x4e>
 8001b4c:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <shellExec+0x254>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4988      	ldr	r1, [pc, #544]	; (8001d74 <shellExec+0x264>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fb64 	bl	8000220 <strcmp>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d125      	bne.n	8001baa <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <shellExec+0x254>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f008 f917 	bl	8009d96 <atoi>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2120      	movs	r1, #32
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f003 f920 	bl	8004db8 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <shellExec+0x254>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f008 f90a 	bl	8009d96 <atoi>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a7c      	ldr	r2, [pc, #496]	; (8001d78 <shellExec+0x268>)
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	487c      	ldr	r0, [pc, #496]	; (8001d7c <shellExec+0x26c>)
 8001b8a:	f008 fda5 	bl	800a6d8 <sniprintf>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <shellExec+0x270>)
 8001b94:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <shellExec+0x270>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	4976      	ldr	r1, [pc, #472]	; (8001d7c <shellExec+0x26c>)
 8001ba2:	4878      	ldr	r0, [pc, #480]	; (8001d84 <shellExec+0x274>)
 8001ba4:	f006 f8cd 	bl	8007d42 <HAL_UART_Transmit>
 8001ba8:	e0d9      	b.n	8001d5e <shellExec+0x24e>
		}
		else if(strcmp(argv[1],"speed")==0){
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <shellExec+0x254>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4976      	ldr	r1, [pc, #472]	; (8001d88 <shellExec+0x278>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb35 	bl	8000220 <strcmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d122      	bne.n	8001c02 <shellExec+0xf2>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <shellExec+0x254>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f008 f8e8 	bl	8009d96 <atoi>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d110      	bne.n	8001bee <shellExec+0xde>
 8001bcc:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <shellExec+0x254>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4967      	ldr	r1, [pc, #412]	; (8001d70 <shellExec+0x260>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fb24 	bl	8000220 <strcmp>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <shellExec+0xde>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	2230      	movs	r2, #48	; 0x30
 8001be4:	4969      	ldr	r1, [pc, #420]	; (8001d8c <shellExec+0x27c>)
 8001be6:	4867      	ldr	r0, [pc, #412]	; (8001d84 <shellExec+0x274>)
 8001be8:	f006 f8ab 	bl	8007d42 <HAL_UART_Transmit>
 8001bec:	e0b7      	b.n	8001d5e <shellExec+0x24e>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <shellExec+0x254>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 f8cf 	bl	8009d96 <atoi>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fdca 	bl	8001794 <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8001c00:	e0ad      	b.n	8001d5e <shellExec+0x24e>
		else if(strcmp(argv[1],"alpha")==0){
 8001c02:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <shellExec+0x254>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4962      	ldr	r1, [pc, #392]	; (8001d90 <shellExec+0x280>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fb09 	bl	8000220 <strcmp>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <shellExec+0x118>
			setAlpha(atoi(argv[2]));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <shellExec+0x254>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 f8bc 	bl	8009d96 <atoi>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fdc5 	bl	80017b0 <setAlpha>
}
 8001c26:	e09a      	b.n	8001d5e <shellExec+0x24e>
		else if(strcmp(argv[1],"current")==0){
 8001c28:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <shellExec+0x254>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4959      	ldr	r1, [pc, #356]	; (8001d94 <shellExec+0x284>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe faf6 	bl	8000220 <strcmp>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10e      	bne.n	8001c58 <shellExec+0x148>
					consignCurrent=(atof(argv[2]));
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <shellExec+0x254>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f008 f8a6 	bl	8009d90 <atof>
 8001c44:	ec53 2b10 	vmov	r2, r3, d0
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7ff f804 	bl	8000c58 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <shellExec+0x288>)
 8001c54:	6013      	str	r3, [r2, #0]
}
 8001c56:	e082      	b.n	8001d5e <shellExec+0x24e>
			shellCmdNotFound();
 8001c58:	f7ff fed6 	bl	8001a08 <shellCmdNotFound>
}
 8001c5c:	e07f      	b.n	8001d5e <shellExec+0x24e>
	else if (strcmp(argv[0],"measure")==0)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <shellExec+0x254>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	494e      	ldr	r1, [pc, #312]	; (8001d9c <shellExec+0x28c>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fadb 	bl	8000220 <strcmp>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d117      	bne.n	8001ca0 <shellExec+0x190>
		if(strcmp(argv[1],"current")==0){
 8001c70:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <shellExec+0x254>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4947      	ldr	r1, [pc, #284]	; (8001d94 <shellExec+0x284>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fad2 	bl	8000220 <strcmp>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <shellExec+0x178>
			uartPrintADCValue();
 8001c82:	f000 fda3 	bl	80027cc <uartPrintADCValue>
}
 8001c86:	e06a      	b.n	8001d5e <shellExec+0x24e>
		else if (strcmp(argv[1],"speed")==0){
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <shellExec+0x254>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	493e      	ldr	r1, [pc, #248]	; (8001d88 <shellExec+0x278>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fac6 	bl	8000220 <strcmp>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d161      	bne.n	8001d5e <shellExec+0x24e>
			uartPrintSpeed();
 8001c9a:	f000 fdb9 	bl	8002810 <uartPrintSpeed>
}
 8001c9e:	e05e      	b.n	8001d5e <shellExec+0x24e>
	else if(strcmp(argv[0],"help")==0)
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <shellExec+0x254>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	493e      	ldr	r1, [pc, #248]	; (8001da0 <shellExec+0x290>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe faba 	bl	8000220 <strcmp>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <shellExec+0x1b4>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cba:	493a      	ldr	r1, [pc, #232]	; (8001da4 <shellExec+0x294>)
 8001cbc:	4831      	ldr	r0, [pc, #196]	; (8001d84 <shellExec+0x274>)
 8001cbe:	f006 f840 	bl	8007d42 <HAL_UART_Transmit>
}
 8001cc2:	e04c      	b.n	8001d5e <shellExec+0x24e>
	else if(strcmp(argv[0],"pinout")==0)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <shellExec+0x254>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4937      	ldr	r1, [pc, #220]	; (8001da8 <shellExec+0x298>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe faa8 	bl	8000220 <strcmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <shellExec+0x1d8>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001cde:	4933      	ldr	r1, [pc, #204]	; (8001dac <shellExec+0x29c>)
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <shellExec+0x274>)
 8001ce2:	f006 f82e 	bl	8007d42 <HAL_UART_Transmit>
}
 8001ce6:	e03a      	b.n	8001d5e <shellExec+0x24e>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <shellExec+0x254>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4930      	ldr	r1, [pc, #192]	; (8001db0 <shellExec+0x2a0>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa96 	bl	8000220 <strcmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d112      	bne.n	8001d20 <shellExec+0x210>
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <shellExec+0x254>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	492d      	ldr	r1, [pc, #180]	; (8001db4 <shellExec+0x2a4>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa8d 	bl	8000220 <strcmp>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <shellExec+0x210>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	221a      	movs	r2, #26
 8001d12:	4929      	ldr	r1, [pc, #164]	; (8001db8 <shellExec+0x2a8>)
 8001d14:	481b      	ldr	r0, [pc, #108]	; (8001d84 <shellExec+0x274>)
 8001d16:	f006 f814 	bl	8007d42 <HAL_UART_Transmit>
		motorPowerOn();
 8001d1a:	f7ff fcdf 	bl	80016dc <motorPowerOn>
 8001d1e:	e01e      	b.n	8001d5e <shellExec+0x24e>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <shellExec+0x254>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4922      	ldr	r1, [pc, #136]	; (8001db0 <shellExec+0x2a0>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa7a 	bl	8000220 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <shellExec+0x248>
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <shellExec+0x254>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4921      	ldr	r1, [pc, #132]	; (8001dbc <shellExec+0x2ac>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fa71 	bl	8000220 <strcmp>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <shellExec+0x248>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	221b      	movs	r2, #27
 8001d4a:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <shellExec+0x2b0>)
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <shellExec+0x274>)
 8001d4e:	f005 fff8 	bl	8007d42 <HAL_UART_Transmit>
		motorPowerOff();
 8001d52:	f7ff fd11 	bl	8001778 <motorPowerOff>
 8001d56:	e002      	b.n	8001d5e <shellExec+0x24e>
		shellCmdNotFound();
 8001d58:	f7ff fe56 	bl	8001a08 <shellCmdNotFound>
}
 8001d5c:	e7ff      	b.n	8001d5e <shellExec+0x24e>
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000364 	.word	0x20000364
 8001d68:	0800e414 	.word	0x0800e414
 8001d6c:	0800e418 	.word	0x0800e418
 8001d70:	0800e41c 	.word	0x0800e41c
 8001d74:	0800e420 	.word	0x0800e420
 8001d78:	0800e424 	.word	0x0800e424
 8001d7c:	20000514 	.word	0x20000514
 8001d80:	20000554 	.word	0x20000554
 8001d84:	20000558 	.word	0x20000558
 8001d88:	0800e440 	.word	0x0800e440
 8001d8c:	0800e778 	.word	0x0800e778
 8001d90:	0800e448 	.word	0x0800e448
 8001d94:	0800e450 	.word	0x0800e450
 8001d98:	20000308 	.word	0x20000308
 8001d9c:	0800e458 	.word	0x0800e458
 8001da0:	0800e460 	.word	0x0800e460
 8001da4:	0800e538 	.word	0x0800e538
 8001da8:	0800e468 	.word	0x0800e468
 8001dac:	0800e63c 	.word	0x0800e63c
 8001db0:	0800e470 	.word	0x0800e470
 8001db4:	0800e478 	.word	0x0800e478
 8001db8:	0800e740 	.word	0x0800e740
 8001dbc:	0800e47c 	.word	0x0800e47c
 8001dc0:	0800e75c 	.word	0x0800e75c

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_MspInit+0x44>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_MspInit+0x44>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_MspInit+0x44>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dfa:	f003 f8cb 	bl	8004f94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_InitTick+0xcc>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_InitTick+0xcc>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_InitTick+0xcc>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fda3 	bl	8005990 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e4a:	f003 fd75 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8001e4e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_InitTick+0xd0>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9b      	lsrs	r3, r3, #18
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_InitTick+0xd8>)
 8001e62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e80:	f004 f84c 	bl	8005f1c <HAL_TIM_Base_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11b      	bne.n	8001eca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e92:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <HAL_InitTick+0xd4>)
 8001e94:	f004 f90a 	bl	80060ac <HAL_TIM_Base_Start_IT>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d111      	bne.n	8001eca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ea6:	2036      	movs	r0, #54	; 0x36
 8001ea8:	f002 fac4 	bl	8004434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d808      	bhi.n	8001ec4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	2036      	movs	r0, #54	; 0x36
 8001eb8:	f002 faa2 	bl	8004400 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_InitTick+0xdc>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e002      	b.n	8001eca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3730      	adds	r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	2000038c 	.word	0x2000038c
 8001ee4:	40001000 	.word	0x40001000
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <DMA1_Channel1_IRQHandler+0x10>)
 8001f4a:	f002 fc64 	bl	8004816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002a4 	.word	0x200002a4

08001f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <USART2_IRQHandler+0x10>)
 8001f5e:	f005 ffdd 	bl	8007f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000558 	.word	0x20000558

08001f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f74:	f002 ff52 	bl	8004e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM5_IRQHandler+0x10>)
 8001f82:	f004 fbb3 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200004c0 	.word	0x200004c0

08001f90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM6_DAC_IRQHandler+0x10>)
 8001f96:	f004 fba9 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000038c 	.word	0x2000038c

08001fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_kill>:

int _kill(int pid, int sig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fbe:	f007 feef 	bl	8009da0 <__errno>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_exit>:

void _exit (int status)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fe6:	e7fe      	b.n	8001fe6 <_exit+0x12>

08001fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffa:	f3af 8000 	nop.w
 8001ffe:	4601      	mov	r1, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf0      	blt.n	8001ffa <_read+0x12>
	}

return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e009      	b.n	8002048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf1      	blt.n	8002034 <_write+0x12>
	}
	return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_close>:

int _close(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002082:	605a      	str	r2, [r3, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_isatty>:

int _isatty(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return 1;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f007 fe54 	bl	8009da0 <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20020000 	.word	0x20020000
 8002124:	00000400 	.word	0x00000400
 8002128:	200003d8 	.word	0x200003d8
 800212c:	20000600 	.word	0x20000600

08002130 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b09c      	sub	sp, #112	; 0x70
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2234      	movs	r2, #52	; 0x34
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f007 fe30 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <MX_TIM1_Init+0x178>)
 8002196:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <MX_TIM1_Init+0x17c>)
 8002198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <MX_TIM1_Init+0x178>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <MX_TIM1_Init+0x178>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <MX_TIM1_Init+0x178>)
 80021a8:	f241 42bf 	movw	r2, #5311	; 0x14bf
 80021ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <MX_TIM1_Init+0x178>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021b4:	4b45      	ldr	r3, [pc, #276]	; (80022cc <MX_TIM1_Init+0x178>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ba:	4b44      	ldr	r3, [pc, #272]	; (80022cc <MX_TIM1_Init+0x178>)
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021c0:	4842      	ldr	r0, [pc, #264]	; (80022cc <MX_TIM1_Init+0x178>)
 80021c2:	f003 feab 	bl	8005f1c <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021cc:	f7ff fa80 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021da:	4619      	mov	r1, r3
 80021dc:	483b      	ldr	r0, [pc, #236]	; (80022cc <MX_TIM1_Init+0x178>)
 80021de:	f004 fd19 	bl	8006c14 <HAL_TIM_ConfigClockSource>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80021e8:	f7ff fa72 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021ec:	4837      	ldr	r0, [pc, #220]	; (80022cc <MX_TIM1_Init+0x178>)
 80021ee:	f003 ffd5 	bl	800619c <HAL_TIM_PWM_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80021f8:	f7ff fa6a 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800220c:	4619      	mov	r1, r3
 800220e:	482f      	ldr	r0, [pc, #188]	; (80022cc <MX_TIM1_Init+0x178>)
 8002210:	f005 fb94 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800221a:	f7ff fa59 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800221e:	2360      	movs	r3, #96	; 0x60
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8002222:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002240:	2200      	movs	r2, #0
 8002242:	4619      	mov	r1, r3
 8002244:	4821      	ldr	r0, [pc, #132]	; (80022cc <MX_TIM1_Init+0x178>)
 8002246:	f004 fbd1 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002250:	f7ff fa3e 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.Pulse = 2655;
 8002254:	f640 235f 	movw	r3, #2655	; 0xa5f
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800225a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800225e:	2204      	movs	r2, #4
 8002260:	4619      	mov	r1, r3
 8002262:	481a      	ldr	r0, [pc, #104]	; (80022cc <MX_TIM1_Init+0x178>)
 8002264:	f004 fbc2 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800226e:	f7ff fa2f 	bl	80016d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 800227e:	23cd      	movs	r3, #205	; 0xcd
 8002280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <MX_TIM1_Init+0x178>)
 80022b0:	f005 fbda 	bl	8007a68 <HAL_TIMEx_ConfigBreakDeadTime>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80022ba:	f7ff fa09 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <MX_TIM1_Init+0x178>)
 80022c0:	f000 f98a 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 80022c4:	bf00      	nop
 80022c6:	3770      	adds	r7, #112	; 0x70
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200003dc 	.word	0x200003dc
 80022d0:	40012c00 	.word	0x40012c00

080022d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_TIM2_Init+0x98>)
 80022f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM2_Init+0x98>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM2_Init+0x98>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1062;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_TIM2_Init+0x98>)
 8002308:	f240 4226 	movw	r2, #1062	; 0x426
 800230c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_TIM2_Init+0x98>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM2_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <MX_TIM2_Init+0x98>)
 800231c:	f003 fdfe 	bl	8005f1c <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002326:	f7ff f9d3 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM2_Init+0x98>)
 8002338:	f004 fc6c 	bl	8006c14 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002342:	f7ff f9c5 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002346:	2320      	movs	r3, #32
 8002348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM2_Init+0x98>)
 8002354:	f005 faf2 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800235e:	f7ff f9b7 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000428 	.word	0x20000428

08002370 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f007 fd38 	bl	8009df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_TIM3_Init+0xa4>)
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <MX_TIM3_Init+0xa8>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <MX_TIM3_Init+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_TIM3_Init+0xa4>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <MX_TIM3_Init+0xa4>)
 80023a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_TIM3_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <MX_TIM3_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023b4:	2303      	movs	r3, #3
 80023b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023bc:	2301      	movs	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023cc:	2301      	movs	r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	4619      	mov	r1, r3
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_TIM3_Init+0xa4>)
 80023e0:	f004 f850 	bl	8006484 <HAL_TIM_Encoder_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80023ea:	f7ff f971 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f6:	463b      	mov	r3, r7
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <MX_TIM3_Init+0xa4>)
 80023fc:	f005 fa9e 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002406:	f7ff f963 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	3730      	adds	r7, #48	; 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000474 	.word	0x20000474
 8002418:	40000400 	.word	0x40000400

0800241c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_TIM5_Init+0x94>)
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <MX_TIM5_Init+0x98>)
 800243e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_TIM5_Init+0x94>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_TIM5_Init+0x94>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.6999999E7;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_TIM5_Init+0x94>)
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <MX_TIM5_Init+0x9c>)
 8002450:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_TIM5_Init+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_TIM5_Init+0x94>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800245e:	4814      	ldr	r0, [pc, #80]	; (80024b0 <MX_TIM5_Init+0x94>)
 8002460:	f003 fd5c 	bl	8005f1c <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800246a:	f7ff f931 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_TIM5_Init+0x94>)
 800247c:	f004 fbca 	bl	8006c14 <HAL_TIM_ConfigClockSource>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002486:	f7ff f923 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_TIM5_Init+0x94>)
 8002498:	f005 fa50 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80024a2:	f7ff f915 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200004c0 	.word	0x200004c0
 80024b4:	40000c00 	.word	0x40000c00
 80024b8:	0103663f 	.word	0x0103663f

080024bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_TIM_Base_MspInit+0x8c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 80024d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024d8:	6613      	str	r3, [r2, #96]	; 0x60
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024e6:	e02a      	b.n	800253e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d10c      	bne.n	800250c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a15      	ldr	r2, [pc, #84]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
}
 800250a:	e018      	b.n	800253e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_TIM_Base_MspInit+0x94>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d113      	bne.n	800253e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6593      	str	r3, [r2, #88]	; 0x58
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_TIM_Base_MspInit+0x90>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2032      	movs	r0, #50	; 0x32
 8002534:	f001 ff64 	bl	8004400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f001 ff7b 	bl	8004434 <HAL_NVIC_EnableIRQ>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40000c00 	.word	0x40000c00

08002554 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d128      	bne.n	80025c8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80025a6:	2350      	movs	r3, #80	; 0x50
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025b6:	2302      	movs	r3, #2
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c4:	f002 fa76 	bl	8004ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_TIM_MspPostInit+0x68>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11d      	bne.n	8002636 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a11      	ldr	r2, [pc, #68]	; (8002644 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002612:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002624:	2306      	movs	r3, #6
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f002 fa3f 	bl	8004ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_UART_RxCpltCallback+0x20>)
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002656:	2201      	movs	r2, #1
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_UART_RxCpltCallback+0x24>)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <HAL_UART_RxCpltCallback+0x28>)
 800265c:	f005 fc08 	bl	8007e70 <HAL_UART_Receive_IT>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000050c 	.word	0x2000050c
 800266c:	20000510 	.word	0x20000510
 8002670:	20000558 	.word	0x20000558

08002674 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <MX_USART2_UART_Init+0x90>)
 800267a:	4a23      	ldr	r2, [pc, #140]	; (8002708 <MX_USART2_UART_Init+0x94>)
 800267c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <MX_USART2_UART_Init+0x90>)
 8002680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <MX_USART2_UART_Init+0x90>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_USART2_UART_Init+0x90>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_USART2_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_USART2_UART_Init+0x90>)
 800269a:	220c      	movs	r2, #12
 800269c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026bc:	4811      	ldr	r0, [pc, #68]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026be:	f005 faf0 	bl	8007ca2 <HAL_UART_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026c8:	f7ff f802 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026cc:	2100      	movs	r1, #0
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026d0:	f007 fa93 	bl	8009bfa <HAL_UARTEx_SetTxFifoThreshold>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026da:	f7fe fff9 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026de:	2100      	movs	r1, #0
 80026e0:	4808      	ldr	r0, [pc, #32]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026e2:	f007 fac8 	bl	8009c76 <HAL_UARTEx_SetRxFifoThreshold>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026ec:	f7fe fff0 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <MX_USART2_UART_Init+0x90>)
 80026f2:	f007 fa49 	bl	8009b88 <HAL_UARTEx_DisableFifoMode>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80026fc:	f7fe ffe8 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000558 	.word	0x20000558
 8002708:	40004400 	.word	0x40004400

0800270c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b09e      	sub	sp, #120	; 0x78
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	2254      	movs	r2, #84	; 0x54
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f007 fb61 	bl	8009df4 <memset>
  if(uartHandle->Instance==USART2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_UART_MspInit+0xb8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d13e      	bne.n	80027ba <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800273c:	2302      	movs	r3, #2
 800273e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f999 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002754:	f7fe ffbc 	bl	80016d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	6593      	str	r3, [r2, #88]	; 0x58
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_UART_MspInit+0xbc>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002788:	230c      	movs	r3, #12
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002798:	2307      	movs	r3, #7
 800279a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a6:	f002 f985 	bl	8004ab4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2026      	movs	r0, #38	; 0x26
 80027b0:	f001 fe26 	bl	8004400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027b4:	2026      	movs	r0, #38	; 0x26
 80027b6:	f001 fe3d 	bl	8004434 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027ba:	bf00      	nop
 80027bc:	3778      	adds	r7, #120	; 0x78
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40004400 	.word	0x40004400
 80027c8:	40021000 	.word	0x40021000

080027cc <uartPrintADCValue>:
/* USER CODE BEGIN 1 */
/**
 *  @brief Allow to display the current value of the motor using the USART bus
 */
void uartPrintADCValue(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	meanADCValue();
 80027d0:	f7fe fd5e 	bl	8001290 <meanADCValue>
	sprintf(uartTxBuffer,"Current: %.2f A\r\n",hallCurrentValue);
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <uartPrintADCValue+0x30>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd feed 	bl	80005b8 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4907      	ldr	r1, [pc, #28]	; (8002800 <uartPrintADCValue+0x34>)
 80027e4:	4807      	ldr	r0, [pc, #28]	; (8002804 <uartPrintADCValue+0x38>)
 80027e6:	f007 ffab 	bl	800a740 <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <uartPrintADCValue+0x38>)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <uartPrintADCValue+0x3c>)
 80027f4:	f005 faa5 	bl	8007d42 <HAL_UART_Transmit>

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000234 	.word	0x20000234
 8002800:	0800e480 	.word	0x0800e480
 8002804:	20000514 	.word	0x20000514
 8002808:	20000558 	.word	0x20000558
 800280c:	00000000 	.word	0x00000000

08002810 <uartPrintSpeed>:

/**
 *  @brief Allow to display the speed value of the motor using the USART bus
 */
void uartPrintSpeed(void)
{
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	af00      	add	r7, sp, #0
	speed=(codeurValue-((TIM3->ARR)/2.0))*FREQ_ECH_SPEED*60.0/NUMBER_OF_POINT;
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <uartPrintSpeed+0xd0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd febb 	bl	8000594 <__aeabi_i2d>
 800281e:	4604      	mov	r4, r0
 8002820:	460d      	mov	r5, r1
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <uartPrintSpeed+0xd4>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fea4 	bl	8000574 <__aeabi_ui2d>
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002834:	f7fe f842 	bl	80008bc <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fd fd5a 	bl	80002f8 <__aeabi_dsub>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	a322      	add	r3, pc, #136	; (adr r3, 80028d8 <uartPrintSpeed+0xc8>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd ff09 	bl	8000668 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4614      	mov	r4, r2
 800285c:	461d      	mov	r5, r3
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <uartPrintSpeed+0xd8>)
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe86 	bl	8000574 <__aeabi_ui2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4620      	mov	r0, r4
 800286e:	4629      	mov	r1, r5
 8002870:	f7fe f824 	bl	80008bc <__aeabi_ddiv>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <uartPrintSpeed+0xdc>)
 8002882:	f7fd fef1 	bl	8000668 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <uartPrintSpeed+0xe0>)
 8002894:	f7fe f812 	bl	80008bc <__aeabi_ddiv>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f9da 	bl	8000c58 <__aeabi_d2f>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <uartPrintSpeed+0xe4>)
 80028a8:	6013      	str	r3, [r2, #0]
	sprintf(uartTxBuffer,"Speed: %.2f tr/min\r\n",speed);
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <uartPrintSpeed+0xe4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe82 	bl	80005b8 <__aeabi_f2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	490f      	ldr	r1, [pc, #60]	; (80028f8 <uartPrintSpeed+0xe8>)
 80028ba:	4810      	ldr	r0, [pc, #64]	; (80028fc <uartPrintSpeed+0xec>)
 80028bc:	f007 ff40 	bl	800a740 <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	490d      	ldr	r1, [pc, #52]	; (80028fc <uartPrintSpeed+0xec>)
 80028c8:	480d      	ldr	r0, [pc, #52]	; (8002900 <uartPrintSpeed+0xf0>)
 80028ca:	f005 fa3a 	bl	8007d42 <HAL_UART_Transmit>

}
 80028ce:	bf00      	nop
 80028d0:	bdb0      	pop	{r4, r5, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	f3af 8000 	nop.w
 80028d8:	00000000 	.word	0x00000000
 80028dc:	41a443fd 	.word	0x41a443fd
 80028e0:	2000030c 	.word	0x2000030c
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000c00 	.word	0x40000c00
 80028ec:	404e0000 	.word	0x404e0000
 80028f0:	40b00000 	.word	0x40b00000
 80028f4:	20000304 	.word	0x20000304
 80028f8:	0800e494 	.word	0x0800e494
 80028fc:	20000514 	.word	0x20000514
 8002900:	20000558 	.word	0x20000558

08002904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopForever+0x6>)
  ldr r1, =_edata
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <LoopForever+0xe>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002920:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <LoopForever+0x16>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292e:	f7ff fbff 	bl	8002130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f007 fa3b 	bl	8009dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002936:	f7fe fddf 	bl	80014f8 <main>

0800293a <LoopForever>:

LoopForever:
    b LoopForever
 800293a:	e7fe      	b.n	800293a <LoopForever>
  ldr   r0, =_estack
 800293c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002944:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002948:	0800ed08 	.word	0x0800ed08
  ldr r2, =_sbss
 800294c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002950:	200005fc 	.word	0x200005fc

08002954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC1_2_IRQHandler>

08002956 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f001 fd42 	bl	80043ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002966:	200f      	movs	r0, #15
 8002968:	f7ff fa50 	bl	8001e0c <HAL_InitTick>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	e001      	b.n	800297c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002978:	f7ff fa24 	bl	8001dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800297c:	79fb      	ldrb	r3, [r7, #7]

}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_IncTick+0x1c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_IncTick+0x20>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4413      	add	r3, r2
 8002996:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_IncTick+0x1c>)
 8002998:	6013      	str	r3, [r2, #0]
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	200005e8 	.word	0x200005e8
 80029a8:	20000010 	.word	0x20000010

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200005e8 	.word	0x200005e8

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d004      	beq.n	80029e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_Delay+0x40>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e8:	bf00      	nop
 80029ea:	f7ff ffdf 	bl	80029ac <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d8f7      	bhi.n	80029ea <HAL_Delay+0x26>
  {
  }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000010 	.word	0x20000010

08002a08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <LL_ADC_SetOffset+0x44>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	03fff000 	.word	0x03fff000

08002ab8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	615a      	str	r2, [r3, #20]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3330      	adds	r3, #48	; 0x30
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	4413      	add	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	211f      	movs	r1, #31
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 011f 	and.w	r1, r3, #31
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0e5b      	lsrs	r3, r3, #25
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	4413      	add	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	0d1b      	lsrs	r3, r3, #20
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2107      	movs	r1, #7
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0d1b      	lsrs	r3, r3, #20
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10a      	bne.n	8002caa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	407f0000 	.word	0x407f0000

08002cd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6093      	str	r3, [r2, #8]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc4:	f043 0202 	orr.w	r2, r3, #2
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <LL_ADC_IsEnabled+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_ADC_IsEnabled+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d101      	bne.n	8002e16 <LL_ADC_IsDisableOngoing+0x18>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_ADC_IsDisableOngoing+0x1a>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d101      	bne.n	8002e64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1af      	b.n	8003212 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe f94b 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff19 	bl	8002d10 <LL_ADC_IsDeepPowerDownEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff feff 	bl	8002cec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff34 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d115      	bne.n	8002f2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff18 	bl	8002d38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f08:	4b9f      	ldr	r3, [pc, #636]	; (8003188 <HAL_ADC_Init+0x2f0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	4a9f      	ldr	r2, [pc, #636]	; (800318c <HAL_ADC_Init+0x2f4>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff16 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff76 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8002f60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 8148 	bne.w	8003200 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8144 	bne.w	8003200 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f80:	f043 0202 	orr.w	r2, r3, #2
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff23 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d141      	bne.n	800301c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_Init+0x114>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_ADC_Init+0x2f8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d10f      	bne.n	8002fcc <HAL_ADC_Init+0x134>
 8002fac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fb0:	f7ff ff12 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4876      	ldr	r0, [pc, #472]	; (8003190 <HAL_ADC_Init+0x2f8>)
 8002fb8:	f7ff ff0e 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_ADC_Init+0x15a>
 8002fcc:	4871      	ldr	r0, [pc, #452]	; (8003194 <HAL_ADC_Init+0x2fc>)
 8002fce:	f7ff ff03 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4870      	ldr	r0, [pc, #448]	; (8003198 <HAL_ADC_Init+0x300>)
 8002fd6:	f7ff feff 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	431c      	orrs	r4, r3
 8002fde:	486f      	ldr	r0, [pc, #444]	; (800319c <HAL_ADC_Init+0x304>)
 8002fe0:	f7ff fefa 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4323      	orrs	r3, r4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_Init+0x172>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a62      	ldr	r2, [pc, #392]	; (8003190 <HAL_ADC_Init+0x2f8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_ADC_Init+0x176>
 800300a:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_ADC_Init+0x308>)
 800300c:	e000      	b.n	8003010 <HAL_ADC_Init+0x178>
 800300e:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_ADC_Init+0x30c>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f7ff fcf6 	bl	8002a08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f5b      	ldrb	r3, [r3, #29]
 8003020:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003026:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800302c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003032:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	045b      	lsls	r3, r3, #17
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_ADC_Init+0x310>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fed2 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 80030a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fedf 	bl	8002e72 <LL_ADC_INJ_IsConversionOngoing>
 80030b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d17f      	bne.n	80031bc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d17c      	bne.n	80031bc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003102:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800310c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6911      	ldr	r1, [r2, #16]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003122:	e013      	b.n	800314c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003132:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003148:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	2b01      	cmp	r3, #1
 8003154:	d12a      	bne.n	80031ac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003178:	430a      	orrs	r2, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	611a      	str	r2, [r3, #16]
 8003186:	e019      	b.n	80031bc <HAL_ADC_Init+0x324>
 8003188:	20000008 	.word	0x20000008
 800318c:	053e2d63 	.word	0x053e2d63
 8003190:	50000100 	.word	0x50000100
 8003194:	50000400 	.word	0x50000400
 8003198:	50000500 	.word	0x50000500
 800319c:	50000600 	.word	0x50000600
 80031a0:	50000300 	.word	0x50000300
 80031a4:	50000700 	.word	0x50000700
 80031a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10c      	bne.n	80031de <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f023 010f 	bic.w	r1, r3, #15
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
 80031dc:	e007      	b.n	80031ee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020f 	bic.w	r2, r2, #15
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80031fe:	e007      	b.n	8003210 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003210:	7ffb      	ldrb	r3, [r7, #31]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}
 800321a:	bf00      	nop

0800321c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003230:	d004      	beq.n	800323c <HAL_ADC_Start_DMA+0x20>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <HAL_ADC_Start_DMA+0x184>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_ADC_Start_DMA+0x24>
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_ADC_Start_DMA+0x188>)
 800323e:	e000      	b.n	8003242 <HAL_ADC_Start_DMA+0x26>
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_ADC_Start_DMA+0x18c>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fd44 	bl	8002cd0 <LL_ADC_GetMultimode>
 8003248:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fdfc 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 809b 	bne.w	8003392 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_ADC_Start_DMA+0x4e>
 8003266:	2302      	movs	r3, #2
 8003268:	e096      	b.n	8003398 <HAL_ADC_Start_DMA+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <HAL_ADC_Start_DMA+0x190>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d008      	beq.n	800328e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d002      	beq.n	800328e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b09      	cmp	r3, #9
 800328c:	d17a      	bne.n	8003384 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fcec 	bl	8003c6c <ADC_Enable>
 8003294:	4603      	mov	r3, r0
 8003296:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d16d      	bne.n	800337a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <HAL_ADC_Start_DMA+0x184>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_ADC_Start_DMA+0xb4>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_ADC_Start_DMA+0x194>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d002      	beq.n	80032cc <HAL_ADC_Start_DMA+0xb0>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e003      	b.n	80032d4 <HAL_ADC_Start_DMA+0xb8>
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_ADC_Start_DMA+0x198>)
 80032ce:	e001      	b.n	80032d4 <HAL_ADC_Start_DMA+0xb8>
 80032d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d002      	beq.n	80032e2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d006      	beq.n	8003308 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	f023 0206 	bic.w	r2, r3, #6
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	661a      	str	r2, [r3, #96]	; 0x60
 8003306:	e002      	b.n	800330e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <HAL_ADC_Start_DMA+0x19c>)
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_ADC_Start_DMA+0x1a0>)
 800331c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_ADC_Start_DMA+0x1a4>)
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	221c      	movs	r2, #28
 800332c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0210 	orr.w	r2, r2, #16
 8003344:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3340      	adds	r3, #64	; 0x40
 8003360:	4619      	mov	r1, r3
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f001 f91b 	bl	80045a0 <HAL_DMA_Start_IT>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd56 	bl	8002e24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003378:	e00d      	b.n	8003396 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003382:	e008      	b.n	8003396 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003390:	e001      	b.n	8003396 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	50000100 	.word	0x50000100
 80033a4:	50000300 	.word	0x50000300
 80033a8:	50000700 	.word	0x50000700
 80033ac:	50000600 	.word	0x50000600
 80033b0:	50000500 	.word	0x50000500
 80033b4:	50000400 	.word	0x50000400
 80033b8:	08003def 	.word	0x08003def
 80033bc:	08003ec7 	.word	0x08003ec7
 80033c0:	08003ee3 	.word	0x08003ee3

080033c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0b6      	sub	sp, #216	; 0xd8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x24>
 800340a:	2302      	movs	r3, #2
 800340c:	f000 bc13 	b.w	8003c36 <HAL_ADC_ConfigChannel+0x84a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fd15 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 83f3 	bne.w	8003c10 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f7ff fbcb 	bl	8002bd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fd03 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8003446:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fd0f 	bl	8002e72 <LL_ADC_INJ_IsConversionOngoing>
 8003454:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800345c:	2b00      	cmp	r3, #0
 800345e:	f040 81d9 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 81d4 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003474:	d10f      	bne.n	8003496 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	4619      	mov	r1, r3
 8003482:	f7ff fbd2 	bl	8002c2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fb79 	bl	8002b86 <LL_ADC_SetSamplingTimeCommonConfig>
 8003494:	e00e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fbc1 	bl	8002c2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fb69 	bl	8002b86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d022      	beq.n	800351c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6919      	ldr	r1, [r3, #16]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034e6:	f7ff fac3 	bl	8002a70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff fb0f 	bl	8002b1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	7f1b      	ldrb	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x126>
 800350c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003510:	e000      	b.n	8003514 <HAL_ADC_ConfigChannel+0x128>
 8003512:	2300      	movs	r3, #0
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff fb1b 	bl	8002b50 <LL_ADC_SetOffsetSaturation>
 800351a:	e17b      	b.n	8003814 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fac8 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x15c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fabd 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 800353e:	4603      	mov	r3, r0
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 021f 	and.w	r2, r3, #31
 8003546:	e01e      	b.n	8003586 <HAL_ADC_ConfigChannel+0x19a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fab2 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800356a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800356e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e004      	b.n	8003584 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800357a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_ADC_ConfigChannel+0x1b2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	e018      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x1e4>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80035c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d106      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa81 	bl	8002ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fa65 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <HAL_ADC_ConfigChannel+0x222>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fa5a 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	e01e      	b.n	800364c <HAL_ADC_ConfigChannel+0x260>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fa4f 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800362c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e004      	b.n	800364a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x278>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	e018      	b.n	8003696 <HAL_ADC_ConfigChannel+0x2aa>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800367c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800368c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003696:	429a      	cmp	r2, r3
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fa1e 	bl	8002ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fa02 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x2e8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f9f7 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	e01e      	b.n	8003712 <HAL_ADC_ConfigChannel+0x326>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9ec 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e004      	b.n	8003710 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_ADC_ConfigChannel+0x33e>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	0e9b      	lsrs	r3, r3, #26
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	e016      	b.n	8003758 <HAL_ADC_ConfigChannel+0x36c>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800373c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800373e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e004      	b.n	8003758 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800374e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003758:	429a      	cmp	r2, r3
 800375a:	d106      	bne.n	800376a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f9bd 	bl	8002ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f9a1 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x3aa>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2103      	movs	r1, #3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f996 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	e017      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x3da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2103      	movs	r1, #3
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f98b 	bl	8002ab8 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_ADC_ConfigChannel+0x3f2>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0e9b      	lsrs	r3, r3, #26
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	e011      	b.n	8003802 <HAL_ADC_ConfigChannel+0x416>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e003      	b.n	8003802 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	2103      	movs	r1, #3
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f968 	bl	8002ae4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fadd 	bl	8002dd8 <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 813d 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff fa24 	bl	8002c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4aa2      	ldr	r2, [pc, #648]	; (8003ac8 <HAL_ADC_ConfigChannel+0x6dc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f040 812e 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADC_ConfigChannel+0x480>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2b09      	cmp	r3, #9
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e019      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x4b4>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800387a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e003      	b.n	8003890 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2b09      	cmp	r3, #9
 8003898:	bf94      	ite	ls
 800389a:	2301      	movls	r3, #1
 800389c:	2300      	movhi	r3, #0
 800389e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d079      	beq.n	8003998 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4d4>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	e015      	b.n	80038ec <HAL_ADC_ConfigChannel+0x500>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80038d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	069b      	lsls	r3, r3, #26
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x520>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	e017      	b.n	800393c <HAL_ADC_ConfigChannel+0x550>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x576>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	051b      	lsls	r3, r3, #20
 8003960:	e018      	b.n	8003994 <HAL_ADC_ConfigChannel+0x5a8>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e003      	b.n	8003986 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003994:	430b      	orrs	r3, r1
 8003996:	e07e      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x5c8>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	3301      	adds	r3, #1
 80039ac:	069b      	lsls	r3, r3, #26
 80039ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b2:	e015      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x5f4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80039cc:	2320      	movs	r3, #32
 80039ce:	e003      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	069b      	lsls	r3, r3, #26
 80039dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x614>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	3301      	adds	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	e017      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x644>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	e003      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	ea42 0103 	orr.w	r1, r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x670>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	3b1e      	subs	r3, #30
 8003a54:	051b      	lsls	r3, r3, #20
 8003a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	e01b      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x6a8>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	613b      	str	r3, [r7, #16]
  return result;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003a74:	2320      	movs	r3, #32
 8003a76:	e003      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b1e      	subs	r3, #30
 8003a8e:	051b      	lsls	r3, r3, #20
 8003a90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a94:	430b      	orrs	r3, r1
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	6892      	ldr	r2, [r2, #8]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7ff f8c5 	bl	8002c2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_ADC_ConfigChannel+0x6e0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80be 	beq.w	8003c2a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab6:	d004      	beq.n	8003ac2 <HAL_ADC_ConfigChannel+0x6d6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x6ec>
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ac4:	e009      	b.n	8003ada <HAL_ADC_ConfigChannel+0x6ee>
 8003ac6:	bf00      	nop
 8003ac8:	407f0000 	.word	0x407f0000
 8003acc:	80080000 	.word	0x80080000
 8003ad0:	50000100 	.word	0x50000100
 8003ad4:	50000300 	.word	0x50000300
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_ADC_ConfigChannel+0x854>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe ffba 	bl	8002a54 <LL_ADC_GetCommonPathInternalCh>
 8003ae0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_ADC_ConfigChannel+0x858>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x70c>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a55      	ldr	r2, [pc, #340]	; (8003c48 <HAL_ADC_ConfigChannel+0x85c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d13a      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d134      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0c:	d005      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x72e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4e      	ldr	r2, [pc, #312]	; (8003c4c <HAL_ADC_ConfigChannel+0x860>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	f040 8085 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x742>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a49      	ldr	r2, [pc, #292]	; (8003c50 <HAL_ADC_ConfigChannel+0x864>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x746>
 8003b2e:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <HAL_ADC_ConfigChannel+0x868>)
 8003b30:	e000      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x748>
 8003b32:	4a43      	ldr	r2, [pc, #268]	; (8003c40 <HAL_ADC_ConfigChannel+0x854>)
 8003b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7fe ff75 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <HAL_ADC_ConfigChannel+0x86c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <HAL_ADC_ConfigChannel+0x870>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b5e:	e002      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f9      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b6c:	e05a      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <HAL_ADC_ConfigChannel+0x874>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d125      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x7d8>
 8003b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11f      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <HAL_ADC_ConfigChannel+0x864>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d104      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x7ac>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_ADC_ConfigChannel+0x878>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d047      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba0:	d004      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x7c0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <HAL_ADC_ConfigChannel+0x864>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x7c4>
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_ADC_ConfigChannel+0x868>)
 8003bae:	e000      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x7c6>
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_ADC_ConfigChannel+0x854>)
 8003bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fe ff36 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc2:	e031      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <HAL_ADC_ConfigChannel+0x87c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d12d      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d127      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <HAL_ADC_ConfigChannel+0x864>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_ConfigChannel+0x80c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <HAL_ADC_ConfigChannel+0x864>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x810>
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_ADC_ConfigChannel+0x868>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x812>
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_ADC_ConfigChannel+0x854>)
 8003bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fe ff10 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
 8003c0e:	e00c      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c22:	e002      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	37d8      	adds	r7, #216	; 0xd8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	50000700 	.word	0x50000700
 8003c44:	c3210000 	.word	0xc3210000
 8003c48:	90c00010 	.word	0x90c00010
 8003c4c:	50000600 	.word	0x50000600
 8003c50:	50000100 	.word	0x50000100
 8003c54:	50000300 	.word	0x50000300
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	053e2d63 	.word	0x053e2d63
 8003c60:	c7520000 	.word	0xc7520000
 8003c64:	50000500 	.word	0x50000500
 8003c68:	cb840000 	.word	0xcb840000

08003c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f8ad 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d14d      	bne.n	8003d20 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <ADC_Enable+0xc0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e039      	b.n	8003d22 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f868 	bl	8002d88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cb8:	f7fe fe78 	bl	80029ac <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cbe:	e028      	b.n	8003d12 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff f887 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff f857 	bl	8002d88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cda:	f7fe fe67 	bl	80029ac <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d914      	bls.n	8003d12 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d00d      	beq.n	8003d12 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e007      	b.n	8003d22 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d1cf      	bne.n	8003cc0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	8000003f 	.word	0x8000003f

08003d30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f85e 	bl	8002dfe <LL_ADC_IsDisableOngoing>
 8003d42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f845 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d047      	beq.n	8003de4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d144      	bne.n	8003de4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030d 	and.w	r3, r3, #13
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff f81f 	bl	8002db0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2203      	movs	r2, #3
 8003d78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d7a:	f7fe fe17 	bl	80029ac <HAL_GetTick>
 8003d7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d80:	e029      	b.n	8003dd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e023      	b.n	8003de6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d9e:	f7fe fe05 	bl	80029ac <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d914      	bls.n	8003dd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e007      	b.n	8003de6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1dc      	bne.n	8003d9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d14b      	bne.n	8003ea0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d021      	beq.n	8003e66 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fec0 	bl	8002bac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d032      	beq.n	8003e98 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d12b      	bne.n	8003e98 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11f      	bne.n	8003e98 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	f043 0201 	orr.w	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e64:	e018      	b.n	8003e98 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7fd f9e1 	bl	8001260 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e9e:	e00e      	b.n	8003ebe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fa93 	bl	80033d8 <HAL_ADC_ErrorCallback>
}
 8003eb2:	e004      	b.n	8003ebe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fa75 	bl	80033c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fa65 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <LL_ADC_IsEnabled>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <LL_ADC_IsEnabled+0x18>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_ADC_IsEnabled+0x1a>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_StartCalibration>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_ADC_IsCalibrationOnGoing>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f82:	d101      	bne.n	8003f88 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d101      	bne.n	8003fae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e04d      	b.n	8004074 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fea5 	bl	8003d30 <ADC_Disable>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d136      	bne.n	800405e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	f043 0202 	orr.w	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff96 	bl	8003f3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004010:	e014      	b.n	800403c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_ADCEx_Calibration_Start+0xc0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d90d      	bls.n	800403c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f023 0312 	bic.w	r3, r3, #18
 8004028:	f043 0210 	orr.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01b      	b.n	8004074 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff94 	bl	8003f6e <LL_ADC_IsCalibrationOnGoing>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e2      	bne.n	8004012 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f023 0303 	bic.w	r3, r3, #3
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	65da      	str	r2, [r3, #92]	; 0x5c
 800405c:	e005      	b.n	800406a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	0004de01 	.word	0x0004de01

08004080 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b0a1      	sub	sp, #132	; 0x84
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800409a:	2302      	movs	r3, #2
 800409c:	e0e7      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040a6:	2300      	movs	r3, #0
 80040a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040aa:	2300      	movs	r3, #0
 80040ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b6:	d102      	bne.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	e009      	b.n	80040d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6e      	ldr	r2, [pc, #440]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d102      	bne.n	80040ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80040c8:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	e001      	b.n	80040d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0be      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff4f 	bl	8003f96 <LL_ADC_REG_IsConversionOngoing>
 80040f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff49 	bl	8003f96 <LL_ADC_REG_IsConversionOngoing>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80a0 	bne.w	800424c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 809c 	bne.w	800424c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800411c:	d004      	beq.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004128:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800412a:	e000      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800412e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d04b      	beq.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800414a:	035b      	lsls	r3, r3, #13
 800414c:	430b      	orrs	r3, r1
 800414e:	431a      	orrs	r2, r3
 8004150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004152:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415c:	d004      	beq.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a45      	ldr	r2, [pc, #276]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10f      	bne.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004168:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800416c:	f7ff fed3 	bl	8003f16 <LL_ADC_IsEnabled>
 8004170:	4604      	mov	r4, r0
 8004172:	4841      	ldr	r0, [pc, #260]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004174:	f7ff fecf 	bl	8003f16 <LL_ADC_IsEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	4323      	orrs	r3, r4
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e012      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004188:	483c      	ldr	r0, [pc, #240]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800418a:	f7ff fec4 	bl	8003f16 <LL_ADC_IsEnabled>
 800418e:	4604      	mov	r4, r0
 8004190:	483b      	ldr	r0, [pc, #236]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004192:	f7ff fec0 	bl	8003f16 <LL_ADC_IsEnabled>
 8004196:	4603      	mov	r3, r0
 8004198:	431c      	orrs	r4, r3
 800419a:	483c      	ldr	r0, [pc, #240]	; (800428c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800419c:	f7ff febb 	bl	8003f16 <LL_ADC_IsEnabled>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4323      	orrs	r3, r4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d056      	beq.n	8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041ba:	f023 030f 	bic.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	6811      	ldr	r1, [r2, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	431a      	orrs	r2, r3
 80041ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ce:	e047      	b.n	8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e4:	d004      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10f      	bne.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80041f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041f4:	f7ff fe8f 	bl	8003f16 <LL_ADC_IsEnabled>
 80041f8:	4604      	mov	r4, r0
 80041fa:	481f      	ldr	r0, [pc, #124]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041fc:	f7ff fe8b 	bl	8003f16 <LL_ADC_IsEnabled>
 8004200:	4603      	mov	r3, r0
 8004202:	4323      	orrs	r3, r4
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e012      	b.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004210:	481a      	ldr	r0, [pc, #104]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004212:	f7ff fe80 	bl	8003f16 <LL_ADC_IsEnabled>
 8004216:	4604      	mov	r4, r0
 8004218:	4819      	ldr	r0, [pc, #100]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800421a:	f7ff fe7c 	bl	8003f16 <LL_ADC_IsEnabled>
 800421e:	4603      	mov	r3, r0
 8004220:	431c      	orrs	r4, r3
 8004222:	481a      	ldr	r0, [pc, #104]	; (800428c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004224:	f7ff fe77 	bl	8003f16 <LL_ADC_IsEnabled>
 8004228:	4603      	mov	r3, r0
 800422a:	4323      	orrs	r3, r4
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800423a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004242:	f023 030f 	bic.w	r3, r3, #15
 8004246:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004248:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800424a:	e009      	b.n	8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800425e:	e000      	b.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004260:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800426a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800426e:	4618      	mov	r0, r3
 8004270:	3784      	adds	r7, #132	; 0x84
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	bf00      	nop
 8004278:	50000100 	.word	0x50000100
 800427c:	50000400 	.word	0x50000400
 8004280:	50000500 	.word	0x50000500
 8004284:	50000300 	.word	0x50000300
 8004288:	50000700 	.word	0x50000700
 800428c:	50000600 	.word	0x50000600

08004290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <__NVIC_SetPriorityGrouping+0x44>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042ac:	4013      	ands	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042c2:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	60d3      	str	r3, [r2, #12]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <__NVIC_GetPriorityGrouping+0x18>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	f003 0307 	and.w	r3, r3, #7
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	2b00      	cmp	r3, #0
 8004304:	db0b      	blt.n	800431e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <__NVIC_EnableIRQ+0x38>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2001      	movs	r0, #1
 8004316:	fa00 f202 	lsl.w	r2, r0, r2
 800431a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e100 	.word	0xe000e100

08004330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	db0a      	blt.n	800435a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	490c      	ldr	r1, [pc, #48]	; (800437c <__NVIC_SetPriority+0x4c>)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	440b      	add	r3, r1
 8004354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004358:	e00a      	b.n	8004370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4908      	ldr	r1, [pc, #32]	; (8004380 <__NVIC_SetPriority+0x50>)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	3b04      	subs	r3, #4
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	440b      	add	r3, r1
 800436e:	761a      	strb	r2, [r3, #24]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000e100 	.word	0xe000e100
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f1c3 0307 	rsb	r3, r3, #7
 800439e:	2b04      	cmp	r3, #4
 80043a0:	bf28      	it	cs
 80043a2:	2304      	movcs	r3, #4
 80043a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d902      	bls.n	80043b4 <NVIC_EncodePriority+0x30>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3b03      	subs	r3, #3
 80043b2:	e000      	b.n	80043b6 <NVIC_EncodePriority+0x32>
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	401a      	ands	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	43d9      	mvns	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043dc:	4313      	orrs	r3, r2
         );
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ff4c 	bl	8004290 <__NVIC_SetPriorityGrouping>
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800440e:	f7ff ff63 	bl	80042d8 <__NVIC_GetPriorityGrouping>
 8004412:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	6978      	ldr	r0, [r7, #20]
 800441a:	f7ff ffb3 	bl	8004384 <NVIC_EncodePriority>
 800441e:	4602      	mov	r2, r0
 8004420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ff82 	bl	8004330 <__NVIC_SetPriority>
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff56 	bl	80042f4 <__NVIC_EnableIRQ>
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e08d      	b.n	800457e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_DMA_Init+0x138>)
 800446a:	429a      	cmp	r2, r3
 800446c:	d80f      	bhi.n	800448e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b45      	ldr	r3, [pc, #276]	; (800458c <HAL_DMA_Init+0x13c>)
 8004476:	4413      	add	r3, r2
 8004478:	4a45      	ldr	r2, [pc, #276]	; (8004590 <HAL_DMA_Init+0x140>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	009a      	lsls	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a42      	ldr	r2, [pc, #264]	; (8004594 <HAL_DMA_Init+0x144>)
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
 800448c:	e00e      	b.n	80044ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_DMA_Init+0x148>)
 8004496:	4413      	add	r3, r2
 8004498:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <HAL_DMA_Init+0x140>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	009a      	lsls	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a3c      	ldr	r2, [pc, #240]	; (800459c <HAL_DMA_Init+0x14c>)
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa76 	bl	80049f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450c:	d102      	bne.n	8004514 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004528:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d010      	beq.n	8004554 <HAL_DMA_Init+0x104>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d80c      	bhi.n	8004554 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa96 	bl	8004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e008      	b.n	8004566 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40020407 	.word	0x40020407
 800458c:	bffdfff8 	.word	0xbffdfff8
 8004590:	cccccccd 	.word	0xcccccccd
 8004594:	40020000 	.word	0x40020000
 8004598:	bffdfbf8 	.word	0xbffdfbf8
 800459c:	40020400 	.word	0x40020400

080045a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_DMA_Start_IT+0x20>
 80045bc:	2302      	movs	r3, #2
 80045be:	e066      	b.n	800468e <HAL_DMA_Start_IT+0xee>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d155      	bne.n	8004680 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f9bb 	bl	8004974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 020e 	orr.w	r2, r2, #14
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e00f      	b.n	8004638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 020a 	orr.w	r2, r2, #10
 8004636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004654:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e005      	b.n	800468c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004688:	2302      	movs	r3, #2
 800468a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d005      	beq.n	80046ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e037      	b.n	800472a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 020e 	bic.w	r2, r2, #14
 80046c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021f 	and.w	r2, r3, #31
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004706:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00c      	beq.n	800472a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004728:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d00d      	beq.n	800477c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2204      	movs	r2, #4
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e047      	b.n	800480c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020e 	bic.w	r2, r2, #14
 800478a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	f003 021f 	and.w	r2, r3, #31
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
    }
  }
  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2204      	movs	r2, #4
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d026      	beq.n	8004890 <HAL_DMA_IRQHandler+0x7a>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d021      	beq.n	8004890 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0204 	bic.w	r2, r2, #4
 8004868:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f003 021f 	and.w	r2, r3, #31
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2104      	movs	r1, #4
 8004878:	fa01 f202 	lsl.w	r2, r1, r2
 800487c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d071      	beq.n	800496a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800488e:	e06c      	b.n	800496a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2202      	movs	r2, #2
 800489a:	409a      	lsls	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d02e      	beq.n	8004902 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d029      	beq.n	8004902 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 020a 	bic.w	r2, r2, #10
 80048ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f003 021f 	and.w	r2, r3, #31
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2102      	movs	r1, #2
 80048e2:	fa01 f202 	lsl.w	r2, r1, r2
 80048e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d038      	beq.n	800496a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004900:	e033      	b.n	800496a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2208      	movs	r2, #8
 800490c:	409a      	lsls	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02a      	beq.n	800496c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d025      	beq.n	800496c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 020e 	bic.w	r2, r2, #14
 800492e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2101      	movs	r1, #1
 800493e:	fa01 f202 	lsl.w	r2, r1, r2
 8004942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800496a:	bf00      	nop
 800496c:	bf00      	nop
}
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800498a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f003 021f 	and.w	r2, r3, #31
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f202 	lsl.w	r2, r1, r2
 80049b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d108      	bne.n	80049d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049d2:	e007      	b.n	80049e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d802      	bhi.n	8004a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e001      	b.n	8004a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3b08      	subs	r3, #8
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40020407 	.word	0x40020407
 8004a5c:	40020800 	.word	0x40020800
 8004a60:	40020820 	.word	0x40020820
 8004a64:	cccccccd 	.word	0xcccccccd
 8004a68:	40020880 	.word	0x40020880

08004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	461a      	mov	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a8e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2201      	movs	r2, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	1000823f 	.word	0x1000823f
 8004ab0:	40020940 	.word	0x40020940

08004ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ac2:	e15a      	b.n	8004d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 814c 	beq.w	8004d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d005      	beq.n	8004af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d130      	bne.n	8004b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	2203      	movs	r2, #3
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0201 	and.w	r2, r3, #1
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d017      	beq.n	8004b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4013      	ands	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d123      	bne.n	8004be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	08da      	lsrs	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3208      	adds	r2, #8
 8004be0:	6939      	ldr	r1, [r7, #16]
 8004be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a6 	beq.w	8004d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c28:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	4a5a      	ldr	r2, [pc, #360]	; (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6613      	str	r3, [r2, #96]	; 0x60
 8004c34:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c40:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_GPIO_Init+0x2e8>)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	3302      	adds	r3, #2
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	220f      	movs	r2, #15
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c6a:	d01f      	beq.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a4c      	ldr	r2, [pc, #304]	; (8004da0 <HAL_GPIO_Init+0x2ec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d019      	beq.n	8004ca8 <HAL_GPIO_Init+0x1f4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a4b      	ldr	r2, [pc, #300]	; (8004da4 <HAL_GPIO_Init+0x2f0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_GPIO_Init+0x1f0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a4a      	ldr	r2, [pc, #296]	; (8004da8 <HAL_GPIO_Init+0x2f4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00d      	beq.n	8004ca0 <HAL_GPIO_Init+0x1ec>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a49      	ldr	r2, [pc, #292]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <HAL_GPIO_Init+0x1e8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a48      	ldr	r2, [pc, #288]	; (8004db0 <HAL_GPIO_Init+0x2fc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_GPIO_Init+0x1e4>
 8004c94:	2305      	movs	r3, #5
 8004c96:	e00a      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004c98:	2306      	movs	r3, #6
 8004c9a:	e008      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e006      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e004      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e002      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004cac:	2300      	movs	r3, #0
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	f002 0203 	and.w	r2, r2, #3
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cbe:	4937      	ldr	r1, [pc, #220]	; (8004d9c <HAL_GPIO_Init+0x2e8>)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d1a:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d20:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <HAL_GPIO_Init+0x300>)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3301      	adds	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f ae9d 	bne.w	8004ac4 <HAL_GPIO_Init+0x10>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	48000400 	.word	0x48000400
 8004da4:	48000800 	.word	0x48000800
 8004da8:	48000c00 	.word	0x48000c00
 8004dac:	48001000 	.word	0x48001000
 8004db0:	48001400 	.word	0x48001400
 8004db4:	40010400 	.word	0x40010400

08004db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dc8:	787b      	ldrb	r3, [r7, #1]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dd4:	e002      	b.n	8004ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	041a      	lsls	r2, r3, #16
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43d9      	mvns	r1, r3
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	400b      	ands	r3, r1
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fc fc11 	bl	8001662 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40010400 	.word	0x40010400

08004e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d141      	bne.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e5a:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d131      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e68:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6e:	4a46      	ldr	r2, [pc, #280]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e78:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e80:	4a41      	ldr	r2, [pc, #260]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e88:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2232      	movs	r2, #50	; 0x32
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	0c9b      	lsrs	r3, r3, #18
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9e:	e002      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea6:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d102      	bne.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f2      	bne.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d158      	bne.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e057      	b.n	8004f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed2:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004edc:	e04d      	b.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d141      	bne.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d131      	bne.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004efa:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2232      	movs	r2, #50	; 0x32
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	0c9b      	lsrs	r3, r3, #18
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2a:	e002      	b.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d102      	bne.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f2      	bne.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d112      	bne.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e011      	b.n	8004f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f68:	e007      	b.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	20000008 	.word	0x20000008
 8004f90:	431bde83 	.word	0x431bde83

08004f94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa2:	6093      	str	r3, [r2, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40007000 	.word	0x40007000

08004fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e306      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d075      	beq.n	80050be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd2:	4b97      	ldr	r3, [pc, #604]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fdc:	4b94      	ldr	r3, [pc, #592]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d102      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3e>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d002      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x44>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05b      	beq.n	80050bc <HAL_RCC_OscConfig+0x108>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d157      	bne.n	80050bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e2e1      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x74>
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a84      	ldr	r2, [pc, #528]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x98>
 8005032:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7e      	ldr	r2, [pc, #504]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b7c      	ldr	r3, [pc, #496]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a7b      	ldr	r2, [pc, #492]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xb0>
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a77      	ldr	r2, [pc, #476]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b75      	ldr	r3, [pc, #468]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a74      	ldr	r2, [pc, #464]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd fc9e 	bl	80029ac <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd fc9a 	bl	80029ac <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e2a6      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xc0>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fc8a 	bl	80029ac <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd fc86 	bl	80029ac <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e292      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ae:	4b60      	ldr	r3, [pc, #384]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0xe8>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d075      	beq.n	80051b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ca:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d4:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d102      	bne.n	80050ea <HAL_RCC_OscConfig+0x136>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_OscConfig+0x13c>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11f      	bne.n	8005130 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_OscConfig+0x154>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e265      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	4946      	ldr	r1, [pc, #280]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800511c:	4b45      	ldr	r3, [pc, #276]	; (8005234 <HAL_RCC_OscConfig+0x280>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fc fe73 	bl	8001e0c <HAL_InitTick>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d043      	beq.n	80051b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e251      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d023      	beq.n	8005180 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fd fc32 	bl	80029ac <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fd fc2e 	bl	80029ac <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e23a      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800515e:	4b34      	ldr	r3, [pc, #208]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	492d      	ldr	r1, [pc, #180]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
 800517e:	e01a      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fd fc0e 	bl	80029ac <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005194:	f7fd fc0a 	bl	80029ac <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e216      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x1e0>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d041      	beq.n	8005246 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01c      	beq.n	8005204 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fd fbe7 	bl	80029ac <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e2:	f7fd fbe3 	bl	80029ac <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e1ef      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ef      	beq.n	80051e2 <HAL_RCC_OscConfig+0x22e>
 8005202:	e020      	b.n	8005246 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <HAL_RCC_OscConfig+0x27c>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fd fbca 	bl	80029ac <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800521a:	e00d      	b.n	8005238 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fd fbc6 	bl	80029ac <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d906      	bls.n	8005238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e1d2      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ea      	bne.n	800521c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a6 	beq.w	80053a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005258:	4b84      	ldr	r3, [pc, #528]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x2b4>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x2b6>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b7f      	ldr	r3, [pc, #508]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	4a7e      	ldr	r2, [pc, #504]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	4b7c      	ldr	r3, [pc, #496]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528a:	4b79      	ldr	r3, [pc, #484]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005296:	4b76      	ldr	r3, [pc, #472]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a75      	ldr	r2, [pc, #468]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd fb83 	bl	80029ac <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fd fb7f 	bl	80029ac <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e18b      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052bc:	4b6c      	ldr	r3, [pc, #432]	; (8005470 <HAL_RCC_OscConfig+0x4bc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_RCC_OscConfig+0x32e>
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e0:	e024      	b.n	800532c <HAL_RCC_OscConfig+0x378>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d110      	bne.n	800530c <HAL_RCC_OscConfig+0x358>
 80052ea:	4b60      	ldr	r3, [pc, #384]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a5e      	ldr	r2, [pc, #376]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052fa:	4b5c      	ldr	r3, [pc, #368]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	4a5a      	ldr	r2, [pc, #360]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530a:	e00f      	b.n	800532c <HAL_RCC_OscConfig+0x378>
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a56      	ldr	r2, [pc, #344]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	4b53      	ldr	r3, [pc, #332]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a52      	ldr	r2, [pc, #328]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fd fb3a 	bl	80029ac <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	e00a      	b.n	8005352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fd fb36 	bl	80029ac <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e140      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ed      	beq.n	800533c <HAL_RCC_OscConfig+0x388>
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fd fb23 	bl	80029ac <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fd fb1f 	bl	80029ac <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e129      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005380:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ed      	bne.n	800536a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03c      	beq.n	8005426 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01c      	beq.n	80053ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c4:	f7fd faf2 	bl	80029ac <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053cc:	f7fd faee 	bl	80029ac <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0fa      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ef      	beq.n	80053cc <HAL_RCC_OscConfig+0x418>
 80053ec:	e01b      	b.n	8005426 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd fad5 	bl	80029ac <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005406:	f7fd fad1 	bl	80029ac <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0dd      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ef      	bne.n	8005406 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80d1 	beq.w	80055d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b0c      	cmp	r3, #12
 800543a:	f000 808b 	beq.w	8005554 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d15e      	bne.n	8005504 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a08      	ldr	r2, [pc, #32]	; (800546c <HAL_RCC_OscConfig+0x4b8>)
 800544c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fd faab 	bl	80029ac <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005458:	e00c      	b.n	8005474 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fd faa7 	bl	80029ac <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d905      	bls.n	8005474 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0b3      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ec      	bne.n	800545a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005480:	4b56      	ldr	r3, [pc, #344]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <HAL_RCC_OscConfig+0x62c>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6a11      	ldr	r1, [r2, #32]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005490:	3a01      	subs	r2, #1
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800549a:	0212      	lsls	r2, r2, #8
 800549c:	4311      	orrs	r1, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054a2:	0852      	lsrs	r2, r2, #1
 80054a4:	3a01      	subs	r2, #1
 80054a6:	0552      	lsls	r2, r2, #21
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ae:	0852      	lsrs	r2, r2, #1
 80054b0:	3a01      	subs	r2, #1
 80054b2:	0652      	lsls	r2, r2, #25
 80054b4:	4311      	orrs	r1, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054ba:	06d2      	lsls	r2, r2, #27
 80054bc:	430a      	orrs	r2, r1
 80054be:	4947      	ldr	r1, [pc, #284]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a44      	ldr	r2, [pc, #272]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d0:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a41      	ldr	r2, [pc, #260]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd fa66 	bl	80029ac <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd fa62 	bl	80029ac <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e06e      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x530>
 8005502:	e066      	b.n	80055d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005504:	4b35      	ldr	r3, [pc, #212]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 800550a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a31      	ldr	r2, [pc, #196]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800551c:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a2e      	ldr	r2, [pc, #184]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005522:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd fa3e 	bl	80029ac <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fd fa3a 	bl	80029ac <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e046      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005546:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x580>
 8005552:	e03e      	b.n	80055d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e039      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005560:	4b1e      	ldr	r3, [pc, #120]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0203 	and.w	r2, r3, #3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	429a      	cmp	r2, r3
 8005572:	d12c      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	3b01      	subs	r3, #1
 8005580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d123      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d11b      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d113      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	3b01      	subs	r3, #1
 80055b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	3b01      	subs	r3, #1
 80055c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	019f800c 	.word	0x019f800c

080055e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e11e      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055fc:	4b91      	ldr	r3, [pc, #580]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d910      	bls.n	800562c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b8e      	ldr	r3, [pc, #568]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 020f 	bic.w	r2, r3, #15
 8005612:	498c      	ldr	r1, [pc, #560]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b8a      	ldr	r3, [pc, #552]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e106      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d073      	beq.n	8005720 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d129      	bne.n	8005694 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005640:	4b81      	ldr	r3, [pc, #516]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0f4      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005650:	f000 f9d0 	bl	80059f4 <RCC_GetSysClockFreqFromPLLSource>
 8005654:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4a7c      	ldr	r2, [pc, #496]	; (800584c <HAL_RCC_ClockConfig+0x268>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d93f      	bls.n	80056de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800565e:	4b7a      	ldr	r3, [pc, #488]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005672:	2b00      	cmp	r3, #0
 8005674:	d033      	beq.n	80056de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800567a:	2b00      	cmp	r3, #0
 800567c:	d12f      	bne.n	80056de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800567e:	4b72      	ldr	r3, [pc, #456]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	4a70      	ldr	r2, [pc, #448]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e024      	b.n	80056de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569c:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0c6      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0be      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056bc:	f000 f8ce 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4a61      	ldr	r2, [pc, #388]	; (800584c <HAL_RCC_ClockConfig+0x268>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d909      	bls.n	80056de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ca:	4b5f      	ldr	r3, [pc, #380]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d2:	4a5d      	ldr	r2, [pc, #372]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4957      	ldr	r1, [pc, #348]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fd f95c 	bl	80029ac <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fd f958 	bl	80029ac <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e095      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d023      	beq.n	8005774 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005738:	4b43      	ldr	r3, [pc, #268]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a42      	ldr	r2, [pc, #264]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800573e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005742:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005758:	4a3b      	ldr	r2, [pc, #236]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800575a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800575e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4936      	ldr	r1, [pc, #216]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
 8005772:	e008      	b.n	8005786 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d105      	bne.n	8005786 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4a32      	ldr	r2, [pc, #200]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005784:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d21d      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f023 020f 	bic.w	r2, r3, #15
 800579c:	4929      	ldr	r1, [pc, #164]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057a4:	f7fd f902 	bl	80029ac <HAL_GetTick>
 80057a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ac:	f7fd f8fe 	bl	80029ac <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e03b      	b.n	800583a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1ed      	bne.n	80057ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4917      	ldr	r1, [pc, #92]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490f      	ldr	r1, [pc, #60]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800580e:	f000 f825 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8005812:	4602      	mov	r2, r0
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_ClockConfig+0x264>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	490c      	ldr	r1, [pc, #48]	; (8005850 <HAL_RCC_ClockConfig+0x26c>)
 8005820:	5ccb      	ldrb	r3, [r1, r3]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_RCC_ClockConfig+0x270>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x274>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc faea 	bl	8001e0c <HAL_InitTick>
 8005838:	4603      	mov	r3, r0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40022000 	.word	0x40022000
 8005848:	40021000 	.word	0x40021000
 800584c:	04c4b400 	.word	0x04c4b400
 8005850:	0800e7bc 	.word	0x0800e7bc
 8005854:	20000008 	.word	0x20000008
 8005858:	2000000c 	.word	0x2000000c

0800585c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b04      	cmp	r3, #4
 800586c:	d102      	bne.n	8005874 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e047      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b08      	cmp	r3, #8
 800587e:	d102      	bne.n	8005886 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005880:	4b26      	ldr	r3, [pc, #152]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	e03e      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005886:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d136      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	3301      	adds	r3, #1
 80058a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ba:	68d2      	ldr	r2, [r2, #12]
 80058bc:	0a12      	lsrs	r2, r2, #8
 80058be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	617b      	str	r3, [r7, #20]
      break;
 80058c8:	e00c      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ca:	4a13      	ldr	r2, [pc, #76]	; (8005918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	0a12      	lsrs	r2, r2, #8
 80058d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
      break;
 80058e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	0e5b      	lsrs	r3, r3, #25
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	3301      	adds	r3, #1
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e001      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005904:	693b      	ldr	r3, [r7, #16]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000
 8005918:	00f42400 	.word	0x00f42400
 800591c:	016e3600 	.word	0x016e3600

08005920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCC_GetHCLKFreq+0x14>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000008 	.word	0x20000008

08005938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800593c:	f7ff fff0 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005940:	4602      	mov	r2, r0
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4904      	ldr	r1, [pc, #16]	; (8005960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800594e:	5ccb      	ldrb	r3, [r1, r3]
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40021000 	.word	0x40021000
 8005960:	0800e7cc 	.word	0x0800e7cc

08005964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005968:	f7ff ffda 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0adb      	lsrs	r3, r3, #11
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCC_GetPCLK2Freq+0x28>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000
 800598c:	0800e7cc 	.word	0x0800e7cc

08005990 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	220f      	movs	r2, #15
 800599e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80059a0:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_GetClockConfig+0x5c>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0203 	and.w	r2, r3, #3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_RCC_GetClockConfig+0x5c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCC_GetClockConfig+0x5c>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_GetClockConfig+0x5c>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <HAL_RCC_GetClockConfig+0x60>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40022000 	.word	0x40022000

080059f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059fa:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d10c      	bne.n	8005a32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a18:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	4a14      	ldr	r2, [pc, #80]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	0a12      	lsrs	r2, r2, #8
 8005a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]
    break;
 8005a30:	e00c      	b.n	8005a4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	0a12      	lsrs	r2, r2, #8
 8005a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
    break;
 8005a4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	0e5b      	lsrs	r3, r3, #25
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a66:	687b      	ldr	r3, [r7, #4]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40021000 	.word	0x40021000
 8005a78:	016e3600 	.word	0x016e3600
 8005a7c:	00f42400 	.word	0x00f42400

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8098 	beq.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa2:	4b43      	ldr	r3, [pc, #268]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	4b40      	ldr	r3, [pc, #256]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	4a3f      	ldr	r2, [pc, #252]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8005aba:	4b3d      	ldr	r3, [pc, #244]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a39      	ldr	r2, [pc, #228]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ad6:	f7fc ff69 	bl	80029ac <HAL_GetTick>
 8005ada:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005adc:	e009      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ade:	f7fc ff65 	bl	80029ac <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d902      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	74fb      	strb	r3, [r7, #19]
        break;
 8005af0:	e005      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ef      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d159      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b04:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01e      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d019      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b20:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5e:	f7fc ff25 	bl	80029ac <HAL_GetTick>
 8005b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b64:	e00b      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fc ff21 	bl	80029ac <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d902      	bls.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b7c:	e006      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ec      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	74bb      	strb	r3, [r7, #18]
 8005bae:	e005      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bbc:	7c7b      	ldrb	r3, [r7, #17]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4ba7      	ldr	r3, [pc, #668]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	4aa6      	ldr	r2, [pc, #664]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bda:	4ba1      	ldr	r3, [pc, #644]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	f023 0203 	bic.w	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	499d      	ldr	r1, [pc, #628]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bfc:	4b98      	ldr	r3, [pc, #608]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f023 020c 	bic.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4995      	ldr	r1, [pc, #596]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c1e:	4b90      	ldr	r3, [pc, #576]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	498c      	ldr	r1, [pc, #560]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c40:	4b87      	ldr	r3, [pc, #540]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4984      	ldr	r1, [pc, #528]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c62:	4b7f      	ldr	r3, [pc, #508]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	497b      	ldr	r1, [pc, #492]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c84:	4b76      	ldr	r3, [pc, #472]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	4973      	ldr	r1, [pc, #460]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ca6:	4b6e      	ldr	r3, [pc, #440]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	496a      	ldr	r1, [pc, #424]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cc8:	4b65      	ldr	r3, [pc, #404]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4962      	ldr	r1, [pc, #392]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cea:	4b5d      	ldr	r3, [pc, #372]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	4959      	ldr	r1, [pc, #356]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d0c:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	4951      	ldr	r1, [pc, #324]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4948      	ldr	r1, [pc, #288]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d015      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	4940      	ldr	r1, [pc, #256]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d70:	4b3b      	ldr	r3, [pc, #236]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4a3a      	ldr	r2, [pc, #232]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d88:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	4932      	ldr	r1, [pc, #200]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da8:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a2c      	ldr	r2, [pc, #176]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	4924      	ldr	r1, [pc, #144]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de0:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	4916      	ldr	r1, [pc, #88]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d019      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	4908      	ldr	r1, [pc, #32]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4e:	d109      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4a02      	ldr	r2, [pc, #8]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5a:	60d3      	str	r3, [r2, #12]
 8005e5c:	e002      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e70:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	4926      	ldr	r1, [pc, #152]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d015      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	4918      	ldr	r1, [pc, #96]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d105      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ec8:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	490a      	ldr	r1, [pc, #40]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efe:	d105      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000

08005f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e049      	b.n	8005fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc faba 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f000 ff98 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d001      	beq.n	8005fe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04c      	b.n	800607e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_TIM_Base_Start+0xc0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d022      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d01d      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_TIM_Base_Start+0xc4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d018      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a21      	ldr	r2, [pc, #132]	; (8006094 <HAL_TIM_Base_Start+0xc8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <HAL_TIM_Base_Start+0xcc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00e      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <HAL_TIM_Base_Start+0xd0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d009      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <HAL_TIM_Base_Start+0xd4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIM_Base_Start+0x70>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_TIM_Base_Start+0xd8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d115      	bne.n	8006068 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_TIM_Base_Start+0xdc>)
 8006044:	4013      	ands	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b06      	cmp	r3, #6
 800604c:	d015      	beq.n	800607a <HAL_TIM_Base_Start+0xae>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d011      	beq.n	800607a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	e008      	b.n	800607a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e000      	b.n	800607c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40013400 	.word	0x40013400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40015000 	.word	0x40015000
 80060a8:	00010007 	.word	0x00010007

080060ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e054      	b.n	800616e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <HAL_TIM_Base_Start_IT+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d022      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d01d      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <HAL_TIM_Base_Start_IT+0xd4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a21      	ldr	r2, [pc, #132]	; (8006184 <HAL_TIM_Base_Start_IT+0xd8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <HAL_TIM_Base_Start_IT+0xdc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIM_Base_Start_IT+0xe0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <HAL_TIM_Base_Start_IT+0xe4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <HAL_TIM_Base_Start_IT+0xe8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d115      	bne.n	8006158 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_TIM_Base_Start_IT+0xec>)
 8006134:	4013      	ands	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b06      	cmp	r3, #6
 800613c:	d015      	beq.n	800616a <HAL_TIM_Base_Start_IT+0xbe>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006144:	d011      	beq.n	800616a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006156:	e008      	b.n	800616a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e000      	b.n	800616c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40013400 	.word	0x40013400
 8006190:	40014000 	.word	0x40014000
 8006194:	40015000 	.word	0x40015000
 8006198:	00010007 	.word	0x00010007

0800619c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e049      	b.n	8006242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f841 	bl	800624a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 fe58 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <HAL_TIM_PWM_Start+0x24>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e03c      	b.n	80062fe <HAL_TIM_PWM_Start+0x9e>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d109      	bne.n	800629e <HAL_TIM_PWM_Start+0x3e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	e02f      	b.n	80062fe <HAL_TIM_PWM_Start+0x9e>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d109      	bne.n	80062b8 <HAL_TIM_PWM_Start+0x58>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e022      	b.n	80062fe <HAL_TIM_PWM_Start+0x9e>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d109      	bne.n	80062d2 <HAL_TIM_PWM_Start+0x72>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	e015      	b.n	80062fe <HAL_TIM_PWM_Start+0x9e>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d109      	bne.n	80062ec <HAL_TIM_PWM_Start+0x8c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	e008      	b.n	80062fe <HAL_TIM_PWM_Start+0x9e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0a6      	b.n	8006454 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start+0xb6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006314:	e023      	b.n	800635e <HAL_TIM_PWM_Start+0xfe>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start+0xc6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006324:	e01b      	b.n	800635e <HAL_TIM_PWM_Start+0xfe>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b08      	cmp	r3, #8
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0xd6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006334:	e013      	b.n	800635e <HAL_TIM_PWM_Start+0xfe>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b0c      	cmp	r3, #12
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xe6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006344:	e00b      	b.n	800635e <HAL_TIM_PWM_Start+0xfe>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b10      	cmp	r3, #16
 800634a:	d104      	bne.n	8006356 <HAL_TIM_PWM_Start+0xf6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006354:	e003      	b.n	800635e <HAL_TIM_PWM_Start+0xfe>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fa00 	bl	800776c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a3a      	ldr	r2, [pc, #232]	; (800645c <HAL_TIM_PWM_Start+0x1fc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x148>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a39      	ldr	r2, [pc, #228]	; (8006460 <HAL_TIM_PWM_Start+0x200>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x148>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a37      	ldr	r2, [pc, #220]	; (8006464 <HAL_TIM_PWM_Start+0x204>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x148>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a36      	ldr	r2, [pc, #216]	; (8006468 <HAL_TIM_PWM_Start+0x208>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x148>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a34      	ldr	r2, [pc, #208]	; (800646c <HAL_TIM_PWM_Start+0x20c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x148>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a33      	ldr	r2, [pc, #204]	; (8006470 <HAL_TIM_PWM_Start+0x210>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <HAL_TIM_PWM_Start+0x14c>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <HAL_TIM_PWM_Start+0x14e>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a25      	ldr	r2, [pc, #148]	; (800645c <HAL_TIM_PWM_Start+0x1fc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d022      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d01d      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a26      	ldr	r2, [pc, #152]	; (8006474 <HAL_TIM_PWM_Start+0x214>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a24      	ldr	r2, [pc, #144]	; (8006478 <HAL_TIM_PWM_Start+0x218>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a23      	ldr	r2, [pc, #140]	; (800647c <HAL_TIM_PWM_Start+0x21c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <HAL_TIM_PWM_Start+0x200>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <HAL_TIM_PWM_Start+0x204>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIM_PWM_Start+0x1b2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a18      	ldr	r2, [pc, #96]	; (8006470 <HAL_TIM_PWM_Start+0x210>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d115      	bne.n	800643e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <HAL_TIM_PWM_Start+0x220>)
 800641a:	4013      	ands	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b06      	cmp	r3, #6
 8006422:	d015      	beq.n	8006450 <HAL_TIM_PWM_Start+0x1f0>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642a:	d011      	beq.n	8006450 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	e008      	b.n	8006450 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e000      	b.n	8006452 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800
 8006470:	40015000 	.word	0x40015000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	00010007 	.word	0x00010007

08006484 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e097      	b.n	80065c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fc f851 	bl	8002554 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80064c8:	f023 0307 	bic.w	r3, r3, #7
 80064cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f000 fcd9 	bl	8006e90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	4313      	orrs	r3, r2
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006524:	f023 030c 	bic.w	r3, r3, #12
 8006528:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	4313      	orrs	r3, r2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	031b      	lsls	r3, r3, #12
 8006554:	4313      	orrs	r3, r2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4313      	orrs	r3, r2
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d110      	bne.n	8006622 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d102      	bne.n	800660c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006606:	7b7b      	ldrb	r3, [r7, #13]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d001      	beq.n	8006610 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e069      	b.n	80066e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006620:	e031      	b.n	8006686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d110      	bne.n	800664a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d102      	bne.n	8006634 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800662e:	7b3b      	ldrb	r3, [r7, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d001      	beq.n	8006638 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e055      	b.n	80066e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006648:	e01d      	b.n	8006686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d108      	bne.n	8006662 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d105      	bne.n	8006662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006656:	7b7b      	ldrb	r3, [r7, #13]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800665c:	7b3b      	ldrb	r3, [r7, #12]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d001      	beq.n	8006666 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e03e      	b.n	80066e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_TIM_Encoder_Start+0xc4>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b04      	cmp	r3, #4
 8006690:	d008      	beq.n	80066a4 <HAL_TIM_Encoder_Start+0xd4>
 8006692:	e00f      	b.n	80066b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f865 	bl	800776c <TIM_CCxChannelCmd>
      break;
 80066a2:	e016      	b.n	80066d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	2104      	movs	r1, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f85d 	bl	800776c <TIM_CCxChannelCmd>
      break;
 80066b2:	e00e      	b.n	80066d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f855 	bl	800776c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2201      	movs	r2, #1
 80066c8:	2104      	movs	r1, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 f84e 	bl	800776c <TIM_CCxChannelCmd>
      break;
 80066d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d122      	bne.n	8006748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b02      	cmp	r3, #2
 800670e:	d11b      	bne.n	8006748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0202 	mvn.w	r2, #2
 8006718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fb90 	bl	8006e54 <HAL_TIM_IC_CaptureCallback>
 8006734:	e005      	b.n	8006742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fb82 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb93 	bl	8006e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d122      	bne.n	800679c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d11b      	bne.n	800679c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0204 	mvn.w	r2, #4
 800676c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fb66 	bl	8006e54 <HAL_TIM_IC_CaptureCallback>
 8006788:	e005      	b.n	8006796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fb58 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb69 	bl	8006e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0208 	mvn.w	r2, #8
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2204      	movs	r2, #4
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fb3c 	bl	8006e54 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb2e 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb3f 	bl	8006e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	2b10      	cmp	r3, #16
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b10      	cmp	r3, #16
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0210 	mvn.w	r2, #16
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2208      	movs	r2, #8
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fb12 	bl	8006e54 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb04 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb15 	bl	8006e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0201 	mvn.w	r2, #1
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fa ff08 	bl	8001680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 f9a2 	bl	8007be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d10e      	bne.n	80068ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d107      	bne.n	80068ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f995 	bl	8007bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d10e      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d107      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fac3 	bl	8006e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b20      	cmp	r3, #32
 8006902:	d10e      	bne.n	8006922 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d107      	bne.n	8006922 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f06f 0220 	mvn.w	r2, #32
 800691a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f955 	bl	8007bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006930:	d10f      	bne.n	8006952 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006940:	d107      	bne.n	8006952 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800694a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f95b 	bl	8007c08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800695c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006960:	d10f      	bne.n	8006982 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800696c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006970:	d107      	bne.n	8006982 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f94d 	bl	8007c1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006990:	d10f      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069a0:	d107      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80069aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f93f 	bl	8007c30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069c0:	d10f      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d0:	d107      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80069da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f931 	bl	8007c44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e0ff      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b14      	cmp	r3, #20
 8006a16:	f200 80f0 	bhi.w	8006bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006bfb 	.word	0x08006bfb
 8006a28:	08006bfb 	.word	0x08006bfb
 8006a2c:	08006bfb 	.word	0x08006bfb
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006bfb 	.word	0x08006bfb
 8006a38:	08006bfb 	.word	0x08006bfb
 8006a3c:	08006bfb 	.word	0x08006bfb
 8006a40:	08006af7 	.word	0x08006af7
 8006a44:	08006bfb 	.word	0x08006bfb
 8006a48:	08006bfb 	.word	0x08006bfb
 8006a4c:	08006bfb 	.word	0x08006bfb
 8006a50:	08006b37 	.word	0x08006b37
 8006a54:	08006bfb 	.word	0x08006bfb
 8006a58:	08006bfb 	.word	0x08006bfb
 8006a5c:	08006bfb 	.word	0x08006bfb
 8006a60:	08006b79 	.word	0x08006b79
 8006a64:	08006bfb 	.word	0x08006bfb
 8006a68:	08006bfb 	.word	0x08006bfb
 8006a6c:	08006bfb 	.word	0x08006bfb
 8006a70:	08006bb9 	.word	0x08006bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fab0 	bl	8006fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0204 	bic.w	r2, r2, #4
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
      break;
 8006ab2:	e0a5      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fb2a 	bl	8007114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6999      	ldr	r1, [r3, #24]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	619a      	str	r2, [r3, #24]
      break;
 8006af4:	e084      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fb9d 	bl	800723c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0208 	orr.w	r2, r2, #8
 8006b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0204 	bic.w	r2, r2, #4
 8006b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	61da      	str	r2, [r3, #28]
      break;
 8006b34:	e064      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fc0f 	bl	8007360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	021a      	lsls	r2, r3, #8
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	61da      	str	r2, [r3, #28]
      break;
 8006b76:	e043      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fc82 	bl	8007488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006bb6:	e023      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fccc 	bl	800755c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006bf8:	e002      	b.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop

08006c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_ConfigClockSource+0x1c>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e0f6      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x20a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a6f      	ldr	r2, [pc, #444]	; (8006e28 <HAL_TIM_ConfigClockSource+0x214>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f000 80c1 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c70:	4a6d      	ldr	r2, [pc, #436]	; (8006e28 <HAL_TIM_ConfigClockSource+0x214>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f200 80c6 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c78:	4a6c      	ldr	r2, [pc, #432]	; (8006e2c <HAL_TIM_ConfigClockSource+0x218>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	f000 80b9 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c80:	4a6a      	ldr	r2, [pc, #424]	; (8006e2c <HAL_TIM_ConfigClockSource+0x218>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f200 80be 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c88:	4a69      	ldr	r2, [pc, #420]	; (8006e30 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f000 80b1 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c90:	4a67      	ldr	r2, [pc, #412]	; (8006e30 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	f200 80b6 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c98:	4a66      	ldr	r2, [pc, #408]	; (8006e34 <HAL_TIM_ConfigClockSource+0x220>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	f000 80a9 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca0:	4a64      	ldr	r2, [pc, #400]	; (8006e34 <HAL_TIM_ConfigClockSource+0x220>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	f200 80ae 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ca8:	4a63      	ldr	r2, [pc, #396]	; (8006e38 <HAL_TIM_ConfigClockSource+0x224>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	f000 80a1 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cb0:	4a61      	ldr	r2, [pc, #388]	; (8006e38 <HAL_TIM_ConfigClockSource+0x224>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	f200 80a6 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cb8:	4a60      	ldr	r2, [pc, #384]	; (8006e3c <HAL_TIM_ConfigClockSource+0x228>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	f000 8099 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cc0:	4a5e      	ldr	r2, [pc, #376]	; (8006e3c <HAL_TIM_ConfigClockSource+0x228>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	f200 809e 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ccc:	f000 8091 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006cd4:	f200 8096 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cdc:	f000 8089 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce4:	f200 808e 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cec:	d03e      	beq.n	8006d6c <HAL_TIM_ConfigClockSource+0x158>
 8006cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf2:	f200 8087 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfa:	f000 8086 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x1f6>
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d02:	d87f      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d04:	2b70      	cmp	r3, #112	; 0x70
 8006d06:	d01a      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x12a>
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d87b      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d0c:	2b60      	cmp	r3, #96	; 0x60
 8006d0e:	d050      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x19e>
 8006d10:	2b60      	cmp	r3, #96	; 0x60
 8006d12:	d877      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d14:	2b50      	cmp	r3, #80	; 0x50
 8006d16:	d03c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x17e>
 8006d18:	2b50      	cmp	r3, #80	; 0x50
 8006d1a:	d873      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d058      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x1be>
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d86f      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d24:	2b30      	cmp	r3, #48	; 0x30
 8006d26:	d064      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d28:	2b30      	cmp	r3, #48	; 0x30
 8006d2a:	d86b      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d060      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d867      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05c      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d05a      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d3c:	e062      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6899      	ldr	r1, [r3, #8]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f000 fced 	bl	800772c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	609a      	str	r2, [r3, #8]
      break;
 8006d6a:	e04f      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6899      	ldr	r1, [r3, #8]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f000 fcd6 	bl	800772c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d8e:	609a      	str	r2, [r3, #8]
      break;
 8006d90:	e03c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 fc48 	bl	8007634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2150      	movs	r1, #80	; 0x50
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fca1 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8006db0:	e02c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6859      	ldr	r1, [r3, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f000 fc67 	bl	8007692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2160      	movs	r1, #96	; 0x60
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fc91 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e01c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f000 fc28 	bl	8007634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2140      	movs	r1, #64	; 0x40
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fc81 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8006df0:	e00c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f000 fc78 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8006e02:	e003      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	00100070 	.word	0x00100070
 8006e2c:	00100060 	.word	0x00100060
 8006e30:	00100050 	.word	0x00100050
 8006e34:	00100040 	.word	0x00100040
 8006e38:	00100030 	.word	0x00100030
 8006e3c:	00100020 	.word	0x00100020

08006e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d017      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eae:	d013      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a43      	ldr	r2, [pc, #268]	; (8006fc0 <TIM_Base_SetConfig+0x130>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a42      	ldr	r2, [pc, #264]	; (8006fc4 <TIM_Base_SetConfig+0x134>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a41      	ldr	r2, [pc, #260]	; (8006fc8 <TIM_Base_SetConfig+0x138>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a40      	ldr	r2, [pc, #256]	; (8006fcc <TIM_Base_SetConfig+0x13c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_Base_SetConfig+0x48>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	; (8006fd0 <TIM_Base_SetConfig+0x140>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d023      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d01f      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a30      	ldr	r2, [pc, #192]	; (8006fc0 <TIM_Base_SetConfig+0x130>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01b      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <TIM_Base_SetConfig+0x134>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d017      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2e      	ldr	r2, [pc, #184]	; (8006fc8 <TIM_Base_SetConfig+0x138>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <TIM_Base_SetConfig+0x13c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00f      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <TIM_Base_SetConfig+0x144>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00b      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <TIM_Base_SetConfig+0x148>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <TIM_Base_SetConfig+0x14c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_Base_SetConfig+0xaa>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <TIM_Base_SetConfig+0x140>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d108      	bne.n	8006f4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a12      	ldr	r2, [pc, #72]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <TIM_Base_SetConfig+0x110>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <TIM_Base_SetConfig+0x13c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00f      	beq.n	8006fa0 <TIM_Base_SetConfig+0x110>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <TIM_Base_SetConfig+0x144>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <TIM_Base_SetConfig+0x110>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a13      	ldr	r2, [pc, #76]	; (8006fd8 <TIM_Base_SetConfig+0x148>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d007      	beq.n	8006fa0 <TIM_Base_SetConfig+0x110>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <TIM_Base_SetConfig+0x14c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_Base_SetConfig+0x110>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a0d      	ldr	r2, [pc, #52]	; (8006fd0 <TIM_Base_SetConfig+0x140>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d103      	bne.n	8006fa8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	615a      	str	r2, [r3, #20]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40000400 	.word	0x40000400
 8006fc4:	40000800 	.word	0x40000800
 8006fc8:	40000c00 	.word	0x40000c00
 8006fcc:	40013400 	.word	0x40013400
 8006fd0:	40015000 	.word	0x40015000
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	40014800 	.word	0x40014800

08006fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0201 	bic.w	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 0302 	bic.w	r3, r3, #2
 800702c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a30      	ldr	r2, [pc, #192]	; (80070fc <TIM_OC1_SetConfig+0x11c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d013      	beq.n	8007068 <TIM_OC1_SetConfig+0x88>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a2f      	ldr	r2, [pc, #188]	; (8007100 <TIM_OC1_SetConfig+0x120>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00f      	beq.n	8007068 <TIM_OC1_SetConfig+0x88>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a2e      	ldr	r2, [pc, #184]	; (8007104 <TIM_OC1_SetConfig+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00b      	beq.n	8007068 <TIM_OC1_SetConfig+0x88>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a2d      	ldr	r2, [pc, #180]	; (8007108 <TIM_OC1_SetConfig+0x128>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d007      	beq.n	8007068 <TIM_OC1_SetConfig+0x88>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a2c      	ldr	r2, [pc, #176]	; (800710c <TIM_OC1_SetConfig+0x12c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC1_SetConfig+0x88>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a2b      	ldr	r2, [pc, #172]	; (8007110 <TIM_OC1_SetConfig+0x130>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0308 	bic.w	r3, r3, #8
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <TIM_OC1_SetConfig+0x11c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <TIM_OC1_SetConfig+0xd2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <TIM_OC1_SetConfig+0x120>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00f      	beq.n	80070b2 <TIM_OC1_SetConfig+0xd2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <TIM_OC1_SetConfig+0x124>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00b      	beq.n	80070b2 <TIM_OC1_SetConfig+0xd2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1a      	ldr	r2, [pc, #104]	; (8007108 <TIM_OC1_SetConfig+0x128>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d007      	beq.n	80070b2 <TIM_OC1_SetConfig+0xd2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <TIM_OC1_SetConfig+0x12c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_OC1_SetConfig+0xd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <TIM_OC1_SetConfig+0x130>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d111      	bne.n	80070d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	621a      	str	r2, [r3, #32]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40013400 	.word	0x40013400
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800
 8007110:	40015000 	.word	0x40015000

08007114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0210 	bic.w	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0320 	bic.w	r3, r3, #32
 8007162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <TIM_OC2_SetConfig+0x110>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_OC2_SetConfig+0x74>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a2b      	ldr	r2, [pc, #172]	; (8007228 <TIM_OC2_SetConfig+0x114>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC2_SetConfig+0x74>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a2a      	ldr	r2, [pc, #168]	; (800722c <TIM_OC2_SetConfig+0x118>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d10d      	bne.n	80071a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <TIM_OC2_SetConfig+0x110>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <TIM_OC2_SetConfig+0xc0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <TIM_OC2_SetConfig+0x114>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <TIM_OC2_SetConfig+0xc0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <TIM_OC2_SetConfig+0x11c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_OC2_SetConfig+0xc0>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <TIM_OC2_SetConfig+0x120>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC2_SetConfig+0xc0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <TIM_OC2_SetConfig+0x124>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC2_SetConfig+0xc0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <TIM_OC2_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d113      	bne.n	80071fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40015000 	.word	0x40015000
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800

0800723c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a2b      	ldr	r2, [pc, #172]	; (8007348 <TIM_OC3_SetConfig+0x10c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <TIM_OC3_SetConfig+0x72>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2a      	ldr	r2, [pc, #168]	; (800734c <TIM_OC3_SetConfig+0x110>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC3_SetConfig+0x72>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a29      	ldr	r2, [pc, #164]	; (8007350 <TIM_OC3_SetConfig+0x114>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d10d      	bne.n	80072ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a1e      	ldr	r2, [pc, #120]	; (8007348 <TIM_OC3_SetConfig+0x10c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <TIM_OC3_SetConfig+0xbe>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1d      	ldr	r2, [pc, #116]	; (800734c <TIM_OC3_SetConfig+0x110>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00f      	beq.n	80072fa <TIM_OC3_SetConfig+0xbe>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <TIM_OC3_SetConfig+0x118>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00b      	beq.n	80072fa <TIM_OC3_SetConfig+0xbe>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <TIM_OC3_SetConfig+0x11c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d007      	beq.n	80072fa <TIM_OC3_SetConfig+0xbe>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a1b      	ldr	r2, [pc, #108]	; (800735c <TIM_OC3_SetConfig+0x120>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC3_SetConfig+0xbe>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a16      	ldr	r2, [pc, #88]	; (8007350 <TIM_OC3_SetConfig+0x114>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d113      	bne.n	8007322 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	621a      	str	r2, [r3, #32]
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40012c00 	.word	0x40012c00
 800734c:	40013400 	.word	0x40013400
 8007350:	40015000 	.word	0x40015000
 8007354:	40014000 	.word	0x40014000
 8007358:	40014400 	.word	0x40014400
 800735c:	40014800 	.word	0x40014800

08007360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <TIM_OC4_SetConfig+0x110>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d007      	beq.n	80073d4 <TIM_OC4_SetConfig+0x74>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a2b      	ldr	r2, [pc, #172]	; (8007474 <TIM_OC4_SetConfig+0x114>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC4_SetConfig+0x74>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a2a      	ldr	r2, [pc, #168]	; (8007478 <TIM_OC4_SetConfig+0x118>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10d      	bne.n	80073f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	031b      	lsls	r3, r3, #12
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <TIM_OC4_SetConfig+0x110>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <TIM_OC4_SetConfig+0xc0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <TIM_OC4_SetConfig+0x114>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00f      	beq.n	8007420 <TIM_OC4_SetConfig+0xc0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1e      	ldr	r2, [pc, #120]	; (800747c <TIM_OC4_SetConfig+0x11c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_OC4_SetConfig+0xc0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1d      	ldr	r2, [pc, #116]	; (8007480 <TIM_OC4_SetConfig+0x120>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <TIM_OC4_SetConfig+0xc0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <TIM_OC4_SetConfig+0x124>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_OC4_SetConfig+0xc0>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <TIM_OC4_SetConfig+0x118>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d113      	bne.n	8007448 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007426:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800742e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	019b      	lsls	r3, r3, #6
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	019b      	lsls	r3, r3, #6
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40013400 	.word	0x40013400
 8007478:	40015000 	.word	0x40015000
 800747c:	40014000 	.word	0x40014000
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800

08007488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a19      	ldr	r2, [pc, #100]	; (8007544 <TIM_OC5_SetConfig+0xbc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <TIM_OC5_SetConfig+0x82>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a18      	ldr	r2, [pc, #96]	; (8007548 <TIM_OC5_SetConfig+0xc0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_OC5_SetConfig+0x82>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a17      	ldr	r2, [pc, #92]	; (800754c <TIM_OC5_SetConfig+0xc4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_OC5_SetConfig+0x82>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a16      	ldr	r2, [pc, #88]	; (8007550 <TIM_OC5_SetConfig+0xc8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_OC5_SetConfig+0x82>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <TIM_OC5_SetConfig+0xcc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_OC5_SetConfig+0x82>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a14      	ldr	r2, [pc, #80]	; (8007558 <TIM_OC5_SetConfig+0xd0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d109      	bne.n	800751e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	621a      	str	r2, [r3, #32]
}
 8007538:	bf00      	nop
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40013400 	.word	0x40013400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800
 8007558:	40015000 	.word	0x40015000

0800755c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800758a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	051b      	lsls	r3, r3, #20
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1a      	ldr	r2, [pc, #104]	; (800761c <TIM_OC6_SetConfig+0xc0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <TIM_OC6_SetConfig+0x84>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a19      	ldr	r2, [pc, #100]	; (8007620 <TIM_OC6_SetConfig+0xc4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00f      	beq.n	80075e0 <TIM_OC6_SetConfig+0x84>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a18      	ldr	r2, [pc, #96]	; (8007624 <TIM_OC6_SetConfig+0xc8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00b      	beq.n	80075e0 <TIM_OC6_SetConfig+0x84>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <TIM_OC6_SetConfig+0xcc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d007      	beq.n	80075e0 <TIM_OC6_SetConfig+0x84>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <TIM_OC6_SetConfig+0xd0>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_OC6_SetConfig+0x84>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <TIM_OC6_SetConfig+0xd4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d109      	bne.n	80075f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	029b      	lsls	r3, r3, #10
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40012c00 	.word	0x40012c00
 8007620:	40013400 	.word	0x40013400
 8007624:	40014000 	.word	0x40014000
 8007628:	40014400 	.word	0x40014400
 800762c:	40014800 	.word	0x40014800
 8007630:	40015000 	.word	0x40015000

08007634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0201 	bic.w	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f023 030a 	bic.w	r3, r3, #10
 8007670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007692:	b480      	push	{r7}
 8007694:	b087      	sub	sp, #28
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0210 	bic.w	r2, r3, #16
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	f043 0307 	orr.w	r3, r3, #7
 8007718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	609a      	str	r2, [r3, #8]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	021a      	lsls	r2, r3, #8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	431a      	orrs	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4313      	orrs	r3, r2
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	609a      	str	r2, [r3, #8]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2201      	movs	r2, #1
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	43db      	mvns	r3, r3
 800778e:	401a      	ands	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a1a      	ldr	r2, [r3, #32]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_TIMEx_PWMN_Start+0x24>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e022      	b.n	8007822 <HAL_TIMEx_PWMN_Start+0x6a>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d109      	bne.n	80077f6 <HAL_TIMEx_PWMN_Start+0x3e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	bf14      	ite	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	2300      	moveq	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	e015      	b.n	8007822 <HAL_TIMEx_PWMN_Start+0x6a>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d109      	bne.n	8007810 <HAL_TIMEx_PWMN_Start+0x58>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	bf14      	ite	ne
 8007808:	2301      	movne	r3, #1
 800780a:	2300      	moveq	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e008      	b.n	8007822 <HAL_TIMEx_PWMN_Start+0x6a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e073      	b.n	8007912 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <HAL_TIMEx_PWMN_Start+0x82>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007838:	e013      	b.n	8007862 <HAL_TIMEx_PWMN_Start+0xaa>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b04      	cmp	r3, #4
 800783e:	d104      	bne.n	800784a <HAL_TIMEx_PWMN_Start+0x92>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007848:	e00b      	b.n	8007862 <HAL_TIMEx_PWMN_Start+0xaa>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d104      	bne.n	800785a <HAL_TIMEx_PWMN_Start+0xa2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007858:	e003      	b.n	8007862 <HAL_TIMEx_PWMN_Start+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2204      	movs	r2, #4
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f9f4 	bl	8007c58 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800787e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a25      	ldr	r2, [pc, #148]	; (800791c <HAL_TIMEx_PWMN_Start+0x164>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d022      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007892:	d01d      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a21      	ldr	r2, [pc, #132]	; (8007920 <HAL_TIMEx_PWMN_Start+0x168>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d018      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a20      	ldr	r2, [pc, #128]	; (8007924 <HAL_TIMEx_PWMN_Start+0x16c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <HAL_TIMEx_PWMN_Start+0x170>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	; (800792c <HAL_TIMEx_PWMN_Start+0x174>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <HAL_TIMEx_PWMN_Start+0x178>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <HAL_TIMEx_PWMN_Start+0x118>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <HAL_TIMEx_PWMN_Start+0x17c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d115      	bne.n	80078fc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <HAL_TIMEx_PWMN_Start+0x180>)
 80078d8:	4013      	ands	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b06      	cmp	r3, #6
 80078e0:	d015      	beq.n	800790e <HAL_TIMEx_PWMN_Start+0x156>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e8:	d011      	beq.n	800790e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fa:	e008      	b.n	800790e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e000      	b.n	8007910 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	40012c00 	.word	0x40012c00
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40013400 	.word	0x40013400
 8007930:	40014000 	.word	0x40014000
 8007934:	40015000 	.word	0x40015000
 8007938:	00010007 	.word	0x00010007

0800793c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007950:	2302      	movs	r3, #2
 8007952:	e074      	b.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a34      	ldr	r2, [pc, #208]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a33      	ldr	r2, [pc, #204]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a31      	ldr	r2, [pc, #196]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d108      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d022      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d4:	d01d      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d018      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d009      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d004      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10c      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	40013400 	.word	0x40013400
 8007a54:	40015000 	.word	0x40015000
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40014000 	.word	0x40014000

08007a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e096      	b.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a2f      	ldr	r2, [pc, #188]	; (8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a2d      	ldr	r2, [pc, #180]	; (8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a2c      	ldr	r2, [pc, #176]	; (8007bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d106      	bne.n	8007b2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a24      	ldr	r2, [pc, #144]	; (8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d009      	beq.n	8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a22      	ldr	r2, [pc, #136]	; (8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d12b      	bne.n	8007ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	051b      	lsls	r3, r3, #20
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a11      	ldr	r2, [pc, #68]	; (8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d009      	beq.n	8007b92 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a10      	ldr	r2, [pc, #64]	; (8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d106      	bne.n	8007ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40015000 	.word	0x40015000

08007bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	401a      	ands	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1a      	ldr	r2, [r3, #32]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e042      	b.n	8007d3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fa fd20 	bl	800270c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	; 0x24
 8007cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc51 	bl	800858c <UART_SetConfig>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e022      	b.n	8007d3a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ff41 	bl	8008b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0201 	orr.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ffc8 	bl	8008cc8 <UART_CheckIdleState>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b08a      	sub	sp, #40	; 0x28
 8007d46:	af02      	add	r7, sp, #8
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	603b      	str	r3, [r7, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	f040 8083 	bne.w	8007e64 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <HAL_UART_Transmit+0x28>
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e07b      	b.n	8007e66 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Transmit+0x3a>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e074      	b.n	8007e66 <HAL_UART_Transmit+0x124>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2221      	movs	r2, #33	; 0x21
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d94:	f7fa fe0a 	bl	80029ac <HAL_GetTick>
 8007d98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	88fa      	ldrh	r2, [r7, #6]
 8007d9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	88fa      	ldrh	r2, [r7, #6]
 8007da6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d108      	bne.n	8007dc6 <HAL_UART_Transmit+0x84>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e003      	b.n	8007dce <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007dd6:	e02c      	b.n	8007e32 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2200      	movs	r2, #0
 8007de0:	2180      	movs	r1, #128	; 0x80
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 ffbb 	bl	8008d5e <UART_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e039      	b.n	8007e66 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e007      	b.n	8007e20 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1cc      	bne.n	8007dd8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2140      	movs	r1, #64	; 0x40
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 ff88 	bl	8008d5e <UART_WaitOnFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e006      	b.n	8007e66 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d142      	bne.n	8007f0e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_UART_Receive_IT+0x24>
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e03b      	b.n	8007f10 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UART_Receive_IT+0x36>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e034      	b.n	8007f10 <HAL_UART_Receive_IT+0xa0>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <HAL_UART_Receive_IT+0xa8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01f      	beq.n	8007efe <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	69f9      	ldr	r1, [r7, #28]
 8007ef0:	6a3a      	ldr	r2, [r7, #32]
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	461a      	mov	r2, r3
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fff3 	bl	8008ef0 <UART_Start_Receive_IT>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	e000      	b.n	8007f10 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3728      	adds	r7, #40	; 0x28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40008000 	.word	0x40008000

08007f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b0ba      	sub	sp, #232	; 0xe8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11b      	bne.n	8007f90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d015      	beq.n	8007f90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d105      	bne.n	8007f7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 82d6 	beq.w	8008532 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
      }
      return;
 8007f8e:	e2d0      	b.n	8008532 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 811f 	beq.w	80081d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f9e:	4b8b      	ldr	r3, [pc, #556]	; (80081cc <HAL_UART_IRQHandler+0x2b0>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007faa:	4b89      	ldr	r3, [pc, #548]	; (80081d0 <HAL_UART_IRQHandler+0x2b4>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8112 	beq.w	80081d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d011      	beq.n	8007fe4 <HAL_UART_IRQHandler+0xc8>
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fda:	f043 0201 	orr.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d011      	beq.n	8008014 <HAL_UART_IRQHandler+0xf8>
 8007ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2202      	movs	r2, #2
 8008002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800800a:	f043 0204 	orr.w	r2, r3, #4
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d011      	beq.n	8008044 <HAL_UART_IRQHandler+0x128>
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2204      	movs	r2, #4
 8008032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803a:	f043 0202 	orr.w	r2, r3, #2
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800805c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008060:	4b5a      	ldr	r3, [pc, #360]	; (80081cc <HAL_UART_IRQHandler+0x2b0>)
 8008062:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2208      	movs	r2, #8
 800806e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008076:	f043 0208 	orr.w	r2, r3, #8
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008088:	2b00      	cmp	r3, #0
 800808a:	d012      	beq.n	80080b2 <HAL_UART_IRQHandler+0x196>
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 823c 	beq.w	8008536 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d013      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d005      	beq.n	8008116 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800810a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800810e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04f      	beq.n	80081b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f814 	bl	8009144 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d141      	bne.n	80081ae <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800815a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800816e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d9      	bne.n	800812a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d013      	beq.n	80081a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008182:	4a14      	ldr	r2, [pc, #80]	; (80081d4 <HAL_UART_IRQHandler+0x2b8>)
 8008184:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc fadc 	bl	8004748 <HAL_DMA_Abort_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d017      	beq.n	80081c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	e00f      	b.n	80081c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f9da 	bl	8008560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	e00b      	b.n	80081c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f9d6 	bl	8008560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	e007      	b.n	80081c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9d2 	bl	8008560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80081c4:	e1b7      	b.n	8008536 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c6:	bf00      	nop
    return;
 80081c8:	e1b5      	b.n	8008536 <HAL_UART_IRQHandler+0x61a>
 80081ca:	bf00      	nop
 80081cc:	10000001 	.word	0x10000001
 80081d0:	04000120 	.word	0x04000120
 80081d4:	08009211 	.word	0x08009211

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	f040 814a 	bne.w	8008476 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 8143 	beq.w	8008476 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 813c 	beq.w	8008476 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2210      	movs	r2, #16
 8008204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	f040 80b5 	bne.w	8008380 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008222:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8187 	beq.w	800853a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008236:	429a      	cmp	r2, r3
 8008238:	f080 817f 	bcs.w	800853a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008242:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 8086 	bne.w	8008364 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800826c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800828e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800829a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1da      	bne.n	8008258 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e1      	bne.n	80082a2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008302:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008334:	f023 0310 	bic.w	r3, r3, #16
 8008338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008346:	65bb      	str	r3, [r7, #88]	; 0x58
 8008348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800834c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e4      	bne.n	8008324 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	4618      	mov	r0, r3
 8008360:	f7fc f999 	bl	8004696 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008370:	b29b      	uxth	r3, r3
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	b29b      	uxth	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8fb 	bl	8008574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800837e:	e0dc      	b.n	800853a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838c:	b29b      	uxth	r3, r3
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80ce 	beq.w	800853e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80083a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80c9 	beq.w	800853e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ce:	647b      	str	r3, [r7, #68]	; 0x44
 80083d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e4      	bne.n	80083ac <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	623b      	str	r3, [r7, #32]
   return(result);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800840a:	633a      	str	r2, [r7, #48]	; 0x30
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e1      	bne.n	80083e2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0310 	bic.w	r3, r3, #16
 8008446:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	69b9      	ldr	r1, [r7, #24]
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	617b      	str	r3, [r7, #20]
   return(result);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f880 	bl	8008574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008474:	e063      	b.n	800853e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <HAL_UART_IRQHandler+0x584>
 8008482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fb57 	bl	8009b4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800849e:	e051      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d014      	beq.n	80084d6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d03a      	beq.n	8008542 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
    }
    return;
 80084d4:	e035      	b.n	8008542 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <HAL_UART_IRQHandler+0x5da>
 80084e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fea4 	bl	800923c <UART_EndTransmit_IT>
    return;
 80084f4:	e026      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0x5fa>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fb30 	bl	8009b74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008514:	e016      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <HAL_UART_IRQHandler+0x628>
 8008522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008526:	2b00      	cmp	r3, #0
 8008528:	da0c      	bge.n	8008544 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fb18 	bl	8009b60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008530:	e008      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
      return;
 8008532:	bf00      	nop
 8008534:	e006      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
    return;
 8008536:	bf00      	nop
 8008538:	e004      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
      return;
 800853a:	bf00      	nop
 800853c:	e002      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
      return;
 800853e:	bf00      	nop
 8008540:	e000      	b.n	8008544 <HAL_UART_IRQHandler+0x628>
    return;
 8008542:	bf00      	nop
  }
}
 8008544:	37e8      	adds	r7, #232	; 0xe8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800858c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008590:	b08c      	sub	sp, #48	; 0x30
 8008592:	af00      	add	r7, sp, #0
 8008594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4baa      	ldr	r3, [pc, #680]	; (8008864 <UART_SetConfig+0x2d8>)
 80085bc:	4013      	ands	r3, r2
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a9f      	ldr	r2, [pc, #636]	; (8008868 <UART_SetConfig+0x2dc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f4:	4313      	orrs	r3, r2
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008602:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800860c:	430b      	orrs	r3, r1
 800860e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	f023 010f 	bic.w	r1, r3, #15
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a90      	ldr	r2, [pc, #576]	; (800886c <UART_SetConfig+0x2e0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d125      	bne.n	800867c <UART_SetConfig+0xf0>
 8008630:	4b8f      	ldr	r3, [pc, #572]	; (8008870 <UART_SetConfig+0x2e4>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	2b03      	cmp	r3, #3
 800863c:	d81a      	bhi.n	8008674 <UART_SetConfig+0xe8>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <UART_SetConfig+0xb8>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008655 	.word	0x08008655
 8008648:	08008665 	.word	0x08008665
 800864c:	0800865d 	.word	0x0800865d
 8008650:	0800866d 	.word	0x0800866d
 8008654:	2301      	movs	r3, #1
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865a:	e116      	b.n	800888a <UART_SetConfig+0x2fe>
 800865c:	2302      	movs	r3, #2
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008662:	e112      	b.n	800888a <UART_SetConfig+0x2fe>
 8008664:	2304      	movs	r3, #4
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866a:	e10e      	b.n	800888a <UART_SetConfig+0x2fe>
 800866c:	2308      	movs	r3, #8
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e10a      	b.n	800888a <UART_SetConfig+0x2fe>
 8008674:	2310      	movs	r3, #16
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e106      	b.n	800888a <UART_SetConfig+0x2fe>
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a7c      	ldr	r2, [pc, #496]	; (8008874 <UART_SetConfig+0x2e8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d138      	bne.n	80086f8 <UART_SetConfig+0x16c>
 8008686:	4b7a      	ldr	r3, [pc, #488]	; (8008870 <UART_SetConfig+0x2e4>)
 8008688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868c:	f003 030c 	and.w	r3, r3, #12
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d82d      	bhi.n	80086f0 <UART_SetConfig+0x164>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <UART_SetConfig+0x110>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	080086f1 	.word	0x080086f1
 80086a4:	080086f1 	.word	0x080086f1
 80086a8:	080086f1 	.word	0x080086f1
 80086ac:	080086e1 	.word	0x080086e1
 80086b0:	080086f1 	.word	0x080086f1
 80086b4:	080086f1 	.word	0x080086f1
 80086b8:	080086f1 	.word	0x080086f1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	080086f1 	.word	0x080086f1
 80086c4:	080086f1 	.word	0x080086f1
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086e9 	.word	0x080086e9
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d6:	e0d8      	b.n	800888a <UART_SetConfig+0x2fe>
 80086d8:	2302      	movs	r3, #2
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086de:	e0d4      	b.n	800888a <UART_SetConfig+0x2fe>
 80086e0:	2304      	movs	r3, #4
 80086e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e6:	e0d0      	b.n	800888a <UART_SetConfig+0x2fe>
 80086e8:	2308      	movs	r3, #8
 80086ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ee:	e0cc      	b.n	800888a <UART_SetConfig+0x2fe>
 80086f0:	2310      	movs	r3, #16
 80086f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f6:	e0c8      	b.n	800888a <UART_SetConfig+0x2fe>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a5e      	ldr	r2, [pc, #376]	; (8008878 <UART_SetConfig+0x2ec>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d125      	bne.n	800874e <UART_SetConfig+0x1c2>
 8008702:	4b5b      	ldr	r3, [pc, #364]	; (8008870 <UART_SetConfig+0x2e4>)
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800870c:	2b30      	cmp	r3, #48	; 0x30
 800870e:	d016      	beq.n	800873e <UART_SetConfig+0x1b2>
 8008710:	2b30      	cmp	r3, #48	; 0x30
 8008712:	d818      	bhi.n	8008746 <UART_SetConfig+0x1ba>
 8008714:	2b20      	cmp	r3, #32
 8008716:	d00a      	beq.n	800872e <UART_SetConfig+0x1a2>
 8008718:	2b20      	cmp	r3, #32
 800871a:	d814      	bhi.n	8008746 <UART_SetConfig+0x1ba>
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <UART_SetConfig+0x19a>
 8008720:	2b10      	cmp	r3, #16
 8008722:	d008      	beq.n	8008736 <UART_SetConfig+0x1aa>
 8008724:	e00f      	b.n	8008746 <UART_SetConfig+0x1ba>
 8008726:	2300      	movs	r3, #0
 8008728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872c:	e0ad      	b.n	800888a <UART_SetConfig+0x2fe>
 800872e:	2302      	movs	r3, #2
 8008730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008734:	e0a9      	b.n	800888a <UART_SetConfig+0x2fe>
 8008736:	2304      	movs	r3, #4
 8008738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873c:	e0a5      	b.n	800888a <UART_SetConfig+0x2fe>
 800873e:	2308      	movs	r3, #8
 8008740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008744:	e0a1      	b.n	800888a <UART_SetConfig+0x2fe>
 8008746:	2310      	movs	r3, #16
 8008748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874c:	e09d      	b.n	800888a <UART_SetConfig+0x2fe>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a4a      	ldr	r2, [pc, #296]	; (800887c <UART_SetConfig+0x2f0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d125      	bne.n	80087a4 <UART_SetConfig+0x218>
 8008758:	4b45      	ldr	r3, [pc, #276]	; (8008870 <UART_SetConfig+0x2e4>)
 800875a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008762:	2bc0      	cmp	r3, #192	; 0xc0
 8008764:	d016      	beq.n	8008794 <UART_SetConfig+0x208>
 8008766:	2bc0      	cmp	r3, #192	; 0xc0
 8008768:	d818      	bhi.n	800879c <UART_SetConfig+0x210>
 800876a:	2b80      	cmp	r3, #128	; 0x80
 800876c:	d00a      	beq.n	8008784 <UART_SetConfig+0x1f8>
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d814      	bhi.n	800879c <UART_SetConfig+0x210>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <UART_SetConfig+0x1f0>
 8008776:	2b40      	cmp	r3, #64	; 0x40
 8008778:	d008      	beq.n	800878c <UART_SetConfig+0x200>
 800877a:	e00f      	b.n	800879c <UART_SetConfig+0x210>
 800877c:	2300      	movs	r3, #0
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e082      	b.n	800888a <UART_SetConfig+0x2fe>
 8008784:	2302      	movs	r3, #2
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e07e      	b.n	800888a <UART_SetConfig+0x2fe>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008792:	e07a      	b.n	800888a <UART_SetConfig+0x2fe>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879a:	e076      	b.n	800888a <UART_SetConfig+0x2fe>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a2:	e072      	b.n	800888a <UART_SetConfig+0x2fe>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a35      	ldr	r2, [pc, #212]	; (8008880 <UART_SetConfig+0x2f4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d12a      	bne.n	8008804 <UART_SetConfig+0x278>
 80087ae:	4b30      	ldr	r3, [pc, #192]	; (8008870 <UART_SetConfig+0x2e4>)
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087bc:	d01a      	beq.n	80087f4 <UART_SetConfig+0x268>
 80087be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c2:	d81b      	bhi.n	80087fc <UART_SetConfig+0x270>
 80087c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c8:	d00c      	beq.n	80087e4 <UART_SetConfig+0x258>
 80087ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ce:	d815      	bhi.n	80087fc <UART_SetConfig+0x270>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <UART_SetConfig+0x250>
 80087d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d8:	d008      	beq.n	80087ec <UART_SetConfig+0x260>
 80087da:	e00f      	b.n	80087fc <UART_SetConfig+0x270>
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e2:	e052      	b.n	800888a <UART_SetConfig+0x2fe>
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ea:	e04e      	b.n	800888a <UART_SetConfig+0x2fe>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f2:	e04a      	b.n	800888a <UART_SetConfig+0x2fe>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fa:	e046      	b.n	800888a <UART_SetConfig+0x2fe>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e042      	b.n	800888a <UART_SetConfig+0x2fe>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a17      	ldr	r2, [pc, #92]	; (8008868 <UART_SetConfig+0x2dc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d13a      	bne.n	8008884 <UART_SetConfig+0x2f8>
 800880e:	4b18      	ldr	r3, [pc, #96]	; (8008870 <UART_SetConfig+0x2e4>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800881c:	d01a      	beq.n	8008854 <UART_SetConfig+0x2c8>
 800881e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008822:	d81b      	bhi.n	800885c <UART_SetConfig+0x2d0>
 8008824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008828:	d00c      	beq.n	8008844 <UART_SetConfig+0x2b8>
 800882a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800882e:	d815      	bhi.n	800885c <UART_SetConfig+0x2d0>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <UART_SetConfig+0x2b0>
 8008834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x2c0>
 800883a:	e00f      	b.n	800885c <UART_SetConfig+0x2d0>
 800883c:	2300      	movs	r3, #0
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008842:	e022      	b.n	800888a <UART_SetConfig+0x2fe>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884a:	e01e      	b.n	800888a <UART_SetConfig+0x2fe>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008852:	e01a      	b.n	800888a <UART_SetConfig+0x2fe>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e016      	b.n	800888a <UART_SetConfig+0x2fe>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e012      	b.n	800888a <UART_SetConfig+0x2fe>
 8008864:	cfff69f3 	.word	0xcfff69f3
 8008868:	40008000 	.word	0x40008000
 800886c:	40013800 	.word	0x40013800
 8008870:	40021000 	.word	0x40021000
 8008874:	40004400 	.word	0x40004400
 8008878:	40004800 	.word	0x40004800
 800887c:	40004c00 	.word	0x40004c00
 8008880:	40005000 	.word	0x40005000
 8008884:	2310      	movs	r3, #16
 8008886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4aae      	ldr	r2, [pc, #696]	; (8008b48 <UART_SetConfig+0x5bc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	f040 8097 	bne.w	80089c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800889a:	2b08      	cmp	r3, #8
 800889c:	d823      	bhi.n	80088e6 <UART_SetConfig+0x35a>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <UART_SetConfig+0x318>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088e7 	.word	0x080088e7
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088e7 	.word	0x080088e7
 80088b4:	080088d7 	.word	0x080088d7
 80088b8:	080088e7 	.word	0x080088e7
 80088bc:	080088e7 	.word	0x080088e7
 80088c0:	080088e7 	.word	0x080088e7
 80088c4:	080088df 	.word	0x080088df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c8:	f7fd f836 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ce:	e010      	b.n	80088f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d0:	4b9e      	ldr	r3, [pc, #632]	; (8008b4c <UART_SetConfig+0x5c0>)
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e00d      	b.n	80088f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d6:	f7fc ffc1 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088dc:	e009      	b.n	80088f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e4:	e005      	b.n	80088f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8130 	beq.w	8008b5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	4a94      	ldr	r2, [pc, #592]	; (8008b50 <UART_SetConfig+0x5c4>)
 8008900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008904:	461a      	mov	r2, r3
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	fbb3 f3f2 	udiv	r3, r3, r2
 800890c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	4613      	mov	r3, r2
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	4413      	add	r3, r2
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d305      	bcc.n	800892a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	429a      	cmp	r2, r3
 8008928:	d903      	bls.n	8008932 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008930:	e113      	b.n	8008b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	2200      	movs	r2, #0
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	60fa      	str	r2, [r7, #12]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	4a84      	ldr	r2, [pc, #528]	; (8008b50 <UART_SetConfig+0x5c4>)
 8008940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008944:	b29b      	uxth	r3, r3
 8008946:	2200      	movs	r2, #0
 8008948:	603b      	str	r3, [r7, #0]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008954:	f7f8 f9d0 	bl	8000cf8 <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	020b      	lsls	r3, r1, #8
 800896a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800896e:	0202      	lsls	r2, r0, #8
 8008970:	6979      	ldr	r1, [r7, #20]
 8008972:	6849      	ldr	r1, [r1, #4]
 8008974:	0849      	lsrs	r1, r1, #1
 8008976:	2000      	movs	r0, #0
 8008978:	460c      	mov	r4, r1
 800897a:	4605      	mov	r5, r0
 800897c:	eb12 0804 	adds.w	r8, r2, r4
 8008980:	eb43 0905 	adc.w	r9, r3, r5
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	469a      	mov	sl, r3
 800898c:	4693      	mov	fp, r2
 800898e:	4652      	mov	r2, sl
 8008990:	465b      	mov	r3, fp
 8008992:	4640      	mov	r0, r8
 8008994:	4649      	mov	r1, r9
 8008996:	f7f8 f9af 	bl	8000cf8 <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4613      	mov	r3, r2
 80089a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a8:	d308      	bcc.n	80089bc <UART_SetConfig+0x430>
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b0:	d204      	bcs.n	80089bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	60da      	str	r2, [r3, #12]
 80089ba:	e0ce      	b.n	8008b5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089c2:	e0ca      	b.n	8008b5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089cc:	d166      	bne.n	8008a9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80089ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d827      	bhi.n	8008a26 <UART_SetConfig+0x49a>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x450>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fc ff9a 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a06:	e014      	b.n	8008a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fc ffac 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a0e:	e010      	b.n	8008a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b4e      	ldr	r3, [pc, #312]	; (8008b4c <UART_SetConfig+0x5c0>)
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a14:	e00d      	b.n	8008a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fc ff21 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8008a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8090 	beq.w	8008b5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	4a44      	ldr	r2, [pc, #272]	; (8008b50 <UART_SetConfig+0x5c4>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4c:	005a      	lsls	r2, r3, #1
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	441a      	add	r2, r3
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d916      	bls.n	8008a94 <UART_SetConfig+0x508>
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d212      	bcs.n	8008a94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f023 030f 	bic.w	r3, r3, #15
 8008a76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8bfb      	ldrh	r3, [r7, #30]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	8bfa      	ldrh	r2, [r7, #30]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e062      	b.n	8008b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a9a:	e05e      	b.n	8008b5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d828      	bhi.n	8008af6 <UART_SetConfig+0x56a>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x520>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ae1 	.word	0x08008ae1
 8008ab8:	08008af7 	.word	0x08008af7
 8008abc:	08008ae7 	.word	0x08008ae7
 8008ac0:	08008af7 	.word	0x08008af7
 8008ac4:	08008af7 	.word	0x08008af7
 8008ac8:	08008af7 	.word	0x08008af7
 8008acc:	08008aef 	.word	0x08008aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad0:	f7fc ff32 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8008ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ad6:	e014      	b.n	8008b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ad8:	f7fc ff44 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8008adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ade:	e010      	b.n	8008b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ae0:	4b1a      	ldr	r3, [pc, #104]	; (8008b4c <UART_SetConfig+0x5c0>)
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ae4:	e00d      	b.n	8008b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ae6:	f7fc feb9 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aec:	e009      	b.n	8008b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008af4:	e005      	b.n	8008b02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b00:	bf00      	nop
    }

    if (pclk != 0U)
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d028      	beq.n	8008b5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	4a10      	ldr	r2, [pc, #64]	; (8008b50 <UART_SetConfig+0x5c4>)
 8008b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	085b      	lsrs	r3, r3, #1
 8008b20:	441a      	add	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	2b0f      	cmp	r3, #15
 8008b30:	d910      	bls.n	8008b54 <UART_SetConfig+0x5c8>
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b38:	d20c      	bcs.n	8008b54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	e009      	b.n	8008b5a <UART_SetConfig+0x5ce>
 8008b46:	bf00      	nop
 8008b48:	40008000 	.word	0x40008000
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	0800e7d4 	.word	0x0800e7d4
      }
      else
      {
        ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2200      	movs	r2, #0
 8008b74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c82:	d10a      	bne.n	8008c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd8:	f7f9 fe68 	bl	80029ac <HAL_GetTick>
 8008cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d10e      	bne.n	8008d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f82f 	bl	8008d5e <UART_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e025      	b.n	8008d56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d10e      	bne.n	8008d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f819 	bl	8008d5e <UART_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e00f      	b.n	8008d56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b09c      	sub	sp, #112	; 0x70
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6e:	e0a9      	b.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	f000 80a5 	beq.w	8008ec4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7a:	f7f9 fe17 	bl	80029ac <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d302      	bcc.n	8008d90 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d140      	bne.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da4:	667b      	str	r3, [r7, #100]	; 0x64
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008db4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e6      	bne.n	8008d90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008de2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008de4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e069      	b.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d051      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2e:	d149      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8c:	623a      	str	r2, [r7, #32]
 8008e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	69f9      	ldr	r1, [r7, #28]
 8008e92:	6a3a      	ldr	r2, [r7, #32]
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e5      	bne.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e010      	b.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69da      	ldr	r2, [r3, #28]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2301      	moveq	r3, #1
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	f43f af46 	beq.w	8008d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3770      	adds	r7, #112	; 0x70
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b0a3      	sub	sp, #140	; 0x8c
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	88fa      	ldrh	r2, [r7, #6]
 8008f10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f22:	d10e      	bne.n	8008f42 <UART_Start_Receive_IT+0x52>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d105      	bne.n	8008f38 <UART_Start_Receive_IT+0x48>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f36:	e02d      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	22ff      	movs	r2, #255	; 0xff
 8008f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f40:	e028      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10d      	bne.n	8008f66 <UART_Start_Receive_IT+0x76>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <UART_Start_Receive_IT+0x6c>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f5a:	e01b      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	227f      	movs	r2, #127	; 0x7f
 8008f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f64:	e016      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f6e:	d10d      	bne.n	8008f8c <UART_Start_Receive_IT+0x9c>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <UART_Start_Receive_IT+0x92>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	227f      	movs	r2, #127	; 0x7f
 8008f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f80:	e008      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	223f      	movs	r2, #63	; 0x3f
 8008f86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f8a:	e003      	b.n	8008f94 <UART_Start_Receive_IT+0xa4>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2222      	movs	r2, #34	; 0x22
 8008fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fc8:	673a      	str	r2, [r7, #112]	; 0x70
 8008fca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e3      	bne.n	8008fa4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe4:	d153      	bne.n	800908e <UART_Start_Receive_IT+0x19e>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fec:	88fa      	ldrh	r2, [r7, #6]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d34d      	bcc.n	800908e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffa:	d107      	bne.n	800900c <UART_Start_Receive_IT+0x11c>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d103      	bne.n	800900c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a4b      	ldr	r2, [pc, #300]	; (8009134 <UART_Start_Receive_IT+0x244>)
 8009008:	671a      	str	r2, [r3, #112]	; 0x70
 800900a:	e002      	b.n	8009012 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4a4a      	ldr	r2, [pc, #296]	; (8009138 <UART_Start_Receive_IT+0x248>)
 8009010:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01a      	beq.n	8009058 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009046:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800904a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e4      	bne.n	8009022 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800906e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009078:	64ba      	str	r2, [r7, #72]	; 0x48
 800907a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800907e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e5      	bne.n	8009058 <UART_Start_Receive_IT+0x168>
 800908c:	e04a      	b.n	8009124 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009096:	d107      	bne.n	80090a8 <UART_Start_Receive_IT+0x1b8>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d103      	bne.n	80090a8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a26      	ldr	r2, [pc, #152]	; (800913c <UART_Start_Receive_IT+0x24c>)
 80090a4:	671a      	str	r2, [r3, #112]	; 0x70
 80090a6:	e002      	b.n	80090ae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4a25      	ldr	r2, [pc, #148]	; (8009140 <UART_Start_Receive_IT+0x250>)
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d019      	beq.n	80090f2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090d2:	677b      	str	r3, [r7, #116]	; 0x74
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
 80090de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e6      	bne.n	80090be <UART_Start_Receive_IT+0x1ce>
 80090f0:	e018      	b.n	8009124 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f043 0320 	orr.w	r3, r3, #32
 8009106:	67bb      	str	r3, [r7, #120]	; 0x78
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009110:	623b      	str	r3, [r7, #32]
 8009112:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	69f9      	ldr	r1, [r7, #28]
 8009116:	6a3a      	ldr	r2, [r7, #32]
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	61bb      	str	r3, [r7, #24]
   return(result);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e6      	bne.n	80090f2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	378c      	adds	r7, #140	; 0x8c
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	0800984d 	.word	0x0800984d
 8009138:	08009555 	.word	0x08009555
 800913c:	080093f3 	.word	0x080093f3
 8009140:	08009293 	.word	0x08009293

08009144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b095      	sub	sp, #84	; 0x54
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916a:	643b      	str	r3, [r7, #64]	; 0x40
 800916c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e6      	bne.n	800914c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	61fb      	str	r3, [r7, #28]
   return(result);
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	64bb      	str	r3, [r7, #72]	; 0x48
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e3      	bne.n	800917e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d118      	bne.n	80091f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f023 0310 	bic.w	r3, r3, #16
 80091d2:	647b      	str	r3, [r7, #68]	; 0x44
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	6979      	ldr	r1, [r7, #20]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e6      	bne.n	80091be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009204:	bf00      	nop
 8009206:	3754      	adds	r7, #84	; 0x54
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff f996 	bl	8008560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	60bb      	str	r3, [r7, #8]
   return(result);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	61bb      	str	r3, [r7, #24]
 8009264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	613b      	str	r3, [r7, #16]
   return(result);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e6      	bne.n	8009244 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff f961 	bl	800854c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800928a:	bf00      	nop
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b096      	sub	sp, #88	; 0x58
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092aa:	2b22      	cmp	r3, #34	; 0x22
 80092ac:	f040 8095 	bne.w	80093da <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80092be:	b2d9      	uxtb	r1, r3
 80092c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ca:	400a      	ands	r2, r1
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d178      	bne.n	80093ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800930c:	653b      	str	r3, [r7, #80]	; 0x50
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009316:	647b      	str	r3, [r7, #68]	; 0x44
 8009318:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800931c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e6      	bne.n	80092f8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	623b      	str	r3, [r7, #32]
   return(result);
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800934a:	633a      	str	r2, [r7, #48]	; 0x30
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e5      	bne.n	800932a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009370:	2b01      	cmp	r3, #1
 8009372:	d12e      	bne.n	80093d2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	60fb      	str	r3, [r7, #12]
   return(result);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0310 	bic.w	r3, r3, #16
 800938e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	617b      	str	r3, [r7, #20]
   return(result);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e6      	bne.n	800937a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d103      	bne.n	80093c2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2210      	movs	r2, #16
 80093c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff f8d2 	bl	8008574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093d0:	e00b      	b.n	80093ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f9 f938 	bl	8002648 <HAL_UART_RxCpltCallback>
}
 80093d8:	e007      	b.n	80093ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0208 	orr.w	r2, r2, #8
 80093e8:	619a      	str	r2, [r3, #24]
}
 80093ea:	bf00      	nop
 80093ec:	3758      	adds	r7, #88	; 0x58
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b096      	sub	sp, #88	; 0x58
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940a:	2b22      	cmp	r3, #34	; 0x22
 800940c:	f040 8095 	bne.w	800953a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009420:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009424:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009428:	4013      	ands	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d178      	bne.n	800954a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800946c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009476:	643b      	str	r3, [r7, #64]	; 0x40
 8009478:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800947c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e6      	bne.n	8009458 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	61fb      	str	r3, [r7, #28]
   return(result);
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d12e      	bne.n	8009532 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f023 0310 	bic.w	r3, r3, #16
 80094ee:	647b      	str	r3, [r7, #68]	; 0x44
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f8:	61bb      	str	r3, [r7, #24]
 80094fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6979      	ldr	r1, [r7, #20]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	613b      	str	r3, [r7, #16]
   return(result);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e6      	bne.n	80094da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b10      	cmp	r3, #16
 8009518:	d103      	bne.n	8009522 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2210      	movs	r2, #16
 8009520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff f822 	bl	8008574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009530:	e00b      	b.n	800954a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7f9 f888 	bl	8002648 <HAL_UART_RxCpltCallback>
}
 8009538:	e007      	b.n	800954a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	699a      	ldr	r2, [r3, #24]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f042 0208 	orr.w	r2, r2, #8
 8009548:	619a      	str	r2, [r3, #24]
}
 800954a:	bf00      	nop
 800954c:	3758      	adds	r7, #88	; 0x58
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b0a6      	sub	sp, #152	; 0x98
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009562:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958a:	2b22      	cmp	r3, #34	; 0x22
 800958c:	f040 814f 	bne.w	800982e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009596:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800959a:	e0f6      	b.n	800978a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80095aa:	b2d9      	uxtb	r1, r3
 80095ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b6:	400a      	ands	r2, r1
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d053      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <UART_RxISR_8BIT_FIFOEN+0xca>
 80095fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2201      	movs	r2, #1
 800960c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009614:	f043 0201 	orr.w	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800961e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d011      	beq.n	800964e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800962a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2202      	movs	r2, #2
 800963c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009644:	f043 0204 	orr.w	r2, r3, #4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800964e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009652:	f003 0304 	and.w	r3, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800965a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2204      	movs	r2, #4
 800966c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009674:	f043 0202 	orr.w	r2, r3, #2
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ff69 	bl	8008560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d173      	bne.n	800978a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80096b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80096c6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e4      	bne.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ee:	f023 0301 	bic.w	r3, r3, #1
 80096f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096fc:	657a      	str	r2, [r7, #84]	; 0x54
 80096fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800970a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e3      	bne.n	80096d8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009722:	2b01      	cmp	r3, #1
 8009724:	d12e      	bne.n	8009784 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	f023 0310 	bic.w	r3, r3, #16
 8009740:	67bb      	str	r3, [r7, #120]	; 0x78
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800974a:	643b      	str	r3, [r7, #64]	; 0x40
 800974c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e6      	bne.n	800972c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b10      	cmp	r3, #16
 800976a:	d103      	bne.n	8009774 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2210      	movs	r2, #16
 8009772:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7fe fef9 	bl	8008574 <HAL_UARTEx_RxEventCallback>
 8009782:	e002      	b.n	800978a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7f8 ff5f 	bl	8002648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800978a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b00      	cmp	r3, #0
 800979c:	f47f aefe 	bne.w	800959c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d045      	beq.n	800983e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097bc:	429a      	cmp	r2, r3
 80097be:	d23e      	bcs.n	800983e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3308      	adds	r3, #8
 80097c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097d6:	673b      	str	r3, [r7, #112]	; 0x70
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3308      	adds	r3, #8
 80097de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e5      	bne.n	80097c0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a14      	ldr	r2, [pc, #80]	; (8009848 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80097f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	60bb      	str	r3, [r7, #8]
   return(result);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f043 0320 	orr.w	r3, r3, #32
 800980e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800982c:	e007      	b.n	800983e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0208 	orr.w	r2, r2, #8
 800983c:	619a      	str	r2, [r3, #24]
}
 800983e:	bf00      	nop
 8009840:	3798      	adds	r7, #152	; 0x98
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08009293 	.word	0x08009293

0800984c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b0a8      	sub	sp, #160	; 0xa0
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800985a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009882:	2b22      	cmp	r3, #34	; 0x22
 8009884:	f040 8153 	bne.w	8009b2e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800988e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009892:	e0fa      	b.n	8009a8a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80098a6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80098aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80098ae:	4013      	ands	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098bc:	1c9a      	adds	r2, r3, #2
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d053      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d011      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0xce>
 80098f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009910:	f043 0201 	orr.w	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800991a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d011      	beq.n	800994a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2202      	movs	r2, #2
 8009938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009940:	f043 0204 	orr.w	r2, r3, #4
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800994a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d011      	beq.n	800997a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2204      	movs	r2, #4
 8009968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009970:	f043 0202 	orr.w	r2, r3, #2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d006      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe fdeb 	bl	8008560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d175      	bne.n	8009a8a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099c2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e4      	bne.n	800999e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3308      	adds	r3, #8
 80099da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099de:	e853 3f00 	ldrex	r3, [r3]
 80099e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3308      	adds	r3, #8
 80099f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80099fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e1      	bne.n	80099d4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d12e      	bne.n	8009a84 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	f023 0310 	bic.w	r3, r3, #16
 8009a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e6      	bne.n	8009a2c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b10      	cmp	r3, #16
 8009a6a:	d103      	bne.n	8009a74 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2210      	movs	r2, #16
 8009a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe fd79 	bl	8008574 <HAL_UARTEx_RxEventCallback>
 8009a82:	e002      	b.n	8009a8a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7f8 fddf 	bl	8002648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d006      	beq.n	8009aa0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f47f aefa 	bne.w	8009894 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d045      	beq.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ab8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d23e      	bcs.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3308      	adds	r3, #8
 8009ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ae0:	633a      	str	r2, [r7, #48]	; 0x30
 8009ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e5      	bne.n	8009ac0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009af8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f043 0320 	orr.w	r3, r3, #32
 8009b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b18:	61fb      	str	r3, [r7, #28]
 8009b1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	69b9      	ldr	r1, [r7, #24]
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	617b      	str	r3, [r7, #20]
   return(result);
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e6      	bne.n	8009afa <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b2c:	e007      	b.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0208 	orr.w	r2, r2, #8
 8009b3c:	619a      	str	r2, [r3, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	37a0      	adds	r7, #160	; 0xa0
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	080093f3 	.word	0x080093f3

08009b4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UARTEx_DisableFifoMode+0x16>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e027      	b.n	8009bee <HAL_UARTEx_DisableFifoMode+0x66>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2224      	movs	r2, #36	; 0x24
 8009baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e02d      	b.n	8009c6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2224      	movs	r2, #36	; 0x24
 8009c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0201 	bic.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f850 	bl	8009cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2220      	movs	r2, #32
 8009c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e02d      	b.n	8009cea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2224      	movs	r2, #36	; 0x24
 8009c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f812 	bl	8009cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d108      	bne.n	8009d16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d14:	e031      	b.n	8009d7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d16:	2308      	movs	r3, #8
 8009d18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	0e5b      	lsrs	r3, r3, #25
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	0f5b      	lsrs	r3, r3, #29
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	7b3a      	ldrb	r2, [r7, #12]
 8009d42:	4911      	ldr	r1, [pc, #68]	; (8009d88 <UARTEx_SetNbDataToProcess+0x94>)
 8009d44:	5c8a      	ldrb	r2, [r1, r2]
 8009d46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d4a:	7b3a      	ldrb	r2, [r7, #12]
 8009d4c:	490f      	ldr	r1, [pc, #60]	; (8009d8c <UARTEx_SetNbDataToProcess+0x98>)
 8009d4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	7b7a      	ldrb	r2, [r7, #13]
 8009d60:	4909      	ldr	r1, [pc, #36]	; (8009d88 <UARTEx_SetNbDataToProcess+0x94>)
 8009d62:	5c8a      	ldrb	r2, [r1, r2]
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d68:	7b7a      	ldrb	r2, [r7, #13]
 8009d6a:	4908      	ldr	r1, [pc, #32]	; (8009d8c <UARTEx_SetNbDataToProcess+0x98>)
 8009d6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	0800e7ec 	.word	0x0800e7ec
 8009d8c:	0800e7f4 	.word	0x0800e7f4

08009d90 <atof>:
 8009d90:	2100      	movs	r1, #0
 8009d92:	f001 bb17 	b.w	800b3c4 <strtod>

08009d96 <atoi>:
 8009d96:	220a      	movs	r2, #10
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f001 bbfd 	b.w	800b598 <strtol>
	...

08009da0 <__errno>:
 8009da0:	4b01      	ldr	r3, [pc, #4]	; (8009da8 <__errno+0x8>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	20000014 	.word	0x20000014

08009dac <__libc_init_array>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	4d0d      	ldr	r5, [pc, #52]	; (8009de4 <__libc_init_array+0x38>)
 8009db0:	4c0d      	ldr	r4, [pc, #52]	; (8009de8 <__libc_init_array+0x3c>)
 8009db2:	1b64      	subs	r4, r4, r5
 8009db4:	10a4      	asrs	r4, r4, #2
 8009db6:	2600      	movs	r6, #0
 8009db8:	42a6      	cmp	r6, r4
 8009dba:	d109      	bne.n	8009dd0 <__libc_init_array+0x24>
 8009dbc:	4d0b      	ldr	r5, [pc, #44]	; (8009dec <__libc_init_array+0x40>)
 8009dbe:	4c0c      	ldr	r4, [pc, #48]	; (8009df0 <__libc_init_array+0x44>)
 8009dc0:	f004 fb1a 	bl	800e3f8 <_init>
 8009dc4:	1b64      	subs	r4, r4, r5
 8009dc6:	10a4      	asrs	r4, r4, #2
 8009dc8:	2600      	movs	r6, #0
 8009dca:	42a6      	cmp	r6, r4
 8009dcc:	d105      	bne.n	8009dda <__libc_init_array+0x2e>
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd4:	4798      	blx	r3
 8009dd6:	3601      	adds	r6, #1
 8009dd8:	e7ee      	b.n	8009db8 <__libc_init_array+0xc>
 8009dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dde:	4798      	blx	r3
 8009de0:	3601      	adds	r6, #1
 8009de2:	e7f2      	b.n	8009dca <__libc_init_array+0x1e>
 8009de4:	0800ed00 	.word	0x0800ed00
 8009de8:	0800ed00 	.word	0x0800ed00
 8009dec:	0800ed00 	.word	0x0800ed00
 8009df0:	0800ed04 	.word	0x0800ed04

08009df4 <memset>:
 8009df4:	4402      	add	r2, r0
 8009df6:	4603      	mov	r3, r0
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d100      	bne.n	8009dfe <memset+0xa>
 8009dfc:	4770      	bx	lr
 8009dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009e02:	e7f9      	b.n	8009df8 <memset+0x4>

08009e04 <__cvt>:
 8009e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	ec55 4b10 	vmov	r4, r5, d0
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4619      	mov	r1, r3
 8009e12:	462b      	mov	r3, r5
 8009e14:	bfbb      	ittet	lt
 8009e16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e1a:	461d      	movlt	r5, r3
 8009e1c:	2300      	movge	r3, #0
 8009e1e:	232d      	movlt	r3, #45	; 0x2d
 8009e20:	700b      	strb	r3, [r1, #0]
 8009e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e28:	4691      	mov	r9, r2
 8009e2a:	f023 0820 	bic.w	r8, r3, #32
 8009e2e:	bfbc      	itt	lt
 8009e30:	4622      	movlt	r2, r4
 8009e32:	4614      	movlt	r4, r2
 8009e34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e38:	d005      	beq.n	8009e46 <__cvt+0x42>
 8009e3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e3e:	d100      	bne.n	8009e42 <__cvt+0x3e>
 8009e40:	3601      	adds	r6, #1
 8009e42:	2102      	movs	r1, #2
 8009e44:	e000      	b.n	8009e48 <__cvt+0x44>
 8009e46:	2103      	movs	r1, #3
 8009e48:	ab03      	add	r3, sp, #12
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	ab02      	add	r3, sp, #8
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	ec45 4b10 	vmov	d0, r4, r5
 8009e54:	4653      	mov	r3, sl
 8009e56:	4632      	mov	r2, r6
 8009e58:	f001 fc52 	bl	800b700 <_dtoa_r>
 8009e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e60:	4607      	mov	r7, r0
 8009e62:	d102      	bne.n	8009e6a <__cvt+0x66>
 8009e64:	f019 0f01 	tst.w	r9, #1
 8009e68:	d022      	beq.n	8009eb0 <__cvt+0xac>
 8009e6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e6e:	eb07 0906 	add.w	r9, r7, r6
 8009e72:	d110      	bne.n	8009e96 <__cvt+0x92>
 8009e74:	783b      	ldrb	r3, [r7, #0]
 8009e76:	2b30      	cmp	r3, #48	; 0x30
 8009e78:	d10a      	bne.n	8009e90 <__cvt+0x8c>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fe59 	bl	8000b38 <__aeabi_dcmpeq>
 8009e86:	b918      	cbnz	r0, 8009e90 <__cvt+0x8c>
 8009e88:	f1c6 0601 	rsb	r6, r6, #1
 8009e8c:	f8ca 6000 	str.w	r6, [sl]
 8009e90:	f8da 3000 	ldr.w	r3, [sl]
 8009e94:	4499      	add	r9, r3
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	f7f6 fe4b 	bl	8000b38 <__aeabi_dcmpeq>
 8009ea2:	b108      	cbz	r0, 8009ea8 <__cvt+0xa4>
 8009ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ea8:	2230      	movs	r2, #48	; 0x30
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	454b      	cmp	r3, r9
 8009eae:	d307      	bcc.n	8009ec0 <__cvt+0xbc>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eb4:	1bdb      	subs	r3, r3, r7
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	b004      	add	sp, #16
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	9103      	str	r1, [sp, #12]
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	e7f0      	b.n	8009eaa <__cvt+0xa6>

08009ec8 <__exponent>:
 8009ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	bfb8      	it	lt
 8009ed0:	4249      	neglt	r1, r1
 8009ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8009ed6:	bfb4      	ite	lt
 8009ed8:	222d      	movlt	r2, #45	; 0x2d
 8009eda:	222b      	movge	r2, #43	; 0x2b
 8009edc:	2909      	cmp	r1, #9
 8009ede:	7042      	strb	r2, [r0, #1]
 8009ee0:	dd2a      	ble.n	8009f38 <__exponent+0x70>
 8009ee2:	f10d 0407 	add.w	r4, sp, #7
 8009ee6:	46a4      	mov	ip, r4
 8009ee8:	270a      	movs	r7, #10
 8009eea:	46a6      	mov	lr, r4
 8009eec:	460a      	mov	r2, r1
 8009eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ef6:	3530      	adds	r5, #48	; 0x30
 8009ef8:	2a63      	cmp	r2, #99	; 0x63
 8009efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8009efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f02:	4631      	mov	r1, r6
 8009f04:	dcf1      	bgt.n	8009eea <__exponent+0x22>
 8009f06:	3130      	adds	r1, #48	; 0x30
 8009f08:	f1ae 0502 	sub.w	r5, lr, #2
 8009f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f10:	1c44      	adds	r4, r0, #1
 8009f12:	4629      	mov	r1, r5
 8009f14:	4561      	cmp	r1, ip
 8009f16:	d30a      	bcc.n	8009f2e <__exponent+0x66>
 8009f18:	f10d 0209 	add.w	r2, sp, #9
 8009f1c:	eba2 020e 	sub.w	r2, r2, lr
 8009f20:	4565      	cmp	r5, ip
 8009f22:	bf88      	it	hi
 8009f24:	2200      	movhi	r2, #0
 8009f26:	4413      	add	r3, r2
 8009f28:	1a18      	subs	r0, r3, r0
 8009f2a:	b003      	add	sp, #12
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f36:	e7ed      	b.n	8009f14 <__exponent+0x4c>
 8009f38:	2330      	movs	r3, #48	; 0x30
 8009f3a:	3130      	adds	r1, #48	; 0x30
 8009f3c:	7083      	strb	r3, [r0, #2]
 8009f3e:	70c1      	strb	r1, [r0, #3]
 8009f40:	1d03      	adds	r3, r0, #4
 8009f42:	e7f1      	b.n	8009f28 <__exponent+0x60>

08009f44 <_printf_float>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	ed2d 8b02 	vpush	{d8}
 8009f4c:	b08d      	sub	sp, #52	; 0x34
 8009f4e:	460c      	mov	r4, r1
 8009f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f54:	4616      	mov	r6, r2
 8009f56:	461f      	mov	r7, r3
 8009f58:	4605      	mov	r5, r0
 8009f5a:	f002 fd41 	bl	800c9e0 <_localeconv_r>
 8009f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8009f62:	4650      	mov	r0, sl
 8009f64:	f7f6 f966 	bl	8000234 <strlen>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	f8d8 3000 	ldr.w	r3, [r8]
 8009f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f78:	3307      	adds	r3, #7
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	f103 0208 	add.w	r2, r3, #8
 8009f82:	f8c8 2000 	str.w	r2, [r8]
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f9c:	ee08 0a10 	vmov	s16, r0
 8009fa0:	4b9f      	ldr	r3, [pc, #636]	; (800a220 <_printf_float+0x2dc>)
 8009fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	f7f6 fdf7 	bl	8000b9c <__aeabi_dcmpun>
 8009fae:	bb88      	cbnz	r0, 800a014 <_printf_float+0xd0>
 8009fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fb4:	4b9a      	ldr	r3, [pc, #616]	; (800a220 <_printf_float+0x2dc>)
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	f7f6 fdd1 	bl	8000b60 <__aeabi_dcmple>
 8009fbe:	bb48      	cbnz	r0, 800a014 <_printf_float+0xd0>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fdc0 	bl	8000b4c <__aeabi_dcmplt>
 8009fcc:	b110      	cbz	r0, 8009fd4 <_printf_float+0x90>
 8009fce:	232d      	movs	r3, #45	; 0x2d
 8009fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd4:	4b93      	ldr	r3, [pc, #588]	; (800a224 <_printf_float+0x2e0>)
 8009fd6:	4894      	ldr	r0, [pc, #592]	; (800a228 <_printf_float+0x2e4>)
 8009fd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009fdc:	bf94      	ite	ls
 8009fde:	4698      	movls	r8, r3
 8009fe0:	4680      	movhi	r8, r0
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	9b05      	ldr	r3, [sp, #20]
 8009fe8:	f023 0204 	bic.w	r2, r3, #4
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	9700      	str	r7, [sp, #0]
 8009ff4:	4633      	mov	r3, r6
 8009ff6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 f9d8 	bl	800a3b0 <_printf_common>
 800a000:	3001      	adds	r0, #1
 800a002:	f040 8090 	bne.w	800a126 <_printf_float+0x1e2>
 800a006:	f04f 30ff 	mov.w	r0, #4294967295
 800a00a:	b00d      	add	sp, #52	; 0x34
 800a00c:	ecbd 8b02 	vpop	{d8}
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 fdbe 	bl	8000b9c <__aeabi_dcmpun>
 800a020:	b140      	cbz	r0, 800a034 <_printf_float+0xf0>
 800a022:	464b      	mov	r3, r9
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbc      	itt	lt
 800a028:	232d      	movlt	r3, #45	; 0x2d
 800a02a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a02e:	487f      	ldr	r0, [pc, #508]	; (800a22c <_printf_float+0x2e8>)
 800a030:	4b7f      	ldr	r3, [pc, #508]	; (800a230 <_printf_float+0x2ec>)
 800a032:	e7d1      	b.n	8009fd8 <_printf_float+0x94>
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a03a:	9206      	str	r2, [sp, #24]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	d13f      	bne.n	800a0c0 <_printf_float+0x17c>
 800a040:	2306      	movs	r3, #6
 800a042:	6063      	str	r3, [r4, #4]
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	6861      	ldr	r1, [r4, #4]
 800a048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a04c:	2300      	movs	r3, #0
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	ab0a      	add	r3, sp, #40	; 0x28
 800a052:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a056:	ab09      	add	r3, sp, #36	; 0x24
 800a058:	ec49 8b10 	vmov	d0, r8, r9
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6022      	str	r2, [r4, #0]
 800a060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a064:	4628      	mov	r0, r5
 800a066:	f7ff fecd 	bl	8009e04 <__cvt>
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06e:	2b47      	cmp	r3, #71	; 0x47
 800a070:	4680      	mov	r8, r0
 800a072:	d108      	bne.n	800a086 <_printf_float+0x142>
 800a074:	1cc8      	adds	r0, r1, #3
 800a076:	db02      	blt.n	800a07e <_printf_float+0x13a>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	4299      	cmp	r1, r3
 800a07c:	dd41      	ble.n	800a102 <_printf_float+0x1be>
 800a07e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a082:	fa5f fb8b 	uxtb.w	fp, fp
 800a086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a08a:	d820      	bhi.n	800a0ce <_printf_float+0x18a>
 800a08c:	3901      	subs	r1, #1
 800a08e:	465a      	mov	r2, fp
 800a090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a094:	9109      	str	r1, [sp, #36]	; 0x24
 800a096:	f7ff ff17 	bl	8009ec8 <__exponent>
 800a09a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a09c:	1813      	adds	r3, r2, r0
 800a09e:	2a01      	cmp	r2, #1
 800a0a0:	4681      	mov	r9, r0
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	dc02      	bgt.n	800a0ac <_printf_float+0x168>
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	07d2      	lsls	r2, r2, #31
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_float+0x16c>
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d09c      	beq.n	8009ff2 <_printf_float+0xae>
 800a0b8:	232d      	movs	r3, #45	; 0x2d
 800a0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0be:	e798      	b.n	8009ff2 <_printf_float+0xae>
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	2a47      	cmp	r2, #71	; 0x47
 800a0c4:	d1be      	bne.n	800a044 <_printf_float+0x100>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1bc      	bne.n	800a044 <_printf_float+0x100>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7b9      	b.n	800a042 <_printf_float+0xfe>
 800a0ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a0d2:	d118      	bne.n	800a106 <_printf_float+0x1c2>
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	dd0b      	ble.n	800a0f2 <_printf_float+0x1ae>
 800a0da:	6121      	str	r1, [r4, #16]
 800a0dc:	b913      	cbnz	r3, 800a0e4 <_printf_float+0x1a0>
 800a0de:	6822      	ldr	r2, [r4, #0]
 800a0e0:	07d0      	lsls	r0, r2, #31
 800a0e2:	d502      	bpl.n	800a0ea <_printf_float+0x1a6>
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	440b      	add	r3, r1
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0ec:	f04f 0900 	mov.w	r9, #0
 800a0f0:	e7de      	b.n	800a0b0 <_printf_float+0x16c>
 800a0f2:	b913      	cbnz	r3, 800a0fa <_printf_float+0x1b6>
 800a0f4:	6822      	ldr	r2, [r4, #0]
 800a0f6:	07d2      	lsls	r2, r2, #31
 800a0f8:	d501      	bpl.n	800a0fe <_printf_float+0x1ba>
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	e7f4      	b.n	800a0e8 <_printf_float+0x1a4>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7f2      	b.n	800a0e8 <_printf_float+0x1a4>
 800a102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a108:	4299      	cmp	r1, r3
 800a10a:	db05      	blt.n	800a118 <_printf_float+0x1d4>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	6121      	str	r1, [r4, #16]
 800a110:	07d8      	lsls	r0, r3, #31
 800a112:	d5ea      	bpl.n	800a0ea <_printf_float+0x1a6>
 800a114:	1c4b      	adds	r3, r1, #1
 800a116:	e7e7      	b.n	800a0e8 <_printf_float+0x1a4>
 800a118:	2900      	cmp	r1, #0
 800a11a:	bfd4      	ite	le
 800a11c:	f1c1 0202 	rsble	r2, r1, #2
 800a120:	2201      	movgt	r2, #1
 800a122:	4413      	add	r3, r2
 800a124:	e7e0      	b.n	800a0e8 <_printf_float+0x1a4>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	055a      	lsls	r2, r3, #21
 800a12a:	d407      	bmi.n	800a13c <_printf_float+0x1f8>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	4642      	mov	r2, r8
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	d12c      	bne.n	800a194 <_printf_float+0x250>
 800a13a:	e764      	b.n	800a006 <_printf_float+0xc2>
 800a13c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a140:	f240 80e0 	bls.w	800a304 <_printf_float+0x3c0>
 800a144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a148:	2200      	movs	r2, #0
 800a14a:	2300      	movs	r3, #0
 800a14c:	f7f6 fcf4 	bl	8000b38 <__aeabi_dcmpeq>
 800a150:	2800      	cmp	r0, #0
 800a152:	d034      	beq.n	800a1be <_printf_float+0x27a>
 800a154:	4a37      	ldr	r2, [pc, #220]	; (800a234 <_printf_float+0x2f0>)
 800a156:	2301      	movs	r3, #1
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af51 	beq.w	800a006 <_printf_float+0xc2>
 800a164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a168:	429a      	cmp	r2, r3
 800a16a:	db02      	blt.n	800a172 <_printf_float+0x22e>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07d8      	lsls	r0, r3, #31
 800a170:	d510      	bpl.n	800a194 <_printf_float+0x250>
 800a172:	ee18 3a10 	vmov	r3, s16
 800a176:	4652      	mov	r2, sl
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af41 	beq.w	800a006 <_printf_float+0xc2>
 800a184:	f04f 0800 	mov.w	r8, #0
 800a188:	f104 091a 	add.w	r9, r4, #26
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	3b01      	subs	r3, #1
 800a190:	4543      	cmp	r3, r8
 800a192:	dc09      	bgt.n	800a1a8 <_printf_float+0x264>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	079b      	lsls	r3, r3, #30
 800a198:	f100 8105 	bmi.w	800a3a6 <_printf_float+0x462>
 800a19c:	68e0      	ldr	r0, [r4, #12]
 800a19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	bfb8      	it	lt
 800a1a4:	4618      	movlt	r0, r3
 800a1a6:	e730      	b.n	800a00a <_printf_float+0xc6>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	464a      	mov	r2, r9
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b8      	blx	r7
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f43f af27 	beq.w	800a006 <_printf_float+0xc2>
 800a1b8:	f108 0801 	add.w	r8, r8, #1
 800a1bc:	e7e6      	b.n	800a18c <_printf_float+0x248>
 800a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dc39      	bgt.n	800a238 <_printf_float+0x2f4>
 800a1c4:	4a1b      	ldr	r2, [pc, #108]	; (800a234 <_printf_float+0x2f0>)
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af19 	beq.w	800a006 <_printf_float+0xc2>
 800a1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	d102      	bne.n	800a1e2 <_printf_float+0x29e>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	07d9      	lsls	r1, r3, #31
 800a1e0:	d5d8      	bpl.n	800a194 <_printf_float+0x250>
 800a1e2:	ee18 3a10 	vmov	r3, s16
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b8      	blx	r7
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f43f af09 	beq.w	800a006 <_printf_float+0xc2>
 800a1f4:	f04f 0900 	mov.w	r9, #0
 800a1f8:	f104 0a1a 	add.w	sl, r4, #26
 800a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fe:	425b      	negs	r3, r3
 800a200:	454b      	cmp	r3, r9
 800a202:	dc01      	bgt.n	800a208 <_printf_float+0x2c4>
 800a204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a206:	e792      	b.n	800a12e <_printf_float+0x1ea>
 800a208:	2301      	movs	r3, #1
 800a20a:	4652      	mov	r2, sl
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f aef7 	beq.w	800a006 <_printf_float+0xc2>
 800a218:	f109 0901 	add.w	r9, r9, #1
 800a21c:	e7ee      	b.n	800a1fc <_printf_float+0x2b8>
 800a21e:	bf00      	nop
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	0800e800 	.word	0x0800e800
 800a228:	0800e804 	.word	0x0800e804
 800a22c:	0800e80c 	.word	0x0800e80c
 800a230:	0800e808 	.word	0x0800e808
 800a234:	0800e810 	.word	0x0800e810
 800a238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a23a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a23c:	429a      	cmp	r2, r3
 800a23e:	bfa8      	it	ge
 800a240:	461a      	movge	r2, r3
 800a242:	2a00      	cmp	r2, #0
 800a244:	4691      	mov	r9, r2
 800a246:	dc37      	bgt.n	800a2b8 <_printf_float+0x374>
 800a248:	f04f 0b00 	mov.w	fp, #0
 800a24c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a250:	f104 021a 	add.w	r2, r4, #26
 800a254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	eba3 0309 	sub.w	r3, r3, r9
 800a25c:	455b      	cmp	r3, fp
 800a25e:	dc33      	bgt.n	800a2c8 <_printf_float+0x384>
 800a260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a264:	429a      	cmp	r2, r3
 800a266:	db3b      	blt.n	800a2e0 <_printf_float+0x39c>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	07da      	lsls	r2, r3, #31
 800a26c:	d438      	bmi.n	800a2e0 <_printf_float+0x39c>
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	9a05      	ldr	r2, [sp, #20]
 800a272:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a274:	1a9a      	subs	r2, r3, r2
 800a276:	eba3 0901 	sub.w	r9, r3, r1
 800a27a:	4591      	cmp	r9, r2
 800a27c:	bfa8      	it	ge
 800a27e:	4691      	movge	r9, r2
 800a280:	f1b9 0f00 	cmp.w	r9, #0
 800a284:	dc35      	bgt.n	800a2f2 <_printf_float+0x3ae>
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a28e:	f104 0a1a 	add.w	sl, r4, #26
 800a292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	eba3 0309 	sub.w	r3, r3, r9
 800a29c:	4543      	cmp	r3, r8
 800a29e:	f77f af79 	ble.w	800a194 <_printf_float+0x250>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f aeaa 	beq.w	800a006 <_printf_float+0xc2>
 800a2b2:	f108 0801 	add.w	r8, r8, #1
 800a2b6:	e7ec      	b.n	800a292 <_printf_float+0x34e>
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4642      	mov	r2, r8
 800a2be:	4628      	mov	r0, r5
 800a2c0:	47b8      	blx	r7
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d1c0      	bne.n	800a248 <_printf_float+0x304>
 800a2c6:	e69e      	b.n	800a006 <_printf_float+0xc2>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	9205      	str	r2, [sp, #20]
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f ae97 	beq.w	800a006 <_printf_float+0xc2>
 800a2d8:	9a05      	ldr	r2, [sp, #20]
 800a2da:	f10b 0b01 	add.w	fp, fp, #1
 800a2de:	e7b9      	b.n	800a254 <_printf_float+0x310>
 800a2e0:	ee18 3a10 	vmov	r3, s16
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d1be      	bne.n	800a26e <_printf_float+0x32a>
 800a2f0:	e689      	b.n	800a006 <_printf_float+0xc2>
 800a2f2:	9a05      	ldr	r2, [sp, #20]
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	4442      	add	r2, r8
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	d1c1      	bne.n	800a286 <_printf_float+0x342>
 800a302:	e680      	b.n	800a006 <_printf_float+0xc2>
 800a304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a306:	2a01      	cmp	r2, #1
 800a308:	dc01      	bgt.n	800a30e <_printf_float+0x3ca>
 800a30a:	07db      	lsls	r3, r3, #31
 800a30c:	d538      	bpl.n	800a380 <_printf_float+0x43c>
 800a30e:	2301      	movs	r3, #1
 800a310:	4642      	mov	r2, r8
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	f43f ae74 	beq.w	800a006 <_printf_float+0xc2>
 800a31e:	ee18 3a10 	vmov	r3, s16
 800a322:	4652      	mov	r2, sl
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f43f ae6b 	beq.w	800a006 <_printf_float+0xc2>
 800a330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a334:	2200      	movs	r2, #0
 800a336:	2300      	movs	r3, #0
 800a338:	f7f6 fbfe 	bl	8000b38 <__aeabi_dcmpeq>
 800a33c:	b9d8      	cbnz	r0, 800a376 <_printf_float+0x432>
 800a33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a340:	f108 0201 	add.w	r2, r8, #1
 800a344:	3b01      	subs	r3, #1
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	d10e      	bne.n	800a36e <_printf_float+0x42a>
 800a350:	e659      	b.n	800a006 <_printf_float+0xc2>
 800a352:	2301      	movs	r3, #1
 800a354:	4652      	mov	r2, sl
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae52 	beq.w	800a006 <_printf_float+0xc2>
 800a362:	f108 0801 	add.w	r8, r8, #1
 800a366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a368:	3b01      	subs	r3, #1
 800a36a:	4543      	cmp	r3, r8
 800a36c:	dcf1      	bgt.n	800a352 <_printf_float+0x40e>
 800a36e:	464b      	mov	r3, r9
 800a370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a374:	e6dc      	b.n	800a130 <_printf_float+0x1ec>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	f104 0a1a 	add.w	sl, r4, #26
 800a37e:	e7f2      	b.n	800a366 <_printf_float+0x422>
 800a380:	2301      	movs	r3, #1
 800a382:	4642      	mov	r2, r8
 800a384:	e7df      	b.n	800a346 <_printf_float+0x402>
 800a386:	2301      	movs	r3, #1
 800a388:	464a      	mov	r2, r9
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f ae38 	beq.w	800a006 <_printf_float+0xc2>
 800a396:	f108 0801 	add.w	r8, r8, #1
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a39e:	1a5b      	subs	r3, r3, r1
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	dcf0      	bgt.n	800a386 <_printf_float+0x442>
 800a3a4:	e6fa      	b.n	800a19c <_printf_float+0x258>
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	f104 0919 	add.w	r9, r4, #25
 800a3ae:	e7f4      	b.n	800a39a <_printf_float+0x456>

0800a3b0 <_printf_common>:
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	4616      	mov	r6, r2
 800a3b6:	4699      	mov	r9, r3
 800a3b8:	688a      	ldr	r2, [r1, #8]
 800a3ba:	690b      	ldr	r3, [r1, #16]
 800a3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	bfb8      	it	lt
 800a3c4:	4613      	movlt	r3, r2
 800a3c6:	6033      	str	r3, [r6, #0]
 800a3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	b10a      	cbz	r2, 800a3d6 <_printf_common+0x26>
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	6033      	str	r3, [r6, #0]
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	0699      	lsls	r1, r3, #26
 800a3da:	bf42      	ittt	mi
 800a3dc:	6833      	ldrmi	r3, [r6, #0]
 800a3de:	3302      	addmi	r3, #2
 800a3e0:	6033      	strmi	r3, [r6, #0]
 800a3e2:	6825      	ldr	r5, [r4, #0]
 800a3e4:	f015 0506 	ands.w	r5, r5, #6
 800a3e8:	d106      	bne.n	800a3f8 <_printf_common+0x48>
 800a3ea:	f104 0a19 	add.w	sl, r4, #25
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	6832      	ldr	r2, [r6, #0]
 800a3f2:	1a9b      	subs	r3, r3, r2
 800a3f4:	42ab      	cmp	r3, r5
 800a3f6:	dc26      	bgt.n	800a446 <_printf_common+0x96>
 800a3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3fc:	1e13      	subs	r3, r2, #0
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	bf18      	it	ne
 800a402:	2301      	movne	r3, #1
 800a404:	0692      	lsls	r2, r2, #26
 800a406:	d42b      	bmi.n	800a460 <_printf_common+0xb0>
 800a408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a40c:	4649      	mov	r1, r9
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	3001      	adds	r0, #1
 800a414:	d01e      	beq.n	800a454 <_printf_common+0xa4>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	68e5      	ldr	r5, [r4, #12]
 800a41a:	6832      	ldr	r2, [r6, #0]
 800a41c:	f003 0306 	and.w	r3, r3, #6
 800a420:	2b04      	cmp	r3, #4
 800a422:	bf08      	it	eq
 800a424:	1aad      	subeq	r5, r5, r2
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	bf0c      	ite	eq
 800a42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a430:	2500      	movne	r5, #0
 800a432:	4293      	cmp	r3, r2
 800a434:	bfc4      	itt	gt
 800a436:	1a9b      	subgt	r3, r3, r2
 800a438:	18ed      	addgt	r5, r5, r3
 800a43a:	2600      	movs	r6, #0
 800a43c:	341a      	adds	r4, #26
 800a43e:	42b5      	cmp	r5, r6
 800a440:	d11a      	bne.n	800a478 <_printf_common+0xc8>
 800a442:	2000      	movs	r0, #0
 800a444:	e008      	b.n	800a458 <_printf_common+0xa8>
 800a446:	2301      	movs	r3, #1
 800a448:	4652      	mov	r2, sl
 800a44a:	4649      	mov	r1, r9
 800a44c:	4638      	mov	r0, r7
 800a44e:	47c0      	blx	r8
 800a450:	3001      	adds	r0, #1
 800a452:	d103      	bne.n	800a45c <_printf_common+0xac>
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	3501      	adds	r5, #1
 800a45e:	e7c6      	b.n	800a3ee <_printf_common+0x3e>
 800a460:	18e1      	adds	r1, r4, r3
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	2030      	movs	r0, #48	; 0x30
 800a466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a46a:	4422      	add	r2, r4
 800a46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a474:	3302      	adds	r3, #2
 800a476:	e7c7      	b.n	800a408 <_printf_common+0x58>
 800a478:	2301      	movs	r3, #1
 800a47a:	4622      	mov	r2, r4
 800a47c:	4649      	mov	r1, r9
 800a47e:	4638      	mov	r0, r7
 800a480:	47c0      	blx	r8
 800a482:	3001      	adds	r0, #1
 800a484:	d0e6      	beq.n	800a454 <_printf_common+0xa4>
 800a486:	3601      	adds	r6, #1
 800a488:	e7d9      	b.n	800a43e <_printf_common+0x8e>
	...

0800a48c <_printf_i>:
 800a48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	7e0f      	ldrb	r7, [r1, #24]
 800a492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a494:	2f78      	cmp	r7, #120	; 0x78
 800a496:	4691      	mov	r9, r2
 800a498:	4680      	mov	r8, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	469a      	mov	sl, r3
 800a49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4a2:	d807      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4a4:	2f62      	cmp	r7, #98	; 0x62
 800a4a6:	d80a      	bhi.n	800a4be <_printf_i+0x32>
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	f000 80d8 	beq.w	800a65e <_printf_i+0x1d2>
 800a4ae:	2f58      	cmp	r7, #88	; 0x58
 800a4b0:	f000 80a3 	beq.w	800a5fa <_printf_i+0x16e>
 800a4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4bc:	e03a      	b.n	800a534 <_printf_i+0xa8>
 800a4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4c2:	2b15      	cmp	r3, #21
 800a4c4:	d8f6      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4c6:	a101      	add	r1, pc, #4	; (adr r1, 800a4cc <_printf_i+0x40>)
 800a4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4cc:	0800a525 	.word	0x0800a525
 800a4d0:	0800a539 	.word	0x0800a539
 800a4d4:	0800a4b5 	.word	0x0800a4b5
 800a4d8:	0800a4b5 	.word	0x0800a4b5
 800a4dc:	0800a4b5 	.word	0x0800a4b5
 800a4e0:	0800a4b5 	.word	0x0800a4b5
 800a4e4:	0800a539 	.word	0x0800a539
 800a4e8:	0800a4b5 	.word	0x0800a4b5
 800a4ec:	0800a4b5 	.word	0x0800a4b5
 800a4f0:	0800a4b5 	.word	0x0800a4b5
 800a4f4:	0800a4b5 	.word	0x0800a4b5
 800a4f8:	0800a645 	.word	0x0800a645
 800a4fc:	0800a569 	.word	0x0800a569
 800a500:	0800a627 	.word	0x0800a627
 800a504:	0800a4b5 	.word	0x0800a4b5
 800a508:	0800a4b5 	.word	0x0800a4b5
 800a50c:	0800a667 	.word	0x0800a667
 800a510:	0800a4b5 	.word	0x0800a4b5
 800a514:	0800a569 	.word	0x0800a569
 800a518:	0800a4b5 	.word	0x0800a4b5
 800a51c:	0800a4b5 	.word	0x0800a4b5
 800a520:	0800a62f 	.word	0x0800a62f
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	1d1a      	adds	r2, r3, #4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	602a      	str	r2, [r5, #0]
 800a52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a534:	2301      	movs	r3, #1
 800a536:	e0a3      	b.n	800a680 <_printf_i+0x1f4>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	6829      	ldr	r1, [r5, #0]
 800a53c:	0606      	lsls	r6, r0, #24
 800a53e:	f101 0304 	add.w	r3, r1, #4
 800a542:	d50a      	bpl.n	800a55a <_printf_i+0xce>
 800a544:	680e      	ldr	r6, [r1, #0]
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	2e00      	cmp	r6, #0
 800a54a:	da03      	bge.n	800a554 <_printf_i+0xc8>
 800a54c:	232d      	movs	r3, #45	; 0x2d
 800a54e:	4276      	negs	r6, r6
 800a550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a554:	485e      	ldr	r0, [pc, #376]	; (800a6d0 <_printf_i+0x244>)
 800a556:	230a      	movs	r3, #10
 800a558:	e019      	b.n	800a58e <_printf_i+0x102>
 800a55a:	680e      	ldr	r6, [r1, #0]
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a562:	bf18      	it	ne
 800a564:	b236      	sxthne	r6, r6
 800a566:	e7ef      	b.n	800a548 <_printf_i+0xbc>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	1d19      	adds	r1, r3, #4
 800a56e:	6029      	str	r1, [r5, #0]
 800a570:	0601      	lsls	r1, r0, #24
 800a572:	d501      	bpl.n	800a578 <_printf_i+0xec>
 800a574:	681e      	ldr	r6, [r3, #0]
 800a576:	e002      	b.n	800a57e <_printf_i+0xf2>
 800a578:	0646      	lsls	r6, r0, #25
 800a57a:	d5fb      	bpl.n	800a574 <_printf_i+0xe8>
 800a57c:	881e      	ldrh	r6, [r3, #0]
 800a57e:	4854      	ldr	r0, [pc, #336]	; (800a6d0 <_printf_i+0x244>)
 800a580:	2f6f      	cmp	r7, #111	; 0x6f
 800a582:	bf0c      	ite	eq
 800a584:	2308      	moveq	r3, #8
 800a586:	230a      	movne	r3, #10
 800a588:	2100      	movs	r1, #0
 800a58a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a58e:	6865      	ldr	r5, [r4, #4]
 800a590:	60a5      	str	r5, [r4, #8]
 800a592:	2d00      	cmp	r5, #0
 800a594:	bfa2      	ittt	ge
 800a596:	6821      	ldrge	r1, [r4, #0]
 800a598:	f021 0104 	bicge.w	r1, r1, #4
 800a59c:	6021      	strge	r1, [r4, #0]
 800a59e:	b90e      	cbnz	r6, 800a5a4 <_printf_i+0x118>
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	d04d      	beq.n	800a640 <_printf_i+0x1b4>
 800a5a4:	4615      	mov	r5, r2
 800a5a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5aa:	fb03 6711 	mls	r7, r3, r1, r6
 800a5ae:	5dc7      	ldrb	r7, [r0, r7]
 800a5b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5b4:	4637      	mov	r7, r6
 800a5b6:	42bb      	cmp	r3, r7
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	d9f4      	bls.n	800a5a6 <_printf_i+0x11a>
 800a5bc:	2b08      	cmp	r3, #8
 800a5be:	d10b      	bne.n	800a5d8 <_printf_i+0x14c>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	07de      	lsls	r6, r3, #31
 800a5c4:	d508      	bpl.n	800a5d8 <_printf_i+0x14c>
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	6861      	ldr	r1, [r4, #4]
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	bfde      	ittt	le
 800a5ce:	2330      	movle	r3, #48	; 0x30
 800a5d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5d8:	1b52      	subs	r2, r2, r5
 800a5da:	6122      	str	r2, [r4, #16]
 800a5dc:	f8cd a000 	str.w	sl, [sp]
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	aa03      	add	r2, sp, #12
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f7ff fee2 	bl	800a3b0 <_printf_common>
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d14c      	bne.n	800a68a <_printf_i+0x1fe>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	b004      	add	sp, #16
 800a5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fa:	4835      	ldr	r0, [pc, #212]	; (800a6d0 <_printf_i+0x244>)
 800a5fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a600:	6829      	ldr	r1, [r5, #0]
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f851 6b04 	ldr.w	r6, [r1], #4
 800a608:	6029      	str	r1, [r5, #0]
 800a60a:	061d      	lsls	r5, r3, #24
 800a60c:	d514      	bpl.n	800a638 <_printf_i+0x1ac>
 800a60e:	07df      	lsls	r7, r3, #31
 800a610:	bf44      	itt	mi
 800a612:	f043 0320 	orrmi.w	r3, r3, #32
 800a616:	6023      	strmi	r3, [r4, #0]
 800a618:	b91e      	cbnz	r6, 800a622 <_printf_i+0x196>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f023 0320 	bic.w	r3, r3, #32
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	2310      	movs	r3, #16
 800a624:	e7b0      	b.n	800a588 <_printf_i+0xfc>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	f043 0320 	orr.w	r3, r3, #32
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	2378      	movs	r3, #120	; 0x78
 800a630:	4828      	ldr	r0, [pc, #160]	; (800a6d4 <_printf_i+0x248>)
 800a632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a636:	e7e3      	b.n	800a600 <_printf_i+0x174>
 800a638:	0659      	lsls	r1, r3, #25
 800a63a:	bf48      	it	mi
 800a63c:	b2b6      	uxthmi	r6, r6
 800a63e:	e7e6      	b.n	800a60e <_printf_i+0x182>
 800a640:	4615      	mov	r5, r2
 800a642:	e7bb      	b.n	800a5bc <_printf_i+0x130>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	6826      	ldr	r6, [r4, #0]
 800a648:	6961      	ldr	r1, [r4, #20]
 800a64a:	1d18      	adds	r0, r3, #4
 800a64c:	6028      	str	r0, [r5, #0]
 800a64e:	0635      	lsls	r5, r6, #24
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	d501      	bpl.n	800a658 <_printf_i+0x1cc>
 800a654:	6019      	str	r1, [r3, #0]
 800a656:	e002      	b.n	800a65e <_printf_i+0x1d2>
 800a658:	0670      	lsls	r0, r6, #25
 800a65a:	d5fb      	bpl.n	800a654 <_printf_i+0x1c8>
 800a65c:	8019      	strh	r1, [r3, #0]
 800a65e:	2300      	movs	r3, #0
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	4615      	mov	r5, r2
 800a664:	e7ba      	b.n	800a5dc <_printf_i+0x150>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	1d1a      	adds	r2, r3, #4
 800a66a:	602a      	str	r2, [r5, #0]
 800a66c:	681d      	ldr	r5, [r3, #0]
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	2100      	movs	r1, #0
 800a672:	4628      	mov	r0, r5
 800a674:	f7f5 fdec 	bl	8000250 <memchr>
 800a678:	b108      	cbz	r0, 800a67e <_printf_i+0x1f2>
 800a67a:	1b40      	subs	r0, r0, r5
 800a67c:	6060      	str	r0, [r4, #4]
 800a67e:	6863      	ldr	r3, [r4, #4]
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	2300      	movs	r3, #0
 800a684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a688:	e7a8      	b.n	800a5dc <_printf_i+0x150>
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	462a      	mov	r2, r5
 800a68e:	4649      	mov	r1, r9
 800a690:	4640      	mov	r0, r8
 800a692:	47d0      	blx	sl
 800a694:	3001      	adds	r0, #1
 800a696:	d0ab      	beq.n	800a5f0 <_printf_i+0x164>
 800a698:	6823      	ldr	r3, [r4, #0]
 800a69a:	079b      	lsls	r3, r3, #30
 800a69c:	d413      	bmi.n	800a6c6 <_printf_i+0x23a>
 800a69e:	68e0      	ldr	r0, [r4, #12]
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	4298      	cmp	r0, r3
 800a6a4:	bfb8      	it	lt
 800a6a6:	4618      	movlt	r0, r3
 800a6a8:	e7a4      	b.n	800a5f4 <_printf_i+0x168>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	47d0      	blx	sl
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d09b      	beq.n	800a5f0 <_printf_i+0x164>
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	68e3      	ldr	r3, [r4, #12]
 800a6bc:	9903      	ldr	r1, [sp, #12]
 800a6be:	1a5b      	subs	r3, r3, r1
 800a6c0:	42ab      	cmp	r3, r5
 800a6c2:	dcf2      	bgt.n	800a6aa <_printf_i+0x21e>
 800a6c4:	e7eb      	b.n	800a69e <_printf_i+0x212>
 800a6c6:	2500      	movs	r5, #0
 800a6c8:	f104 0619 	add.w	r6, r4, #25
 800a6cc:	e7f5      	b.n	800a6ba <_printf_i+0x22e>
 800a6ce:	bf00      	nop
 800a6d0:	0800e812 	.word	0x0800e812
 800a6d4:	0800e823 	.word	0x0800e823

0800a6d8 <sniprintf>:
 800a6d8:	b40c      	push	{r2, r3}
 800a6da:	b530      	push	{r4, r5, lr}
 800a6dc:	4b17      	ldr	r3, [pc, #92]	; (800a73c <sniprintf+0x64>)
 800a6de:	1e0c      	subs	r4, r1, #0
 800a6e0:	681d      	ldr	r5, [r3, #0]
 800a6e2:	b09d      	sub	sp, #116	; 0x74
 800a6e4:	da08      	bge.n	800a6f8 <sniprintf+0x20>
 800a6e6:	238b      	movs	r3, #139	; 0x8b
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	b01d      	add	sp, #116	; 0x74
 800a6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6f4:	b002      	add	sp, #8
 800a6f6:	4770      	bx	lr
 800a6f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a6fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a700:	bf14      	ite	ne
 800a702:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a706:	4623      	moveq	r3, r4
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	9006      	str	r0, [sp, #24]
 800a714:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a718:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a71a:	ab21      	add	r3, sp, #132	; 0x84
 800a71c:	a902      	add	r1, sp, #8
 800a71e:	4628      	mov	r0, r5
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	f002 ff9d 	bl	800d660 <_svfiprintf_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	bfbc      	itt	lt
 800a72a:	238b      	movlt	r3, #139	; 0x8b
 800a72c:	602b      	strlt	r3, [r5, #0]
 800a72e:	2c00      	cmp	r4, #0
 800a730:	d0dd      	beq.n	800a6ee <sniprintf+0x16>
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	2200      	movs	r2, #0
 800a736:	701a      	strb	r2, [r3, #0]
 800a738:	e7d9      	b.n	800a6ee <sniprintf+0x16>
 800a73a:	bf00      	nop
 800a73c:	20000014 	.word	0x20000014

0800a740 <siprintf>:
 800a740:	b40e      	push	{r1, r2, r3}
 800a742:	b500      	push	{lr}
 800a744:	b09c      	sub	sp, #112	; 0x70
 800a746:	ab1d      	add	r3, sp, #116	; 0x74
 800a748:	9002      	str	r0, [sp, #8]
 800a74a:	9006      	str	r0, [sp, #24]
 800a74c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a750:	4809      	ldr	r0, [pc, #36]	; (800a778 <siprintf+0x38>)
 800a752:	9107      	str	r1, [sp, #28]
 800a754:	9104      	str	r1, [sp, #16]
 800a756:	4909      	ldr	r1, [pc, #36]	; (800a77c <siprintf+0x3c>)
 800a758:	f853 2b04 	ldr.w	r2, [r3], #4
 800a75c:	9105      	str	r1, [sp, #20]
 800a75e:	6800      	ldr	r0, [r0, #0]
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	a902      	add	r1, sp, #8
 800a764:	f002 ff7c 	bl	800d660 <_svfiprintf_r>
 800a768:	9b02      	ldr	r3, [sp, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	b01c      	add	sp, #112	; 0x70
 800a770:	f85d eb04 	ldr.w	lr, [sp], #4
 800a774:	b003      	add	sp, #12
 800a776:	4770      	bx	lr
 800a778:	20000014 	.word	0x20000014
 800a77c:	ffff0208 	.word	0xffff0208

0800a780 <sulp>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	ec45 4b10 	vmov	d0, r4, r5
 800a78a:	4616      	mov	r6, r2
 800a78c:	f002 fcc6 	bl	800d11c <__ulp>
 800a790:	ec51 0b10 	vmov	r0, r1, d0
 800a794:	b17e      	cbz	r6, 800a7b6 <sulp+0x36>
 800a796:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a79a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd09      	ble.n	800a7b6 <sulp+0x36>
 800a7a2:	051b      	lsls	r3, r3, #20
 800a7a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7a8:	2400      	movs	r4, #0
 800a7aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	f7f5 ff59 	bl	8000668 <__aeabi_dmul>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <_strtod_l>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	ed2d 8b02 	vpush	{d8}
 800a7c0:	b09d      	sub	sp, #116	; 0x74
 800a7c2:	461f      	mov	r7, r3
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9318      	str	r3, [sp, #96]	; 0x60
 800a7c8:	4ba2      	ldr	r3, [pc, #648]	; (800aa54 <_strtod_l+0x29c>)
 800a7ca:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	9305      	str	r3, [sp, #20]
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4688      	mov	r8, r1
 800a7d6:	f7f5 fd2d 	bl	8000234 <strlen>
 800a7da:	f04f 0a00 	mov.w	sl, #0
 800a7de:	4605      	mov	r5, r0
 800a7e0:	f04f 0b00 	mov.w	fp, #0
 800a7e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	2a2b      	cmp	r2, #43	; 0x2b
 800a7ee:	d04e      	beq.n	800a88e <_strtod_l+0xd6>
 800a7f0:	d83b      	bhi.n	800a86a <_strtod_l+0xb2>
 800a7f2:	2a0d      	cmp	r2, #13
 800a7f4:	d834      	bhi.n	800a860 <_strtod_l+0xa8>
 800a7f6:	2a08      	cmp	r2, #8
 800a7f8:	d834      	bhi.n	800a864 <_strtod_l+0xac>
 800a7fa:	2a00      	cmp	r2, #0
 800a7fc:	d03e      	beq.n	800a87c <_strtod_l+0xc4>
 800a7fe:	2300      	movs	r3, #0
 800a800:	930a      	str	r3, [sp, #40]	; 0x28
 800a802:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a804:	7833      	ldrb	r3, [r6, #0]
 800a806:	2b30      	cmp	r3, #48	; 0x30
 800a808:	f040 80b0 	bne.w	800a96c <_strtod_l+0x1b4>
 800a80c:	7873      	ldrb	r3, [r6, #1]
 800a80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a812:	2b58      	cmp	r3, #88	; 0x58
 800a814:	d168      	bne.n	800a8e8 <_strtod_l+0x130>
 800a816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	ab18      	add	r3, sp, #96	; 0x60
 800a81c:	9702      	str	r7, [sp, #8]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4a8d      	ldr	r2, [pc, #564]	; (800aa58 <_strtod_l+0x2a0>)
 800a822:	ab19      	add	r3, sp, #100	; 0x64
 800a824:	a917      	add	r1, sp, #92	; 0x5c
 800a826:	4620      	mov	r0, r4
 800a828:	f001 fdd2 	bl	800c3d0 <__gethex>
 800a82c:	f010 0707 	ands.w	r7, r0, #7
 800a830:	4605      	mov	r5, r0
 800a832:	d005      	beq.n	800a840 <_strtod_l+0x88>
 800a834:	2f06      	cmp	r7, #6
 800a836:	d12c      	bne.n	800a892 <_strtod_l+0xda>
 800a838:	3601      	adds	r6, #1
 800a83a:	2300      	movs	r3, #0
 800a83c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a83e:	930a      	str	r3, [sp, #40]	; 0x28
 800a840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a842:	2b00      	cmp	r3, #0
 800a844:	f040 8590 	bne.w	800b368 <_strtod_l+0xbb0>
 800a848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84a:	b1eb      	cbz	r3, 800a888 <_strtod_l+0xd0>
 800a84c:	4652      	mov	r2, sl
 800a84e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a852:	ec43 2b10 	vmov	d0, r2, r3
 800a856:	b01d      	add	sp, #116	; 0x74
 800a858:	ecbd 8b02 	vpop	{d8}
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	2a20      	cmp	r2, #32
 800a862:	d1cc      	bne.n	800a7fe <_strtod_l+0x46>
 800a864:	3301      	adds	r3, #1
 800a866:	9317      	str	r3, [sp, #92]	; 0x5c
 800a868:	e7be      	b.n	800a7e8 <_strtod_l+0x30>
 800a86a:	2a2d      	cmp	r2, #45	; 0x2d
 800a86c:	d1c7      	bne.n	800a7fe <_strtod_l+0x46>
 800a86e:	2201      	movs	r2, #1
 800a870:	920a      	str	r2, [sp, #40]	; 0x28
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	9217      	str	r2, [sp, #92]	; 0x5c
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1c2      	bne.n	800a802 <_strtod_l+0x4a>
 800a87c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a87e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 856e 	bne.w	800b364 <_strtod_l+0xbac>
 800a888:	4652      	mov	r2, sl
 800a88a:	465b      	mov	r3, fp
 800a88c:	e7e1      	b.n	800a852 <_strtod_l+0x9a>
 800a88e:	2200      	movs	r2, #0
 800a890:	e7ee      	b.n	800a870 <_strtod_l+0xb8>
 800a892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a894:	b13a      	cbz	r2, 800a8a6 <_strtod_l+0xee>
 800a896:	2135      	movs	r1, #53	; 0x35
 800a898:	a81a      	add	r0, sp, #104	; 0x68
 800a89a:	f002 fd4a 	bl	800d332 <__copybits>
 800a89e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f002 f909 	bl	800cab8 <_Bfree>
 800a8a6:	3f01      	subs	r7, #1
 800a8a8:	2f04      	cmp	r7, #4
 800a8aa:	d806      	bhi.n	800a8ba <_strtod_l+0x102>
 800a8ac:	e8df f007 	tbb	[pc, r7]
 800a8b0:	1714030a 	.word	0x1714030a
 800a8b4:	0a          	.byte	0x0a
 800a8b5:	00          	.byte	0x00
 800a8b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a8ba:	0728      	lsls	r0, r5, #28
 800a8bc:	d5c0      	bpl.n	800a840 <_strtod_l+0x88>
 800a8be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a8c2:	e7bd      	b.n	800a840 <_strtod_l+0x88>
 800a8c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a8c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a8d6:	e7f0      	b.n	800a8ba <_strtod_l+0x102>
 800a8d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800aa5c <_strtod_l+0x2a4>
 800a8dc:	e7ed      	b.n	800a8ba <_strtod_l+0x102>
 800a8de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a8e2:	f04f 3aff 	mov.w	sl, #4294967295
 800a8e6:	e7e8      	b.n	800a8ba <_strtod_l+0x102>
 800a8e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8ee:	785b      	ldrb	r3, [r3, #1]
 800a8f0:	2b30      	cmp	r3, #48	; 0x30
 800a8f2:	d0f9      	beq.n	800a8e8 <_strtod_l+0x130>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0a3      	beq.n	800a840 <_strtod_l+0x88>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f04f 0900 	mov.w	r9, #0
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a902:	9308      	str	r3, [sp, #32]
 800a904:	f8cd 901c 	str.w	r9, [sp, #28]
 800a908:	464f      	mov	r7, r9
 800a90a:	220a      	movs	r2, #10
 800a90c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a90e:	7806      	ldrb	r6, [r0, #0]
 800a910:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a914:	b2d9      	uxtb	r1, r3
 800a916:	2909      	cmp	r1, #9
 800a918:	d92a      	bls.n	800a970 <_strtod_l+0x1b8>
 800a91a:	9905      	ldr	r1, [sp, #20]
 800a91c:	462a      	mov	r2, r5
 800a91e:	f003 f913 	bl	800db48 <strncmp>
 800a922:	b398      	cbz	r0, 800a98c <_strtod_l+0x1d4>
 800a924:	2000      	movs	r0, #0
 800a926:	4632      	mov	r2, r6
 800a928:	463d      	mov	r5, r7
 800a92a:	9005      	str	r0, [sp, #20]
 800a92c:	4603      	mov	r3, r0
 800a92e:	2a65      	cmp	r2, #101	; 0x65
 800a930:	d001      	beq.n	800a936 <_strtod_l+0x17e>
 800a932:	2a45      	cmp	r2, #69	; 0x45
 800a934:	d118      	bne.n	800a968 <_strtod_l+0x1b0>
 800a936:	b91d      	cbnz	r5, 800a940 <_strtod_l+0x188>
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	4302      	orrs	r2, r0
 800a93c:	d09e      	beq.n	800a87c <_strtod_l+0xc4>
 800a93e:	2500      	movs	r5, #0
 800a940:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a944:	f108 0201 	add.w	r2, r8, #1
 800a948:	9217      	str	r2, [sp, #92]	; 0x5c
 800a94a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a94e:	2a2b      	cmp	r2, #43	; 0x2b
 800a950:	d075      	beq.n	800aa3e <_strtod_l+0x286>
 800a952:	2a2d      	cmp	r2, #45	; 0x2d
 800a954:	d07b      	beq.n	800aa4e <_strtod_l+0x296>
 800a956:	f04f 0c00 	mov.w	ip, #0
 800a95a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a95e:	2909      	cmp	r1, #9
 800a960:	f240 8082 	bls.w	800aa68 <_strtod_l+0x2b0>
 800a964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a968:	2600      	movs	r6, #0
 800a96a:	e09d      	b.n	800aaa8 <_strtod_l+0x2f0>
 800a96c:	2300      	movs	r3, #0
 800a96e:	e7c4      	b.n	800a8fa <_strtod_l+0x142>
 800a970:	2f08      	cmp	r7, #8
 800a972:	bfd8      	it	le
 800a974:	9907      	ldrle	r1, [sp, #28]
 800a976:	f100 0001 	add.w	r0, r0, #1
 800a97a:	bfda      	itte	le
 800a97c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a980:	9307      	strle	r3, [sp, #28]
 800a982:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a986:	3701      	adds	r7, #1
 800a988:	9017      	str	r0, [sp, #92]	; 0x5c
 800a98a:	e7bf      	b.n	800a90c <_strtod_l+0x154>
 800a98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a98e:	195a      	adds	r2, r3, r5
 800a990:	9217      	str	r2, [sp, #92]	; 0x5c
 800a992:	5d5a      	ldrb	r2, [r3, r5]
 800a994:	2f00      	cmp	r7, #0
 800a996:	d037      	beq.n	800aa08 <_strtod_l+0x250>
 800a998:	9005      	str	r0, [sp, #20]
 800a99a:	463d      	mov	r5, r7
 800a99c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a9a0:	2b09      	cmp	r3, #9
 800a9a2:	d912      	bls.n	800a9ca <_strtod_l+0x212>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e7c2      	b.n	800a92e <_strtod_l+0x176>
 800a9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9ae:	785a      	ldrb	r2, [r3, #1]
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	2a30      	cmp	r2, #48	; 0x30
 800a9b4:	d0f8      	beq.n	800a9a8 <_strtod_l+0x1f0>
 800a9b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a9ba:	2b08      	cmp	r3, #8
 800a9bc:	f200 84d9 	bhi.w	800b372 <_strtod_l+0xbba>
 800a9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9c2:	9005      	str	r0, [sp, #20]
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	9308      	str	r3, [sp, #32]
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	3a30      	subs	r2, #48	; 0x30
 800a9cc:	f100 0301 	add.w	r3, r0, #1
 800a9d0:	d014      	beq.n	800a9fc <_strtod_l+0x244>
 800a9d2:	9905      	ldr	r1, [sp, #20]
 800a9d4:	4419      	add	r1, r3
 800a9d6:	9105      	str	r1, [sp, #20]
 800a9d8:	462b      	mov	r3, r5
 800a9da:	eb00 0e05 	add.w	lr, r0, r5
 800a9de:	210a      	movs	r1, #10
 800a9e0:	4573      	cmp	r3, lr
 800a9e2:	d113      	bne.n	800aa0c <_strtod_l+0x254>
 800a9e4:	182b      	adds	r3, r5, r0
 800a9e6:	2b08      	cmp	r3, #8
 800a9e8:	f105 0501 	add.w	r5, r5, #1
 800a9ec:	4405      	add	r5, r0
 800a9ee:	dc1c      	bgt.n	800aa2a <_strtod_l+0x272>
 800a9f0:	9907      	ldr	r1, [sp, #28]
 800a9f2:	230a      	movs	r3, #10
 800a9f4:	fb03 2301 	mla	r3, r3, r1, r2
 800a9f8:	9307      	str	r3, [sp, #28]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a9fe:	1c51      	adds	r1, r2, #1
 800aa00:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa02:	7852      	ldrb	r2, [r2, #1]
 800aa04:	4618      	mov	r0, r3
 800aa06:	e7c9      	b.n	800a99c <_strtod_l+0x1e4>
 800aa08:	4638      	mov	r0, r7
 800aa0a:	e7d2      	b.n	800a9b2 <_strtod_l+0x1fa>
 800aa0c:	2b08      	cmp	r3, #8
 800aa0e:	dc04      	bgt.n	800aa1a <_strtod_l+0x262>
 800aa10:	9e07      	ldr	r6, [sp, #28]
 800aa12:	434e      	muls	r6, r1
 800aa14:	9607      	str	r6, [sp, #28]
 800aa16:	3301      	adds	r3, #1
 800aa18:	e7e2      	b.n	800a9e0 <_strtod_l+0x228>
 800aa1a:	f103 0c01 	add.w	ip, r3, #1
 800aa1e:	f1bc 0f10 	cmp.w	ip, #16
 800aa22:	bfd8      	it	le
 800aa24:	fb01 f909 	mulle.w	r9, r1, r9
 800aa28:	e7f5      	b.n	800aa16 <_strtod_l+0x25e>
 800aa2a:	2d10      	cmp	r5, #16
 800aa2c:	bfdc      	itt	le
 800aa2e:	230a      	movle	r3, #10
 800aa30:	fb03 2909 	mlale	r9, r3, r9, r2
 800aa34:	e7e1      	b.n	800a9fa <_strtod_l+0x242>
 800aa36:	2300      	movs	r3, #0
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e77c      	b.n	800a938 <_strtod_l+0x180>
 800aa3e:	f04f 0c00 	mov.w	ip, #0
 800aa42:	f108 0202 	add.w	r2, r8, #2
 800aa46:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa48:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aa4c:	e785      	b.n	800a95a <_strtod_l+0x1a2>
 800aa4e:	f04f 0c01 	mov.w	ip, #1
 800aa52:	e7f6      	b.n	800aa42 <_strtod_l+0x28a>
 800aa54:	0800eb18 	.word	0x0800eb18
 800aa58:	0800e834 	.word	0x0800e834
 800aa5c:	7ff00000 	.word	0x7ff00000
 800aa60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa62:	1c51      	adds	r1, r2, #1
 800aa64:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa66:	7852      	ldrb	r2, [r2, #1]
 800aa68:	2a30      	cmp	r2, #48	; 0x30
 800aa6a:	d0f9      	beq.n	800aa60 <_strtod_l+0x2a8>
 800aa6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa70:	2908      	cmp	r1, #8
 800aa72:	f63f af79 	bhi.w	800a968 <_strtod_l+0x1b0>
 800aa76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa7c:	9206      	str	r2, [sp, #24]
 800aa7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa80:	1c51      	adds	r1, r2, #1
 800aa82:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa84:	7852      	ldrb	r2, [r2, #1]
 800aa86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aa8a:	2e09      	cmp	r6, #9
 800aa8c:	d937      	bls.n	800aafe <_strtod_l+0x346>
 800aa8e:	9e06      	ldr	r6, [sp, #24]
 800aa90:	1b89      	subs	r1, r1, r6
 800aa92:	2908      	cmp	r1, #8
 800aa94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aa98:	dc02      	bgt.n	800aaa0 <_strtod_l+0x2e8>
 800aa9a:	4576      	cmp	r6, lr
 800aa9c:	bfa8      	it	ge
 800aa9e:	4676      	movge	r6, lr
 800aaa0:	f1bc 0f00 	cmp.w	ip, #0
 800aaa4:	d000      	beq.n	800aaa8 <_strtod_l+0x2f0>
 800aaa6:	4276      	negs	r6, r6
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	d14d      	bne.n	800ab48 <_strtod_l+0x390>
 800aaac:	9904      	ldr	r1, [sp, #16]
 800aaae:	4301      	orrs	r1, r0
 800aab0:	f47f aec6 	bne.w	800a840 <_strtod_l+0x88>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f47f aee1 	bne.w	800a87c <_strtod_l+0xc4>
 800aaba:	2a69      	cmp	r2, #105	; 0x69
 800aabc:	d027      	beq.n	800ab0e <_strtod_l+0x356>
 800aabe:	dc24      	bgt.n	800ab0a <_strtod_l+0x352>
 800aac0:	2a49      	cmp	r2, #73	; 0x49
 800aac2:	d024      	beq.n	800ab0e <_strtod_l+0x356>
 800aac4:	2a4e      	cmp	r2, #78	; 0x4e
 800aac6:	f47f aed9 	bne.w	800a87c <_strtod_l+0xc4>
 800aaca:	499f      	ldr	r1, [pc, #636]	; (800ad48 <_strtod_l+0x590>)
 800aacc:	a817      	add	r0, sp, #92	; 0x5c
 800aace:	f001 fed7 	bl	800c880 <__match>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f43f aed2 	beq.w	800a87c <_strtod_l+0xc4>
 800aad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b28      	cmp	r3, #40	; 0x28
 800aade:	d12d      	bne.n	800ab3c <_strtod_l+0x384>
 800aae0:	499a      	ldr	r1, [pc, #616]	; (800ad4c <_strtod_l+0x594>)
 800aae2:	aa1a      	add	r2, sp, #104	; 0x68
 800aae4:	a817      	add	r0, sp, #92	; 0x5c
 800aae6:	f001 fedf 	bl	800c8a8 <__hexnan>
 800aaea:	2805      	cmp	r0, #5
 800aaec:	d126      	bne.n	800ab3c <_strtod_l+0x384>
 800aaee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aaf0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800aaf4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aaf8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aafc:	e6a0      	b.n	800a840 <_strtod_l+0x88>
 800aafe:	210a      	movs	r1, #10
 800ab00:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ab04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab08:	e7b9      	b.n	800aa7e <_strtod_l+0x2c6>
 800ab0a:	2a6e      	cmp	r2, #110	; 0x6e
 800ab0c:	e7db      	b.n	800aac6 <_strtod_l+0x30e>
 800ab0e:	4990      	ldr	r1, [pc, #576]	; (800ad50 <_strtod_l+0x598>)
 800ab10:	a817      	add	r0, sp, #92	; 0x5c
 800ab12:	f001 feb5 	bl	800c880 <__match>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f43f aeb0 	beq.w	800a87c <_strtod_l+0xc4>
 800ab1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab1e:	498d      	ldr	r1, [pc, #564]	; (800ad54 <_strtod_l+0x59c>)
 800ab20:	3b01      	subs	r3, #1
 800ab22:	a817      	add	r0, sp, #92	; 0x5c
 800ab24:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab26:	f001 feab 	bl	800c880 <__match>
 800ab2a:	b910      	cbnz	r0, 800ab32 <_strtod_l+0x37a>
 800ab2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2e:	3301      	adds	r3, #1
 800ab30:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab32:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ad64 <_strtod_l+0x5ac>
 800ab36:	f04f 0a00 	mov.w	sl, #0
 800ab3a:	e681      	b.n	800a840 <_strtod_l+0x88>
 800ab3c:	4886      	ldr	r0, [pc, #536]	; (800ad58 <_strtod_l+0x5a0>)
 800ab3e:	f002 ffeb 	bl	800db18 <nan>
 800ab42:	ec5b ab10 	vmov	sl, fp, d0
 800ab46:	e67b      	b.n	800a840 <_strtod_l+0x88>
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	9807      	ldr	r0, [sp, #28]
 800ab4c:	1af3      	subs	r3, r6, r3
 800ab4e:	2f00      	cmp	r7, #0
 800ab50:	bf08      	it	eq
 800ab52:	462f      	moveq	r7, r5
 800ab54:	2d10      	cmp	r5, #16
 800ab56:	9306      	str	r3, [sp, #24]
 800ab58:	46a8      	mov	r8, r5
 800ab5a:	bfa8      	it	ge
 800ab5c:	f04f 0810 	movge.w	r8, #16
 800ab60:	f7f5 fd08 	bl	8000574 <__aeabi_ui2d>
 800ab64:	2d09      	cmp	r5, #9
 800ab66:	4682      	mov	sl, r0
 800ab68:	468b      	mov	fp, r1
 800ab6a:	dd13      	ble.n	800ab94 <_strtod_l+0x3dc>
 800ab6c:	4b7b      	ldr	r3, [pc, #492]	; (800ad5c <_strtod_l+0x5a4>)
 800ab6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab76:	f7f5 fd77 	bl	8000668 <__aeabi_dmul>
 800ab7a:	4682      	mov	sl, r0
 800ab7c:	4648      	mov	r0, r9
 800ab7e:	468b      	mov	fp, r1
 800ab80:	f7f5 fcf8 	bl	8000574 <__aeabi_ui2d>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4650      	mov	r0, sl
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	f7f5 fbb6 	bl	80002fc <__adddf3>
 800ab90:	4682      	mov	sl, r0
 800ab92:	468b      	mov	fp, r1
 800ab94:	2d0f      	cmp	r5, #15
 800ab96:	dc38      	bgt.n	800ac0a <_strtod_l+0x452>
 800ab98:	9b06      	ldr	r3, [sp, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f43f ae50 	beq.w	800a840 <_strtod_l+0x88>
 800aba0:	dd24      	ble.n	800abec <_strtod_l+0x434>
 800aba2:	2b16      	cmp	r3, #22
 800aba4:	dc0b      	bgt.n	800abbe <_strtod_l+0x406>
 800aba6:	496d      	ldr	r1, [pc, #436]	; (800ad5c <_strtod_l+0x5a4>)
 800aba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb0:	4652      	mov	r2, sl
 800abb2:	465b      	mov	r3, fp
 800abb4:	f7f5 fd58 	bl	8000668 <__aeabi_dmul>
 800abb8:	4682      	mov	sl, r0
 800abba:	468b      	mov	fp, r1
 800abbc:	e640      	b.n	800a840 <_strtod_l+0x88>
 800abbe:	9a06      	ldr	r2, [sp, #24]
 800abc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800abc4:	4293      	cmp	r3, r2
 800abc6:	db20      	blt.n	800ac0a <_strtod_l+0x452>
 800abc8:	4c64      	ldr	r4, [pc, #400]	; (800ad5c <_strtod_l+0x5a4>)
 800abca:	f1c5 050f 	rsb	r5, r5, #15
 800abce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abda:	f7f5 fd45 	bl	8000668 <__aeabi_dmul>
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	1b5d      	subs	r5, r3, r5
 800abe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800abe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abea:	e7e3      	b.n	800abb4 <_strtod_l+0x3fc>
 800abec:	9b06      	ldr	r3, [sp, #24]
 800abee:	3316      	adds	r3, #22
 800abf0:	db0b      	blt.n	800ac0a <_strtod_l+0x452>
 800abf2:	9b05      	ldr	r3, [sp, #20]
 800abf4:	1b9e      	subs	r6, r3, r6
 800abf6:	4b59      	ldr	r3, [pc, #356]	; (800ad5c <_strtod_l+0x5a4>)
 800abf8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800abfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac00:	4650      	mov	r0, sl
 800ac02:	4659      	mov	r1, fp
 800ac04:	f7f5 fe5a 	bl	80008bc <__aeabi_ddiv>
 800ac08:	e7d6      	b.n	800abb8 <_strtod_l+0x400>
 800ac0a:	9b06      	ldr	r3, [sp, #24]
 800ac0c:	eba5 0808 	sub.w	r8, r5, r8
 800ac10:	4498      	add	r8, r3
 800ac12:	f1b8 0f00 	cmp.w	r8, #0
 800ac16:	dd74      	ble.n	800ad02 <_strtod_l+0x54a>
 800ac18:	f018 030f 	ands.w	r3, r8, #15
 800ac1c:	d00a      	beq.n	800ac34 <_strtod_l+0x47c>
 800ac1e:	494f      	ldr	r1, [pc, #316]	; (800ad5c <_strtod_l+0x5a4>)
 800ac20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac24:	4652      	mov	r2, sl
 800ac26:	465b      	mov	r3, fp
 800ac28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac2c:	f7f5 fd1c 	bl	8000668 <__aeabi_dmul>
 800ac30:	4682      	mov	sl, r0
 800ac32:	468b      	mov	fp, r1
 800ac34:	f038 080f 	bics.w	r8, r8, #15
 800ac38:	d04f      	beq.n	800acda <_strtod_l+0x522>
 800ac3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac3e:	dd22      	ble.n	800ac86 <_strtod_l+0x4ce>
 800ac40:	2500      	movs	r5, #0
 800ac42:	462e      	mov	r6, r5
 800ac44:	9507      	str	r5, [sp, #28]
 800ac46:	9505      	str	r5, [sp, #20]
 800ac48:	2322      	movs	r3, #34	; 0x22
 800ac4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ad64 <_strtod_l+0x5ac>
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	f04f 0a00 	mov.w	sl, #0
 800ac54:	9b07      	ldr	r3, [sp, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f43f adf2 	beq.w	800a840 <_strtod_l+0x88>
 800ac5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f001 ff2a 	bl	800cab8 <_Bfree>
 800ac64:	9905      	ldr	r1, [sp, #20]
 800ac66:	4620      	mov	r0, r4
 800ac68:	f001 ff26 	bl	800cab8 <_Bfree>
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f001 ff22 	bl	800cab8 <_Bfree>
 800ac74:	9907      	ldr	r1, [sp, #28]
 800ac76:	4620      	mov	r0, r4
 800ac78:	f001 ff1e 	bl	800cab8 <_Bfree>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f001 ff1a 	bl	800cab8 <_Bfree>
 800ac84:	e5dc      	b.n	800a840 <_strtod_l+0x88>
 800ac86:	4b36      	ldr	r3, [pc, #216]	; (800ad60 <_strtod_l+0x5a8>)
 800ac88:	9304      	str	r3, [sp, #16]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac90:	4650      	mov	r0, sl
 800ac92:	4659      	mov	r1, fp
 800ac94:	4699      	mov	r9, r3
 800ac96:	f1b8 0f01 	cmp.w	r8, #1
 800ac9a:	dc21      	bgt.n	800ace0 <_strtod_l+0x528>
 800ac9c:	b10b      	cbz	r3, 800aca2 <_strtod_l+0x4ea>
 800ac9e:	4682      	mov	sl, r0
 800aca0:	468b      	mov	fp, r1
 800aca2:	4b2f      	ldr	r3, [pc, #188]	; (800ad60 <_strtod_l+0x5a8>)
 800aca4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aca8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800acac:	4652      	mov	r2, sl
 800acae:	465b      	mov	r3, fp
 800acb0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800acb4:	f7f5 fcd8 	bl	8000668 <__aeabi_dmul>
 800acb8:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <_strtod_l+0x5ac>)
 800acba:	460a      	mov	r2, r1
 800acbc:	400b      	ands	r3, r1
 800acbe:	492a      	ldr	r1, [pc, #168]	; (800ad68 <_strtod_l+0x5b0>)
 800acc0:	428b      	cmp	r3, r1
 800acc2:	4682      	mov	sl, r0
 800acc4:	d8bc      	bhi.n	800ac40 <_strtod_l+0x488>
 800acc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800acca:	428b      	cmp	r3, r1
 800accc:	bf86      	itte	hi
 800acce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ad6c <_strtod_l+0x5b4>
 800acd2:	f04f 3aff 	movhi.w	sl, #4294967295
 800acd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800acda:	2300      	movs	r3, #0
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	e084      	b.n	800adea <_strtod_l+0x632>
 800ace0:	f018 0f01 	tst.w	r8, #1
 800ace4:	d005      	beq.n	800acf2 <_strtod_l+0x53a>
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fcbc 	bl	8000668 <__aeabi_dmul>
 800acf0:	2301      	movs	r3, #1
 800acf2:	9a04      	ldr	r2, [sp, #16]
 800acf4:	3208      	adds	r2, #8
 800acf6:	f109 0901 	add.w	r9, r9, #1
 800acfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800acfe:	9204      	str	r2, [sp, #16]
 800ad00:	e7c9      	b.n	800ac96 <_strtod_l+0x4de>
 800ad02:	d0ea      	beq.n	800acda <_strtod_l+0x522>
 800ad04:	f1c8 0800 	rsb	r8, r8, #0
 800ad08:	f018 020f 	ands.w	r2, r8, #15
 800ad0c:	d00a      	beq.n	800ad24 <_strtod_l+0x56c>
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <_strtod_l+0x5a4>)
 800ad10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad14:	4650      	mov	r0, sl
 800ad16:	4659      	mov	r1, fp
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	f7f5 fdce 	bl	80008bc <__aeabi_ddiv>
 800ad20:	4682      	mov	sl, r0
 800ad22:	468b      	mov	fp, r1
 800ad24:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad28:	d0d7      	beq.n	800acda <_strtod_l+0x522>
 800ad2a:	f1b8 0f1f 	cmp.w	r8, #31
 800ad2e:	dd1f      	ble.n	800ad70 <_strtod_l+0x5b8>
 800ad30:	2500      	movs	r5, #0
 800ad32:	462e      	mov	r6, r5
 800ad34:	9507      	str	r5, [sp, #28]
 800ad36:	9505      	str	r5, [sp, #20]
 800ad38:	2322      	movs	r3, #34	; 0x22
 800ad3a:	f04f 0a00 	mov.w	sl, #0
 800ad3e:	f04f 0b00 	mov.w	fp, #0
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	e786      	b.n	800ac54 <_strtod_l+0x49c>
 800ad46:	bf00      	nop
 800ad48:	0800e80d 	.word	0x0800e80d
 800ad4c:	0800e848 	.word	0x0800e848
 800ad50:	0800e805 	.word	0x0800e805
 800ad54:	0800ea3c 	.word	0x0800ea3c
 800ad58:	0800e937 	.word	0x0800e937
 800ad5c:	0800ebb0 	.word	0x0800ebb0
 800ad60:	0800eb88 	.word	0x0800eb88
 800ad64:	7ff00000 	.word	0x7ff00000
 800ad68:	7ca00000 	.word	0x7ca00000
 800ad6c:	7fefffff 	.word	0x7fefffff
 800ad70:	f018 0310 	ands.w	r3, r8, #16
 800ad74:	bf18      	it	ne
 800ad76:	236a      	movne	r3, #106	; 0x6a
 800ad78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b128 <_strtod_l+0x970>
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4659      	mov	r1, fp
 800ad82:	2300      	movs	r3, #0
 800ad84:	f018 0f01 	tst.w	r8, #1
 800ad88:	d004      	beq.n	800ad94 <_strtod_l+0x5dc>
 800ad8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad8e:	f7f5 fc6b 	bl	8000668 <__aeabi_dmul>
 800ad92:	2301      	movs	r3, #1
 800ad94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ad98:	f109 0908 	add.w	r9, r9, #8
 800ad9c:	d1f2      	bne.n	800ad84 <_strtod_l+0x5cc>
 800ad9e:	b10b      	cbz	r3, 800ada4 <_strtod_l+0x5ec>
 800ada0:	4682      	mov	sl, r0
 800ada2:	468b      	mov	fp, r1
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	b1c3      	cbz	r3, 800adda <_strtod_l+0x622>
 800ada8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800adac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	4659      	mov	r1, fp
 800adb4:	dd11      	ble.n	800adda <_strtod_l+0x622>
 800adb6:	2b1f      	cmp	r3, #31
 800adb8:	f340 8124 	ble.w	800b004 <_strtod_l+0x84c>
 800adbc:	2b34      	cmp	r3, #52	; 0x34
 800adbe:	bfde      	ittt	le
 800adc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800adc4:	f04f 33ff 	movle.w	r3, #4294967295
 800adc8:	fa03 f202 	lslle.w	r2, r3, r2
 800adcc:	f04f 0a00 	mov.w	sl, #0
 800add0:	bfcc      	ite	gt
 800add2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800add6:	ea02 0b01 	andle.w	fp, r2, r1
 800adda:	2200      	movs	r2, #0
 800addc:	2300      	movs	r3, #0
 800adde:	4650      	mov	r0, sl
 800ade0:	4659      	mov	r1, fp
 800ade2:	f7f5 fea9 	bl	8000b38 <__aeabi_dcmpeq>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d1a2      	bne.n	800ad30 <_strtod_l+0x578>
 800adea:	9b07      	ldr	r3, [sp, #28]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	9908      	ldr	r1, [sp, #32]
 800adf0:	462b      	mov	r3, r5
 800adf2:	463a      	mov	r2, r7
 800adf4:	4620      	mov	r0, r4
 800adf6:	f001 fec7 	bl	800cb88 <__s2b>
 800adfa:	9007      	str	r0, [sp, #28]
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f43f af1f 	beq.w	800ac40 <_strtod_l+0x488>
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	1b9e      	subs	r6, r3, r6
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb4      	ite	lt
 800ae0c:	4633      	movlt	r3, r6
 800ae0e:	2300      	movge	r3, #0
 800ae10:	930c      	str	r3, [sp, #48]	; 0x30
 800ae12:	9b06      	ldr	r3, [sp, #24]
 800ae14:	2500      	movs	r5, #0
 800ae16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae1a:	9312      	str	r3, [sp, #72]	; 0x48
 800ae1c:	462e      	mov	r6, r5
 800ae1e:	9b07      	ldr	r3, [sp, #28]
 800ae20:	4620      	mov	r0, r4
 800ae22:	6859      	ldr	r1, [r3, #4]
 800ae24:	f001 fe08 	bl	800ca38 <_Balloc>
 800ae28:	9005      	str	r0, [sp, #20]
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	f43f af0c 	beq.w	800ac48 <_strtod_l+0x490>
 800ae30:	9b07      	ldr	r3, [sp, #28]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	3202      	adds	r2, #2
 800ae36:	f103 010c 	add.w	r1, r3, #12
 800ae3a:	0092      	lsls	r2, r2, #2
 800ae3c:	300c      	adds	r0, #12
 800ae3e:	f001 fded 	bl	800ca1c <memcpy>
 800ae42:	ec4b ab10 	vmov	d0, sl, fp
 800ae46:	aa1a      	add	r2, sp, #104	; 0x68
 800ae48:	a919      	add	r1, sp, #100	; 0x64
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f002 f9e2 	bl	800d214 <__d2b>
 800ae50:	ec4b ab18 	vmov	d8, sl, fp
 800ae54:	9018      	str	r0, [sp, #96]	; 0x60
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f43f aef6 	beq.w	800ac48 <_strtod_l+0x490>
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f001 ff2c 	bl	800ccbc <__i2b>
 800ae64:	4606      	mov	r6, r0
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f aeee 	beq.w	800ac48 <_strtod_l+0x490>
 800ae6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae6e:	9904      	ldr	r1, [sp, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfab      	itete	ge
 800ae74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ae76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ae78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ae7e:	bfac      	ite	ge
 800ae80:	eb03 0902 	addge.w	r9, r3, r2
 800ae84:	1ad7      	sublt	r7, r2, r3
 800ae86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae88:	eba3 0801 	sub.w	r8, r3, r1
 800ae8c:	4490      	add	r8, r2
 800ae8e:	4ba1      	ldr	r3, [pc, #644]	; (800b114 <_strtod_l+0x95c>)
 800ae90:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae94:	4598      	cmp	r8, r3
 800ae96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae9a:	f280 80c7 	bge.w	800b02c <_strtod_l+0x874>
 800ae9e:	eba3 0308 	sub.w	r3, r3, r8
 800aea2:	2b1f      	cmp	r3, #31
 800aea4:	eba2 0203 	sub.w	r2, r2, r3
 800aea8:	f04f 0101 	mov.w	r1, #1
 800aeac:	f300 80b1 	bgt.w	800b012 <_strtod_l+0x85a>
 800aeb0:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb4:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9308      	str	r3, [sp, #32]
 800aeba:	eb09 0802 	add.w	r8, r9, r2
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	45c1      	cmp	r9, r8
 800aec2:	4417      	add	r7, r2
 800aec4:	441f      	add	r7, r3
 800aec6:	464b      	mov	r3, r9
 800aec8:	bfa8      	it	ge
 800aeca:	4643      	movge	r3, r8
 800aecc:	42bb      	cmp	r3, r7
 800aece:	bfa8      	it	ge
 800aed0:	463b      	movge	r3, r7
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfc2      	ittt	gt
 800aed6:	eba8 0803 	subgt.w	r8, r8, r3
 800aeda:	1aff      	subgt	r7, r7, r3
 800aedc:	eba9 0903 	subgt.w	r9, r9, r3
 800aee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd17      	ble.n	800af16 <_strtod_l+0x75e>
 800aee6:	4631      	mov	r1, r6
 800aee8:	461a      	mov	r2, r3
 800aeea:	4620      	mov	r0, r4
 800aeec:	f001 ffa6 	bl	800ce3c <__pow5mult>
 800aef0:	4606      	mov	r6, r0
 800aef2:	2800      	cmp	r0, #0
 800aef4:	f43f aea8 	beq.w	800ac48 <_strtod_l+0x490>
 800aef8:	4601      	mov	r1, r0
 800aefa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aefc:	4620      	mov	r0, r4
 800aefe:	f001 fef3 	bl	800cce8 <__multiply>
 800af02:	900b      	str	r0, [sp, #44]	; 0x2c
 800af04:	2800      	cmp	r0, #0
 800af06:	f43f ae9f 	beq.w	800ac48 <_strtod_l+0x490>
 800af0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af0c:	4620      	mov	r0, r4
 800af0e:	f001 fdd3 	bl	800cab8 <_Bfree>
 800af12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af14:	9318      	str	r3, [sp, #96]	; 0x60
 800af16:	f1b8 0f00 	cmp.w	r8, #0
 800af1a:	f300 808c 	bgt.w	800b036 <_strtod_l+0x87e>
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd08      	ble.n	800af36 <_strtod_l+0x77e>
 800af24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af26:	9905      	ldr	r1, [sp, #20]
 800af28:	4620      	mov	r0, r4
 800af2a:	f001 ff87 	bl	800ce3c <__pow5mult>
 800af2e:	9005      	str	r0, [sp, #20]
 800af30:	2800      	cmp	r0, #0
 800af32:	f43f ae89 	beq.w	800ac48 <_strtod_l+0x490>
 800af36:	2f00      	cmp	r7, #0
 800af38:	dd08      	ble.n	800af4c <_strtod_l+0x794>
 800af3a:	9905      	ldr	r1, [sp, #20]
 800af3c:	463a      	mov	r2, r7
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 ffd6 	bl	800cef0 <__lshift>
 800af44:	9005      	str	r0, [sp, #20]
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f ae7e 	beq.w	800ac48 <_strtod_l+0x490>
 800af4c:	f1b9 0f00 	cmp.w	r9, #0
 800af50:	dd08      	ble.n	800af64 <_strtod_l+0x7ac>
 800af52:	4631      	mov	r1, r6
 800af54:	464a      	mov	r2, r9
 800af56:	4620      	mov	r0, r4
 800af58:	f001 ffca 	bl	800cef0 <__lshift>
 800af5c:	4606      	mov	r6, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f ae72 	beq.w	800ac48 <_strtod_l+0x490>
 800af64:	9a05      	ldr	r2, [sp, #20]
 800af66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af68:	4620      	mov	r0, r4
 800af6a:	f002 f84d 	bl	800d008 <__mdiff>
 800af6e:	4605      	mov	r5, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	f43f ae69 	beq.w	800ac48 <_strtod_l+0x490>
 800af76:	68c3      	ldr	r3, [r0, #12]
 800af78:	930b      	str	r3, [sp, #44]	; 0x2c
 800af7a:	2300      	movs	r3, #0
 800af7c:	60c3      	str	r3, [r0, #12]
 800af7e:	4631      	mov	r1, r6
 800af80:	f002 f826 	bl	800cfd0 <__mcmp>
 800af84:	2800      	cmp	r0, #0
 800af86:	da60      	bge.n	800b04a <_strtod_l+0x892>
 800af88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af8a:	ea53 030a 	orrs.w	r3, r3, sl
 800af8e:	f040 8082 	bne.w	800b096 <_strtod_l+0x8de>
 800af92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af96:	2b00      	cmp	r3, #0
 800af98:	d17d      	bne.n	800b096 <_strtod_l+0x8de>
 800af9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af9e:	0d1b      	lsrs	r3, r3, #20
 800afa0:	051b      	lsls	r3, r3, #20
 800afa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afa6:	d976      	bls.n	800b096 <_strtod_l+0x8de>
 800afa8:	696b      	ldr	r3, [r5, #20]
 800afaa:	b913      	cbnz	r3, 800afb2 <_strtod_l+0x7fa>
 800afac:	692b      	ldr	r3, [r5, #16]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	dd71      	ble.n	800b096 <_strtod_l+0x8de>
 800afb2:	4629      	mov	r1, r5
 800afb4:	2201      	movs	r2, #1
 800afb6:	4620      	mov	r0, r4
 800afb8:	f001 ff9a 	bl	800cef0 <__lshift>
 800afbc:	4631      	mov	r1, r6
 800afbe:	4605      	mov	r5, r0
 800afc0:	f002 f806 	bl	800cfd0 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	dd66      	ble.n	800b096 <_strtod_l+0x8de>
 800afc8:	9904      	ldr	r1, [sp, #16]
 800afca:	4a53      	ldr	r2, [pc, #332]	; (800b118 <_strtod_l+0x960>)
 800afcc:	465b      	mov	r3, fp
 800afce:	2900      	cmp	r1, #0
 800afd0:	f000 8081 	beq.w	800b0d6 <_strtod_l+0x91e>
 800afd4:	ea02 010b 	and.w	r1, r2, fp
 800afd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afdc:	dc7b      	bgt.n	800b0d6 <_strtod_l+0x91e>
 800afde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800afe2:	f77f aea9 	ble.w	800ad38 <_strtod_l+0x580>
 800afe6:	4b4d      	ldr	r3, [pc, #308]	; (800b11c <_strtod_l+0x964>)
 800afe8:	4650      	mov	r0, sl
 800afea:	4659      	mov	r1, fp
 800afec:	2200      	movs	r2, #0
 800afee:	f7f5 fb3b 	bl	8000668 <__aeabi_dmul>
 800aff2:	460b      	mov	r3, r1
 800aff4:	4303      	orrs	r3, r0
 800aff6:	bf08      	it	eq
 800aff8:	2322      	moveq	r3, #34	; 0x22
 800affa:	4682      	mov	sl, r0
 800affc:	468b      	mov	fp, r1
 800affe:	bf08      	it	eq
 800b000:	6023      	streq	r3, [r4, #0]
 800b002:	e62b      	b.n	800ac5c <_strtod_l+0x4a4>
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	fa02 f303 	lsl.w	r3, r2, r3
 800b00c:	ea03 0a0a 	and.w	sl, r3, sl
 800b010:	e6e3      	b.n	800adda <_strtod_l+0x622>
 800b012:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b016:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b01a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b01e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b022:	fa01 f308 	lsl.w	r3, r1, r8
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	910d      	str	r1, [sp, #52]	; 0x34
 800b02a:	e746      	b.n	800aeba <_strtod_l+0x702>
 800b02c:	2300      	movs	r3, #0
 800b02e:	9308      	str	r3, [sp, #32]
 800b030:	2301      	movs	r3, #1
 800b032:	930d      	str	r3, [sp, #52]	; 0x34
 800b034:	e741      	b.n	800aeba <_strtod_l+0x702>
 800b036:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b038:	4642      	mov	r2, r8
 800b03a:	4620      	mov	r0, r4
 800b03c:	f001 ff58 	bl	800cef0 <__lshift>
 800b040:	9018      	str	r0, [sp, #96]	; 0x60
 800b042:	2800      	cmp	r0, #0
 800b044:	f47f af6b 	bne.w	800af1e <_strtod_l+0x766>
 800b048:	e5fe      	b.n	800ac48 <_strtod_l+0x490>
 800b04a:	465f      	mov	r7, fp
 800b04c:	d16e      	bne.n	800b12c <_strtod_l+0x974>
 800b04e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b050:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b054:	b342      	cbz	r2, 800b0a8 <_strtod_l+0x8f0>
 800b056:	4a32      	ldr	r2, [pc, #200]	; (800b120 <_strtod_l+0x968>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d128      	bne.n	800b0ae <_strtod_l+0x8f6>
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	4651      	mov	r1, sl
 800b060:	b1eb      	cbz	r3, 800b09e <_strtod_l+0x8e6>
 800b062:	4b2d      	ldr	r3, [pc, #180]	; (800b118 <_strtod_l+0x960>)
 800b064:	403b      	ands	r3, r7
 800b066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	d819      	bhi.n	800b0a4 <_strtod_l+0x8ec>
 800b070:	0d1b      	lsrs	r3, r3, #20
 800b072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b076:	fa02 f303 	lsl.w	r3, r2, r3
 800b07a:	4299      	cmp	r1, r3
 800b07c:	d117      	bne.n	800b0ae <_strtod_l+0x8f6>
 800b07e:	4b29      	ldr	r3, [pc, #164]	; (800b124 <_strtod_l+0x96c>)
 800b080:	429f      	cmp	r7, r3
 800b082:	d102      	bne.n	800b08a <_strtod_l+0x8d2>
 800b084:	3101      	adds	r1, #1
 800b086:	f43f addf 	beq.w	800ac48 <_strtod_l+0x490>
 800b08a:	4b23      	ldr	r3, [pc, #140]	; (800b118 <_strtod_l+0x960>)
 800b08c:	403b      	ands	r3, r7
 800b08e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b092:	f04f 0a00 	mov.w	sl, #0
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1a4      	bne.n	800afe6 <_strtod_l+0x82e>
 800b09c:	e5de      	b.n	800ac5c <_strtod_l+0x4a4>
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	e7ea      	b.n	800b07a <_strtod_l+0x8c2>
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	e7e8      	b.n	800b07a <_strtod_l+0x8c2>
 800b0a8:	ea53 030a 	orrs.w	r3, r3, sl
 800b0ac:	d08c      	beq.n	800afc8 <_strtod_l+0x810>
 800b0ae:	9b08      	ldr	r3, [sp, #32]
 800b0b0:	b1db      	cbz	r3, 800b0ea <_strtod_l+0x932>
 800b0b2:	423b      	tst	r3, r7
 800b0b4:	d0ef      	beq.n	800b096 <_strtod_l+0x8de>
 800b0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	4650      	mov	r0, sl
 800b0bc:	4659      	mov	r1, fp
 800b0be:	b1c3      	cbz	r3, 800b0f2 <_strtod_l+0x93a>
 800b0c0:	f7ff fb5e 	bl	800a780 <sulp>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	ec51 0b18 	vmov	r0, r1, d8
 800b0cc:	f7f5 f916 	bl	80002fc <__adddf3>
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	e7df      	b.n	800b096 <_strtod_l+0x8de>
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b0dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0e4:	f04f 3aff 	mov.w	sl, #4294967295
 800b0e8:	e7d5      	b.n	800b096 <_strtod_l+0x8de>
 800b0ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0ec:	ea13 0f0a 	tst.w	r3, sl
 800b0f0:	e7e0      	b.n	800b0b4 <_strtod_l+0x8fc>
 800b0f2:	f7ff fb45 	bl	800a780 <sulp>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	ec51 0b18 	vmov	r0, r1, d8
 800b0fe:	f7f5 f8fb 	bl	80002f8 <__aeabi_dsub>
 800b102:	2200      	movs	r2, #0
 800b104:	2300      	movs	r3, #0
 800b106:	4682      	mov	sl, r0
 800b108:	468b      	mov	fp, r1
 800b10a:	f7f5 fd15 	bl	8000b38 <__aeabi_dcmpeq>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d0c1      	beq.n	800b096 <_strtod_l+0x8de>
 800b112:	e611      	b.n	800ad38 <_strtod_l+0x580>
 800b114:	fffffc02 	.word	0xfffffc02
 800b118:	7ff00000 	.word	0x7ff00000
 800b11c:	39500000 	.word	0x39500000
 800b120:	000fffff 	.word	0x000fffff
 800b124:	7fefffff 	.word	0x7fefffff
 800b128:	0800e860 	.word	0x0800e860
 800b12c:	4631      	mov	r1, r6
 800b12e:	4628      	mov	r0, r5
 800b130:	f002 f8cc 	bl	800d2cc <__ratio>
 800b134:	ec59 8b10 	vmov	r8, r9, d0
 800b138:	ee10 0a10 	vmov	r0, s0
 800b13c:	2200      	movs	r2, #0
 800b13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b142:	4649      	mov	r1, r9
 800b144:	f7f5 fd0c 	bl	8000b60 <__aeabi_dcmple>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d07a      	beq.n	800b242 <_strtod_l+0xa8a>
 800b14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d04a      	beq.n	800b1e8 <_strtod_l+0xa30>
 800b152:	4b95      	ldr	r3, [pc, #596]	; (800b3a8 <_strtod_l+0xbf0>)
 800b154:	2200      	movs	r2, #0
 800b156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b15a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b3a8 <_strtod_l+0xbf0>
 800b15e:	f04f 0800 	mov.w	r8, #0
 800b162:	4b92      	ldr	r3, [pc, #584]	; (800b3ac <_strtod_l+0xbf4>)
 800b164:	403b      	ands	r3, r7
 800b166:	930d      	str	r3, [sp, #52]	; 0x34
 800b168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b16a:	4b91      	ldr	r3, [pc, #580]	; (800b3b0 <_strtod_l+0xbf8>)
 800b16c:	429a      	cmp	r2, r3
 800b16e:	f040 80b0 	bne.w	800b2d2 <_strtod_l+0xb1a>
 800b172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b176:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b17a:	ec4b ab10 	vmov	d0, sl, fp
 800b17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b182:	f001 ffcb 	bl	800d11c <__ulp>
 800b186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b18a:	ec53 2b10 	vmov	r2, r3, d0
 800b18e:	f7f5 fa6b 	bl	8000668 <__aeabi_dmul>
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	f7f5 f8b1 	bl	80002fc <__adddf3>
 800b19a:	460b      	mov	r3, r1
 800b19c:	4983      	ldr	r1, [pc, #524]	; (800b3ac <_strtod_l+0xbf4>)
 800b19e:	4a85      	ldr	r2, [pc, #532]	; (800b3b4 <_strtod_l+0xbfc>)
 800b1a0:	4019      	ands	r1, r3
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	d960      	bls.n	800b26a <_strtod_l+0xab2>
 800b1a8:	ee18 3a90 	vmov	r3, s17
 800b1ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d104      	bne.n	800b1be <_strtod_l+0xa06>
 800b1b4:	ee18 3a10 	vmov	r3, s16
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	f43f ad45 	beq.w	800ac48 <_strtod_l+0x490>
 800b1be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b3c0 <_strtod_l+0xc08>
 800b1c2:	f04f 3aff 	mov.w	sl, #4294967295
 800b1c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f001 fc75 	bl	800cab8 <_Bfree>
 800b1ce:	9905      	ldr	r1, [sp, #20]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f001 fc71 	bl	800cab8 <_Bfree>
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f001 fc6d 	bl	800cab8 <_Bfree>
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f001 fc69 	bl	800cab8 <_Bfree>
 800b1e6:	e61a      	b.n	800ae1e <_strtod_l+0x666>
 800b1e8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ec:	d11b      	bne.n	800b226 <_strtod_l+0xa6e>
 800b1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1f2:	b9f3      	cbnz	r3, 800b232 <_strtod_l+0xa7a>
 800b1f4:	4b6c      	ldr	r3, [pc, #432]	; (800b3a8 <_strtod_l+0xbf0>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 fca6 	bl	8000b4c <__aeabi_dcmplt>
 800b200:	b9d0      	cbnz	r0, 800b238 <_strtod_l+0xa80>
 800b202:	4640      	mov	r0, r8
 800b204:	4649      	mov	r1, r9
 800b206:	4b6c      	ldr	r3, [pc, #432]	; (800b3b8 <_strtod_l+0xc00>)
 800b208:	2200      	movs	r2, #0
 800b20a:	f7f5 fa2d 	bl	8000668 <__aeabi_dmul>
 800b20e:	4680      	mov	r8, r0
 800b210:	4689      	mov	r9, r1
 800b212:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b216:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b21a:	9315      	str	r3, [sp, #84]	; 0x54
 800b21c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b220:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b224:	e79d      	b.n	800b162 <_strtod_l+0x9aa>
 800b226:	f1ba 0f01 	cmp.w	sl, #1
 800b22a:	d102      	bne.n	800b232 <_strtod_l+0xa7a>
 800b22c:	2f00      	cmp	r7, #0
 800b22e:	f43f ad83 	beq.w	800ad38 <_strtod_l+0x580>
 800b232:	4b62      	ldr	r3, [pc, #392]	; (800b3bc <_strtod_l+0xc04>)
 800b234:	2200      	movs	r2, #0
 800b236:	e78e      	b.n	800b156 <_strtod_l+0x99e>
 800b238:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b3b8 <_strtod_l+0xc00>
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	e7e7      	b.n	800b212 <_strtod_l+0xa5a>
 800b242:	4b5d      	ldr	r3, [pc, #372]	; (800b3b8 <_strtod_l+0xc00>)
 800b244:	4640      	mov	r0, r8
 800b246:	4649      	mov	r1, r9
 800b248:	2200      	movs	r2, #0
 800b24a:	f7f5 fa0d 	bl	8000668 <__aeabi_dmul>
 800b24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b250:	4680      	mov	r8, r0
 800b252:	4689      	mov	r9, r1
 800b254:	b933      	cbnz	r3, 800b264 <_strtod_l+0xaac>
 800b256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b25a:	900e      	str	r0, [sp, #56]	; 0x38
 800b25c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b25e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b262:	e7dd      	b.n	800b220 <_strtod_l+0xa68>
 800b264:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b268:	e7f9      	b.n	800b25e <_strtod_l+0xaa6>
 800b26a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1a8      	bne.n	800b1c6 <_strtod_l+0xa0e>
 800b274:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b27a:	0d1b      	lsrs	r3, r3, #20
 800b27c:	051b      	lsls	r3, r3, #20
 800b27e:	429a      	cmp	r2, r3
 800b280:	d1a1      	bne.n	800b1c6 <_strtod_l+0xa0e>
 800b282:	4640      	mov	r0, r8
 800b284:	4649      	mov	r1, r9
 800b286:	f7f5 fd4f 	bl	8000d28 <__aeabi_d2lz>
 800b28a:	f7f5 f9bf 	bl	800060c <__aeabi_l2d>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f5 f82f 	bl	80002f8 <__aeabi_dsub>
 800b29a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a0:	ea43 030a 	orr.w	r3, r3, sl
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	4689      	mov	r9, r1
 800b2aa:	d055      	beq.n	800b358 <_strtod_l+0xba0>
 800b2ac:	a336      	add	r3, pc, #216	; (adr r3, 800b388 <_strtod_l+0xbd0>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 fc4b 	bl	8000b4c <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f47f acd0 	bne.w	800ac5c <_strtod_l+0x4a4>
 800b2bc:	a334      	add	r3, pc, #208	; (adr r3, 800b390 <_strtod_l+0xbd8>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 fc5f 	bl	8000b88 <__aeabi_dcmpgt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f43f af7b 	beq.w	800b1c6 <_strtod_l+0xa0e>
 800b2d0:	e4c4      	b.n	800ac5c <_strtod_l+0x4a4>
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	b333      	cbz	r3, 800b324 <_strtod_l+0xb6c>
 800b2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2dc:	d822      	bhi.n	800b324 <_strtod_l+0xb6c>
 800b2de:	a32e      	add	r3, pc, #184	; (adr r3, 800b398 <_strtod_l+0xbe0>)
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	f7f5 fc3a 	bl	8000b60 <__aeabi_dcmple>
 800b2ec:	b1a0      	cbz	r0, 800b318 <_strtod_l+0xb60>
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f7f5 fc91 	bl	8000c18 <__aeabi_d2uiz>
 800b2f6:	2801      	cmp	r0, #1
 800b2f8:	bf38      	it	cc
 800b2fa:	2001      	movcc	r0, #1
 800b2fc:	f7f5 f93a 	bl	8000574 <__aeabi_ui2d>
 800b300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	bb23      	cbnz	r3, 800b352 <_strtod_l+0xb9a>
 800b308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b30c:	9010      	str	r0, [sp, #64]	; 0x40
 800b30e:	9311      	str	r3, [sp, #68]	; 0x44
 800b310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b314:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b31c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b320:	1a9b      	subs	r3, r3, r2
 800b322:	9309      	str	r3, [sp, #36]	; 0x24
 800b324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b328:	eeb0 0a48 	vmov.f32	s0, s16
 800b32c:	eef0 0a68 	vmov.f32	s1, s17
 800b330:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b334:	f001 fef2 	bl	800d11c <__ulp>
 800b338:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b33c:	ec53 2b10 	vmov	r2, r3, d0
 800b340:	f7f5 f992 	bl	8000668 <__aeabi_dmul>
 800b344:	ec53 2b18 	vmov	r2, r3, d8
 800b348:	f7f4 ffd8 	bl	80002fc <__adddf3>
 800b34c:	4682      	mov	sl, r0
 800b34e:	468b      	mov	fp, r1
 800b350:	e78d      	b.n	800b26e <_strtod_l+0xab6>
 800b352:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b356:	e7db      	b.n	800b310 <_strtod_l+0xb58>
 800b358:	a311      	add	r3, pc, #68	; (adr r3, 800b3a0 <_strtod_l+0xbe8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 fbf5 	bl	8000b4c <__aeabi_dcmplt>
 800b362:	e7b2      	b.n	800b2ca <_strtod_l+0xb12>
 800b364:	2300      	movs	r3, #0
 800b366:	930a      	str	r3, [sp, #40]	; 0x28
 800b368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b36a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	f7ff ba6b 	b.w	800a848 <_strtod_l+0x90>
 800b372:	2a65      	cmp	r2, #101	; 0x65
 800b374:	f43f ab5f 	beq.w	800aa36 <_strtod_l+0x27e>
 800b378:	2a45      	cmp	r2, #69	; 0x45
 800b37a:	f43f ab5c 	beq.w	800aa36 <_strtod_l+0x27e>
 800b37e:	2301      	movs	r3, #1
 800b380:	f7ff bb94 	b.w	800aaac <_strtod_l+0x2f4>
 800b384:	f3af 8000 	nop.w
 800b388:	94a03595 	.word	0x94a03595
 800b38c:	3fdfffff 	.word	0x3fdfffff
 800b390:	35afe535 	.word	0x35afe535
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	ffc00000 	.word	0xffc00000
 800b39c:	41dfffff 	.word	0x41dfffff
 800b3a0:	94a03595 	.word	0x94a03595
 800b3a4:	3fcfffff 	.word	0x3fcfffff
 800b3a8:	3ff00000 	.word	0x3ff00000
 800b3ac:	7ff00000 	.word	0x7ff00000
 800b3b0:	7fe00000 	.word	0x7fe00000
 800b3b4:	7c9fffff 	.word	0x7c9fffff
 800b3b8:	3fe00000 	.word	0x3fe00000
 800b3bc:	bff00000 	.word	0xbff00000
 800b3c0:	7fefffff 	.word	0x7fefffff

0800b3c4 <strtod>:
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	4802      	ldr	r0, [pc, #8]	; (800b3d4 <strtod+0x10>)
 800b3ca:	4b03      	ldr	r3, [pc, #12]	; (800b3d8 <strtod+0x14>)
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f7ff b9f3 	b.w	800a7b8 <_strtod_l>
 800b3d2:	bf00      	nop
 800b3d4:	20000014 	.word	0x20000014
 800b3d8:	2000007c 	.word	0x2000007c

0800b3dc <strtok>:
 800b3dc:	4b16      	ldr	r3, [pc, #88]	; (800b438 <strtok+0x5c>)
 800b3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3e0:	681e      	ldr	r6, [r3, #0]
 800b3e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	b9fc      	cbnz	r4, 800b428 <strtok+0x4c>
 800b3e8:	2050      	movs	r0, #80	; 0x50
 800b3ea:	9101      	str	r1, [sp, #4]
 800b3ec:	f001 fafc 	bl	800c9e8 <malloc>
 800b3f0:	9901      	ldr	r1, [sp, #4]
 800b3f2:	65b0      	str	r0, [r6, #88]	; 0x58
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	b920      	cbnz	r0, 800b402 <strtok+0x26>
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <strtok+0x60>)
 800b3fa:	4811      	ldr	r0, [pc, #68]	; (800b440 <strtok+0x64>)
 800b3fc:	2157      	movs	r1, #87	; 0x57
 800b3fe:	f000 f8d5 	bl	800b5ac <__assert_func>
 800b402:	e9c0 4400 	strd	r4, r4, [r0]
 800b406:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b40a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b40e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b412:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b416:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b41a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b41e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b422:	6184      	str	r4, [r0, #24]
 800b424:	7704      	strb	r4, [r0, #28]
 800b426:	6244      	str	r4, [r0, #36]	; 0x24
 800b428:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b42a:	2301      	movs	r3, #1
 800b42c:	4628      	mov	r0, r5
 800b42e:	b002      	add	sp, #8
 800b430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b434:	f000 b806 	b.w	800b444 <__strtok_r>
 800b438:	20000014 	.word	0x20000014
 800b43c:	0800e888 	.word	0x0800e888
 800b440:	0800e89f 	.word	0x0800e89f

0800b444 <__strtok_r>:
 800b444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b446:	b908      	cbnz	r0, 800b44c <__strtok_r+0x8>
 800b448:	6810      	ldr	r0, [r2, #0]
 800b44a:	b188      	cbz	r0, 800b470 <__strtok_r+0x2c>
 800b44c:	4604      	mov	r4, r0
 800b44e:	4620      	mov	r0, r4
 800b450:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b454:	460f      	mov	r7, r1
 800b456:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b45a:	b91e      	cbnz	r6, 800b464 <__strtok_r+0x20>
 800b45c:	b965      	cbnz	r5, 800b478 <__strtok_r+0x34>
 800b45e:	6015      	str	r5, [r2, #0]
 800b460:	4628      	mov	r0, r5
 800b462:	e005      	b.n	800b470 <__strtok_r+0x2c>
 800b464:	42b5      	cmp	r5, r6
 800b466:	d1f6      	bne.n	800b456 <__strtok_r+0x12>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f0      	bne.n	800b44e <__strtok_r+0xa>
 800b46c:	6014      	str	r4, [r2, #0]
 800b46e:	7003      	strb	r3, [r0, #0]
 800b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b472:	461c      	mov	r4, r3
 800b474:	e00c      	b.n	800b490 <__strtok_r+0x4c>
 800b476:	b915      	cbnz	r5, 800b47e <__strtok_r+0x3a>
 800b478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b47c:	460e      	mov	r6, r1
 800b47e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b482:	42ab      	cmp	r3, r5
 800b484:	d1f7      	bne.n	800b476 <__strtok_r+0x32>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f3      	beq.n	800b472 <__strtok_r+0x2e>
 800b48a:	2300      	movs	r3, #0
 800b48c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	e7ed      	b.n	800b470 <__strtok_r+0x2c>

0800b494 <_strtol_l.constprop.0>:
 800b494:	2b01      	cmp	r3, #1
 800b496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49a:	d001      	beq.n	800b4a0 <_strtol_l.constprop.0+0xc>
 800b49c:	2b24      	cmp	r3, #36	; 0x24
 800b49e:	d906      	bls.n	800b4ae <_strtol_l.constprop.0+0x1a>
 800b4a0:	f7fe fc7e 	bl	8009da0 <__errno>
 800b4a4:	2316      	movs	r3, #22
 800b4a6:	6003      	str	r3, [r0, #0]
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b594 <_strtol_l.constprop.0+0x100>
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	462e      	mov	r6, r5
 800b4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b4be:	f017 0708 	ands.w	r7, r7, #8
 800b4c2:	d1f7      	bne.n	800b4b4 <_strtol_l.constprop.0+0x20>
 800b4c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b4c6:	d132      	bne.n	800b52e <_strtol_l.constprop.0+0x9a>
 800b4c8:	782c      	ldrb	r4, [r5, #0]
 800b4ca:	2701      	movs	r7, #1
 800b4cc:	1cb5      	adds	r5, r6, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d05b      	beq.n	800b58a <_strtol_l.constprop.0+0xf6>
 800b4d2:	2b10      	cmp	r3, #16
 800b4d4:	d109      	bne.n	800b4ea <_strtol_l.constprop.0+0x56>
 800b4d6:	2c30      	cmp	r4, #48	; 0x30
 800b4d8:	d107      	bne.n	800b4ea <_strtol_l.constprop.0+0x56>
 800b4da:	782c      	ldrb	r4, [r5, #0]
 800b4dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4e0:	2c58      	cmp	r4, #88	; 0x58
 800b4e2:	d14d      	bne.n	800b580 <_strtol_l.constprop.0+0xec>
 800b4e4:	786c      	ldrb	r4, [r5, #1]
 800b4e6:	2310      	movs	r3, #16
 800b4e8:	3502      	adds	r5, #2
 800b4ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4f2:	f04f 0c00 	mov.w	ip, #0
 800b4f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4fa:	4666      	mov	r6, ip
 800b4fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b500:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b504:	f1be 0f09 	cmp.w	lr, #9
 800b508:	d816      	bhi.n	800b538 <_strtol_l.constprop.0+0xa4>
 800b50a:	4674      	mov	r4, lr
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	dd24      	ble.n	800b55a <_strtol_l.constprop.0+0xc6>
 800b510:	f1bc 0f00 	cmp.w	ip, #0
 800b514:	db1e      	blt.n	800b554 <_strtol_l.constprop.0+0xc0>
 800b516:	45b1      	cmp	r9, r6
 800b518:	d31c      	bcc.n	800b554 <_strtol_l.constprop.0+0xc0>
 800b51a:	d101      	bne.n	800b520 <_strtol_l.constprop.0+0x8c>
 800b51c:	45a2      	cmp	sl, r4
 800b51e:	db19      	blt.n	800b554 <_strtol_l.constprop.0+0xc0>
 800b520:	fb06 4603 	mla	r6, r6, r3, r4
 800b524:	f04f 0c01 	mov.w	ip, #1
 800b528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b52c:	e7e8      	b.n	800b500 <_strtol_l.constprop.0+0x6c>
 800b52e:	2c2b      	cmp	r4, #43	; 0x2b
 800b530:	bf04      	itt	eq
 800b532:	782c      	ldrbeq	r4, [r5, #0]
 800b534:	1cb5      	addeq	r5, r6, #2
 800b536:	e7ca      	b.n	800b4ce <_strtol_l.constprop.0+0x3a>
 800b538:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b53c:	f1be 0f19 	cmp.w	lr, #25
 800b540:	d801      	bhi.n	800b546 <_strtol_l.constprop.0+0xb2>
 800b542:	3c37      	subs	r4, #55	; 0x37
 800b544:	e7e2      	b.n	800b50c <_strtol_l.constprop.0+0x78>
 800b546:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b54a:	f1be 0f19 	cmp.w	lr, #25
 800b54e:	d804      	bhi.n	800b55a <_strtol_l.constprop.0+0xc6>
 800b550:	3c57      	subs	r4, #87	; 0x57
 800b552:	e7db      	b.n	800b50c <_strtol_l.constprop.0+0x78>
 800b554:	f04f 3cff 	mov.w	ip, #4294967295
 800b558:	e7e6      	b.n	800b528 <_strtol_l.constprop.0+0x94>
 800b55a:	f1bc 0f00 	cmp.w	ip, #0
 800b55e:	da05      	bge.n	800b56c <_strtol_l.constprop.0+0xd8>
 800b560:	2322      	movs	r3, #34	; 0x22
 800b562:	6003      	str	r3, [r0, #0]
 800b564:	4646      	mov	r6, r8
 800b566:	b942      	cbnz	r2, 800b57a <_strtol_l.constprop.0+0xe6>
 800b568:	4630      	mov	r0, r6
 800b56a:	e79e      	b.n	800b4aa <_strtol_l.constprop.0+0x16>
 800b56c:	b107      	cbz	r7, 800b570 <_strtol_l.constprop.0+0xdc>
 800b56e:	4276      	negs	r6, r6
 800b570:	2a00      	cmp	r2, #0
 800b572:	d0f9      	beq.n	800b568 <_strtol_l.constprop.0+0xd4>
 800b574:	f1bc 0f00 	cmp.w	ip, #0
 800b578:	d000      	beq.n	800b57c <_strtol_l.constprop.0+0xe8>
 800b57a:	1e69      	subs	r1, r5, #1
 800b57c:	6011      	str	r1, [r2, #0]
 800b57e:	e7f3      	b.n	800b568 <_strtol_l.constprop.0+0xd4>
 800b580:	2430      	movs	r4, #48	; 0x30
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1b1      	bne.n	800b4ea <_strtol_l.constprop.0+0x56>
 800b586:	2308      	movs	r3, #8
 800b588:	e7af      	b.n	800b4ea <_strtol_l.constprop.0+0x56>
 800b58a:	2c30      	cmp	r4, #48	; 0x30
 800b58c:	d0a5      	beq.n	800b4da <_strtol_l.constprop.0+0x46>
 800b58e:	230a      	movs	r3, #10
 800b590:	e7ab      	b.n	800b4ea <_strtol_l.constprop.0+0x56>
 800b592:	bf00      	nop
 800b594:	0800e939 	.word	0x0800e939

0800b598 <strtol>:
 800b598:	4613      	mov	r3, r2
 800b59a:	460a      	mov	r2, r1
 800b59c:	4601      	mov	r1, r0
 800b59e:	4802      	ldr	r0, [pc, #8]	; (800b5a8 <strtol+0x10>)
 800b5a0:	6800      	ldr	r0, [r0, #0]
 800b5a2:	f7ff bf77 	b.w	800b494 <_strtol_l.constprop.0>
 800b5a6:	bf00      	nop
 800b5a8:	20000014 	.word	0x20000014

0800b5ac <__assert_func>:
 800b5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ae:	4614      	mov	r4, r2
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <__assert_func+0x2c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	68d8      	ldr	r0, [r3, #12]
 800b5ba:	b14c      	cbz	r4, 800b5d0 <__assert_func+0x24>
 800b5bc:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <__assert_func+0x30>)
 800b5be:	9100      	str	r1, [sp, #0]
 800b5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5c4:	4906      	ldr	r1, [pc, #24]	; (800b5e0 <__assert_func+0x34>)
 800b5c6:	462b      	mov	r3, r5
 800b5c8:	f000 fe88 	bl	800c2dc <fiprintf>
 800b5cc:	f002 fb9e 	bl	800dd0c <abort>
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <__assert_func+0x38>)
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	e7f3      	b.n	800b5be <__assert_func+0x12>
 800b5d6:	bf00      	nop
 800b5d8:	20000014 	.word	0x20000014
 800b5dc:	0800e8fc 	.word	0x0800e8fc
 800b5e0:	0800e909 	.word	0x0800e909
 800b5e4:	0800e937 	.word	0x0800e937

0800b5e8 <quorem>:
 800b5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	6903      	ldr	r3, [r0, #16]
 800b5ee:	690c      	ldr	r4, [r1, #16]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	f2c0 8081 	blt.w	800b6fa <quorem+0x112>
 800b5f8:	3c01      	subs	r4, #1
 800b5fa:	f101 0814 	add.w	r8, r1, #20
 800b5fe:	f100 0514 	add.w	r5, r0, #20
 800b602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b610:	3301      	adds	r3, #1
 800b612:	429a      	cmp	r2, r3
 800b614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b61c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b620:	d331      	bcc.n	800b686 <quorem+0x9e>
 800b622:	f04f 0e00 	mov.w	lr, #0
 800b626:	4640      	mov	r0, r8
 800b628:	46ac      	mov	ip, r5
 800b62a:	46f2      	mov	sl, lr
 800b62c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b630:	b293      	uxth	r3, r2
 800b632:	fb06 e303 	mla	r3, r6, r3, lr
 800b636:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	ebaa 0303 	sub.w	r3, sl, r3
 800b640:	f8dc a000 	ldr.w	sl, [ip]
 800b644:	0c12      	lsrs	r2, r2, #16
 800b646:	fa13 f38a 	uxtah	r3, r3, sl
 800b64a:	fb06 e202 	mla	r2, r6, r2, lr
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b656:	b292      	uxth	r2, r2
 800b658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b660:	f8bd 3000 	ldrh.w	r3, [sp]
 800b664:	4581      	cmp	r9, r0
 800b666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b66a:	f84c 3b04 	str.w	r3, [ip], #4
 800b66e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b672:	d2db      	bcs.n	800b62c <quorem+0x44>
 800b674:	f855 300b 	ldr.w	r3, [r5, fp]
 800b678:	b92b      	cbnz	r3, 800b686 <quorem+0x9e>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	3b04      	subs	r3, #4
 800b67e:	429d      	cmp	r5, r3
 800b680:	461a      	mov	r2, r3
 800b682:	d32e      	bcc.n	800b6e2 <quorem+0xfa>
 800b684:	613c      	str	r4, [r7, #16]
 800b686:	4638      	mov	r0, r7
 800b688:	f001 fca2 	bl	800cfd0 <__mcmp>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	db24      	blt.n	800b6da <quorem+0xf2>
 800b690:	3601      	adds	r6, #1
 800b692:	4628      	mov	r0, r5
 800b694:	f04f 0c00 	mov.w	ip, #0
 800b698:	f858 2b04 	ldr.w	r2, [r8], #4
 800b69c:	f8d0 e000 	ldr.w	lr, [r0]
 800b6a0:	b293      	uxth	r3, r2
 800b6a2:	ebac 0303 	sub.w	r3, ip, r3
 800b6a6:	0c12      	lsrs	r2, r2, #16
 800b6a8:	fa13 f38e 	uxtah	r3, r3, lr
 800b6ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ba:	45c1      	cmp	r9, r8
 800b6bc:	f840 3b04 	str.w	r3, [r0], #4
 800b6c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6c4:	d2e8      	bcs.n	800b698 <quorem+0xb0>
 800b6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ce:	b922      	cbnz	r2, 800b6da <quorem+0xf2>
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	d30a      	bcc.n	800b6ee <quorem+0x106>
 800b6d8:	613c      	str	r4, [r7, #16]
 800b6da:	4630      	mov	r0, r6
 800b6dc:	b003      	add	sp, #12
 800b6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e2:	6812      	ldr	r2, [r2, #0]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	d1cc      	bne.n	800b684 <quorem+0x9c>
 800b6ea:	3c01      	subs	r4, #1
 800b6ec:	e7c7      	b.n	800b67e <quorem+0x96>
 800b6ee:	6812      	ldr	r2, [r2, #0]
 800b6f0:	3b04      	subs	r3, #4
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d1f0      	bne.n	800b6d8 <quorem+0xf0>
 800b6f6:	3c01      	subs	r4, #1
 800b6f8:	e7eb      	b.n	800b6d2 <quorem+0xea>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e7ee      	b.n	800b6dc <quorem+0xf4>
	...

0800b700 <_dtoa_r>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	ed2d 8b04 	vpush	{d8-d9}
 800b708:	ec57 6b10 	vmov	r6, r7, d0
 800b70c:	b093      	sub	sp, #76	; 0x4c
 800b70e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b714:	9106      	str	r1, [sp, #24]
 800b716:	ee10 aa10 	vmov	sl, s0
 800b71a:	4604      	mov	r4, r0
 800b71c:	9209      	str	r2, [sp, #36]	; 0x24
 800b71e:	930c      	str	r3, [sp, #48]	; 0x30
 800b720:	46bb      	mov	fp, r7
 800b722:	b975      	cbnz	r5, 800b742 <_dtoa_r+0x42>
 800b724:	2010      	movs	r0, #16
 800b726:	f001 f95f 	bl	800c9e8 <malloc>
 800b72a:	4602      	mov	r2, r0
 800b72c:	6260      	str	r0, [r4, #36]	; 0x24
 800b72e:	b920      	cbnz	r0, 800b73a <_dtoa_r+0x3a>
 800b730:	4ba7      	ldr	r3, [pc, #668]	; (800b9d0 <_dtoa_r+0x2d0>)
 800b732:	21ea      	movs	r1, #234	; 0xea
 800b734:	48a7      	ldr	r0, [pc, #668]	; (800b9d4 <_dtoa_r+0x2d4>)
 800b736:	f7ff ff39 	bl	800b5ac <__assert_func>
 800b73a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b73e:	6005      	str	r5, [r0, #0]
 800b740:	60c5      	str	r5, [r0, #12]
 800b742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b744:	6819      	ldr	r1, [r3, #0]
 800b746:	b151      	cbz	r1, 800b75e <_dtoa_r+0x5e>
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	604a      	str	r2, [r1, #4]
 800b74c:	2301      	movs	r3, #1
 800b74e:	4093      	lsls	r3, r2
 800b750:	608b      	str	r3, [r1, #8]
 800b752:	4620      	mov	r0, r4
 800b754:	f001 f9b0 	bl	800cab8 <_Bfree>
 800b758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	1e3b      	subs	r3, r7, #0
 800b760:	bfaa      	itet	ge
 800b762:	2300      	movge	r3, #0
 800b764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b768:	f8c8 3000 	strge.w	r3, [r8]
 800b76c:	4b9a      	ldr	r3, [pc, #616]	; (800b9d8 <_dtoa_r+0x2d8>)
 800b76e:	bfbc      	itt	lt
 800b770:	2201      	movlt	r2, #1
 800b772:	f8c8 2000 	strlt.w	r2, [r8]
 800b776:	ea33 030b 	bics.w	r3, r3, fp
 800b77a:	d11b      	bne.n	800b7b4 <_dtoa_r+0xb4>
 800b77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b77e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b788:	4333      	orrs	r3, r6
 800b78a:	f000 8592 	beq.w	800c2b2 <_dtoa_r+0xbb2>
 800b78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b790:	b963      	cbnz	r3, 800b7ac <_dtoa_r+0xac>
 800b792:	4b92      	ldr	r3, [pc, #584]	; (800b9dc <_dtoa_r+0x2dc>)
 800b794:	e022      	b.n	800b7dc <_dtoa_r+0xdc>
 800b796:	4b92      	ldr	r3, [pc, #584]	; (800b9e0 <_dtoa_r+0x2e0>)
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	3308      	adds	r3, #8
 800b79c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	9801      	ldr	r0, [sp, #4]
 800b7a2:	b013      	add	sp, #76	; 0x4c
 800b7a4:	ecbd 8b04 	vpop	{d8-d9}
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	4b8b      	ldr	r3, [pc, #556]	; (800b9dc <_dtoa_r+0x2dc>)
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	e7f3      	b.n	800b79c <_dtoa_r+0x9c>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	4659      	mov	r1, fp
 800b7bc:	f7f5 f9bc 	bl	8000b38 <__aeabi_dcmpeq>
 800b7c0:	ec4b ab19 	vmov	d9, sl, fp
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	b158      	cbz	r0, 800b7e0 <_dtoa_r+0xe0>
 800b7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 856b 	beq.w	800c2ac <_dtoa_r+0xbac>
 800b7d6:	4883      	ldr	r0, [pc, #524]	; (800b9e4 <_dtoa_r+0x2e4>)
 800b7d8:	6018      	str	r0, [r3, #0]
 800b7da:	1e43      	subs	r3, r0, #1
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	e7df      	b.n	800b7a0 <_dtoa_r+0xa0>
 800b7e0:	ec4b ab10 	vmov	d0, sl, fp
 800b7e4:	aa10      	add	r2, sp, #64	; 0x40
 800b7e6:	a911      	add	r1, sp, #68	; 0x44
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f001 fd13 	bl	800d214 <__d2b>
 800b7ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7f2:	ee08 0a10 	vmov	s16, r0
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	f000 8084 	beq.w	800b904 <_dtoa_r+0x204>
 800b7fc:	ee19 3a90 	vmov	r3, s19
 800b800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b808:	4656      	mov	r6, sl
 800b80a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b80e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b816:	4b74      	ldr	r3, [pc, #464]	; (800b9e8 <_dtoa_r+0x2e8>)
 800b818:	2200      	movs	r2, #0
 800b81a:	4630      	mov	r0, r6
 800b81c:	4639      	mov	r1, r7
 800b81e:	f7f4 fd6b 	bl	80002f8 <__aeabi_dsub>
 800b822:	a365      	add	r3, pc, #404	; (adr r3, 800b9b8 <_dtoa_r+0x2b8>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 ff1e 	bl	8000668 <__aeabi_dmul>
 800b82c:	a364      	add	r3, pc, #400	; (adr r3, 800b9c0 <_dtoa_r+0x2c0>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd63 	bl	80002fc <__adddf3>
 800b836:	4606      	mov	r6, r0
 800b838:	4628      	mov	r0, r5
 800b83a:	460f      	mov	r7, r1
 800b83c:	f7f4 feaa 	bl	8000594 <__aeabi_i2d>
 800b840:	a361      	add	r3, pc, #388	; (adr r3, 800b9c8 <_dtoa_r+0x2c8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 ff0f 	bl	8000668 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fd53 	bl	80002fc <__adddf3>
 800b856:	4606      	mov	r6, r0
 800b858:	460f      	mov	r7, r1
 800b85a:	f7f5 f9b5 	bl	8000bc8 <__aeabi_d2iz>
 800b85e:	2200      	movs	r2, #0
 800b860:	9000      	str	r0, [sp, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f5 f970 	bl	8000b4c <__aeabi_dcmplt>
 800b86c:	b150      	cbz	r0, 800b884 <_dtoa_r+0x184>
 800b86e:	9800      	ldr	r0, [sp, #0]
 800b870:	f7f4 fe90 	bl	8000594 <__aeabi_i2d>
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	f7f5 f95e 	bl	8000b38 <__aeabi_dcmpeq>
 800b87c:	b910      	cbnz	r0, 800b884 <_dtoa_r+0x184>
 800b87e:	9b00      	ldr	r3, [sp, #0]
 800b880:	3b01      	subs	r3, #1
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b16      	cmp	r3, #22
 800b888:	d85a      	bhi.n	800b940 <_dtoa_r+0x240>
 800b88a:	9a00      	ldr	r2, [sp, #0]
 800b88c:	4b57      	ldr	r3, [pc, #348]	; (800b9ec <_dtoa_r+0x2ec>)
 800b88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	ec51 0b19 	vmov	r0, r1, d9
 800b89a:	f7f5 f957 	bl	8000b4c <__aeabi_dcmplt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d050      	beq.n	800b944 <_dtoa_r+0x244>
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8ae:	1b5d      	subs	r5, r3, r5
 800b8b0:	1e6b      	subs	r3, r5, #1
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	bf45      	ittet	mi
 800b8b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8ba:	9304      	strmi	r3, [sp, #16]
 800b8bc:	2300      	movpl	r3, #0
 800b8be:	2300      	movmi	r3, #0
 800b8c0:	bf4c      	ite	mi
 800b8c2:	9305      	strmi	r3, [sp, #20]
 800b8c4:	9304      	strpl	r3, [sp, #16]
 800b8c6:	9b00      	ldr	r3, [sp, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	db3d      	blt.n	800b948 <_dtoa_r+0x248>
 800b8cc:	9b05      	ldr	r3, [sp, #20]
 800b8ce:	9a00      	ldr	r2, [sp, #0]
 800b8d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8d2:	4413      	add	r3, r2
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9307      	str	r3, [sp, #28]
 800b8da:	9b06      	ldr	r3, [sp, #24]
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	f200 8089 	bhi.w	800b9f4 <_dtoa_r+0x2f4>
 800b8e2:	2b05      	cmp	r3, #5
 800b8e4:	bfc4      	itt	gt
 800b8e6:	3b04      	subgt	r3, #4
 800b8e8:	9306      	strgt	r3, [sp, #24]
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b8f0:	bfcc      	ite	gt
 800b8f2:	2500      	movgt	r5, #0
 800b8f4:	2501      	movle	r5, #1
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	f200 8087 	bhi.w	800ba0a <_dtoa_r+0x30a>
 800b8fc:	e8df f003 	tbb	[pc, r3]
 800b900:	59383a2d 	.word	0x59383a2d
 800b904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b908:	441d      	add	r5, r3
 800b90a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b90e:	2b20      	cmp	r3, #32
 800b910:	bfc1      	itttt	gt
 800b912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b91a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b91e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b922:	bfda      	itte	le
 800b924:	f1c3 0320 	rsble	r3, r3, #32
 800b928:	fa06 f003 	lslle.w	r0, r6, r3
 800b92c:	4318      	orrgt	r0, r3
 800b92e:	f7f4 fe21 	bl	8000574 <__aeabi_ui2d>
 800b932:	2301      	movs	r3, #1
 800b934:	4606      	mov	r6, r0
 800b936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b93a:	3d01      	subs	r5, #1
 800b93c:	930e      	str	r3, [sp, #56]	; 0x38
 800b93e:	e76a      	b.n	800b816 <_dtoa_r+0x116>
 800b940:	2301      	movs	r3, #1
 800b942:	e7b2      	b.n	800b8aa <_dtoa_r+0x1aa>
 800b944:	900b      	str	r0, [sp, #44]	; 0x2c
 800b946:	e7b1      	b.n	800b8ac <_dtoa_r+0x1ac>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	9a00      	ldr	r2, [sp, #0]
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	4253      	negs	r3, r2
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	2300      	movs	r3, #0
 800b956:	930a      	str	r3, [sp, #40]	; 0x28
 800b958:	e7bf      	b.n	800b8da <_dtoa_r+0x1da>
 800b95a:	2300      	movs	r3, #0
 800b95c:	9308      	str	r3, [sp, #32]
 800b95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	dc55      	bgt.n	800ba10 <_dtoa_r+0x310>
 800b964:	2301      	movs	r3, #1
 800b966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b96a:	461a      	mov	r2, r3
 800b96c:	9209      	str	r2, [sp, #36]	; 0x24
 800b96e:	e00c      	b.n	800b98a <_dtoa_r+0x28a>
 800b970:	2301      	movs	r3, #1
 800b972:	e7f3      	b.n	800b95c <_dtoa_r+0x25c>
 800b974:	2300      	movs	r3, #0
 800b976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	9b00      	ldr	r3, [sp, #0]
 800b97c:	4413      	add	r3, r2
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	3301      	adds	r3, #1
 800b982:	2b01      	cmp	r3, #1
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	bfb8      	it	lt
 800b988:	2301      	movlt	r3, #1
 800b98a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b98c:	2200      	movs	r2, #0
 800b98e:	6042      	str	r2, [r0, #4]
 800b990:	2204      	movs	r2, #4
 800b992:	f102 0614 	add.w	r6, r2, #20
 800b996:	429e      	cmp	r6, r3
 800b998:	6841      	ldr	r1, [r0, #4]
 800b99a:	d93d      	bls.n	800ba18 <_dtoa_r+0x318>
 800b99c:	4620      	mov	r0, r4
 800b99e:	f001 f84b 	bl	800ca38 <_Balloc>
 800b9a2:	9001      	str	r0, [sp, #4]
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d13b      	bne.n	800ba20 <_dtoa_r+0x320>
 800b9a8:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <_dtoa_r+0x2f0>)
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b9b0:	e6c0      	b.n	800b734 <_dtoa_r+0x34>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e7df      	b.n	800b976 <_dtoa_r+0x276>
 800b9b6:	bf00      	nop
 800b9b8:	636f4361 	.word	0x636f4361
 800b9bc:	3fd287a7 	.word	0x3fd287a7
 800b9c0:	8b60c8b3 	.word	0x8b60c8b3
 800b9c4:	3fc68a28 	.word	0x3fc68a28
 800b9c8:	509f79fb 	.word	0x509f79fb
 800b9cc:	3fd34413 	.word	0x3fd34413
 800b9d0:	0800e888 	.word	0x0800e888
 800b9d4:	0800ea46 	.word	0x0800ea46
 800b9d8:	7ff00000 	.word	0x7ff00000
 800b9dc:	0800ea42 	.word	0x0800ea42
 800b9e0:	0800ea39 	.word	0x0800ea39
 800b9e4:	0800e811 	.word	0x0800e811
 800b9e8:	3ff80000 	.word	0x3ff80000
 800b9ec:	0800ebb0 	.word	0x0800ebb0
 800b9f0:	0800eaa1 	.word	0x0800eaa1
 800b9f4:	2501      	movs	r5, #1
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9306      	str	r3, [sp, #24]
 800b9fa:	9508      	str	r5, [sp, #32]
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba04:	2200      	movs	r2, #0
 800ba06:	2312      	movs	r3, #18
 800ba08:	e7b0      	b.n	800b96c <_dtoa_r+0x26c>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9308      	str	r3, [sp, #32]
 800ba0e:	e7f5      	b.n	800b9fc <_dtoa_r+0x2fc>
 800ba10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba16:	e7b8      	b.n	800b98a <_dtoa_r+0x28a>
 800ba18:	3101      	adds	r1, #1
 800ba1a:	6041      	str	r1, [r0, #4]
 800ba1c:	0052      	lsls	r2, r2, #1
 800ba1e:	e7b8      	b.n	800b992 <_dtoa_r+0x292>
 800ba20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba22:	9a01      	ldr	r2, [sp, #4]
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b0e      	cmp	r3, #14
 800ba2a:	f200 809d 	bhi.w	800bb68 <_dtoa_r+0x468>
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	f000 809a 	beq.w	800bb68 <_dtoa_r+0x468>
 800ba34:	9b00      	ldr	r3, [sp, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dd32      	ble.n	800baa0 <_dtoa_r+0x3a0>
 800ba3a:	4ab7      	ldr	r2, [pc, #732]	; (800bd18 <_dtoa_r+0x618>)
 800ba3c:	f003 030f 	and.w	r3, r3, #15
 800ba40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba48:	9b00      	ldr	r3, [sp, #0]
 800ba4a:	05d8      	lsls	r0, r3, #23
 800ba4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba50:	d516      	bpl.n	800ba80 <_dtoa_r+0x380>
 800ba52:	4bb2      	ldr	r3, [pc, #712]	; (800bd1c <_dtoa_r+0x61c>)
 800ba54:	ec51 0b19 	vmov	r0, r1, d9
 800ba58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba5c:	f7f4 ff2e 	bl	80008bc <__aeabi_ddiv>
 800ba60:	f007 070f 	and.w	r7, r7, #15
 800ba64:	4682      	mov	sl, r0
 800ba66:	468b      	mov	fp, r1
 800ba68:	2503      	movs	r5, #3
 800ba6a:	4eac      	ldr	r6, [pc, #688]	; (800bd1c <_dtoa_r+0x61c>)
 800ba6c:	b957      	cbnz	r7, 800ba84 <_dtoa_r+0x384>
 800ba6e:	4642      	mov	r2, r8
 800ba70:	464b      	mov	r3, r9
 800ba72:	4650      	mov	r0, sl
 800ba74:	4659      	mov	r1, fp
 800ba76:	f7f4 ff21 	bl	80008bc <__aeabi_ddiv>
 800ba7a:	4682      	mov	sl, r0
 800ba7c:	468b      	mov	fp, r1
 800ba7e:	e028      	b.n	800bad2 <_dtoa_r+0x3d2>
 800ba80:	2502      	movs	r5, #2
 800ba82:	e7f2      	b.n	800ba6a <_dtoa_r+0x36a>
 800ba84:	07f9      	lsls	r1, r7, #31
 800ba86:	d508      	bpl.n	800ba9a <_dtoa_r+0x39a>
 800ba88:	4640      	mov	r0, r8
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba90:	f7f4 fdea 	bl	8000668 <__aeabi_dmul>
 800ba94:	3501      	adds	r5, #1
 800ba96:	4680      	mov	r8, r0
 800ba98:	4689      	mov	r9, r1
 800ba9a:	107f      	asrs	r7, r7, #1
 800ba9c:	3608      	adds	r6, #8
 800ba9e:	e7e5      	b.n	800ba6c <_dtoa_r+0x36c>
 800baa0:	f000 809b 	beq.w	800bbda <_dtoa_r+0x4da>
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	4f9d      	ldr	r7, [pc, #628]	; (800bd1c <_dtoa_r+0x61c>)
 800baa8:	425e      	negs	r6, r3
 800baaa:	4b9b      	ldr	r3, [pc, #620]	; (800bd18 <_dtoa_r+0x618>)
 800baac:	f006 020f 	and.w	r2, r6, #15
 800bab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	ec51 0b19 	vmov	r0, r1, d9
 800babc:	f7f4 fdd4 	bl	8000668 <__aeabi_dmul>
 800bac0:	1136      	asrs	r6, r6, #4
 800bac2:	4682      	mov	sl, r0
 800bac4:	468b      	mov	fp, r1
 800bac6:	2300      	movs	r3, #0
 800bac8:	2502      	movs	r5, #2
 800baca:	2e00      	cmp	r6, #0
 800bacc:	d17a      	bne.n	800bbc4 <_dtoa_r+0x4c4>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1d3      	bne.n	800ba7a <_dtoa_r+0x37a>
 800bad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8082 	beq.w	800bbde <_dtoa_r+0x4de>
 800bada:	4b91      	ldr	r3, [pc, #580]	; (800bd20 <_dtoa_r+0x620>)
 800badc:	2200      	movs	r2, #0
 800bade:	4650      	mov	r0, sl
 800bae0:	4659      	mov	r1, fp
 800bae2:	f7f5 f833 	bl	8000b4c <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d079      	beq.n	800bbde <_dtoa_r+0x4de>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d076      	beq.n	800bbde <_dtoa_r+0x4de>
 800baf0:	9b02      	ldr	r3, [sp, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dd36      	ble.n	800bb64 <_dtoa_r+0x464>
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	1e5f      	subs	r7, r3, #1
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b88      	ldr	r3, [pc, #544]	; (800bd24 <_dtoa_r+0x624>)
 800bb02:	f7f4 fdb1 	bl	8000668 <__aeabi_dmul>
 800bb06:	9e02      	ldr	r6, [sp, #8]
 800bb08:	4682      	mov	sl, r0
 800bb0a:	468b      	mov	fp, r1
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f7f4 fd40 	bl	8000594 <__aeabi_i2d>
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	f7f4 fda6 	bl	8000668 <__aeabi_dmul>
 800bb1c:	4b82      	ldr	r3, [pc, #520]	; (800bd28 <_dtoa_r+0x628>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f7f4 fbec 	bl	80002fc <__adddf3>
 800bb24:	46d0      	mov	r8, sl
 800bb26:	46d9      	mov	r9, fp
 800bb28:	4682      	mov	sl, r0
 800bb2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d158      	bne.n	800bbe4 <_dtoa_r+0x4e4>
 800bb32:	4b7e      	ldr	r3, [pc, #504]	; (800bd2c <_dtoa_r+0x62c>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	f7f4 fbdd 	bl	80002f8 <__aeabi_dsub>
 800bb3e:	4652      	mov	r2, sl
 800bb40:	465b      	mov	r3, fp
 800bb42:	4680      	mov	r8, r0
 800bb44:	4689      	mov	r9, r1
 800bb46:	f7f5 f81f 	bl	8000b88 <__aeabi_dcmpgt>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f040 8295 	bne.w	800c07a <_dtoa_r+0x97a>
 800bb50:	4652      	mov	r2, sl
 800bb52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fff7 	bl	8000b4c <__aeabi_dcmplt>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f040 8289 	bne.w	800c076 <_dtoa_r+0x976>
 800bb64:	ec5b ab19 	vmov	sl, fp, d9
 800bb68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f2c0 8148 	blt.w	800be00 <_dtoa_r+0x700>
 800bb70:	9a00      	ldr	r2, [sp, #0]
 800bb72:	2a0e      	cmp	r2, #14
 800bb74:	f300 8144 	bgt.w	800be00 <_dtoa_r+0x700>
 800bb78:	4b67      	ldr	r3, [pc, #412]	; (800bd18 <_dtoa_r+0x618>)
 800bb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f280 80d5 	bge.w	800bd34 <_dtoa_r+0x634>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f300 80d1 	bgt.w	800bd34 <_dtoa_r+0x634>
 800bb92:	f040 826f 	bne.w	800c074 <_dtoa_r+0x974>
 800bb96:	4b65      	ldr	r3, [pc, #404]	; (800bd2c <_dtoa_r+0x62c>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	f7f4 fd63 	bl	8000668 <__aeabi_dmul>
 800bba2:	4652      	mov	r2, sl
 800bba4:	465b      	mov	r3, fp
 800bba6:	f7f4 ffe5 	bl	8000b74 <__aeabi_dcmpge>
 800bbaa:	9e03      	ldr	r6, [sp, #12]
 800bbac:	4637      	mov	r7, r6
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f040 8245 	bne.w	800c03e <_dtoa_r+0x93e>
 800bbb4:	9d01      	ldr	r5, [sp, #4]
 800bbb6:	2331      	movs	r3, #49	; 0x31
 800bbb8:	f805 3b01 	strb.w	r3, [r5], #1
 800bbbc:	9b00      	ldr	r3, [sp, #0]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	e240      	b.n	800c046 <_dtoa_r+0x946>
 800bbc4:	07f2      	lsls	r2, r6, #31
 800bbc6:	d505      	bpl.n	800bbd4 <_dtoa_r+0x4d4>
 800bbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbcc:	f7f4 fd4c 	bl	8000668 <__aeabi_dmul>
 800bbd0:	3501      	adds	r5, #1
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	1076      	asrs	r6, r6, #1
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	e777      	b.n	800baca <_dtoa_r+0x3ca>
 800bbda:	2502      	movs	r5, #2
 800bbdc:	e779      	b.n	800bad2 <_dtoa_r+0x3d2>
 800bbde:	9f00      	ldr	r7, [sp, #0]
 800bbe0:	9e03      	ldr	r6, [sp, #12]
 800bbe2:	e794      	b.n	800bb0e <_dtoa_r+0x40e>
 800bbe4:	9901      	ldr	r1, [sp, #4]
 800bbe6:	4b4c      	ldr	r3, [pc, #304]	; (800bd18 <_dtoa_r+0x618>)
 800bbe8:	4431      	add	r1, r6
 800bbea:	910d      	str	r1, [sp, #52]	; 0x34
 800bbec:	9908      	ldr	r1, [sp, #32]
 800bbee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	d043      	beq.n	800bc82 <_dtoa_r+0x582>
 800bbfa:	494d      	ldr	r1, [pc, #308]	; (800bd30 <_dtoa_r+0x630>)
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f7f4 fe5d 	bl	80008bc <__aeabi_ddiv>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 fb77 	bl	80002f8 <__aeabi_dsub>
 800bc0a:	9d01      	ldr	r5, [sp, #4]
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	468b      	mov	fp, r1
 800bc10:	4649      	mov	r1, r9
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7f4 ffd8 	bl	8000bc8 <__aeabi_d2iz>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	f7f4 fcbb 	bl	8000594 <__aeabi_i2d>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4640      	mov	r0, r8
 800bc24:	4649      	mov	r1, r9
 800bc26:	f7f4 fb67 	bl	80002f8 <__aeabi_dsub>
 800bc2a:	3630      	adds	r6, #48	; 0x30
 800bc2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	4680      	mov	r8, r0
 800bc36:	4689      	mov	r9, r1
 800bc38:	f7f4 ff88 	bl	8000b4c <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d163      	bne.n	800bd08 <_dtoa_r+0x608>
 800bc40:	4642      	mov	r2, r8
 800bc42:	464b      	mov	r3, r9
 800bc44:	4936      	ldr	r1, [pc, #216]	; (800bd20 <_dtoa_r+0x620>)
 800bc46:	2000      	movs	r0, #0
 800bc48:	f7f4 fb56 	bl	80002f8 <__aeabi_dsub>
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	465b      	mov	r3, fp
 800bc50:	f7f4 ff7c 	bl	8000b4c <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 80b5 	bne.w	800bdc4 <_dtoa_r+0x6c4>
 800bc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc5c:	429d      	cmp	r5, r3
 800bc5e:	d081      	beq.n	800bb64 <_dtoa_r+0x464>
 800bc60:	4b30      	ldr	r3, [pc, #192]	; (800bd24 <_dtoa_r+0x624>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	4650      	mov	r0, sl
 800bc66:	4659      	mov	r1, fp
 800bc68:	f7f4 fcfe 	bl	8000668 <__aeabi_dmul>
 800bc6c:	4b2d      	ldr	r3, [pc, #180]	; (800bd24 <_dtoa_r+0x624>)
 800bc6e:	4682      	mov	sl, r0
 800bc70:	468b      	mov	fp, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	2200      	movs	r2, #0
 800bc78:	f7f4 fcf6 	bl	8000668 <__aeabi_dmul>
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	4689      	mov	r9, r1
 800bc80:	e7c6      	b.n	800bc10 <_dtoa_r+0x510>
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	f7f4 fcef 	bl	8000668 <__aeabi_dmul>
 800bc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc8c:	9d01      	ldr	r5, [sp, #4]
 800bc8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	4649      	mov	r1, r9
 800bc96:	4640      	mov	r0, r8
 800bc98:	f7f4 ff96 	bl	8000bc8 <__aeabi_d2iz>
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	f7f4 fc79 	bl	8000594 <__aeabi_i2d>
 800bca2:	3630      	adds	r6, #48	; 0x30
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 fb24 	bl	80002f8 <__aeabi_dsub>
 800bcb0:	f805 6b01 	strb.w	r6, [r5], #1
 800bcb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcb6:	429d      	cmp	r5, r3
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4689      	mov	r9, r1
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	d124      	bne.n	800bd0c <_dtoa_r+0x60c>
 800bcc2:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <_dtoa_r+0x630>)
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	f7f4 fb18 	bl	80002fc <__adddf3>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 ff58 	bl	8000b88 <__aeabi_dcmpgt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d173      	bne.n	800bdc4 <_dtoa_r+0x6c4>
 800bcdc:	4652      	mov	r2, sl
 800bcde:	465b      	mov	r3, fp
 800bce0:	4913      	ldr	r1, [pc, #76]	; (800bd30 <_dtoa_r+0x630>)
 800bce2:	2000      	movs	r0, #0
 800bce4:	f7f4 fb08 	bl	80002f8 <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4640      	mov	r0, r8
 800bcee:	4649      	mov	r1, r9
 800bcf0:	f7f4 ff2c 	bl	8000b4c <__aeabi_dcmplt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f43f af35 	beq.w	800bb64 <_dtoa_r+0x464>
 800bcfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcfc:	1e6b      	subs	r3, r5, #1
 800bcfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd04:	2b30      	cmp	r3, #48	; 0x30
 800bd06:	d0f8      	beq.n	800bcfa <_dtoa_r+0x5fa>
 800bd08:	9700      	str	r7, [sp, #0]
 800bd0a:	e049      	b.n	800bda0 <_dtoa_r+0x6a0>
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <_dtoa_r+0x624>)
 800bd0e:	f7f4 fcab 	bl	8000668 <__aeabi_dmul>
 800bd12:	4680      	mov	r8, r0
 800bd14:	4689      	mov	r9, r1
 800bd16:	e7bd      	b.n	800bc94 <_dtoa_r+0x594>
 800bd18:	0800ebb0 	.word	0x0800ebb0
 800bd1c:	0800eb88 	.word	0x0800eb88
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	40240000 	.word	0x40240000
 800bd28:	401c0000 	.word	0x401c0000
 800bd2c:	40140000 	.word	0x40140000
 800bd30:	3fe00000 	.word	0x3fe00000
 800bd34:	9d01      	ldr	r5, [sp, #4]
 800bd36:	4656      	mov	r6, sl
 800bd38:	465f      	mov	r7, fp
 800bd3a:	4642      	mov	r2, r8
 800bd3c:	464b      	mov	r3, r9
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fdbb 	bl	80008bc <__aeabi_ddiv>
 800bd46:	f7f4 ff3f 	bl	8000bc8 <__aeabi_d2iz>
 800bd4a:	4682      	mov	sl, r0
 800bd4c:	f7f4 fc22 	bl	8000594 <__aeabi_i2d>
 800bd50:	4642      	mov	r2, r8
 800bd52:	464b      	mov	r3, r9
 800bd54:	f7f4 fc88 	bl	8000668 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd64:	f7f4 fac8 	bl	80002f8 <__aeabi_dsub>
 800bd68:	f805 6b01 	strb.w	r6, [r5], #1
 800bd6c:	9e01      	ldr	r6, [sp, #4]
 800bd6e:	9f03      	ldr	r7, [sp, #12]
 800bd70:	1bae      	subs	r6, r5, r6
 800bd72:	42b7      	cmp	r7, r6
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	d135      	bne.n	800bde6 <_dtoa_r+0x6e6>
 800bd7a:	f7f4 fabf 	bl	80002fc <__adddf3>
 800bd7e:	4642      	mov	r2, r8
 800bd80:	464b      	mov	r3, r9
 800bd82:	4606      	mov	r6, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	f7f4 feff 	bl	8000b88 <__aeabi_dcmpgt>
 800bd8a:	b9d0      	cbnz	r0, 800bdc2 <_dtoa_r+0x6c2>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	4630      	mov	r0, r6
 800bd92:	4639      	mov	r1, r7
 800bd94:	f7f4 fed0 	bl	8000b38 <__aeabi_dcmpeq>
 800bd98:	b110      	cbz	r0, 800bda0 <_dtoa_r+0x6a0>
 800bd9a:	f01a 0f01 	tst.w	sl, #1
 800bd9e:	d110      	bne.n	800bdc2 <_dtoa_r+0x6c2>
 800bda0:	4620      	mov	r0, r4
 800bda2:	ee18 1a10 	vmov	r1, s16
 800bda6:	f000 fe87 	bl	800cab8 <_Bfree>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9800      	ldr	r0, [sp, #0]
 800bdae:	702b      	strb	r3, [r5, #0]
 800bdb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	6018      	str	r0, [r3, #0]
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f43f acf1 	beq.w	800b7a0 <_dtoa_r+0xa0>
 800bdbe:	601d      	str	r5, [r3, #0]
 800bdc0:	e4ee      	b.n	800b7a0 <_dtoa_r+0xa0>
 800bdc2:	9f00      	ldr	r7, [sp, #0]
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdcc:	2a39      	cmp	r2, #57	; 0x39
 800bdce:	d106      	bne.n	800bdde <_dtoa_r+0x6de>
 800bdd0:	9a01      	ldr	r2, [sp, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d1f7      	bne.n	800bdc6 <_dtoa_r+0x6c6>
 800bdd6:	9901      	ldr	r1, [sp, #4]
 800bdd8:	2230      	movs	r2, #48	; 0x30
 800bdda:	3701      	adds	r7, #1
 800bddc:	700a      	strb	r2, [r1, #0]
 800bdde:	781a      	ldrb	r2, [r3, #0]
 800bde0:	3201      	adds	r2, #1
 800bde2:	701a      	strb	r2, [r3, #0]
 800bde4:	e790      	b.n	800bd08 <_dtoa_r+0x608>
 800bde6:	4ba6      	ldr	r3, [pc, #664]	; (800c080 <_dtoa_r+0x980>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	f7f4 fc3d 	bl	8000668 <__aeabi_dmul>
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	f7f4 fe9f 	bl	8000b38 <__aeabi_dcmpeq>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d09d      	beq.n	800bd3a <_dtoa_r+0x63a>
 800bdfe:	e7cf      	b.n	800bda0 <_dtoa_r+0x6a0>
 800be00:	9a08      	ldr	r2, [sp, #32]
 800be02:	2a00      	cmp	r2, #0
 800be04:	f000 80d7 	beq.w	800bfb6 <_dtoa_r+0x8b6>
 800be08:	9a06      	ldr	r2, [sp, #24]
 800be0a:	2a01      	cmp	r2, #1
 800be0c:	f300 80ba 	bgt.w	800bf84 <_dtoa_r+0x884>
 800be10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be12:	2a00      	cmp	r2, #0
 800be14:	f000 80b2 	beq.w	800bf7c <_dtoa_r+0x87c>
 800be18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be1c:	9e07      	ldr	r6, [sp, #28]
 800be1e:	9d04      	ldr	r5, [sp, #16]
 800be20:	9a04      	ldr	r2, [sp, #16]
 800be22:	441a      	add	r2, r3
 800be24:	9204      	str	r2, [sp, #16]
 800be26:	9a05      	ldr	r2, [sp, #20]
 800be28:	2101      	movs	r1, #1
 800be2a:	441a      	add	r2, r3
 800be2c:	4620      	mov	r0, r4
 800be2e:	9205      	str	r2, [sp, #20]
 800be30:	f000 ff44 	bl	800ccbc <__i2b>
 800be34:	4607      	mov	r7, r0
 800be36:	2d00      	cmp	r5, #0
 800be38:	dd0c      	ble.n	800be54 <_dtoa_r+0x754>
 800be3a:	9b05      	ldr	r3, [sp, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd09      	ble.n	800be54 <_dtoa_r+0x754>
 800be40:	42ab      	cmp	r3, r5
 800be42:	9a04      	ldr	r2, [sp, #16]
 800be44:	bfa8      	it	ge
 800be46:	462b      	movge	r3, r5
 800be48:	1ad2      	subs	r2, r2, r3
 800be4a:	9204      	str	r2, [sp, #16]
 800be4c:	9a05      	ldr	r2, [sp, #20]
 800be4e:	1aed      	subs	r5, r5, r3
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	b31b      	cbz	r3, 800bea0 <_dtoa_r+0x7a0>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80af 	beq.w	800bfbe <_dtoa_r+0x8be>
 800be60:	2e00      	cmp	r6, #0
 800be62:	dd13      	ble.n	800be8c <_dtoa_r+0x78c>
 800be64:	4639      	mov	r1, r7
 800be66:	4632      	mov	r2, r6
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 ffe7 	bl	800ce3c <__pow5mult>
 800be6e:	ee18 2a10 	vmov	r2, s16
 800be72:	4601      	mov	r1, r0
 800be74:	4607      	mov	r7, r0
 800be76:	4620      	mov	r0, r4
 800be78:	f000 ff36 	bl	800cce8 <__multiply>
 800be7c:	ee18 1a10 	vmov	r1, s16
 800be80:	4680      	mov	r8, r0
 800be82:	4620      	mov	r0, r4
 800be84:	f000 fe18 	bl	800cab8 <_Bfree>
 800be88:	ee08 8a10 	vmov	s16, r8
 800be8c:	9b07      	ldr	r3, [sp, #28]
 800be8e:	1b9a      	subs	r2, r3, r6
 800be90:	d006      	beq.n	800bea0 <_dtoa_r+0x7a0>
 800be92:	ee18 1a10 	vmov	r1, s16
 800be96:	4620      	mov	r0, r4
 800be98:	f000 ffd0 	bl	800ce3c <__pow5mult>
 800be9c:	ee08 0a10 	vmov	s16, r0
 800bea0:	2101      	movs	r1, #1
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 ff0a 	bl	800ccbc <__i2b>
 800bea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beaa:	2b00      	cmp	r3, #0
 800beac:	4606      	mov	r6, r0
 800beae:	f340 8088 	ble.w	800bfc2 <_dtoa_r+0x8c2>
 800beb2:	461a      	mov	r2, r3
 800beb4:	4601      	mov	r1, r0
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 ffc0 	bl	800ce3c <__pow5mult>
 800bebc:	9b06      	ldr	r3, [sp, #24]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	4606      	mov	r6, r0
 800bec2:	f340 8081 	ble.w	800bfc8 <_dtoa_r+0x8c8>
 800bec6:	f04f 0800 	mov.w	r8, #0
 800beca:	6933      	ldr	r3, [r6, #16]
 800becc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bed0:	6918      	ldr	r0, [r3, #16]
 800bed2:	f000 fea3 	bl	800cc1c <__hi0bits>
 800bed6:	f1c0 0020 	rsb	r0, r0, #32
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	4418      	add	r0, r3
 800bede:	f010 001f 	ands.w	r0, r0, #31
 800bee2:	f000 8092 	beq.w	800c00a <_dtoa_r+0x90a>
 800bee6:	f1c0 0320 	rsb	r3, r0, #32
 800beea:	2b04      	cmp	r3, #4
 800beec:	f340 808a 	ble.w	800c004 <_dtoa_r+0x904>
 800bef0:	f1c0 001c 	rsb	r0, r0, #28
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	4403      	add	r3, r0
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	9b05      	ldr	r3, [sp, #20]
 800befc:	4403      	add	r3, r0
 800befe:	4405      	add	r5, r0
 800bf00:	9305      	str	r3, [sp, #20]
 800bf02:	9b04      	ldr	r3, [sp, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dd07      	ble.n	800bf18 <_dtoa_r+0x818>
 800bf08:	ee18 1a10 	vmov	r1, s16
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 ffee 	bl	800cef0 <__lshift>
 800bf14:	ee08 0a10 	vmov	s16, r0
 800bf18:	9b05      	ldr	r3, [sp, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dd05      	ble.n	800bf2a <_dtoa_r+0x82a>
 800bf1e:	4631      	mov	r1, r6
 800bf20:	461a      	mov	r2, r3
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 ffe4 	bl	800cef0 <__lshift>
 800bf28:	4606      	mov	r6, r0
 800bf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d06e      	beq.n	800c00e <_dtoa_r+0x90e>
 800bf30:	ee18 0a10 	vmov	r0, s16
 800bf34:	4631      	mov	r1, r6
 800bf36:	f001 f84b 	bl	800cfd0 <__mcmp>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	da67      	bge.n	800c00e <_dtoa_r+0x90e>
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	ee18 1a10 	vmov	r1, s16
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	220a      	movs	r2, #10
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fdd5 	bl	800cafc <__multadd>
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	ee08 0a10 	vmov	s16, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 81b1 	beq.w	800c2c0 <_dtoa_r+0xbc0>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4639      	mov	r1, r7
 800bf62:	220a      	movs	r2, #10
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fdc9 	bl	800cafc <__multadd>
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	4607      	mov	r7, r0
 800bf70:	f300 808e 	bgt.w	800c090 <_dtoa_r+0x990>
 800bf74:	9b06      	ldr	r3, [sp, #24]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	dc51      	bgt.n	800c01e <_dtoa_r+0x91e>
 800bf7a:	e089      	b.n	800c090 <_dtoa_r+0x990>
 800bf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf82:	e74b      	b.n	800be1c <_dtoa_r+0x71c>
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	1e5e      	subs	r6, r3, #1
 800bf88:	9b07      	ldr	r3, [sp, #28]
 800bf8a:	42b3      	cmp	r3, r6
 800bf8c:	bfbf      	itttt	lt
 800bf8e:	9b07      	ldrlt	r3, [sp, #28]
 800bf90:	9607      	strlt	r6, [sp, #28]
 800bf92:	1af2      	sublt	r2, r6, r3
 800bf94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf96:	bfb6      	itet	lt
 800bf98:	189b      	addlt	r3, r3, r2
 800bf9a:	1b9e      	subge	r6, r3, r6
 800bf9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	bfb8      	it	lt
 800bfa2:	2600      	movlt	r6, #0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	bfb7      	itett	lt
 800bfa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bfac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bfb0:	1a9d      	sublt	r5, r3, r2
 800bfb2:	2300      	movlt	r3, #0
 800bfb4:	e734      	b.n	800be20 <_dtoa_r+0x720>
 800bfb6:	9e07      	ldr	r6, [sp, #28]
 800bfb8:	9d04      	ldr	r5, [sp, #16]
 800bfba:	9f08      	ldr	r7, [sp, #32]
 800bfbc:	e73b      	b.n	800be36 <_dtoa_r+0x736>
 800bfbe:	9a07      	ldr	r2, [sp, #28]
 800bfc0:	e767      	b.n	800be92 <_dtoa_r+0x792>
 800bfc2:	9b06      	ldr	r3, [sp, #24]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	dc18      	bgt.n	800bffa <_dtoa_r+0x8fa>
 800bfc8:	f1ba 0f00 	cmp.w	sl, #0
 800bfcc:	d115      	bne.n	800bffa <_dtoa_r+0x8fa>
 800bfce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfd2:	b993      	cbnz	r3, 800bffa <_dtoa_r+0x8fa>
 800bfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfd8:	0d1b      	lsrs	r3, r3, #20
 800bfda:	051b      	lsls	r3, r3, #20
 800bfdc:	b183      	cbz	r3, 800c000 <_dtoa_r+0x900>
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	f04f 0801 	mov.w	r8, #1
 800bfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f47f af6a 	bne.w	800beca <_dtoa_r+0x7ca>
 800bff6:	2001      	movs	r0, #1
 800bff8:	e76f      	b.n	800beda <_dtoa_r+0x7da>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	e7f6      	b.n	800bfee <_dtoa_r+0x8ee>
 800c000:	4698      	mov	r8, r3
 800c002:	e7f4      	b.n	800bfee <_dtoa_r+0x8ee>
 800c004:	f43f af7d 	beq.w	800bf02 <_dtoa_r+0x802>
 800c008:	4618      	mov	r0, r3
 800c00a:	301c      	adds	r0, #28
 800c00c:	e772      	b.n	800bef4 <_dtoa_r+0x7f4>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	dc37      	bgt.n	800c084 <_dtoa_r+0x984>
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	2b02      	cmp	r3, #2
 800c018:	dd34      	ble.n	800c084 <_dtoa_r+0x984>
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	9302      	str	r3, [sp, #8]
 800c01e:	9b02      	ldr	r3, [sp, #8]
 800c020:	b96b      	cbnz	r3, 800c03e <_dtoa_r+0x93e>
 800c022:	4631      	mov	r1, r6
 800c024:	2205      	movs	r2, #5
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fd68 	bl	800cafc <__multadd>
 800c02c:	4601      	mov	r1, r0
 800c02e:	4606      	mov	r6, r0
 800c030:	ee18 0a10 	vmov	r0, s16
 800c034:	f000 ffcc 	bl	800cfd0 <__mcmp>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f73f adbb 	bgt.w	800bbb4 <_dtoa_r+0x4b4>
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	9d01      	ldr	r5, [sp, #4]
 800c042:	43db      	mvns	r3, r3
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	4631      	mov	r1, r6
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fd33 	bl	800cab8 <_Bfree>
 800c052:	2f00      	cmp	r7, #0
 800c054:	f43f aea4 	beq.w	800bda0 <_dtoa_r+0x6a0>
 800c058:	f1b8 0f00 	cmp.w	r8, #0
 800c05c:	d005      	beq.n	800c06a <_dtoa_r+0x96a>
 800c05e:	45b8      	cmp	r8, r7
 800c060:	d003      	beq.n	800c06a <_dtoa_r+0x96a>
 800c062:	4641      	mov	r1, r8
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fd27 	bl	800cab8 <_Bfree>
 800c06a:	4639      	mov	r1, r7
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fd23 	bl	800cab8 <_Bfree>
 800c072:	e695      	b.n	800bda0 <_dtoa_r+0x6a0>
 800c074:	2600      	movs	r6, #0
 800c076:	4637      	mov	r7, r6
 800c078:	e7e1      	b.n	800c03e <_dtoa_r+0x93e>
 800c07a:	9700      	str	r7, [sp, #0]
 800c07c:	4637      	mov	r7, r6
 800c07e:	e599      	b.n	800bbb4 <_dtoa_r+0x4b4>
 800c080:	40240000 	.word	0x40240000
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 80ca 	beq.w	800c220 <_dtoa_r+0xb20>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	9302      	str	r3, [sp, #8]
 800c090:	2d00      	cmp	r5, #0
 800c092:	dd05      	ble.n	800c0a0 <_dtoa_r+0x9a0>
 800c094:	4639      	mov	r1, r7
 800c096:	462a      	mov	r2, r5
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 ff29 	bl	800cef0 <__lshift>
 800c09e:	4607      	mov	r7, r0
 800c0a0:	f1b8 0f00 	cmp.w	r8, #0
 800c0a4:	d05b      	beq.n	800c15e <_dtoa_r+0xa5e>
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 fcc5 	bl	800ca38 <_Balloc>
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	b928      	cbnz	r0, 800c0be <_dtoa_r+0x9be>
 800c0b2:	4b87      	ldr	r3, [pc, #540]	; (800c2d0 <_dtoa_r+0xbd0>)
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c0ba:	f7ff bb3b 	b.w	800b734 <_dtoa_r+0x34>
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	3202      	adds	r2, #2
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	f107 010c 	add.w	r1, r7, #12
 800c0c8:	300c      	adds	r0, #12
 800c0ca:	f000 fca7 	bl	800ca1c <memcpy>
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 ff0c 	bl	800cef0 <__lshift>
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	f103 0901 	add.w	r9, r3, #1
 800c0de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	9305      	str	r3, [sp, #20]
 800c0e6:	f00a 0301 	and.w	r3, sl, #1
 800c0ea:	46b8      	mov	r8, r7
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	ee18 0a10 	vmov	r0, s16
 800c0f6:	f7ff fa77 	bl	800b5e8 <quorem>
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	9002      	str	r0, [sp, #8]
 800c0fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c102:	ee18 0a10 	vmov	r0, s16
 800c106:	f000 ff63 	bl	800cfd0 <__mcmp>
 800c10a:	463a      	mov	r2, r7
 800c10c:	9003      	str	r0, [sp, #12]
 800c10e:	4631      	mov	r1, r6
 800c110:	4620      	mov	r0, r4
 800c112:	f000 ff79 	bl	800d008 <__mdiff>
 800c116:	68c2      	ldr	r2, [r0, #12]
 800c118:	f109 3bff 	add.w	fp, r9, #4294967295
 800c11c:	4605      	mov	r5, r0
 800c11e:	bb02      	cbnz	r2, 800c162 <_dtoa_r+0xa62>
 800c120:	4601      	mov	r1, r0
 800c122:	ee18 0a10 	vmov	r0, s16
 800c126:	f000 ff53 	bl	800cfd0 <__mcmp>
 800c12a:	4602      	mov	r2, r0
 800c12c:	4629      	mov	r1, r5
 800c12e:	4620      	mov	r0, r4
 800c130:	9207      	str	r2, [sp, #28]
 800c132:	f000 fcc1 	bl	800cab8 <_Bfree>
 800c136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c13a:	ea43 0102 	orr.w	r1, r3, r2
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	430b      	orrs	r3, r1
 800c142:	464d      	mov	r5, r9
 800c144:	d10f      	bne.n	800c166 <_dtoa_r+0xa66>
 800c146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c14a:	d02a      	beq.n	800c1a2 <_dtoa_r+0xaa2>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dd02      	ble.n	800c158 <_dtoa_r+0xa58>
 800c152:	9b02      	ldr	r3, [sp, #8]
 800c154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c158:	f88b a000 	strb.w	sl, [fp]
 800c15c:	e775      	b.n	800c04a <_dtoa_r+0x94a>
 800c15e:	4638      	mov	r0, r7
 800c160:	e7ba      	b.n	800c0d8 <_dtoa_r+0x9d8>
 800c162:	2201      	movs	r2, #1
 800c164:	e7e2      	b.n	800c12c <_dtoa_r+0xa2c>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	db04      	blt.n	800c176 <_dtoa_r+0xa76>
 800c16c:	9906      	ldr	r1, [sp, #24]
 800c16e:	430b      	orrs	r3, r1
 800c170:	9904      	ldr	r1, [sp, #16]
 800c172:	430b      	orrs	r3, r1
 800c174:	d122      	bne.n	800c1bc <_dtoa_r+0xabc>
 800c176:	2a00      	cmp	r2, #0
 800c178:	ddee      	ble.n	800c158 <_dtoa_r+0xa58>
 800c17a:	ee18 1a10 	vmov	r1, s16
 800c17e:	2201      	movs	r2, #1
 800c180:	4620      	mov	r0, r4
 800c182:	f000 feb5 	bl	800cef0 <__lshift>
 800c186:	4631      	mov	r1, r6
 800c188:	ee08 0a10 	vmov	s16, r0
 800c18c:	f000 ff20 	bl	800cfd0 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dc03      	bgt.n	800c19c <_dtoa_r+0xa9c>
 800c194:	d1e0      	bne.n	800c158 <_dtoa_r+0xa58>
 800c196:	f01a 0f01 	tst.w	sl, #1
 800c19a:	d0dd      	beq.n	800c158 <_dtoa_r+0xa58>
 800c19c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1a0:	d1d7      	bne.n	800c152 <_dtoa_r+0xa52>
 800c1a2:	2339      	movs	r3, #57	; 0x39
 800c1a4:	f88b 3000 	strb.w	r3, [fp]
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	461d      	mov	r5, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c1b2:	2a39      	cmp	r2, #57	; 0x39
 800c1b4:	d071      	beq.n	800c29a <_dtoa_r+0xb9a>
 800c1b6:	3201      	adds	r2, #1
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	e746      	b.n	800c04a <_dtoa_r+0x94a>
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	dd07      	ble.n	800c1d0 <_dtoa_r+0xad0>
 800c1c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1c4:	d0ed      	beq.n	800c1a2 <_dtoa_r+0xaa2>
 800c1c6:	f10a 0301 	add.w	r3, sl, #1
 800c1ca:	f88b 3000 	strb.w	r3, [fp]
 800c1ce:	e73c      	b.n	800c04a <_dtoa_r+0x94a>
 800c1d0:	9b05      	ldr	r3, [sp, #20]
 800c1d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c1d6:	4599      	cmp	r9, r3
 800c1d8:	d047      	beq.n	800c26a <_dtoa_r+0xb6a>
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	2300      	movs	r3, #0
 800c1e0:	220a      	movs	r2, #10
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 fc8a 	bl	800cafc <__multadd>
 800c1e8:	45b8      	cmp	r8, r7
 800c1ea:	ee08 0a10 	vmov	s16, r0
 800c1ee:	f04f 0300 	mov.w	r3, #0
 800c1f2:	f04f 020a 	mov.w	r2, #10
 800c1f6:	4641      	mov	r1, r8
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	d106      	bne.n	800c20a <_dtoa_r+0xb0a>
 800c1fc:	f000 fc7e 	bl	800cafc <__multadd>
 800c200:	4680      	mov	r8, r0
 800c202:	4607      	mov	r7, r0
 800c204:	f109 0901 	add.w	r9, r9, #1
 800c208:	e772      	b.n	800c0f0 <_dtoa_r+0x9f0>
 800c20a:	f000 fc77 	bl	800cafc <__multadd>
 800c20e:	4639      	mov	r1, r7
 800c210:	4680      	mov	r8, r0
 800c212:	2300      	movs	r3, #0
 800c214:	220a      	movs	r2, #10
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fc70 	bl	800cafc <__multadd>
 800c21c:	4607      	mov	r7, r0
 800c21e:	e7f1      	b.n	800c204 <_dtoa_r+0xb04>
 800c220:	9b03      	ldr	r3, [sp, #12]
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	9d01      	ldr	r5, [sp, #4]
 800c226:	ee18 0a10 	vmov	r0, s16
 800c22a:	4631      	mov	r1, r6
 800c22c:	f7ff f9dc 	bl	800b5e8 <quorem>
 800c230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	f805 ab01 	strb.w	sl, [r5], #1
 800c23a:	1aea      	subs	r2, r5, r3
 800c23c:	9b02      	ldr	r3, [sp, #8]
 800c23e:	4293      	cmp	r3, r2
 800c240:	dd09      	ble.n	800c256 <_dtoa_r+0xb56>
 800c242:	ee18 1a10 	vmov	r1, s16
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 fc56 	bl	800cafc <__multadd>
 800c250:	ee08 0a10 	vmov	s16, r0
 800c254:	e7e7      	b.n	800c226 <_dtoa_r+0xb26>
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bfc8      	it	gt
 800c25c:	461d      	movgt	r5, r3
 800c25e:	9b01      	ldr	r3, [sp, #4]
 800c260:	bfd8      	it	le
 800c262:	2501      	movle	r5, #1
 800c264:	441d      	add	r5, r3
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	ee18 1a10 	vmov	r1, s16
 800c26e:	2201      	movs	r2, #1
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fe3d 	bl	800cef0 <__lshift>
 800c276:	4631      	mov	r1, r6
 800c278:	ee08 0a10 	vmov	s16, r0
 800c27c:	f000 fea8 	bl	800cfd0 <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	dc91      	bgt.n	800c1a8 <_dtoa_r+0xaa8>
 800c284:	d102      	bne.n	800c28c <_dtoa_r+0xb8c>
 800c286:	f01a 0f01 	tst.w	sl, #1
 800c28a:	d18d      	bne.n	800c1a8 <_dtoa_r+0xaa8>
 800c28c:	462b      	mov	r3, r5
 800c28e:	461d      	mov	r5, r3
 800c290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c294:	2a30      	cmp	r2, #48	; 0x30
 800c296:	d0fa      	beq.n	800c28e <_dtoa_r+0xb8e>
 800c298:	e6d7      	b.n	800c04a <_dtoa_r+0x94a>
 800c29a:	9a01      	ldr	r2, [sp, #4]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d184      	bne.n	800c1aa <_dtoa_r+0xaaa>
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	2331      	movs	r3, #49	; 0x31
 800c2a8:	7013      	strb	r3, [r2, #0]
 800c2aa:	e6ce      	b.n	800c04a <_dtoa_r+0x94a>
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <_dtoa_r+0xbd4>)
 800c2ae:	f7ff ba95 	b.w	800b7dc <_dtoa_r+0xdc>
 800c2b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f47f aa6e 	bne.w	800b796 <_dtoa_r+0x96>
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <_dtoa_r+0xbd8>)
 800c2bc:	f7ff ba8e 	b.w	800b7dc <_dtoa_r+0xdc>
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dcae      	bgt.n	800c224 <_dtoa_r+0xb24>
 800c2c6:	9b06      	ldr	r3, [sp, #24]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	f73f aea8 	bgt.w	800c01e <_dtoa_r+0x91e>
 800c2ce:	e7a9      	b.n	800c224 <_dtoa_r+0xb24>
 800c2d0:	0800eaa1 	.word	0x0800eaa1
 800c2d4:	0800e810 	.word	0x0800e810
 800c2d8:	0800ea39 	.word	0x0800ea39

0800c2dc <fiprintf>:
 800c2dc:	b40e      	push	{r1, r2, r3}
 800c2de:	b503      	push	{r0, r1, lr}
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	ab03      	add	r3, sp, #12
 800c2e4:	4805      	ldr	r0, [pc, #20]	; (800c2fc <fiprintf+0x20>)
 800c2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ea:	6800      	ldr	r0, [r0, #0]
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	f001 fae1 	bl	800d8b4 <_vfiprintf_r>
 800c2f2:	b002      	add	sp, #8
 800c2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f8:	b003      	add	sp, #12
 800c2fa:	4770      	bx	lr
 800c2fc:	20000014 	.word	0x20000014

0800c300 <rshift>:
 800c300:	6903      	ldr	r3, [r0, #16]
 800c302:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c30a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c30e:	f100 0414 	add.w	r4, r0, #20
 800c312:	dd45      	ble.n	800c3a0 <rshift+0xa0>
 800c314:	f011 011f 	ands.w	r1, r1, #31
 800c318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c31c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c320:	d10c      	bne.n	800c33c <rshift+0x3c>
 800c322:	f100 0710 	add.w	r7, r0, #16
 800c326:	4629      	mov	r1, r5
 800c328:	42b1      	cmp	r1, r6
 800c32a:	d334      	bcc.n	800c396 <rshift+0x96>
 800c32c:	1a9b      	subs	r3, r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	1eea      	subs	r2, r5, #3
 800c332:	4296      	cmp	r6, r2
 800c334:	bf38      	it	cc
 800c336:	2300      	movcc	r3, #0
 800c338:	4423      	add	r3, r4
 800c33a:	e015      	b.n	800c368 <rshift+0x68>
 800c33c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c340:	f1c1 0820 	rsb	r8, r1, #32
 800c344:	40cf      	lsrs	r7, r1
 800c346:	f105 0e04 	add.w	lr, r5, #4
 800c34a:	46a1      	mov	r9, r4
 800c34c:	4576      	cmp	r6, lr
 800c34e:	46f4      	mov	ip, lr
 800c350:	d815      	bhi.n	800c37e <rshift+0x7e>
 800c352:	1a9a      	subs	r2, r3, r2
 800c354:	0092      	lsls	r2, r2, #2
 800c356:	3a04      	subs	r2, #4
 800c358:	3501      	adds	r5, #1
 800c35a:	42ae      	cmp	r6, r5
 800c35c:	bf38      	it	cc
 800c35e:	2200      	movcc	r2, #0
 800c360:	18a3      	adds	r3, r4, r2
 800c362:	50a7      	str	r7, [r4, r2]
 800c364:	b107      	cbz	r7, 800c368 <rshift+0x68>
 800c366:	3304      	adds	r3, #4
 800c368:	1b1a      	subs	r2, r3, r4
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c370:	bf08      	it	eq
 800c372:	2300      	moveq	r3, #0
 800c374:	6102      	str	r2, [r0, #16]
 800c376:	bf08      	it	eq
 800c378:	6143      	streq	r3, [r0, #20]
 800c37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c37e:	f8dc c000 	ldr.w	ip, [ip]
 800c382:	fa0c fc08 	lsl.w	ip, ip, r8
 800c386:	ea4c 0707 	orr.w	r7, ip, r7
 800c38a:	f849 7b04 	str.w	r7, [r9], #4
 800c38e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c392:	40cf      	lsrs	r7, r1
 800c394:	e7da      	b.n	800c34c <rshift+0x4c>
 800c396:	f851 cb04 	ldr.w	ip, [r1], #4
 800c39a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c39e:	e7c3      	b.n	800c328 <rshift+0x28>
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	e7e1      	b.n	800c368 <rshift+0x68>

0800c3a4 <__hexdig_fun>:
 800c3a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3a8:	2b09      	cmp	r3, #9
 800c3aa:	d802      	bhi.n	800c3b2 <__hexdig_fun+0xe>
 800c3ac:	3820      	subs	r0, #32
 800c3ae:	b2c0      	uxtb	r0, r0
 800c3b0:	4770      	bx	lr
 800c3b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3b6:	2b05      	cmp	r3, #5
 800c3b8:	d801      	bhi.n	800c3be <__hexdig_fun+0x1a>
 800c3ba:	3847      	subs	r0, #71	; 0x47
 800c3bc:	e7f7      	b.n	800c3ae <__hexdig_fun+0xa>
 800c3be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d801      	bhi.n	800c3ca <__hexdig_fun+0x26>
 800c3c6:	3827      	subs	r0, #39	; 0x27
 800c3c8:	e7f1      	b.n	800c3ae <__hexdig_fun+0xa>
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	4770      	bx	lr
	...

0800c3d0 <__gethex>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	ed2d 8b02 	vpush	{d8}
 800c3d8:	b089      	sub	sp, #36	; 0x24
 800c3da:	ee08 0a10 	vmov	s16, r0
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	4bb4      	ldr	r3, [pc, #720]	; (800c6b4 <__gethex+0x2e4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	468b      	mov	fp, r1
 800c3ea:	4690      	mov	r8, r2
 800c3ec:	f7f3 ff22 	bl	8000234 <strlen>
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	f8db 2000 	ldr.w	r2, [fp]
 800c3f6:	4403      	add	r3, r0
 800c3f8:	4682      	mov	sl, r0
 800c3fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c3fe:	9305      	str	r3, [sp, #20]
 800c400:	1c93      	adds	r3, r2, #2
 800c402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c40a:	32fe      	adds	r2, #254	; 0xfe
 800c40c:	18d1      	adds	r1, r2, r3
 800c40e:	461f      	mov	r7, r3
 800c410:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c414:	9100      	str	r1, [sp, #0]
 800c416:	2830      	cmp	r0, #48	; 0x30
 800c418:	d0f8      	beq.n	800c40c <__gethex+0x3c>
 800c41a:	f7ff ffc3 	bl	800c3a4 <__hexdig_fun>
 800c41e:	4604      	mov	r4, r0
 800c420:	2800      	cmp	r0, #0
 800c422:	d13a      	bne.n	800c49a <__gethex+0xca>
 800c424:	9901      	ldr	r1, [sp, #4]
 800c426:	4652      	mov	r2, sl
 800c428:	4638      	mov	r0, r7
 800c42a:	f001 fb8d 	bl	800db48 <strncmp>
 800c42e:	4605      	mov	r5, r0
 800c430:	2800      	cmp	r0, #0
 800c432:	d168      	bne.n	800c506 <__gethex+0x136>
 800c434:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c438:	eb07 060a 	add.w	r6, r7, sl
 800c43c:	f7ff ffb2 	bl	800c3a4 <__hexdig_fun>
 800c440:	2800      	cmp	r0, #0
 800c442:	d062      	beq.n	800c50a <__gethex+0x13a>
 800c444:	4633      	mov	r3, r6
 800c446:	7818      	ldrb	r0, [r3, #0]
 800c448:	2830      	cmp	r0, #48	; 0x30
 800c44a:	461f      	mov	r7, r3
 800c44c:	f103 0301 	add.w	r3, r3, #1
 800c450:	d0f9      	beq.n	800c446 <__gethex+0x76>
 800c452:	f7ff ffa7 	bl	800c3a4 <__hexdig_fun>
 800c456:	2301      	movs	r3, #1
 800c458:	fab0 f480 	clz	r4, r0
 800c45c:	0964      	lsrs	r4, r4, #5
 800c45e:	4635      	mov	r5, r6
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	463a      	mov	r2, r7
 800c464:	4616      	mov	r6, r2
 800c466:	3201      	adds	r2, #1
 800c468:	7830      	ldrb	r0, [r6, #0]
 800c46a:	f7ff ff9b 	bl	800c3a4 <__hexdig_fun>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d1f8      	bne.n	800c464 <__gethex+0x94>
 800c472:	9901      	ldr	r1, [sp, #4]
 800c474:	4652      	mov	r2, sl
 800c476:	4630      	mov	r0, r6
 800c478:	f001 fb66 	bl	800db48 <strncmp>
 800c47c:	b980      	cbnz	r0, 800c4a0 <__gethex+0xd0>
 800c47e:	b94d      	cbnz	r5, 800c494 <__gethex+0xc4>
 800c480:	eb06 050a 	add.w	r5, r6, sl
 800c484:	462a      	mov	r2, r5
 800c486:	4616      	mov	r6, r2
 800c488:	3201      	adds	r2, #1
 800c48a:	7830      	ldrb	r0, [r6, #0]
 800c48c:	f7ff ff8a 	bl	800c3a4 <__hexdig_fun>
 800c490:	2800      	cmp	r0, #0
 800c492:	d1f8      	bne.n	800c486 <__gethex+0xb6>
 800c494:	1bad      	subs	r5, r5, r6
 800c496:	00ad      	lsls	r5, r5, #2
 800c498:	e004      	b.n	800c4a4 <__gethex+0xd4>
 800c49a:	2400      	movs	r4, #0
 800c49c:	4625      	mov	r5, r4
 800c49e:	e7e0      	b.n	800c462 <__gethex+0x92>
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	d1f7      	bne.n	800c494 <__gethex+0xc4>
 800c4a4:	7833      	ldrb	r3, [r6, #0]
 800c4a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4aa:	2b50      	cmp	r3, #80	; 0x50
 800c4ac:	d13b      	bne.n	800c526 <__gethex+0x156>
 800c4ae:	7873      	ldrb	r3, [r6, #1]
 800c4b0:	2b2b      	cmp	r3, #43	; 0x2b
 800c4b2:	d02c      	beq.n	800c50e <__gethex+0x13e>
 800c4b4:	2b2d      	cmp	r3, #45	; 0x2d
 800c4b6:	d02e      	beq.n	800c516 <__gethex+0x146>
 800c4b8:	1c71      	adds	r1, r6, #1
 800c4ba:	f04f 0900 	mov.w	r9, #0
 800c4be:	7808      	ldrb	r0, [r1, #0]
 800c4c0:	f7ff ff70 	bl	800c3a4 <__hexdig_fun>
 800c4c4:	1e43      	subs	r3, r0, #1
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b18      	cmp	r3, #24
 800c4ca:	d82c      	bhi.n	800c526 <__gethex+0x156>
 800c4cc:	f1a0 0210 	sub.w	r2, r0, #16
 800c4d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4d4:	f7ff ff66 	bl	800c3a4 <__hexdig_fun>
 800c4d8:	1e43      	subs	r3, r0, #1
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b18      	cmp	r3, #24
 800c4de:	d91d      	bls.n	800c51c <__gethex+0x14c>
 800c4e0:	f1b9 0f00 	cmp.w	r9, #0
 800c4e4:	d000      	beq.n	800c4e8 <__gethex+0x118>
 800c4e6:	4252      	negs	r2, r2
 800c4e8:	4415      	add	r5, r2
 800c4ea:	f8cb 1000 	str.w	r1, [fp]
 800c4ee:	b1e4      	cbz	r4, 800c52a <__gethex+0x15a>
 800c4f0:	9b00      	ldr	r3, [sp, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	bf14      	ite	ne
 800c4f6:	2700      	movne	r7, #0
 800c4f8:	2706      	moveq	r7, #6
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	b009      	add	sp, #36	; 0x24
 800c4fe:	ecbd 8b02 	vpop	{d8}
 800c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	463e      	mov	r6, r7
 800c508:	4625      	mov	r5, r4
 800c50a:	2401      	movs	r4, #1
 800c50c:	e7ca      	b.n	800c4a4 <__gethex+0xd4>
 800c50e:	f04f 0900 	mov.w	r9, #0
 800c512:	1cb1      	adds	r1, r6, #2
 800c514:	e7d3      	b.n	800c4be <__gethex+0xee>
 800c516:	f04f 0901 	mov.w	r9, #1
 800c51a:	e7fa      	b.n	800c512 <__gethex+0x142>
 800c51c:	230a      	movs	r3, #10
 800c51e:	fb03 0202 	mla	r2, r3, r2, r0
 800c522:	3a10      	subs	r2, #16
 800c524:	e7d4      	b.n	800c4d0 <__gethex+0x100>
 800c526:	4631      	mov	r1, r6
 800c528:	e7df      	b.n	800c4ea <__gethex+0x11a>
 800c52a:	1bf3      	subs	r3, r6, r7
 800c52c:	3b01      	subs	r3, #1
 800c52e:	4621      	mov	r1, r4
 800c530:	2b07      	cmp	r3, #7
 800c532:	dc0b      	bgt.n	800c54c <__gethex+0x17c>
 800c534:	ee18 0a10 	vmov	r0, s16
 800c538:	f000 fa7e 	bl	800ca38 <_Balloc>
 800c53c:	4604      	mov	r4, r0
 800c53e:	b940      	cbnz	r0, 800c552 <__gethex+0x182>
 800c540:	4b5d      	ldr	r3, [pc, #372]	; (800c6b8 <__gethex+0x2e8>)
 800c542:	4602      	mov	r2, r0
 800c544:	21de      	movs	r1, #222	; 0xde
 800c546:	485d      	ldr	r0, [pc, #372]	; (800c6bc <__gethex+0x2ec>)
 800c548:	f7ff f830 	bl	800b5ac <__assert_func>
 800c54c:	3101      	adds	r1, #1
 800c54e:	105b      	asrs	r3, r3, #1
 800c550:	e7ee      	b.n	800c530 <__gethex+0x160>
 800c552:	f100 0914 	add.w	r9, r0, #20
 800c556:	f04f 0b00 	mov.w	fp, #0
 800c55a:	f1ca 0301 	rsb	r3, sl, #1
 800c55e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c562:	f8cd b000 	str.w	fp, [sp]
 800c566:	9306      	str	r3, [sp, #24]
 800c568:	42b7      	cmp	r7, r6
 800c56a:	d340      	bcc.n	800c5ee <__gethex+0x21e>
 800c56c:	9802      	ldr	r0, [sp, #8]
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	f840 3b04 	str.w	r3, [r0], #4
 800c574:	eba0 0009 	sub.w	r0, r0, r9
 800c578:	1080      	asrs	r0, r0, #2
 800c57a:	0146      	lsls	r6, r0, #5
 800c57c:	6120      	str	r0, [r4, #16]
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fb4c 	bl	800cc1c <__hi0bits>
 800c584:	1a30      	subs	r0, r6, r0
 800c586:	f8d8 6000 	ldr.w	r6, [r8]
 800c58a:	42b0      	cmp	r0, r6
 800c58c:	dd63      	ble.n	800c656 <__gethex+0x286>
 800c58e:	1b87      	subs	r7, r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	4620      	mov	r0, r4
 800c594:	f000 fef0 	bl	800d378 <__any_on>
 800c598:	4682      	mov	sl, r0
 800c59a:	b1a8      	cbz	r0, 800c5c8 <__gethex+0x1f8>
 800c59c:	1e7b      	subs	r3, r7, #1
 800c59e:	1159      	asrs	r1, r3, #5
 800c5a0:	f003 021f 	and.w	r2, r3, #31
 800c5a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5a8:	f04f 0a01 	mov.w	sl, #1
 800c5ac:	fa0a f202 	lsl.w	r2, sl, r2
 800c5b0:	420a      	tst	r2, r1
 800c5b2:	d009      	beq.n	800c5c8 <__gethex+0x1f8>
 800c5b4:	4553      	cmp	r3, sl
 800c5b6:	dd05      	ble.n	800c5c4 <__gethex+0x1f4>
 800c5b8:	1eb9      	subs	r1, r7, #2
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 fedc 	bl	800d378 <__any_on>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d145      	bne.n	800c650 <__gethex+0x280>
 800c5c4:	f04f 0a02 	mov.w	sl, #2
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7ff fe98 	bl	800c300 <rshift>
 800c5d0:	443d      	add	r5, r7
 800c5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5d6:	42ab      	cmp	r3, r5
 800c5d8:	da4c      	bge.n	800c674 <__gethex+0x2a4>
 800c5da:	ee18 0a10 	vmov	r0, s16
 800c5de:	4621      	mov	r1, r4
 800c5e0:	f000 fa6a 	bl	800cab8 <_Bfree>
 800c5e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	27a3      	movs	r7, #163	; 0xa3
 800c5ec:	e785      	b.n	800c4fa <__gethex+0x12a>
 800c5ee:	1e73      	subs	r3, r6, #1
 800c5f0:	9a05      	ldr	r2, [sp, #20]
 800c5f2:	9303      	str	r3, [sp, #12]
 800c5f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d019      	beq.n	800c630 <__gethex+0x260>
 800c5fc:	f1bb 0f20 	cmp.w	fp, #32
 800c600:	d107      	bne.n	800c612 <__gethex+0x242>
 800c602:	9b02      	ldr	r3, [sp, #8]
 800c604:	9a00      	ldr	r2, [sp, #0]
 800c606:	f843 2b04 	str.w	r2, [r3], #4
 800c60a:	9302      	str	r3, [sp, #8]
 800c60c:	2300      	movs	r3, #0
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	469b      	mov	fp, r3
 800c612:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c616:	f7ff fec5 	bl	800c3a4 <__hexdig_fun>
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	f000 000f 	and.w	r0, r0, #15
 800c620:	fa00 f00b 	lsl.w	r0, r0, fp
 800c624:	4303      	orrs	r3, r0
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	f10b 0b04 	add.w	fp, fp, #4
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	e00d      	b.n	800c64c <__gethex+0x27c>
 800c630:	9b03      	ldr	r3, [sp, #12]
 800c632:	9a06      	ldr	r2, [sp, #24]
 800c634:	4413      	add	r3, r2
 800c636:	42bb      	cmp	r3, r7
 800c638:	d3e0      	bcc.n	800c5fc <__gethex+0x22c>
 800c63a:	4618      	mov	r0, r3
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	9307      	str	r3, [sp, #28]
 800c640:	4652      	mov	r2, sl
 800c642:	f001 fa81 	bl	800db48 <strncmp>
 800c646:	9b07      	ldr	r3, [sp, #28]
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1d7      	bne.n	800c5fc <__gethex+0x22c>
 800c64c:	461e      	mov	r6, r3
 800c64e:	e78b      	b.n	800c568 <__gethex+0x198>
 800c650:	f04f 0a03 	mov.w	sl, #3
 800c654:	e7b8      	b.n	800c5c8 <__gethex+0x1f8>
 800c656:	da0a      	bge.n	800c66e <__gethex+0x29e>
 800c658:	1a37      	subs	r7, r6, r0
 800c65a:	4621      	mov	r1, r4
 800c65c:	ee18 0a10 	vmov	r0, s16
 800c660:	463a      	mov	r2, r7
 800c662:	f000 fc45 	bl	800cef0 <__lshift>
 800c666:	1bed      	subs	r5, r5, r7
 800c668:	4604      	mov	r4, r0
 800c66a:	f100 0914 	add.w	r9, r0, #20
 800c66e:	f04f 0a00 	mov.w	sl, #0
 800c672:	e7ae      	b.n	800c5d2 <__gethex+0x202>
 800c674:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c678:	42a8      	cmp	r0, r5
 800c67a:	dd72      	ble.n	800c762 <__gethex+0x392>
 800c67c:	1b45      	subs	r5, r0, r5
 800c67e:	42ae      	cmp	r6, r5
 800c680:	dc36      	bgt.n	800c6f0 <__gethex+0x320>
 800c682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d02a      	beq.n	800c6e0 <__gethex+0x310>
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d02c      	beq.n	800c6e8 <__gethex+0x318>
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d11c      	bne.n	800c6cc <__gethex+0x2fc>
 800c692:	42ae      	cmp	r6, r5
 800c694:	d11a      	bne.n	800c6cc <__gethex+0x2fc>
 800c696:	2e01      	cmp	r6, #1
 800c698:	d112      	bne.n	800c6c0 <__gethex+0x2f0>
 800c69a:	9a04      	ldr	r2, [sp, #16]
 800c69c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	f8c9 3000 	str.w	r3, [r9]
 800c6aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6ac:	2762      	movs	r7, #98	; 0x62
 800c6ae:	601c      	str	r4, [r3, #0]
 800c6b0:	e723      	b.n	800c4fa <__gethex+0x12a>
 800c6b2:	bf00      	nop
 800c6b4:	0800eb18 	.word	0x0800eb18
 800c6b8:	0800eaa1 	.word	0x0800eaa1
 800c6bc:	0800eab2 	.word	0x0800eab2
 800c6c0:	1e71      	subs	r1, r6, #1
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 fe58 	bl	800d378 <__any_on>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d1e6      	bne.n	800c69a <__gethex+0x2ca>
 800c6cc:	ee18 0a10 	vmov	r0, s16
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f000 f9f1 	bl	800cab8 <_Bfree>
 800c6d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	2750      	movs	r7, #80	; 0x50
 800c6de:	e70c      	b.n	800c4fa <__gethex+0x12a>
 800c6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1f2      	bne.n	800c6cc <__gethex+0x2fc>
 800c6e6:	e7d8      	b.n	800c69a <__gethex+0x2ca>
 800c6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1d5      	bne.n	800c69a <__gethex+0x2ca>
 800c6ee:	e7ed      	b.n	800c6cc <__gethex+0x2fc>
 800c6f0:	1e6f      	subs	r7, r5, #1
 800c6f2:	f1ba 0f00 	cmp.w	sl, #0
 800c6f6:	d131      	bne.n	800c75c <__gethex+0x38c>
 800c6f8:	b127      	cbz	r7, 800c704 <__gethex+0x334>
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 fe3b 	bl	800d378 <__any_on>
 800c702:	4682      	mov	sl, r0
 800c704:	117b      	asrs	r3, r7, #5
 800c706:	2101      	movs	r1, #1
 800c708:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c70c:	f007 071f 	and.w	r7, r7, #31
 800c710:	fa01 f707 	lsl.w	r7, r1, r7
 800c714:	421f      	tst	r7, r3
 800c716:	4629      	mov	r1, r5
 800c718:	4620      	mov	r0, r4
 800c71a:	bf18      	it	ne
 800c71c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c720:	1b76      	subs	r6, r6, r5
 800c722:	f7ff fded 	bl	800c300 <rshift>
 800c726:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c72a:	2702      	movs	r7, #2
 800c72c:	f1ba 0f00 	cmp.w	sl, #0
 800c730:	d048      	beq.n	800c7c4 <__gethex+0x3f4>
 800c732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c736:	2b02      	cmp	r3, #2
 800c738:	d015      	beq.n	800c766 <__gethex+0x396>
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d017      	beq.n	800c76e <__gethex+0x39e>
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d109      	bne.n	800c756 <__gethex+0x386>
 800c742:	f01a 0f02 	tst.w	sl, #2
 800c746:	d006      	beq.n	800c756 <__gethex+0x386>
 800c748:	f8d9 0000 	ldr.w	r0, [r9]
 800c74c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c750:	f01a 0f01 	tst.w	sl, #1
 800c754:	d10e      	bne.n	800c774 <__gethex+0x3a4>
 800c756:	f047 0710 	orr.w	r7, r7, #16
 800c75a:	e033      	b.n	800c7c4 <__gethex+0x3f4>
 800c75c:	f04f 0a01 	mov.w	sl, #1
 800c760:	e7d0      	b.n	800c704 <__gethex+0x334>
 800c762:	2701      	movs	r7, #1
 800c764:	e7e2      	b.n	800c72c <__gethex+0x35c>
 800c766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c768:	f1c3 0301 	rsb	r3, r3, #1
 800c76c:	9315      	str	r3, [sp, #84]	; 0x54
 800c76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c770:	2b00      	cmp	r3, #0
 800c772:	d0f0      	beq.n	800c756 <__gethex+0x386>
 800c774:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c778:	f104 0314 	add.w	r3, r4, #20
 800c77c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c780:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c784:	f04f 0c00 	mov.w	ip, #0
 800c788:	4618      	mov	r0, r3
 800c78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c78e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c792:	d01c      	beq.n	800c7ce <__gethex+0x3fe>
 800c794:	3201      	adds	r2, #1
 800c796:	6002      	str	r2, [r0, #0]
 800c798:	2f02      	cmp	r7, #2
 800c79a:	f104 0314 	add.w	r3, r4, #20
 800c79e:	d13f      	bne.n	800c820 <__gethex+0x450>
 800c7a0:	f8d8 2000 	ldr.w	r2, [r8]
 800c7a4:	3a01      	subs	r2, #1
 800c7a6:	42b2      	cmp	r2, r6
 800c7a8:	d10a      	bne.n	800c7c0 <__gethex+0x3f0>
 800c7aa:	1171      	asrs	r1, r6, #5
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7b2:	f006 061f 	and.w	r6, r6, #31
 800c7b6:	fa02 f606 	lsl.w	r6, r2, r6
 800c7ba:	421e      	tst	r6, r3
 800c7bc:	bf18      	it	ne
 800c7be:	4617      	movne	r7, r2
 800c7c0:	f047 0720 	orr.w	r7, r7, #32
 800c7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7c6:	601c      	str	r4, [r3, #0]
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	601d      	str	r5, [r3, #0]
 800c7cc:	e695      	b.n	800c4fa <__gethex+0x12a>
 800c7ce:	4299      	cmp	r1, r3
 800c7d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7d4:	d8d8      	bhi.n	800c788 <__gethex+0x3b8>
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	459b      	cmp	fp, r3
 800c7da:	db19      	blt.n	800c810 <__gethex+0x440>
 800c7dc:	6861      	ldr	r1, [r4, #4]
 800c7de:	ee18 0a10 	vmov	r0, s16
 800c7e2:	3101      	adds	r1, #1
 800c7e4:	f000 f928 	bl	800ca38 <_Balloc>
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	b918      	cbnz	r0, 800c7f4 <__gethex+0x424>
 800c7ec:	4b1a      	ldr	r3, [pc, #104]	; (800c858 <__gethex+0x488>)
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	2184      	movs	r1, #132	; 0x84
 800c7f2:	e6a8      	b.n	800c546 <__gethex+0x176>
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	3202      	adds	r2, #2
 800c7f8:	f104 010c 	add.w	r1, r4, #12
 800c7fc:	0092      	lsls	r2, r2, #2
 800c7fe:	300c      	adds	r0, #12
 800c800:	f000 f90c 	bl	800ca1c <memcpy>
 800c804:	4621      	mov	r1, r4
 800c806:	ee18 0a10 	vmov	r0, s16
 800c80a:	f000 f955 	bl	800cab8 <_Bfree>
 800c80e:	464c      	mov	r4, r9
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c818:	6122      	str	r2, [r4, #16]
 800c81a:	2201      	movs	r2, #1
 800c81c:	615a      	str	r2, [r3, #20]
 800c81e:	e7bb      	b.n	800c798 <__gethex+0x3c8>
 800c820:	6922      	ldr	r2, [r4, #16]
 800c822:	455a      	cmp	r2, fp
 800c824:	dd0b      	ble.n	800c83e <__gethex+0x46e>
 800c826:	2101      	movs	r1, #1
 800c828:	4620      	mov	r0, r4
 800c82a:	f7ff fd69 	bl	800c300 <rshift>
 800c82e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c832:	3501      	adds	r5, #1
 800c834:	42ab      	cmp	r3, r5
 800c836:	f6ff aed0 	blt.w	800c5da <__gethex+0x20a>
 800c83a:	2701      	movs	r7, #1
 800c83c:	e7c0      	b.n	800c7c0 <__gethex+0x3f0>
 800c83e:	f016 061f 	ands.w	r6, r6, #31
 800c842:	d0fa      	beq.n	800c83a <__gethex+0x46a>
 800c844:	4453      	add	r3, sl
 800c846:	f1c6 0620 	rsb	r6, r6, #32
 800c84a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c84e:	f000 f9e5 	bl	800cc1c <__hi0bits>
 800c852:	42b0      	cmp	r0, r6
 800c854:	dbe7      	blt.n	800c826 <__gethex+0x456>
 800c856:	e7f0      	b.n	800c83a <__gethex+0x46a>
 800c858:	0800eaa1 	.word	0x0800eaa1

0800c85c <L_shift>:
 800c85c:	f1c2 0208 	rsb	r2, r2, #8
 800c860:	0092      	lsls	r2, r2, #2
 800c862:	b570      	push	{r4, r5, r6, lr}
 800c864:	f1c2 0620 	rsb	r6, r2, #32
 800c868:	6843      	ldr	r3, [r0, #4]
 800c86a:	6804      	ldr	r4, [r0, #0]
 800c86c:	fa03 f506 	lsl.w	r5, r3, r6
 800c870:	432c      	orrs	r4, r5
 800c872:	40d3      	lsrs	r3, r2
 800c874:	6004      	str	r4, [r0, #0]
 800c876:	f840 3f04 	str.w	r3, [r0, #4]!
 800c87a:	4288      	cmp	r0, r1
 800c87c:	d3f4      	bcc.n	800c868 <L_shift+0xc>
 800c87e:	bd70      	pop	{r4, r5, r6, pc}

0800c880 <__match>:
 800c880:	b530      	push	{r4, r5, lr}
 800c882:	6803      	ldr	r3, [r0, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c88a:	b914      	cbnz	r4, 800c892 <__match+0x12>
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	2001      	movs	r0, #1
 800c890:	bd30      	pop	{r4, r5, pc}
 800c892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c89a:	2d19      	cmp	r5, #25
 800c89c:	bf98      	it	ls
 800c89e:	3220      	addls	r2, #32
 800c8a0:	42a2      	cmp	r2, r4
 800c8a2:	d0f0      	beq.n	800c886 <__match+0x6>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e7f3      	b.n	800c890 <__match+0x10>

0800c8a8 <__hexnan>:
 800c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ac:	680b      	ldr	r3, [r1, #0]
 800c8ae:	115e      	asrs	r6, r3, #5
 800c8b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8b4:	f013 031f 	ands.w	r3, r3, #31
 800c8b8:	b087      	sub	sp, #28
 800c8ba:	bf18      	it	ne
 800c8bc:	3604      	addne	r6, #4
 800c8be:	2500      	movs	r5, #0
 800c8c0:	1f37      	subs	r7, r6, #4
 800c8c2:	4690      	mov	r8, r2
 800c8c4:	6802      	ldr	r2, [r0, #0]
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8ce:	46b9      	mov	r9, r7
 800c8d0:	463c      	mov	r4, r7
 800c8d2:	9502      	str	r5, [sp, #8]
 800c8d4:	46ab      	mov	fp, r5
 800c8d6:	7851      	ldrb	r1, [r2, #1]
 800c8d8:	1c53      	adds	r3, r2, #1
 800c8da:	9303      	str	r3, [sp, #12]
 800c8dc:	b341      	cbz	r1, 800c930 <__hexnan+0x88>
 800c8de:	4608      	mov	r0, r1
 800c8e0:	9205      	str	r2, [sp, #20]
 800c8e2:	9104      	str	r1, [sp, #16]
 800c8e4:	f7ff fd5e 	bl	800c3a4 <__hexdig_fun>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d14f      	bne.n	800c98c <__hexnan+0xe4>
 800c8ec:	9904      	ldr	r1, [sp, #16]
 800c8ee:	9a05      	ldr	r2, [sp, #20]
 800c8f0:	2920      	cmp	r1, #32
 800c8f2:	d818      	bhi.n	800c926 <__hexnan+0x7e>
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	459b      	cmp	fp, r3
 800c8f8:	dd13      	ble.n	800c922 <__hexnan+0x7a>
 800c8fa:	454c      	cmp	r4, r9
 800c8fc:	d206      	bcs.n	800c90c <__hexnan+0x64>
 800c8fe:	2d07      	cmp	r5, #7
 800c900:	dc04      	bgt.n	800c90c <__hexnan+0x64>
 800c902:	462a      	mov	r2, r5
 800c904:	4649      	mov	r1, r9
 800c906:	4620      	mov	r0, r4
 800c908:	f7ff ffa8 	bl	800c85c <L_shift>
 800c90c:	4544      	cmp	r4, r8
 800c90e:	d950      	bls.n	800c9b2 <__hexnan+0x10a>
 800c910:	2300      	movs	r3, #0
 800c912:	f1a4 0904 	sub.w	r9, r4, #4
 800c916:	f844 3c04 	str.w	r3, [r4, #-4]
 800c91a:	f8cd b008 	str.w	fp, [sp, #8]
 800c91e:	464c      	mov	r4, r9
 800c920:	461d      	mov	r5, r3
 800c922:	9a03      	ldr	r2, [sp, #12]
 800c924:	e7d7      	b.n	800c8d6 <__hexnan+0x2e>
 800c926:	2929      	cmp	r1, #41	; 0x29
 800c928:	d156      	bne.n	800c9d8 <__hexnan+0x130>
 800c92a:	3202      	adds	r2, #2
 800c92c:	f8ca 2000 	str.w	r2, [sl]
 800c930:	f1bb 0f00 	cmp.w	fp, #0
 800c934:	d050      	beq.n	800c9d8 <__hexnan+0x130>
 800c936:	454c      	cmp	r4, r9
 800c938:	d206      	bcs.n	800c948 <__hexnan+0xa0>
 800c93a:	2d07      	cmp	r5, #7
 800c93c:	dc04      	bgt.n	800c948 <__hexnan+0xa0>
 800c93e:	462a      	mov	r2, r5
 800c940:	4649      	mov	r1, r9
 800c942:	4620      	mov	r0, r4
 800c944:	f7ff ff8a 	bl	800c85c <L_shift>
 800c948:	4544      	cmp	r4, r8
 800c94a:	d934      	bls.n	800c9b6 <__hexnan+0x10e>
 800c94c:	f1a8 0204 	sub.w	r2, r8, #4
 800c950:	4623      	mov	r3, r4
 800c952:	f853 1b04 	ldr.w	r1, [r3], #4
 800c956:	f842 1f04 	str.w	r1, [r2, #4]!
 800c95a:	429f      	cmp	r7, r3
 800c95c:	d2f9      	bcs.n	800c952 <__hexnan+0xaa>
 800c95e:	1b3b      	subs	r3, r7, r4
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	3401      	adds	r4, #1
 800c968:	3e03      	subs	r6, #3
 800c96a:	42b4      	cmp	r4, r6
 800c96c:	bf88      	it	hi
 800c96e:	2304      	movhi	r3, #4
 800c970:	4443      	add	r3, r8
 800c972:	2200      	movs	r2, #0
 800c974:	f843 2b04 	str.w	r2, [r3], #4
 800c978:	429f      	cmp	r7, r3
 800c97a:	d2fb      	bcs.n	800c974 <__hexnan+0xcc>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	b91b      	cbnz	r3, 800c988 <__hexnan+0xe0>
 800c980:	4547      	cmp	r7, r8
 800c982:	d127      	bne.n	800c9d4 <__hexnan+0x12c>
 800c984:	2301      	movs	r3, #1
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	2005      	movs	r0, #5
 800c98a:	e026      	b.n	800c9da <__hexnan+0x132>
 800c98c:	3501      	adds	r5, #1
 800c98e:	2d08      	cmp	r5, #8
 800c990:	f10b 0b01 	add.w	fp, fp, #1
 800c994:	dd06      	ble.n	800c9a4 <__hexnan+0xfc>
 800c996:	4544      	cmp	r4, r8
 800c998:	d9c3      	bls.n	800c922 <__hexnan+0x7a>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9a0:	2501      	movs	r5, #1
 800c9a2:	3c04      	subs	r4, #4
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f000 000f 	and.w	r0, r0, #15
 800c9aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	e7b7      	b.n	800c922 <__hexnan+0x7a>
 800c9b2:	2508      	movs	r5, #8
 800c9b4:	e7b5      	b.n	800c922 <__hexnan+0x7a>
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0df      	beq.n	800c97c <__hexnan+0xd4>
 800c9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c0:	f1c3 0320 	rsb	r3, r3, #32
 800c9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9cc:	401a      	ands	r2, r3
 800c9ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800c9d2:	e7d3      	b.n	800c97c <__hexnan+0xd4>
 800c9d4:	3f04      	subs	r7, #4
 800c9d6:	e7d1      	b.n	800c97c <__hexnan+0xd4>
 800c9d8:	2004      	movs	r0, #4
 800c9da:	b007      	add	sp, #28
 800c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9e0 <_localeconv_r>:
 800c9e0:	4800      	ldr	r0, [pc, #0]	; (800c9e4 <_localeconv_r+0x4>)
 800c9e2:	4770      	bx	lr
 800c9e4:	2000016c 	.word	0x2000016c

0800c9e8 <malloc>:
 800c9e8:	4b02      	ldr	r3, [pc, #8]	; (800c9f4 <malloc+0xc>)
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f000 bd67 	b.w	800d4c0 <_malloc_r>
 800c9f2:	bf00      	nop
 800c9f4:	20000014 	.word	0x20000014

0800c9f8 <__ascii_mbtowc>:
 800c9f8:	b082      	sub	sp, #8
 800c9fa:	b901      	cbnz	r1, 800c9fe <__ascii_mbtowc+0x6>
 800c9fc:	a901      	add	r1, sp, #4
 800c9fe:	b142      	cbz	r2, 800ca12 <__ascii_mbtowc+0x1a>
 800ca00:	b14b      	cbz	r3, 800ca16 <__ascii_mbtowc+0x1e>
 800ca02:	7813      	ldrb	r3, [r2, #0]
 800ca04:	600b      	str	r3, [r1, #0]
 800ca06:	7812      	ldrb	r2, [r2, #0]
 800ca08:	1e10      	subs	r0, r2, #0
 800ca0a:	bf18      	it	ne
 800ca0c:	2001      	movne	r0, #1
 800ca0e:	b002      	add	sp, #8
 800ca10:	4770      	bx	lr
 800ca12:	4610      	mov	r0, r2
 800ca14:	e7fb      	b.n	800ca0e <__ascii_mbtowc+0x16>
 800ca16:	f06f 0001 	mvn.w	r0, #1
 800ca1a:	e7f8      	b.n	800ca0e <__ascii_mbtowc+0x16>

0800ca1c <memcpy>:
 800ca1c:	440a      	add	r2, r1
 800ca1e:	4291      	cmp	r1, r2
 800ca20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca24:	d100      	bne.n	800ca28 <memcpy+0xc>
 800ca26:	4770      	bx	lr
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca32:	4291      	cmp	r1, r2
 800ca34:	d1f9      	bne.n	800ca2a <memcpy+0xe>
 800ca36:	bd10      	pop	{r4, pc}

0800ca38 <_Balloc>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	b976      	cbnz	r6, 800ca60 <_Balloc+0x28>
 800ca42:	2010      	movs	r0, #16
 800ca44:	f7ff ffd0 	bl	800c9e8 <malloc>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ca4c:	b920      	cbnz	r0, 800ca58 <_Balloc+0x20>
 800ca4e:	4b18      	ldr	r3, [pc, #96]	; (800cab0 <_Balloc+0x78>)
 800ca50:	4818      	ldr	r0, [pc, #96]	; (800cab4 <_Balloc+0x7c>)
 800ca52:	2166      	movs	r1, #102	; 0x66
 800ca54:	f7fe fdaa 	bl	800b5ac <__assert_func>
 800ca58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca5c:	6006      	str	r6, [r0, #0]
 800ca5e:	60c6      	str	r6, [r0, #12]
 800ca60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca62:	68f3      	ldr	r3, [r6, #12]
 800ca64:	b183      	cbz	r3, 800ca88 <_Balloc+0x50>
 800ca66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca6e:	b9b8      	cbnz	r0, 800caa0 <_Balloc+0x68>
 800ca70:	2101      	movs	r1, #1
 800ca72:	fa01 f605 	lsl.w	r6, r1, r5
 800ca76:	1d72      	adds	r2, r6, #5
 800ca78:	0092      	lsls	r2, r2, #2
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 fc9d 	bl	800d3ba <_calloc_r>
 800ca80:	b160      	cbz	r0, 800ca9c <_Balloc+0x64>
 800ca82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca86:	e00e      	b.n	800caa6 <_Balloc+0x6e>
 800ca88:	2221      	movs	r2, #33	; 0x21
 800ca8a:	2104      	movs	r1, #4
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f000 fc94 	bl	800d3ba <_calloc_r>
 800ca92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca94:	60f0      	str	r0, [r6, #12]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1e4      	bne.n	800ca66 <_Balloc+0x2e>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	6802      	ldr	r2, [r0, #0]
 800caa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caa6:	2300      	movs	r3, #0
 800caa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caac:	e7f7      	b.n	800ca9e <_Balloc+0x66>
 800caae:	bf00      	nop
 800cab0:	0800e888 	.word	0x0800e888
 800cab4:	0800eb2c 	.word	0x0800eb2c

0800cab8 <_Bfree>:
 800cab8:	b570      	push	{r4, r5, r6, lr}
 800caba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	b976      	cbnz	r6, 800cae0 <_Bfree+0x28>
 800cac2:	2010      	movs	r0, #16
 800cac4:	f7ff ff90 	bl	800c9e8 <malloc>
 800cac8:	4602      	mov	r2, r0
 800caca:	6268      	str	r0, [r5, #36]	; 0x24
 800cacc:	b920      	cbnz	r0, 800cad8 <_Bfree+0x20>
 800cace:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <_Bfree+0x3c>)
 800cad0:	4809      	ldr	r0, [pc, #36]	; (800caf8 <_Bfree+0x40>)
 800cad2:	218a      	movs	r1, #138	; 0x8a
 800cad4:	f7fe fd6a 	bl	800b5ac <__assert_func>
 800cad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cadc:	6006      	str	r6, [r0, #0]
 800cade:	60c6      	str	r6, [r0, #12]
 800cae0:	b13c      	cbz	r4, 800caf2 <_Bfree+0x3a>
 800cae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cae4:	6862      	ldr	r2, [r4, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caec:	6021      	str	r1, [r4, #0]
 800caee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caf2:	bd70      	pop	{r4, r5, r6, pc}
 800caf4:	0800e888 	.word	0x0800e888
 800caf8:	0800eb2c 	.word	0x0800eb2c

0800cafc <__multadd>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	690d      	ldr	r5, [r1, #16]
 800cb02:	4607      	mov	r7, r0
 800cb04:	460c      	mov	r4, r1
 800cb06:	461e      	mov	r6, r3
 800cb08:	f101 0c14 	add.w	ip, r1, #20
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb12:	b299      	uxth	r1, r3
 800cb14:	fb02 6101 	mla	r1, r2, r1, r6
 800cb18:	0c1e      	lsrs	r6, r3, #16
 800cb1a:	0c0b      	lsrs	r3, r1, #16
 800cb1c:	fb02 3306 	mla	r3, r2, r6, r3
 800cb20:	b289      	uxth	r1, r1
 800cb22:	3001      	adds	r0, #1
 800cb24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb28:	4285      	cmp	r5, r0
 800cb2a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb32:	dcec      	bgt.n	800cb0e <__multadd+0x12>
 800cb34:	b30e      	cbz	r6, 800cb7a <__multadd+0x7e>
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	42ab      	cmp	r3, r5
 800cb3a:	dc19      	bgt.n	800cb70 <__multadd+0x74>
 800cb3c:	6861      	ldr	r1, [r4, #4]
 800cb3e:	4638      	mov	r0, r7
 800cb40:	3101      	adds	r1, #1
 800cb42:	f7ff ff79 	bl	800ca38 <_Balloc>
 800cb46:	4680      	mov	r8, r0
 800cb48:	b928      	cbnz	r0, 800cb56 <__multadd+0x5a>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <__multadd+0x84>)
 800cb4e:	480d      	ldr	r0, [pc, #52]	; (800cb84 <__multadd+0x88>)
 800cb50:	21b5      	movs	r1, #181	; 0xb5
 800cb52:	f7fe fd2b 	bl	800b5ac <__assert_func>
 800cb56:	6922      	ldr	r2, [r4, #16]
 800cb58:	3202      	adds	r2, #2
 800cb5a:	f104 010c 	add.w	r1, r4, #12
 800cb5e:	0092      	lsls	r2, r2, #2
 800cb60:	300c      	adds	r0, #12
 800cb62:	f7ff ff5b 	bl	800ca1c <memcpy>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f7ff ffa5 	bl	800cab8 <_Bfree>
 800cb6e:	4644      	mov	r4, r8
 800cb70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb74:	3501      	adds	r5, #1
 800cb76:	615e      	str	r6, [r3, #20]
 800cb78:	6125      	str	r5, [r4, #16]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb80:	0800eaa1 	.word	0x0800eaa1
 800cb84:	0800eb2c 	.word	0x0800eb2c

0800cb88 <__s2b>:
 800cb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	4615      	mov	r5, r2
 800cb90:	461f      	mov	r7, r3
 800cb92:	2209      	movs	r2, #9
 800cb94:	3308      	adds	r3, #8
 800cb96:	4606      	mov	r6, r0
 800cb98:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	2201      	movs	r2, #1
 800cba0:	429a      	cmp	r2, r3
 800cba2:	db09      	blt.n	800cbb8 <__s2b+0x30>
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff ff47 	bl	800ca38 <_Balloc>
 800cbaa:	b940      	cbnz	r0, 800cbbe <__s2b+0x36>
 800cbac:	4602      	mov	r2, r0
 800cbae:	4b19      	ldr	r3, [pc, #100]	; (800cc14 <__s2b+0x8c>)
 800cbb0:	4819      	ldr	r0, [pc, #100]	; (800cc18 <__s2b+0x90>)
 800cbb2:	21ce      	movs	r1, #206	; 0xce
 800cbb4:	f7fe fcfa 	bl	800b5ac <__assert_func>
 800cbb8:	0052      	lsls	r2, r2, #1
 800cbba:	3101      	adds	r1, #1
 800cbbc:	e7f0      	b.n	800cba0 <__s2b+0x18>
 800cbbe:	9b08      	ldr	r3, [sp, #32]
 800cbc0:	6143      	str	r3, [r0, #20]
 800cbc2:	2d09      	cmp	r5, #9
 800cbc4:	f04f 0301 	mov.w	r3, #1
 800cbc8:	6103      	str	r3, [r0, #16]
 800cbca:	dd16      	ble.n	800cbfa <__s2b+0x72>
 800cbcc:	f104 0909 	add.w	r9, r4, #9
 800cbd0:	46c8      	mov	r8, r9
 800cbd2:	442c      	add	r4, r5
 800cbd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbd8:	4601      	mov	r1, r0
 800cbda:	3b30      	subs	r3, #48	; 0x30
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7ff ff8c 	bl	800cafc <__multadd>
 800cbe4:	45a0      	cmp	r8, r4
 800cbe6:	d1f5      	bne.n	800cbd4 <__s2b+0x4c>
 800cbe8:	f1a5 0408 	sub.w	r4, r5, #8
 800cbec:	444c      	add	r4, r9
 800cbee:	1b2d      	subs	r5, r5, r4
 800cbf0:	1963      	adds	r3, r4, r5
 800cbf2:	42bb      	cmp	r3, r7
 800cbf4:	db04      	blt.n	800cc00 <__s2b+0x78>
 800cbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbfa:	340a      	adds	r4, #10
 800cbfc:	2509      	movs	r5, #9
 800cbfe:	e7f6      	b.n	800cbee <__s2b+0x66>
 800cc00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc04:	4601      	mov	r1, r0
 800cc06:	3b30      	subs	r3, #48	; 0x30
 800cc08:	220a      	movs	r2, #10
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7ff ff76 	bl	800cafc <__multadd>
 800cc10:	e7ee      	b.n	800cbf0 <__s2b+0x68>
 800cc12:	bf00      	nop
 800cc14:	0800eaa1 	.word	0x0800eaa1
 800cc18:	0800eb2c 	.word	0x0800eb2c

0800cc1c <__hi0bits>:
 800cc1c:	0c03      	lsrs	r3, r0, #16
 800cc1e:	041b      	lsls	r3, r3, #16
 800cc20:	b9d3      	cbnz	r3, 800cc58 <__hi0bits+0x3c>
 800cc22:	0400      	lsls	r0, r0, #16
 800cc24:	2310      	movs	r3, #16
 800cc26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc2a:	bf04      	itt	eq
 800cc2c:	0200      	lsleq	r0, r0, #8
 800cc2e:	3308      	addeq	r3, #8
 800cc30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc34:	bf04      	itt	eq
 800cc36:	0100      	lsleq	r0, r0, #4
 800cc38:	3304      	addeq	r3, #4
 800cc3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc3e:	bf04      	itt	eq
 800cc40:	0080      	lsleq	r0, r0, #2
 800cc42:	3302      	addeq	r3, #2
 800cc44:	2800      	cmp	r0, #0
 800cc46:	db05      	blt.n	800cc54 <__hi0bits+0x38>
 800cc48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc4c:	f103 0301 	add.w	r3, r3, #1
 800cc50:	bf08      	it	eq
 800cc52:	2320      	moveq	r3, #32
 800cc54:	4618      	mov	r0, r3
 800cc56:	4770      	bx	lr
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e7e4      	b.n	800cc26 <__hi0bits+0xa>

0800cc5c <__lo0bits>:
 800cc5c:	6803      	ldr	r3, [r0, #0]
 800cc5e:	f013 0207 	ands.w	r2, r3, #7
 800cc62:	4601      	mov	r1, r0
 800cc64:	d00b      	beq.n	800cc7e <__lo0bits+0x22>
 800cc66:	07da      	lsls	r2, r3, #31
 800cc68:	d423      	bmi.n	800ccb2 <__lo0bits+0x56>
 800cc6a:	0798      	lsls	r0, r3, #30
 800cc6c:	bf49      	itett	mi
 800cc6e:	085b      	lsrmi	r3, r3, #1
 800cc70:	089b      	lsrpl	r3, r3, #2
 800cc72:	2001      	movmi	r0, #1
 800cc74:	600b      	strmi	r3, [r1, #0]
 800cc76:	bf5c      	itt	pl
 800cc78:	600b      	strpl	r3, [r1, #0]
 800cc7a:	2002      	movpl	r0, #2
 800cc7c:	4770      	bx	lr
 800cc7e:	b298      	uxth	r0, r3
 800cc80:	b9a8      	cbnz	r0, 800ccae <__lo0bits+0x52>
 800cc82:	0c1b      	lsrs	r3, r3, #16
 800cc84:	2010      	movs	r0, #16
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	b90a      	cbnz	r2, 800cc8e <__lo0bits+0x32>
 800cc8a:	3008      	adds	r0, #8
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	071a      	lsls	r2, r3, #28
 800cc90:	bf04      	itt	eq
 800cc92:	091b      	lsreq	r3, r3, #4
 800cc94:	3004      	addeq	r0, #4
 800cc96:	079a      	lsls	r2, r3, #30
 800cc98:	bf04      	itt	eq
 800cc9a:	089b      	lsreq	r3, r3, #2
 800cc9c:	3002      	addeq	r0, #2
 800cc9e:	07da      	lsls	r2, r3, #31
 800cca0:	d403      	bmi.n	800ccaa <__lo0bits+0x4e>
 800cca2:	085b      	lsrs	r3, r3, #1
 800cca4:	f100 0001 	add.w	r0, r0, #1
 800cca8:	d005      	beq.n	800ccb6 <__lo0bits+0x5a>
 800ccaa:	600b      	str	r3, [r1, #0]
 800ccac:	4770      	bx	lr
 800ccae:	4610      	mov	r0, r2
 800ccb0:	e7e9      	b.n	800cc86 <__lo0bits+0x2a>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	4770      	bx	lr
 800ccb6:	2020      	movs	r0, #32
 800ccb8:	4770      	bx	lr
	...

0800ccbc <__i2b>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	f7ff feb9 	bl	800ca38 <_Balloc>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	b928      	cbnz	r0, 800ccd6 <__i2b+0x1a>
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <__i2b+0x24>)
 800cccc:	4805      	ldr	r0, [pc, #20]	; (800cce4 <__i2b+0x28>)
 800ccce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccd2:	f7fe fc6b 	bl	800b5ac <__assert_func>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	6144      	str	r4, [r0, #20]
 800ccda:	6103      	str	r3, [r0, #16]
 800ccdc:	bd10      	pop	{r4, pc}
 800ccde:	bf00      	nop
 800cce0:	0800eaa1 	.word	0x0800eaa1
 800cce4:	0800eb2c 	.word	0x0800eb2c

0800cce8 <__multiply>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	4691      	mov	r9, r2
 800ccee:	690a      	ldr	r2, [r1, #16]
 800ccf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	bfb8      	it	lt
 800ccf8:	460b      	movlt	r3, r1
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	bfbc      	itt	lt
 800ccfe:	464c      	movlt	r4, r9
 800cd00:	4699      	movlt	r9, r3
 800cd02:	6927      	ldr	r7, [r4, #16]
 800cd04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	6861      	ldr	r1, [r4, #4]
 800cd0c:	eb07 060a 	add.w	r6, r7, sl
 800cd10:	42b3      	cmp	r3, r6
 800cd12:	b085      	sub	sp, #20
 800cd14:	bfb8      	it	lt
 800cd16:	3101      	addlt	r1, #1
 800cd18:	f7ff fe8e 	bl	800ca38 <_Balloc>
 800cd1c:	b930      	cbnz	r0, 800cd2c <__multiply+0x44>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	4b44      	ldr	r3, [pc, #272]	; (800ce34 <__multiply+0x14c>)
 800cd22:	4845      	ldr	r0, [pc, #276]	; (800ce38 <__multiply+0x150>)
 800cd24:	f240 115d 	movw	r1, #349	; 0x15d
 800cd28:	f7fe fc40 	bl	800b5ac <__assert_func>
 800cd2c:	f100 0514 	add.w	r5, r0, #20
 800cd30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd34:	462b      	mov	r3, r5
 800cd36:	2200      	movs	r2, #0
 800cd38:	4543      	cmp	r3, r8
 800cd3a:	d321      	bcc.n	800cd80 <__multiply+0x98>
 800cd3c:	f104 0314 	add.w	r3, r4, #20
 800cd40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd44:	f109 0314 	add.w	r3, r9, #20
 800cd48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd4c:	9202      	str	r2, [sp, #8]
 800cd4e:	1b3a      	subs	r2, r7, r4
 800cd50:	3a15      	subs	r2, #21
 800cd52:	f022 0203 	bic.w	r2, r2, #3
 800cd56:	3204      	adds	r2, #4
 800cd58:	f104 0115 	add.w	r1, r4, #21
 800cd5c:	428f      	cmp	r7, r1
 800cd5e:	bf38      	it	cc
 800cd60:	2204      	movcc	r2, #4
 800cd62:	9201      	str	r2, [sp, #4]
 800cd64:	9a02      	ldr	r2, [sp, #8]
 800cd66:	9303      	str	r3, [sp, #12]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d80c      	bhi.n	800cd86 <__multiply+0x9e>
 800cd6c:	2e00      	cmp	r6, #0
 800cd6e:	dd03      	ble.n	800cd78 <__multiply+0x90>
 800cd70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d05a      	beq.n	800ce2e <__multiply+0x146>
 800cd78:	6106      	str	r6, [r0, #16]
 800cd7a:	b005      	add	sp, #20
 800cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd80:	f843 2b04 	str.w	r2, [r3], #4
 800cd84:	e7d8      	b.n	800cd38 <__multiply+0x50>
 800cd86:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd8a:	f1ba 0f00 	cmp.w	sl, #0
 800cd8e:	d024      	beq.n	800cdda <__multiply+0xf2>
 800cd90:	f104 0e14 	add.w	lr, r4, #20
 800cd94:	46a9      	mov	r9, r5
 800cd96:	f04f 0c00 	mov.w	ip, #0
 800cd9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd9e:	f8d9 1000 	ldr.w	r1, [r9]
 800cda2:	fa1f fb82 	uxth.w	fp, r2
 800cda6:	b289      	uxth	r1, r1
 800cda8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdb0:	f8d9 2000 	ldr.w	r2, [r9]
 800cdb4:	4461      	add	r1, ip
 800cdb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdba:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdc2:	b289      	uxth	r1, r1
 800cdc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdc8:	4577      	cmp	r7, lr
 800cdca:	f849 1b04 	str.w	r1, [r9], #4
 800cdce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdd2:	d8e2      	bhi.n	800cd9a <__multiply+0xb2>
 800cdd4:	9a01      	ldr	r2, [sp, #4]
 800cdd6:	f845 c002 	str.w	ip, [r5, r2]
 800cdda:	9a03      	ldr	r2, [sp, #12]
 800cddc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cde0:	3304      	adds	r3, #4
 800cde2:	f1b9 0f00 	cmp.w	r9, #0
 800cde6:	d020      	beq.n	800ce2a <__multiply+0x142>
 800cde8:	6829      	ldr	r1, [r5, #0]
 800cdea:	f104 0c14 	add.w	ip, r4, #20
 800cdee:	46ae      	mov	lr, r5
 800cdf0:	f04f 0a00 	mov.w	sl, #0
 800cdf4:	f8bc b000 	ldrh.w	fp, [ip]
 800cdf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cdfc:	fb09 220b 	mla	r2, r9, fp, r2
 800ce00:	4492      	add	sl, r2
 800ce02:	b289      	uxth	r1, r1
 800ce04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce08:	f84e 1b04 	str.w	r1, [lr], #4
 800ce0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce10:	f8be 1000 	ldrh.w	r1, [lr]
 800ce14:	0c12      	lsrs	r2, r2, #16
 800ce16:	fb09 1102 	mla	r1, r9, r2, r1
 800ce1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce1e:	4567      	cmp	r7, ip
 800ce20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce24:	d8e6      	bhi.n	800cdf4 <__multiply+0x10c>
 800ce26:	9a01      	ldr	r2, [sp, #4]
 800ce28:	50a9      	str	r1, [r5, r2]
 800ce2a:	3504      	adds	r5, #4
 800ce2c:	e79a      	b.n	800cd64 <__multiply+0x7c>
 800ce2e:	3e01      	subs	r6, #1
 800ce30:	e79c      	b.n	800cd6c <__multiply+0x84>
 800ce32:	bf00      	nop
 800ce34:	0800eaa1 	.word	0x0800eaa1
 800ce38:	0800eb2c 	.word	0x0800eb2c

0800ce3c <__pow5mult>:
 800ce3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	4615      	mov	r5, r2
 800ce42:	f012 0203 	ands.w	r2, r2, #3
 800ce46:	4606      	mov	r6, r0
 800ce48:	460f      	mov	r7, r1
 800ce4a:	d007      	beq.n	800ce5c <__pow5mult+0x20>
 800ce4c:	4c25      	ldr	r4, [pc, #148]	; (800cee4 <__pow5mult+0xa8>)
 800ce4e:	3a01      	subs	r2, #1
 800ce50:	2300      	movs	r3, #0
 800ce52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce56:	f7ff fe51 	bl	800cafc <__multadd>
 800ce5a:	4607      	mov	r7, r0
 800ce5c:	10ad      	asrs	r5, r5, #2
 800ce5e:	d03d      	beq.n	800cedc <__pow5mult+0xa0>
 800ce60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce62:	b97c      	cbnz	r4, 800ce84 <__pow5mult+0x48>
 800ce64:	2010      	movs	r0, #16
 800ce66:	f7ff fdbf 	bl	800c9e8 <malloc>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	6270      	str	r0, [r6, #36]	; 0x24
 800ce6e:	b928      	cbnz	r0, 800ce7c <__pow5mult+0x40>
 800ce70:	4b1d      	ldr	r3, [pc, #116]	; (800cee8 <__pow5mult+0xac>)
 800ce72:	481e      	ldr	r0, [pc, #120]	; (800ceec <__pow5mult+0xb0>)
 800ce74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce78:	f7fe fb98 	bl	800b5ac <__assert_func>
 800ce7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce80:	6004      	str	r4, [r0, #0]
 800ce82:	60c4      	str	r4, [r0, #12]
 800ce84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce8c:	b94c      	cbnz	r4, 800cea2 <__pow5mult+0x66>
 800ce8e:	f240 2171 	movw	r1, #625	; 0x271
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7ff ff12 	bl	800ccbc <__i2b>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce9e:	4604      	mov	r4, r0
 800cea0:	6003      	str	r3, [r0, #0]
 800cea2:	f04f 0900 	mov.w	r9, #0
 800cea6:	07eb      	lsls	r3, r5, #31
 800cea8:	d50a      	bpl.n	800cec0 <__pow5mult+0x84>
 800ceaa:	4639      	mov	r1, r7
 800ceac:	4622      	mov	r2, r4
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f7ff ff1a 	bl	800cce8 <__multiply>
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7ff fdfd 	bl	800cab8 <_Bfree>
 800cebe:	4647      	mov	r7, r8
 800cec0:	106d      	asrs	r5, r5, #1
 800cec2:	d00b      	beq.n	800cedc <__pow5mult+0xa0>
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	b938      	cbnz	r0, 800ced8 <__pow5mult+0x9c>
 800cec8:	4622      	mov	r2, r4
 800ceca:	4621      	mov	r1, r4
 800cecc:	4630      	mov	r0, r6
 800cece:	f7ff ff0b 	bl	800cce8 <__multiply>
 800ced2:	6020      	str	r0, [r4, #0]
 800ced4:	f8c0 9000 	str.w	r9, [r0]
 800ced8:	4604      	mov	r4, r0
 800ceda:	e7e4      	b.n	800cea6 <__pow5mult+0x6a>
 800cedc:	4638      	mov	r0, r7
 800cede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee2:	bf00      	nop
 800cee4:	0800ec78 	.word	0x0800ec78
 800cee8:	0800e888 	.word	0x0800e888
 800ceec:	0800eb2c 	.word	0x0800eb2c

0800cef0 <__lshift>:
 800cef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	6849      	ldr	r1, [r1, #4]
 800cef8:	6923      	ldr	r3, [r4, #16]
 800cefa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	4607      	mov	r7, r0
 800cf02:	4691      	mov	r9, r2
 800cf04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf08:	f108 0601 	add.w	r6, r8, #1
 800cf0c:	42b3      	cmp	r3, r6
 800cf0e:	db0b      	blt.n	800cf28 <__lshift+0x38>
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff fd91 	bl	800ca38 <_Balloc>
 800cf16:	4605      	mov	r5, r0
 800cf18:	b948      	cbnz	r0, 800cf2e <__lshift+0x3e>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	4b2a      	ldr	r3, [pc, #168]	; (800cfc8 <__lshift+0xd8>)
 800cf1e:	482b      	ldr	r0, [pc, #172]	; (800cfcc <__lshift+0xdc>)
 800cf20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf24:	f7fe fb42 	bl	800b5ac <__assert_func>
 800cf28:	3101      	adds	r1, #1
 800cf2a:	005b      	lsls	r3, r3, #1
 800cf2c:	e7ee      	b.n	800cf0c <__lshift+0x1c>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f100 0114 	add.w	r1, r0, #20
 800cf34:	f100 0210 	add.w	r2, r0, #16
 800cf38:	4618      	mov	r0, r3
 800cf3a:	4553      	cmp	r3, sl
 800cf3c:	db37      	blt.n	800cfae <__lshift+0xbe>
 800cf3e:	6920      	ldr	r0, [r4, #16]
 800cf40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf44:	f104 0314 	add.w	r3, r4, #20
 800cf48:	f019 091f 	ands.w	r9, r9, #31
 800cf4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf54:	d02f      	beq.n	800cfb6 <__lshift+0xc6>
 800cf56:	f1c9 0e20 	rsb	lr, r9, #32
 800cf5a:	468a      	mov	sl, r1
 800cf5c:	f04f 0c00 	mov.w	ip, #0
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	fa02 f209 	lsl.w	r2, r2, r9
 800cf66:	ea42 020c 	orr.w	r2, r2, ip
 800cf6a:	f84a 2b04 	str.w	r2, [sl], #4
 800cf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf72:	4298      	cmp	r0, r3
 800cf74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf78:	d8f2      	bhi.n	800cf60 <__lshift+0x70>
 800cf7a:	1b03      	subs	r3, r0, r4
 800cf7c:	3b15      	subs	r3, #21
 800cf7e:	f023 0303 	bic.w	r3, r3, #3
 800cf82:	3304      	adds	r3, #4
 800cf84:	f104 0215 	add.w	r2, r4, #21
 800cf88:	4290      	cmp	r0, r2
 800cf8a:	bf38      	it	cc
 800cf8c:	2304      	movcc	r3, #4
 800cf8e:	f841 c003 	str.w	ip, [r1, r3]
 800cf92:	f1bc 0f00 	cmp.w	ip, #0
 800cf96:	d001      	beq.n	800cf9c <__lshift+0xac>
 800cf98:	f108 0602 	add.w	r6, r8, #2
 800cf9c:	3e01      	subs	r6, #1
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	612e      	str	r6, [r5, #16]
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	f7ff fd88 	bl	800cab8 <_Bfree>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfae:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	e7c1      	b.n	800cf3a <__lshift+0x4a>
 800cfb6:	3904      	subs	r1, #4
 800cfb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfc0:	4298      	cmp	r0, r3
 800cfc2:	d8f9      	bhi.n	800cfb8 <__lshift+0xc8>
 800cfc4:	e7ea      	b.n	800cf9c <__lshift+0xac>
 800cfc6:	bf00      	nop
 800cfc8:	0800eaa1 	.word	0x0800eaa1
 800cfcc:	0800eb2c 	.word	0x0800eb2c

0800cfd0 <__mcmp>:
 800cfd0:	b530      	push	{r4, r5, lr}
 800cfd2:	6902      	ldr	r2, [r0, #16]
 800cfd4:	690c      	ldr	r4, [r1, #16]
 800cfd6:	1b12      	subs	r2, r2, r4
 800cfd8:	d10e      	bne.n	800cff8 <__mcmp+0x28>
 800cfda:	f100 0314 	add.w	r3, r0, #20
 800cfde:	3114      	adds	r1, #20
 800cfe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cfec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cff0:	42a5      	cmp	r5, r4
 800cff2:	d003      	beq.n	800cffc <__mcmp+0x2c>
 800cff4:	d305      	bcc.n	800d002 <__mcmp+0x32>
 800cff6:	2201      	movs	r2, #1
 800cff8:	4610      	mov	r0, r2
 800cffa:	bd30      	pop	{r4, r5, pc}
 800cffc:	4283      	cmp	r3, r0
 800cffe:	d3f3      	bcc.n	800cfe8 <__mcmp+0x18>
 800d000:	e7fa      	b.n	800cff8 <__mcmp+0x28>
 800d002:	f04f 32ff 	mov.w	r2, #4294967295
 800d006:	e7f7      	b.n	800cff8 <__mcmp+0x28>

0800d008 <__mdiff>:
 800d008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	460c      	mov	r4, r1
 800d00e:	4606      	mov	r6, r0
 800d010:	4611      	mov	r1, r2
 800d012:	4620      	mov	r0, r4
 800d014:	4690      	mov	r8, r2
 800d016:	f7ff ffdb 	bl	800cfd0 <__mcmp>
 800d01a:	1e05      	subs	r5, r0, #0
 800d01c:	d110      	bne.n	800d040 <__mdiff+0x38>
 800d01e:	4629      	mov	r1, r5
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff fd09 	bl	800ca38 <_Balloc>
 800d026:	b930      	cbnz	r0, 800d036 <__mdiff+0x2e>
 800d028:	4b3a      	ldr	r3, [pc, #232]	; (800d114 <__mdiff+0x10c>)
 800d02a:	4602      	mov	r2, r0
 800d02c:	f240 2132 	movw	r1, #562	; 0x232
 800d030:	4839      	ldr	r0, [pc, #228]	; (800d118 <__mdiff+0x110>)
 800d032:	f7fe fabb 	bl	800b5ac <__assert_func>
 800d036:	2301      	movs	r3, #1
 800d038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d03c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d040:	bfa4      	itt	ge
 800d042:	4643      	movge	r3, r8
 800d044:	46a0      	movge	r8, r4
 800d046:	4630      	mov	r0, r6
 800d048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d04c:	bfa6      	itte	ge
 800d04e:	461c      	movge	r4, r3
 800d050:	2500      	movge	r5, #0
 800d052:	2501      	movlt	r5, #1
 800d054:	f7ff fcf0 	bl	800ca38 <_Balloc>
 800d058:	b920      	cbnz	r0, 800d064 <__mdiff+0x5c>
 800d05a:	4b2e      	ldr	r3, [pc, #184]	; (800d114 <__mdiff+0x10c>)
 800d05c:	4602      	mov	r2, r0
 800d05e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d062:	e7e5      	b.n	800d030 <__mdiff+0x28>
 800d064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d068:	6926      	ldr	r6, [r4, #16]
 800d06a:	60c5      	str	r5, [r0, #12]
 800d06c:	f104 0914 	add.w	r9, r4, #20
 800d070:	f108 0514 	add.w	r5, r8, #20
 800d074:	f100 0e14 	add.w	lr, r0, #20
 800d078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d07c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d080:	f108 0210 	add.w	r2, r8, #16
 800d084:	46f2      	mov	sl, lr
 800d086:	2100      	movs	r1, #0
 800d088:	f859 3b04 	ldr.w	r3, [r9], #4
 800d08c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d090:	fa1f f883 	uxth.w	r8, r3
 800d094:	fa11 f18b 	uxtah	r1, r1, fp
 800d098:	0c1b      	lsrs	r3, r3, #16
 800d09a:	eba1 0808 	sub.w	r8, r1, r8
 800d09e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0a6:	fa1f f888 	uxth.w	r8, r8
 800d0aa:	1419      	asrs	r1, r3, #16
 800d0ac:	454e      	cmp	r6, r9
 800d0ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0b2:	f84a 3b04 	str.w	r3, [sl], #4
 800d0b6:	d8e7      	bhi.n	800d088 <__mdiff+0x80>
 800d0b8:	1b33      	subs	r3, r6, r4
 800d0ba:	3b15      	subs	r3, #21
 800d0bc:	f023 0303 	bic.w	r3, r3, #3
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	3415      	adds	r4, #21
 800d0c4:	42a6      	cmp	r6, r4
 800d0c6:	bf38      	it	cc
 800d0c8:	2304      	movcc	r3, #4
 800d0ca:	441d      	add	r5, r3
 800d0cc:	4473      	add	r3, lr
 800d0ce:	469e      	mov	lr, r3
 800d0d0:	462e      	mov	r6, r5
 800d0d2:	4566      	cmp	r6, ip
 800d0d4:	d30e      	bcc.n	800d0f4 <__mdiff+0xec>
 800d0d6:	f10c 0203 	add.w	r2, ip, #3
 800d0da:	1b52      	subs	r2, r2, r5
 800d0dc:	f022 0203 	bic.w	r2, r2, #3
 800d0e0:	3d03      	subs	r5, #3
 800d0e2:	45ac      	cmp	ip, r5
 800d0e4:	bf38      	it	cc
 800d0e6:	2200      	movcc	r2, #0
 800d0e8:	441a      	add	r2, r3
 800d0ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0ee:	b17b      	cbz	r3, 800d110 <__mdiff+0x108>
 800d0f0:	6107      	str	r7, [r0, #16]
 800d0f2:	e7a3      	b.n	800d03c <__mdiff+0x34>
 800d0f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0f8:	fa11 f288 	uxtah	r2, r1, r8
 800d0fc:	1414      	asrs	r4, r2, #16
 800d0fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d102:	b292      	uxth	r2, r2
 800d104:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d108:	f84e 2b04 	str.w	r2, [lr], #4
 800d10c:	1421      	asrs	r1, r4, #16
 800d10e:	e7e0      	b.n	800d0d2 <__mdiff+0xca>
 800d110:	3f01      	subs	r7, #1
 800d112:	e7ea      	b.n	800d0ea <__mdiff+0xe2>
 800d114:	0800eaa1 	.word	0x0800eaa1
 800d118:	0800eb2c 	.word	0x0800eb2c

0800d11c <__ulp>:
 800d11c:	b082      	sub	sp, #8
 800d11e:	ed8d 0b00 	vstr	d0, [sp]
 800d122:	9b01      	ldr	r3, [sp, #4]
 800d124:	4912      	ldr	r1, [pc, #72]	; (800d170 <__ulp+0x54>)
 800d126:	4019      	ands	r1, r3
 800d128:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d12c:	2900      	cmp	r1, #0
 800d12e:	dd05      	ble.n	800d13c <__ulp+0x20>
 800d130:	2200      	movs	r2, #0
 800d132:	460b      	mov	r3, r1
 800d134:	ec43 2b10 	vmov	d0, r2, r3
 800d138:	b002      	add	sp, #8
 800d13a:	4770      	bx	lr
 800d13c:	4249      	negs	r1, r1
 800d13e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d142:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	da04      	bge.n	800d15a <__ulp+0x3e>
 800d150:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d154:	fa41 f300 	asr.w	r3, r1, r0
 800d158:	e7ec      	b.n	800d134 <__ulp+0x18>
 800d15a:	f1a0 0114 	sub.w	r1, r0, #20
 800d15e:	291e      	cmp	r1, #30
 800d160:	bfda      	itte	le
 800d162:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d166:	fa20 f101 	lsrle.w	r1, r0, r1
 800d16a:	2101      	movgt	r1, #1
 800d16c:	460a      	mov	r2, r1
 800d16e:	e7e1      	b.n	800d134 <__ulp+0x18>
 800d170:	7ff00000 	.word	0x7ff00000

0800d174 <__b2d>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	6905      	ldr	r5, [r0, #16]
 800d178:	f100 0714 	add.w	r7, r0, #20
 800d17c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d180:	1f2e      	subs	r6, r5, #4
 800d182:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d186:	4620      	mov	r0, r4
 800d188:	f7ff fd48 	bl	800cc1c <__hi0bits>
 800d18c:	f1c0 0320 	rsb	r3, r0, #32
 800d190:	280a      	cmp	r0, #10
 800d192:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d210 <__b2d+0x9c>
 800d196:	600b      	str	r3, [r1, #0]
 800d198:	dc14      	bgt.n	800d1c4 <__b2d+0x50>
 800d19a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d19e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d1a2:	42b7      	cmp	r7, r6
 800d1a4:	ea41 030c 	orr.w	r3, r1, ip
 800d1a8:	bf34      	ite	cc
 800d1aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d1ae:	2100      	movcs	r1, #0
 800d1b0:	3015      	adds	r0, #21
 800d1b2:	fa04 f000 	lsl.w	r0, r4, r0
 800d1b6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d1ba:	ea40 0201 	orr.w	r2, r0, r1
 800d1be:	ec43 2b10 	vmov	d0, r2, r3
 800d1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c4:	42b7      	cmp	r7, r6
 800d1c6:	bf3a      	itte	cc
 800d1c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d1cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800d1d0:	2100      	movcs	r1, #0
 800d1d2:	380b      	subs	r0, #11
 800d1d4:	d017      	beq.n	800d206 <__b2d+0x92>
 800d1d6:	f1c0 0c20 	rsb	ip, r0, #32
 800d1da:	fa04 f500 	lsl.w	r5, r4, r0
 800d1de:	42be      	cmp	r6, r7
 800d1e0:	fa21 f40c 	lsr.w	r4, r1, ip
 800d1e4:	ea45 0504 	orr.w	r5, r5, r4
 800d1e8:	bf8c      	ite	hi
 800d1ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d1ee:	2400      	movls	r4, #0
 800d1f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d1f4:	fa01 f000 	lsl.w	r0, r1, r0
 800d1f8:	fa24 f40c 	lsr.w	r4, r4, ip
 800d1fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d200:	ea40 0204 	orr.w	r2, r0, r4
 800d204:	e7db      	b.n	800d1be <__b2d+0x4a>
 800d206:	ea44 030c 	orr.w	r3, r4, ip
 800d20a:	460a      	mov	r2, r1
 800d20c:	e7d7      	b.n	800d1be <__b2d+0x4a>
 800d20e:	bf00      	nop
 800d210:	3ff00000 	.word	0x3ff00000

0800d214 <__d2b>:
 800d214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d218:	4689      	mov	r9, r1
 800d21a:	2101      	movs	r1, #1
 800d21c:	ec57 6b10 	vmov	r6, r7, d0
 800d220:	4690      	mov	r8, r2
 800d222:	f7ff fc09 	bl	800ca38 <_Balloc>
 800d226:	4604      	mov	r4, r0
 800d228:	b930      	cbnz	r0, 800d238 <__d2b+0x24>
 800d22a:	4602      	mov	r2, r0
 800d22c:	4b25      	ldr	r3, [pc, #148]	; (800d2c4 <__d2b+0xb0>)
 800d22e:	4826      	ldr	r0, [pc, #152]	; (800d2c8 <__d2b+0xb4>)
 800d230:	f240 310a 	movw	r1, #778	; 0x30a
 800d234:	f7fe f9ba 	bl	800b5ac <__assert_func>
 800d238:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d23c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d240:	bb35      	cbnz	r5, 800d290 <__d2b+0x7c>
 800d242:	2e00      	cmp	r6, #0
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	d028      	beq.n	800d29a <__d2b+0x86>
 800d248:	4668      	mov	r0, sp
 800d24a:	9600      	str	r6, [sp, #0]
 800d24c:	f7ff fd06 	bl	800cc5c <__lo0bits>
 800d250:	9900      	ldr	r1, [sp, #0]
 800d252:	b300      	cbz	r0, 800d296 <__d2b+0x82>
 800d254:	9a01      	ldr	r2, [sp, #4]
 800d256:	f1c0 0320 	rsb	r3, r0, #32
 800d25a:	fa02 f303 	lsl.w	r3, r2, r3
 800d25e:	430b      	orrs	r3, r1
 800d260:	40c2      	lsrs	r2, r0
 800d262:	6163      	str	r3, [r4, #20]
 800d264:	9201      	str	r2, [sp, #4]
 800d266:	9b01      	ldr	r3, [sp, #4]
 800d268:	61a3      	str	r3, [r4, #24]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	bf14      	ite	ne
 800d26e:	2202      	movne	r2, #2
 800d270:	2201      	moveq	r2, #1
 800d272:	6122      	str	r2, [r4, #16]
 800d274:	b1d5      	cbz	r5, 800d2ac <__d2b+0x98>
 800d276:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d27a:	4405      	add	r5, r0
 800d27c:	f8c9 5000 	str.w	r5, [r9]
 800d280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d284:	f8c8 0000 	str.w	r0, [r8]
 800d288:	4620      	mov	r0, r4
 800d28a:	b003      	add	sp, #12
 800d28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d294:	e7d5      	b.n	800d242 <__d2b+0x2e>
 800d296:	6161      	str	r1, [r4, #20]
 800d298:	e7e5      	b.n	800d266 <__d2b+0x52>
 800d29a:	a801      	add	r0, sp, #4
 800d29c:	f7ff fcde 	bl	800cc5c <__lo0bits>
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	6163      	str	r3, [r4, #20]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	6122      	str	r2, [r4, #16]
 800d2a8:	3020      	adds	r0, #32
 800d2aa:	e7e3      	b.n	800d274 <__d2b+0x60>
 800d2ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2b4:	f8c9 0000 	str.w	r0, [r9]
 800d2b8:	6918      	ldr	r0, [r3, #16]
 800d2ba:	f7ff fcaf 	bl	800cc1c <__hi0bits>
 800d2be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2c2:	e7df      	b.n	800d284 <__d2b+0x70>
 800d2c4:	0800eaa1 	.word	0x0800eaa1
 800d2c8:	0800eb2c 	.word	0x0800eb2c

0800d2cc <__ratio>:
 800d2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	4688      	mov	r8, r1
 800d2d2:	4669      	mov	r1, sp
 800d2d4:	4681      	mov	r9, r0
 800d2d6:	f7ff ff4d 	bl	800d174 <__b2d>
 800d2da:	a901      	add	r1, sp, #4
 800d2dc:	4640      	mov	r0, r8
 800d2de:	ec55 4b10 	vmov	r4, r5, d0
 800d2e2:	f7ff ff47 	bl	800d174 <__b2d>
 800d2e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d2ee:	eba3 0c02 	sub.w	ip, r3, r2
 800d2f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2f6:	1a9b      	subs	r3, r3, r2
 800d2f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d2fc:	ec51 0b10 	vmov	r0, r1, d0
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfd6      	itet	le
 800d304:	460a      	movle	r2, r1
 800d306:	462a      	movgt	r2, r5
 800d308:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d30c:	468b      	mov	fp, r1
 800d30e:	462f      	mov	r7, r5
 800d310:	bfd4      	ite	le
 800d312:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d316:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d31a:	4620      	mov	r0, r4
 800d31c:	ee10 2a10 	vmov	r2, s0
 800d320:	465b      	mov	r3, fp
 800d322:	4639      	mov	r1, r7
 800d324:	f7f3 faca 	bl	80008bc <__aeabi_ddiv>
 800d328:	ec41 0b10 	vmov	d0, r0, r1
 800d32c:	b003      	add	sp, #12
 800d32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d332 <__copybits>:
 800d332:	3901      	subs	r1, #1
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	1149      	asrs	r1, r1, #5
 800d338:	6914      	ldr	r4, [r2, #16]
 800d33a:	3101      	adds	r1, #1
 800d33c:	f102 0314 	add.w	r3, r2, #20
 800d340:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d344:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d348:	1f05      	subs	r5, r0, #4
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	d30c      	bcc.n	800d368 <__copybits+0x36>
 800d34e:	1aa3      	subs	r3, r4, r2
 800d350:	3b11      	subs	r3, #17
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	3211      	adds	r2, #17
 800d358:	42a2      	cmp	r2, r4
 800d35a:	bf88      	it	hi
 800d35c:	2300      	movhi	r3, #0
 800d35e:	4418      	add	r0, r3
 800d360:	2300      	movs	r3, #0
 800d362:	4288      	cmp	r0, r1
 800d364:	d305      	bcc.n	800d372 <__copybits+0x40>
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	f853 6b04 	ldr.w	r6, [r3], #4
 800d36c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d370:	e7eb      	b.n	800d34a <__copybits+0x18>
 800d372:	f840 3b04 	str.w	r3, [r0], #4
 800d376:	e7f4      	b.n	800d362 <__copybits+0x30>

0800d378 <__any_on>:
 800d378:	f100 0214 	add.w	r2, r0, #20
 800d37c:	6900      	ldr	r0, [r0, #16]
 800d37e:	114b      	asrs	r3, r1, #5
 800d380:	4298      	cmp	r0, r3
 800d382:	b510      	push	{r4, lr}
 800d384:	db11      	blt.n	800d3aa <__any_on+0x32>
 800d386:	dd0a      	ble.n	800d39e <__any_on+0x26>
 800d388:	f011 011f 	ands.w	r1, r1, #31
 800d38c:	d007      	beq.n	800d39e <__any_on+0x26>
 800d38e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d392:	fa24 f001 	lsr.w	r0, r4, r1
 800d396:	fa00 f101 	lsl.w	r1, r0, r1
 800d39a:	428c      	cmp	r4, r1
 800d39c:	d10b      	bne.n	800d3b6 <__any_on+0x3e>
 800d39e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d803      	bhi.n	800d3ae <__any_on+0x36>
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	bd10      	pop	{r4, pc}
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	e7f7      	b.n	800d39e <__any_on+0x26>
 800d3ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3b2:	2900      	cmp	r1, #0
 800d3b4:	d0f5      	beq.n	800d3a2 <__any_on+0x2a>
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	e7f6      	b.n	800d3a8 <__any_on+0x30>

0800d3ba <_calloc_r>:
 800d3ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3bc:	fba1 2402 	umull	r2, r4, r1, r2
 800d3c0:	b94c      	cbnz	r4, 800d3d6 <_calloc_r+0x1c>
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	9201      	str	r2, [sp, #4]
 800d3c6:	f000 f87b 	bl	800d4c0 <_malloc_r>
 800d3ca:	9a01      	ldr	r2, [sp, #4]
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	b930      	cbnz	r0, 800d3de <_calloc_r+0x24>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	b003      	add	sp, #12
 800d3d4:	bd30      	pop	{r4, r5, pc}
 800d3d6:	220c      	movs	r2, #12
 800d3d8:	6002      	str	r2, [r0, #0]
 800d3da:	2500      	movs	r5, #0
 800d3dc:	e7f8      	b.n	800d3d0 <_calloc_r+0x16>
 800d3de:	4621      	mov	r1, r4
 800d3e0:	f7fc fd08 	bl	8009df4 <memset>
 800d3e4:	e7f4      	b.n	800d3d0 <_calloc_r+0x16>
	...

0800d3e8 <_free_r>:
 800d3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ea:	2900      	cmp	r1, #0
 800d3ec:	d044      	beq.n	800d478 <_free_r+0x90>
 800d3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f2:	9001      	str	r0, [sp, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800d3fa:	bfb8      	it	lt
 800d3fc:	18e4      	addlt	r4, r4, r3
 800d3fe:	f000 fec7 	bl	800e190 <__malloc_lock>
 800d402:	4a1e      	ldr	r2, [pc, #120]	; (800d47c <_free_r+0x94>)
 800d404:	9801      	ldr	r0, [sp, #4]
 800d406:	6813      	ldr	r3, [r2, #0]
 800d408:	b933      	cbnz	r3, 800d418 <_free_r+0x30>
 800d40a:	6063      	str	r3, [r4, #4]
 800d40c:	6014      	str	r4, [r2, #0]
 800d40e:	b003      	add	sp, #12
 800d410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d414:	f000 bec2 	b.w	800e19c <__malloc_unlock>
 800d418:	42a3      	cmp	r3, r4
 800d41a:	d908      	bls.n	800d42e <_free_r+0x46>
 800d41c:	6825      	ldr	r5, [r4, #0]
 800d41e:	1961      	adds	r1, r4, r5
 800d420:	428b      	cmp	r3, r1
 800d422:	bf01      	itttt	eq
 800d424:	6819      	ldreq	r1, [r3, #0]
 800d426:	685b      	ldreq	r3, [r3, #4]
 800d428:	1949      	addeq	r1, r1, r5
 800d42a:	6021      	streq	r1, [r4, #0]
 800d42c:	e7ed      	b.n	800d40a <_free_r+0x22>
 800d42e:	461a      	mov	r2, r3
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	b10b      	cbz	r3, 800d438 <_free_r+0x50>
 800d434:	42a3      	cmp	r3, r4
 800d436:	d9fa      	bls.n	800d42e <_free_r+0x46>
 800d438:	6811      	ldr	r1, [r2, #0]
 800d43a:	1855      	adds	r5, r2, r1
 800d43c:	42a5      	cmp	r5, r4
 800d43e:	d10b      	bne.n	800d458 <_free_r+0x70>
 800d440:	6824      	ldr	r4, [r4, #0]
 800d442:	4421      	add	r1, r4
 800d444:	1854      	adds	r4, r2, r1
 800d446:	42a3      	cmp	r3, r4
 800d448:	6011      	str	r1, [r2, #0]
 800d44a:	d1e0      	bne.n	800d40e <_free_r+0x26>
 800d44c:	681c      	ldr	r4, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	6053      	str	r3, [r2, #4]
 800d452:	4421      	add	r1, r4
 800d454:	6011      	str	r1, [r2, #0]
 800d456:	e7da      	b.n	800d40e <_free_r+0x26>
 800d458:	d902      	bls.n	800d460 <_free_r+0x78>
 800d45a:	230c      	movs	r3, #12
 800d45c:	6003      	str	r3, [r0, #0]
 800d45e:	e7d6      	b.n	800d40e <_free_r+0x26>
 800d460:	6825      	ldr	r5, [r4, #0]
 800d462:	1961      	adds	r1, r4, r5
 800d464:	428b      	cmp	r3, r1
 800d466:	bf04      	itt	eq
 800d468:	6819      	ldreq	r1, [r3, #0]
 800d46a:	685b      	ldreq	r3, [r3, #4]
 800d46c:	6063      	str	r3, [r4, #4]
 800d46e:	bf04      	itt	eq
 800d470:	1949      	addeq	r1, r1, r5
 800d472:	6021      	streq	r1, [r4, #0]
 800d474:	6054      	str	r4, [r2, #4]
 800d476:	e7ca      	b.n	800d40e <_free_r+0x26>
 800d478:	b003      	add	sp, #12
 800d47a:	bd30      	pop	{r4, r5, pc}
 800d47c:	200005ec 	.word	0x200005ec

0800d480 <sbrk_aligned>:
 800d480:	b570      	push	{r4, r5, r6, lr}
 800d482:	4e0e      	ldr	r6, [pc, #56]	; (800d4bc <sbrk_aligned+0x3c>)
 800d484:	460c      	mov	r4, r1
 800d486:	6831      	ldr	r1, [r6, #0]
 800d488:	4605      	mov	r5, r0
 800d48a:	b911      	cbnz	r1, 800d492 <sbrk_aligned+0x12>
 800d48c:	f000 fb4c 	bl	800db28 <_sbrk_r>
 800d490:	6030      	str	r0, [r6, #0]
 800d492:	4621      	mov	r1, r4
 800d494:	4628      	mov	r0, r5
 800d496:	f000 fb47 	bl	800db28 <_sbrk_r>
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	d00a      	beq.n	800d4b4 <sbrk_aligned+0x34>
 800d49e:	1cc4      	adds	r4, r0, #3
 800d4a0:	f024 0403 	bic.w	r4, r4, #3
 800d4a4:	42a0      	cmp	r0, r4
 800d4a6:	d007      	beq.n	800d4b8 <sbrk_aligned+0x38>
 800d4a8:	1a21      	subs	r1, r4, r0
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f000 fb3c 	bl	800db28 <_sbrk_r>
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d101      	bne.n	800d4b8 <sbrk_aligned+0x38>
 800d4b4:	f04f 34ff 	mov.w	r4, #4294967295
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}
 800d4bc:	200005f0 	.word	0x200005f0

0800d4c0 <_malloc_r>:
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	1ccd      	adds	r5, r1, #3
 800d4c6:	f025 0503 	bic.w	r5, r5, #3
 800d4ca:	3508      	adds	r5, #8
 800d4cc:	2d0c      	cmp	r5, #12
 800d4ce:	bf38      	it	cc
 800d4d0:	250c      	movcc	r5, #12
 800d4d2:	2d00      	cmp	r5, #0
 800d4d4:	4607      	mov	r7, r0
 800d4d6:	db01      	blt.n	800d4dc <_malloc_r+0x1c>
 800d4d8:	42a9      	cmp	r1, r5
 800d4da:	d905      	bls.n	800d4e8 <_malloc_r+0x28>
 800d4dc:	230c      	movs	r3, #12
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	4e2e      	ldr	r6, [pc, #184]	; (800d5a4 <_malloc_r+0xe4>)
 800d4ea:	f000 fe51 	bl	800e190 <__malloc_lock>
 800d4ee:	6833      	ldr	r3, [r6, #0]
 800d4f0:	461c      	mov	r4, r3
 800d4f2:	bb34      	cbnz	r4, 800d542 <_malloc_r+0x82>
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	f7ff ffc2 	bl	800d480 <sbrk_aligned>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	4604      	mov	r4, r0
 800d500:	d14d      	bne.n	800d59e <_malloc_r+0xde>
 800d502:	6834      	ldr	r4, [r6, #0]
 800d504:	4626      	mov	r6, r4
 800d506:	2e00      	cmp	r6, #0
 800d508:	d140      	bne.n	800d58c <_malloc_r+0xcc>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	4631      	mov	r1, r6
 800d50e:	4638      	mov	r0, r7
 800d510:	eb04 0803 	add.w	r8, r4, r3
 800d514:	f000 fb08 	bl	800db28 <_sbrk_r>
 800d518:	4580      	cmp	r8, r0
 800d51a:	d13a      	bne.n	800d592 <_malloc_r+0xd2>
 800d51c:	6821      	ldr	r1, [r4, #0]
 800d51e:	3503      	adds	r5, #3
 800d520:	1a6d      	subs	r5, r5, r1
 800d522:	f025 0503 	bic.w	r5, r5, #3
 800d526:	3508      	adds	r5, #8
 800d528:	2d0c      	cmp	r5, #12
 800d52a:	bf38      	it	cc
 800d52c:	250c      	movcc	r5, #12
 800d52e:	4629      	mov	r1, r5
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff ffa5 	bl	800d480 <sbrk_aligned>
 800d536:	3001      	adds	r0, #1
 800d538:	d02b      	beq.n	800d592 <_malloc_r+0xd2>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	442b      	add	r3, r5
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	e00e      	b.n	800d560 <_malloc_r+0xa0>
 800d542:	6822      	ldr	r2, [r4, #0]
 800d544:	1b52      	subs	r2, r2, r5
 800d546:	d41e      	bmi.n	800d586 <_malloc_r+0xc6>
 800d548:	2a0b      	cmp	r2, #11
 800d54a:	d916      	bls.n	800d57a <_malloc_r+0xba>
 800d54c:	1961      	adds	r1, r4, r5
 800d54e:	42a3      	cmp	r3, r4
 800d550:	6025      	str	r5, [r4, #0]
 800d552:	bf18      	it	ne
 800d554:	6059      	strne	r1, [r3, #4]
 800d556:	6863      	ldr	r3, [r4, #4]
 800d558:	bf08      	it	eq
 800d55a:	6031      	streq	r1, [r6, #0]
 800d55c:	5162      	str	r2, [r4, r5]
 800d55e:	604b      	str	r3, [r1, #4]
 800d560:	4638      	mov	r0, r7
 800d562:	f104 060b 	add.w	r6, r4, #11
 800d566:	f000 fe19 	bl	800e19c <__malloc_unlock>
 800d56a:	f026 0607 	bic.w	r6, r6, #7
 800d56e:	1d23      	adds	r3, r4, #4
 800d570:	1af2      	subs	r2, r6, r3
 800d572:	d0b6      	beq.n	800d4e2 <_malloc_r+0x22>
 800d574:	1b9b      	subs	r3, r3, r6
 800d576:	50a3      	str	r3, [r4, r2]
 800d578:	e7b3      	b.n	800d4e2 <_malloc_r+0x22>
 800d57a:	6862      	ldr	r2, [r4, #4]
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	bf0c      	ite	eq
 800d580:	6032      	streq	r2, [r6, #0]
 800d582:	605a      	strne	r2, [r3, #4]
 800d584:	e7ec      	b.n	800d560 <_malloc_r+0xa0>
 800d586:	4623      	mov	r3, r4
 800d588:	6864      	ldr	r4, [r4, #4]
 800d58a:	e7b2      	b.n	800d4f2 <_malloc_r+0x32>
 800d58c:	4634      	mov	r4, r6
 800d58e:	6876      	ldr	r6, [r6, #4]
 800d590:	e7b9      	b.n	800d506 <_malloc_r+0x46>
 800d592:	230c      	movs	r3, #12
 800d594:	603b      	str	r3, [r7, #0]
 800d596:	4638      	mov	r0, r7
 800d598:	f000 fe00 	bl	800e19c <__malloc_unlock>
 800d59c:	e7a1      	b.n	800d4e2 <_malloc_r+0x22>
 800d59e:	6025      	str	r5, [r4, #0]
 800d5a0:	e7de      	b.n	800d560 <_malloc_r+0xa0>
 800d5a2:	bf00      	nop
 800d5a4:	200005ec 	.word	0x200005ec

0800d5a8 <__ssputs_r>:
 800d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	688e      	ldr	r6, [r1, #8]
 800d5ae:	429e      	cmp	r6, r3
 800d5b0:	4682      	mov	sl, r0
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	4690      	mov	r8, r2
 800d5b6:	461f      	mov	r7, r3
 800d5b8:	d838      	bhi.n	800d62c <__ssputs_r+0x84>
 800d5ba:	898a      	ldrh	r2, [r1, #12]
 800d5bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5c0:	d032      	beq.n	800d628 <__ssputs_r+0x80>
 800d5c2:	6825      	ldr	r5, [r4, #0]
 800d5c4:	6909      	ldr	r1, [r1, #16]
 800d5c6:	eba5 0901 	sub.w	r9, r5, r1
 800d5ca:	6965      	ldr	r5, [r4, #20]
 800d5cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	444b      	add	r3, r9
 800d5d8:	106d      	asrs	r5, r5, #1
 800d5da:	429d      	cmp	r5, r3
 800d5dc:	bf38      	it	cc
 800d5de:	461d      	movcc	r5, r3
 800d5e0:	0553      	lsls	r3, r2, #21
 800d5e2:	d531      	bpl.n	800d648 <__ssputs_r+0xa0>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7ff ff6b 	bl	800d4c0 <_malloc_r>
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	b950      	cbnz	r0, 800d604 <__ssputs_r+0x5c>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	f8ca 3000 	str.w	r3, [sl]
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d604:	6921      	ldr	r1, [r4, #16]
 800d606:	464a      	mov	r2, r9
 800d608:	f7ff fa08 	bl	800ca1c <memcpy>
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d616:	81a3      	strh	r3, [r4, #12]
 800d618:	6126      	str	r6, [r4, #16]
 800d61a:	6165      	str	r5, [r4, #20]
 800d61c:	444e      	add	r6, r9
 800d61e:	eba5 0509 	sub.w	r5, r5, r9
 800d622:	6026      	str	r6, [r4, #0]
 800d624:	60a5      	str	r5, [r4, #8]
 800d626:	463e      	mov	r6, r7
 800d628:	42be      	cmp	r6, r7
 800d62a:	d900      	bls.n	800d62e <__ssputs_r+0x86>
 800d62c:	463e      	mov	r6, r7
 800d62e:	6820      	ldr	r0, [r4, #0]
 800d630:	4632      	mov	r2, r6
 800d632:	4641      	mov	r1, r8
 800d634:	f000 fd92 	bl	800e15c <memmove>
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	1b9b      	subs	r3, r3, r6
 800d63c:	60a3      	str	r3, [r4, #8]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	4433      	add	r3, r6
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	2000      	movs	r0, #0
 800d646:	e7db      	b.n	800d600 <__ssputs_r+0x58>
 800d648:	462a      	mov	r2, r5
 800d64a:	f000 fdad 	bl	800e1a8 <_realloc_r>
 800d64e:	4606      	mov	r6, r0
 800d650:	2800      	cmp	r0, #0
 800d652:	d1e1      	bne.n	800d618 <__ssputs_r+0x70>
 800d654:	6921      	ldr	r1, [r4, #16]
 800d656:	4650      	mov	r0, sl
 800d658:	f7ff fec6 	bl	800d3e8 <_free_r>
 800d65c:	e7c7      	b.n	800d5ee <__ssputs_r+0x46>
	...

0800d660 <_svfiprintf_r>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	4698      	mov	r8, r3
 800d666:	898b      	ldrh	r3, [r1, #12]
 800d668:	061b      	lsls	r3, r3, #24
 800d66a:	b09d      	sub	sp, #116	; 0x74
 800d66c:	4607      	mov	r7, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	4614      	mov	r4, r2
 800d672:	d50e      	bpl.n	800d692 <_svfiprintf_r+0x32>
 800d674:	690b      	ldr	r3, [r1, #16]
 800d676:	b963      	cbnz	r3, 800d692 <_svfiprintf_r+0x32>
 800d678:	2140      	movs	r1, #64	; 0x40
 800d67a:	f7ff ff21 	bl	800d4c0 <_malloc_r>
 800d67e:	6028      	str	r0, [r5, #0]
 800d680:	6128      	str	r0, [r5, #16]
 800d682:	b920      	cbnz	r0, 800d68e <_svfiprintf_r+0x2e>
 800d684:	230c      	movs	r3, #12
 800d686:	603b      	str	r3, [r7, #0]
 800d688:	f04f 30ff 	mov.w	r0, #4294967295
 800d68c:	e0d1      	b.n	800d832 <_svfiprintf_r+0x1d2>
 800d68e:	2340      	movs	r3, #64	; 0x40
 800d690:	616b      	str	r3, [r5, #20]
 800d692:	2300      	movs	r3, #0
 800d694:	9309      	str	r3, [sp, #36]	; 0x24
 800d696:	2320      	movs	r3, #32
 800d698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a0:	2330      	movs	r3, #48	; 0x30
 800d6a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d84c <_svfiprintf_r+0x1ec>
 800d6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6aa:	f04f 0901 	mov.w	r9, #1
 800d6ae:	4623      	mov	r3, r4
 800d6b0:	469a      	mov	sl, r3
 800d6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b6:	b10a      	cbz	r2, 800d6bc <_svfiprintf_r+0x5c>
 800d6b8:	2a25      	cmp	r2, #37	; 0x25
 800d6ba:	d1f9      	bne.n	800d6b0 <_svfiprintf_r+0x50>
 800d6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c0:	d00b      	beq.n	800d6da <_svfiprintf_r+0x7a>
 800d6c2:	465b      	mov	r3, fp
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	f7ff ff6d 	bl	800d5a8 <__ssputs_r>
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	f000 80aa 	beq.w	800d828 <_svfiprintf_r+0x1c8>
 800d6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d6:	445a      	add	r2, fp
 800d6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d6da:	f89a 3000 	ldrb.w	r3, [sl]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 80a2 	beq.w	800d828 <_svfiprintf_r+0x1c8>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6ee:	f10a 0a01 	add.w	sl, sl, #1
 800d6f2:	9304      	str	r3, [sp, #16]
 800d6f4:	9307      	str	r3, [sp, #28]
 800d6f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d6fc:	4654      	mov	r4, sl
 800d6fe:	2205      	movs	r2, #5
 800d700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d704:	4851      	ldr	r0, [pc, #324]	; (800d84c <_svfiprintf_r+0x1ec>)
 800d706:	f7f2 fda3 	bl	8000250 <memchr>
 800d70a:	9a04      	ldr	r2, [sp, #16]
 800d70c:	b9d8      	cbnz	r0, 800d746 <_svfiprintf_r+0xe6>
 800d70e:	06d0      	lsls	r0, r2, #27
 800d710:	bf44      	itt	mi
 800d712:	2320      	movmi	r3, #32
 800d714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d718:	0711      	lsls	r1, r2, #28
 800d71a:	bf44      	itt	mi
 800d71c:	232b      	movmi	r3, #43	; 0x2b
 800d71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d722:	f89a 3000 	ldrb.w	r3, [sl]
 800d726:	2b2a      	cmp	r3, #42	; 0x2a
 800d728:	d015      	beq.n	800d756 <_svfiprintf_r+0xf6>
 800d72a:	9a07      	ldr	r2, [sp, #28]
 800d72c:	4654      	mov	r4, sl
 800d72e:	2000      	movs	r0, #0
 800d730:	f04f 0c0a 	mov.w	ip, #10
 800d734:	4621      	mov	r1, r4
 800d736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d73a:	3b30      	subs	r3, #48	; 0x30
 800d73c:	2b09      	cmp	r3, #9
 800d73e:	d94e      	bls.n	800d7de <_svfiprintf_r+0x17e>
 800d740:	b1b0      	cbz	r0, 800d770 <_svfiprintf_r+0x110>
 800d742:	9207      	str	r2, [sp, #28]
 800d744:	e014      	b.n	800d770 <_svfiprintf_r+0x110>
 800d746:	eba0 0308 	sub.w	r3, r0, r8
 800d74a:	fa09 f303 	lsl.w	r3, r9, r3
 800d74e:	4313      	orrs	r3, r2
 800d750:	9304      	str	r3, [sp, #16]
 800d752:	46a2      	mov	sl, r4
 800d754:	e7d2      	b.n	800d6fc <_svfiprintf_r+0x9c>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	1d19      	adds	r1, r3, #4
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	9103      	str	r1, [sp, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	bfbb      	ittet	lt
 800d762:	425b      	neglt	r3, r3
 800d764:	f042 0202 	orrlt.w	r2, r2, #2
 800d768:	9307      	strge	r3, [sp, #28]
 800d76a:	9307      	strlt	r3, [sp, #28]
 800d76c:	bfb8      	it	lt
 800d76e:	9204      	strlt	r2, [sp, #16]
 800d770:	7823      	ldrb	r3, [r4, #0]
 800d772:	2b2e      	cmp	r3, #46	; 0x2e
 800d774:	d10c      	bne.n	800d790 <_svfiprintf_r+0x130>
 800d776:	7863      	ldrb	r3, [r4, #1]
 800d778:	2b2a      	cmp	r3, #42	; 0x2a
 800d77a:	d135      	bne.n	800d7e8 <_svfiprintf_r+0x188>
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	1d1a      	adds	r2, r3, #4
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	9203      	str	r2, [sp, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	bfb8      	it	lt
 800d788:	f04f 33ff 	movlt.w	r3, #4294967295
 800d78c:	3402      	adds	r4, #2
 800d78e:	9305      	str	r3, [sp, #20]
 800d790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d85c <_svfiprintf_r+0x1fc>
 800d794:	7821      	ldrb	r1, [r4, #0]
 800d796:	2203      	movs	r2, #3
 800d798:	4650      	mov	r0, sl
 800d79a:	f7f2 fd59 	bl	8000250 <memchr>
 800d79e:	b140      	cbz	r0, 800d7b2 <_svfiprintf_r+0x152>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	eba0 000a 	sub.w	r0, r0, sl
 800d7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	4303      	orrs	r3, r0
 800d7ae:	3401      	adds	r4, #1
 800d7b0:	9304      	str	r3, [sp, #16]
 800d7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b6:	4826      	ldr	r0, [pc, #152]	; (800d850 <_svfiprintf_r+0x1f0>)
 800d7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7bc:	2206      	movs	r2, #6
 800d7be:	f7f2 fd47 	bl	8000250 <memchr>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d038      	beq.n	800d838 <_svfiprintf_r+0x1d8>
 800d7c6:	4b23      	ldr	r3, [pc, #140]	; (800d854 <_svfiprintf_r+0x1f4>)
 800d7c8:	bb1b      	cbnz	r3, 800d812 <_svfiprintf_r+0x1b2>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	3307      	adds	r3, #7
 800d7ce:	f023 0307 	bic.w	r3, r3, #7
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	9303      	str	r3, [sp, #12]
 800d7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d8:	4433      	add	r3, r6
 800d7da:	9309      	str	r3, [sp, #36]	; 0x24
 800d7dc:	e767      	b.n	800d6ae <_svfiprintf_r+0x4e>
 800d7de:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	2001      	movs	r0, #1
 800d7e6:	e7a5      	b.n	800d734 <_svfiprintf_r+0xd4>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9305      	str	r3, [sp, #20]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f04f 0c0a 	mov.w	ip, #10
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fa:	3a30      	subs	r2, #48	; 0x30
 800d7fc:	2a09      	cmp	r2, #9
 800d7fe:	d903      	bls.n	800d808 <_svfiprintf_r+0x1a8>
 800d800:	2b00      	cmp	r3, #0
 800d802:	d0c5      	beq.n	800d790 <_svfiprintf_r+0x130>
 800d804:	9105      	str	r1, [sp, #20]
 800d806:	e7c3      	b.n	800d790 <_svfiprintf_r+0x130>
 800d808:	fb0c 2101 	mla	r1, ip, r1, r2
 800d80c:	4604      	mov	r4, r0
 800d80e:	2301      	movs	r3, #1
 800d810:	e7f0      	b.n	800d7f4 <_svfiprintf_r+0x194>
 800d812:	ab03      	add	r3, sp, #12
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	462a      	mov	r2, r5
 800d818:	4b0f      	ldr	r3, [pc, #60]	; (800d858 <_svfiprintf_r+0x1f8>)
 800d81a:	a904      	add	r1, sp, #16
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7fc fb91 	bl	8009f44 <_printf_float>
 800d822:	1c42      	adds	r2, r0, #1
 800d824:	4606      	mov	r6, r0
 800d826:	d1d6      	bne.n	800d7d6 <_svfiprintf_r+0x176>
 800d828:	89ab      	ldrh	r3, [r5, #12]
 800d82a:	065b      	lsls	r3, r3, #25
 800d82c:	f53f af2c 	bmi.w	800d688 <_svfiprintf_r+0x28>
 800d830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d832:	b01d      	add	sp, #116	; 0x74
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	ab03      	add	r3, sp, #12
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	462a      	mov	r2, r5
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <_svfiprintf_r+0x1f8>)
 800d840:	a904      	add	r1, sp, #16
 800d842:	4638      	mov	r0, r7
 800d844:	f7fc fe22 	bl	800a48c <_printf_i>
 800d848:	e7eb      	b.n	800d822 <_svfiprintf_r+0x1c2>
 800d84a:	bf00      	nop
 800d84c:	0800ec84 	.word	0x0800ec84
 800d850:	0800ec8e 	.word	0x0800ec8e
 800d854:	08009f45 	.word	0x08009f45
 800d858:	0800d5a9 	.word	0x0800d5a9
 800d85c:	0800ec8a 	.word	0x0800ec8a

0800d860 <__sfputc_r>:
 800d860:	6893      	ldr	r3, [r2, #8]
 800d862:	3b01      	subs	r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	b410      	push	{r4}
 800d868:	6093      	str	r3, [r2, #8]
 800d86a:	da08      	bge.n	800d87e <__sfputc_r+0x1e>
 800d86c:	6994      	ldr	r4, [r2, #24]
 800d86e:	42a3      	cmp	r3, r4
 800d870:	db01      	blt.n	800d876 <__sfputc_r+0x16>
 800d872:	290a      	cmp	r1, #10
 800d874:	d103      	bne.n	800d87e <__sfputc_r+0x1e>
 800d876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d87a:	f000 b979 	b.w	800db70 <__swbuf_r>
 800d87e:	6813      	ldr	r3, [r2, #0]
 800d880:	1c58      	adds	r0, r3, #1
 800d882:	6010      	str	r0, [r2, #0]
 800d884:	7019      	strb	r1, [r3, #0]
 800d886:	4608      	mov	r0, r1
 800d888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <__sfputs_r>:
 800d88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d890:	4606      	mov	r6, r0
 800d892:	460f      	mov	r7, r1
 800d894:	4614      	mov	r4, r2
 800d896:	18d5      	adds	r5, r2, r3
 800d898:	42ac      	cmp	r4, r5
 800d89a:	d101      	bne.n	800d8a0 <__sfputs_r+0x12>
 800d89c:	2000      	movs	r0, #0
 800d89e:	e007      	b.n	800d8b0 <__sfputs_r+0x22>
 800d8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a4:	463a      	mov	r2, r7
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f7ff ffda 	bl	800d860 <__sfputc_r>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d1f3      	bne.n	800d898 <__sfputs_r+0xa>
 800d8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8b4 <_vfiprintf_r>:
 800d8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b8:	460d      	mov	r5, r1
 800d8ba:	b09d      	sub	sp, #116	; 0x74
 800d8bc:	4614      	mov	r4, r2
 800d8be:	4698      	mov	r8, r3
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	b118      	cbz	r0, 800d8cc <_vfiprintf_r+0x18>
 800d8c4:	6983      	ldr	r3, [r0, #24]
 800d8c6:	b90b      	cbnz	r3, 800d8cc <_vfiprintf_r+0x18>
 800d8c8:	f000 fb42 	bl	800df50 <__sinit>
 800d8cc:	4b89      	ldr	r3, [pc, #548]	; (800daf4 <_vfiprintf_r+0x240>)
 800d8ce:	429d      	cmp	r5, r3
 800d8d0:	d11b      	bne.n	800d90a <_vfiprintf_r+0x56>
 800d8d2:	6875      	ldr	r5, [r6, #4]
 800d8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8d6:	07d9      	lsls	r1, r3, #31
 800d8d8:	d405      	bmi.n	800d8e6 <_vfiprintf_r+0x32>
 800d8da:	89ab      	ldrh	r3, [r5, #12]
 800d8dc:	059a      	lsls	r2, r3, #22
 800d8de:	d402      	bmi.n	800d8e6 <_vfiprintf_r+0x32>
 800d8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8e2:	f000 fbd3 	bl	800e08c <__retarget_lock_acquire_recursive>
 800d8e6:	89ab      	ldrh	r3, [r5, #12]
 800d8e8:	071b      	lsls	r3, r3, #28
 800d8ea:	d501      	bpl.n	800d8f0 <_vfiprintf_r+0x3c>
 800d8ec:	692b      	ldr	r3, [r5, #16]
 800d8ee:	b9eb      	cbnz	r3, 800d92c <_vfiprintf_r+0x78>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f000 f99c 	bl	800dc30 <__swsetup_r>
 800d8f8:	b1c0      	cbz	r0, 800d92c <_vfiprintf_r+0x78>
 800d8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8fc:	07dc      	lsls	r4, r3, #31
 800d8fe:	d50e      	bpl.n	800d91e <_vfiprintf_r+0x6a>
 800d900:	f04f 30ff 	mov.w	r0, #4294967295
 800d904:	b01d      	add	sp, #116	; 0x74
 800d906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90a:	4b7b      	ldr	r3, [pc, #492]	; (800daf8 <_vfiprintf_r+0x244>)
 800d90c:	429d      	cmp	r5, r3
 800d90e:	d101      	bne.n	800d914 <_vfiprintf_r+0x60>
 800d910:	68b5      	ldr	r5, [r6, #8]
 800d912:	e7df      	b.n	800d8d4 <_vfiprintf_r+0x20>
 800d914:	4b79      	ldr	r3, [pc, #484]	; (800dafc <_vfiprintf_r+0x248>)
 800d916:	429d      	cmp	r5, r3
 800d918:	bf08      	it	eq
 800d91a:	68f5      	ldreq	r5, [r6, #12]
 800d91c:	e7da      	b.n	800d8d4 <_vfiprintf_r+0x20>
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	0598      	lsls	r0, r3, #22
 800d922:	d4ed      	bmi.n	800d900 <_vfiprintf_r+0x4c>
 800d924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d926:	f000 fbb2 	bl	800e08e <__retarget_lock_release_recursive>
 800d92a:	e7e9      	b.n	800d900 <_vfiprintf_r+0x4c>
 800d92c:	2300      	movs	r3, #0
 800d92e:	9309      	str	r3, [sp, #36]	; 0x24
 800d930:	2320      	movs	r3, #32
 800d932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d936:	f8cd 800c 	str.w	r8, [sp, #12]
 800d93a:	2330      	movs	r3, #48	; 0x30
 800d93c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db00 <_vfiprintf_r+0x24c>
 800d940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d944:	f04f 0901 	mov.w	r9, #1
 800d948:	4623      	mov	r3, r4
 800d94a:	469a      	mov	sl, r3
 800d94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d950:	b10a      	cbz	r2, 800d956 <_vfiprintf_r+0xa2>
 800d952:	2a25      	cmp	r2, #37	; 0x25
 800d954:	d1f9      	bne.n	800d94a <_vfiprintf_r+0x96>
 800d956:	ebba 0b04 	subs.w	fp, sl, r4
 800d95a:	d00b      	beq.n	800d974 <_vfiprintf_r+0xc0>
 800d95c:	465b      	mov	r3, fp
 800d95e:	4622      	mov	r2, r4
 800d960:	4629      	mov	r1, r5
 800d962:	4630      	mov	r0, r6
 800d964:	f7ff ff93 	bl	800d88e <__sfputs_r>
 800d968:	3001      	adds	r0, #1
 800d96a:	f000 80aa 	beq.w	800dac2 <_vfiprintf_r+0x20e>
 800d96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d970:	445a      	add	r2, fp
 800d972:	9209      	str	r2, [sp, #36]	; 0x24
 800d974:	f89a 3000 	ldrb.w	r3, [sl]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 80a2 	beq.w	800dac2 <_vfiprintf_r+0x20e>
 800d97e:	2300      	movs	r3, #0
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d988:	f10a 0a01 	add.w	sl, sl, #1
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d994:	931a      	str	r3, [sp, #104]	; 0x68
 800d996:	4654      	mov	r4, sl
 800d998:	2205      	movs	r2, #5
 800d99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99e:	4858      	ldr	r0, [pc, #352]	; (800db00 <_vfiprintf_r+0x24c>)
 800d9a0:	f7f2 fc56 	bl	8000250 <memchr>
 800d9a4:	9a04      	ldr	r2, [sp, #16]
 800d9a6:	b9d8      	cbnz	r0, 800d9e0 <_vfiprintf_r+0x12c>
 800d9a8:	06d1      	lsls	r1, r2, #27
 800d9aa:	bf44      	itt	mi
 800d9ac:	2320      	movmi	r3, #32
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9b2:	0713      	lsls	r3, r2, #28
 800d9b4:	bf44      	itt	mi
 800d9b6:	232b      	movmi	r3, #43	; 0x2b
 800d9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c2:	d015      	beq.n	800d9f0 <_vfiprintf_r+0x13c>
 800d9c4:	9a07      	ldr	r2, [sp, #28]
 800d9c6:	4654      	mov	r4, sl
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f04f 0c0a 	mov.w	ip, #10
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9d4:	3b30      	subs	r3, #48	; 0x30
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d94e      	bls.n	800da78 <_vfiprintf_r+0x1c4>
 800d9da:	b1b0      	cbz	r0, 800da0a <_vfiprintf_r+0x156>
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	e014      	b.n	800da0a <_vfiprintf_r+0x156>
 800d9e0:	eba0 0308 	sub.w	r3, r0, r8
 800d9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	46a2      	mov	sl, r4
 800d9ee:	e7d2      	b.n	800d996 <_vfiprintf_r+0xe2>
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	1d19      	adds	r1, r3, #4
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	9103      	str	r1, [sp, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfbb      	ittet	lt
 800d9fc:	425b      	neglt	r3, r3
 800d9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800da02:	9307      	strge	r3, [sp, #28]
 800da04:	9307      	strlt	r3, [sp, #28]
 800da06:	bfb8      	it	lt
 800da08:	9204      	strlt	r2, [sp, #16]
 800da0a:	7823      	ldrb	r3, [r4, #0]
 800da0c:	2b2e      	cmp	r3, #46	; 0x2e
 800da0e:	d10c      	bne.n	800da2a <_vfiprintf_r+0x176>
 800da10:	7863      	ldrb	r3, [r4, #1]
 800da12:	2b2a      	cmp	r3, #42	; 0x2a
 800da14:	d135      	bne.n	800da82 <_vfiprintf_r+0x1ce>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	1d1a      	adds	r2, r3, #4
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	9203      	str	r2, [sp, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	bfb8      	it	lt
 800da22:	f04f 33ff 	movlt.w	r3, #4294967295
 800da26:	3402      	adds	r4, #2
 800da28:	9305      	str	r3, [sp, #20]
 800da2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db10 <_vfiprintf_r+0x25c>
 800da2e:	7821      	ldrb	r1, [r4, #0]
 800da30:	2203      	movs	r2, #3
 800da32:	4650      	mov	r0, sl
 800da34:	f7f2 fc0c 	bl	8000250 <memchr>
 800da38:	b140      	cbz	r0, 800da4c <_vfiprintf_r+0x198>
 800da3a:	2340      	movs	r3, #64	; 0x40
 800da3c:	eba0 000a 	sub.w	r0, r0, sl
 800da40:	fa03 f000 	lsl.w	r0, r3, r0
 800da44:	9b04      	ldr	r3, [sp, #16]
 800da46:	4303      	orrs	r3, r0
 800da48:	3401      	adds	r4, #1
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da50:	482c      	ldr	r0, [pc, #176]	; (800db04 <_vfiprintf_r+0x250>)
 800da52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da56:	2206      	movs	r2, #6
 800da58:	f7f2 fbfa 	bl	8000250 <memchr>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d03f      	beq.n	800dae0 <_vfiprintf_r+0x22c>
 800da60:	4b29      	ldr	r3, [pc, #164]	; (800db08 <_vfiprintf_r+0x254>)
 800da62:	bb1b      	cbnz	r3, 800daac <_vfiprintf_r+0x1f8>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	3307      	adds	r3, #7
 800da68:	f023 0307 	bic.w	r3, r3, #7
 800da6c:	3308      	adds	r3, #8
 800da6e:	9303      	str	r3, [sp, #12]
 800da70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da72:	443b      	add	r3, r7
 800da74:	9309      	str	r3, [sp, #36]	; 0x24
 800da76:	e767      	b.n	800d948 <_vfiprintf_r+0x94>
 800da78:	fb0c 3202 	mla	r2, ip, r2, r3
 800da7c:	460c      	mov	r4, r1
 800da7e:	2001      	movs	r0, #1
 800da80:	e7a5      	b.n	800d9ce <_vfiprintf_r+0x11a>
 800da82:	2300      	movs	r3, #0
 800da84:	3401      	adds	r4, #1
 800da86:	9305      	str	r3, [sp, #20]
 800da88:	4619      	mov	r1, r3
 800da8a:	f04f 0c0a 	mov.w	ip, #10
 800da8e:	4620      	mov	r0, r4
 800da90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da94:	3a30      	subs	r2, #48	; 0x30
 800da96:	2a09      	cmp	r2, #9
 800da98:	d903      	bls.n	800daa2 <_vfiprintf_r+0x1ee>
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0c5      	beq.n	800da2a <_vfiprintf_r+0x176>
 800da9e:	9105      	str	r1, [sp, #20]
 800daa0:	e7c3      	b.n	800da2a <_vfiprintf_r+0x176>
 800daa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800daa6:	4604      	mov	r4, r0
 800daa8:	2301      	movs	r3, #1
 800daaa:	e7f0      	b.n	800da8e <_vfiprintf_r+0x1da>
 800daac:	ab03      	add	r3, sp, #12
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	462a      	mov	r2, r5
 800dab2:	4b16      	ldr	r3, [pc, #88]	; (800db0c <_vfiprintf_r+0x258>)
 800dab4:	a904      	add	r1, sp, #16
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7fc fa44 	bl	8009f44 <_printf_float>
 800dabc:	4607      	mov	r7, r0
 800dabe:	1c78      	adds	r0, r7, #1
 800dac0:	d1d6      	bne.n	800da70 <_vfiprintf_r+0x1bc>
 800dac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dac4:	07d9      	lsls	r1, r3, #31
 800dac6:	d405      	bmi.n	800dad4 <_vfiprintf_r+0x220>
 800dac8:	89ab      	ldrh	r3, [r5, #12]
 800daca:	059a      	lsls	r2, r3, #22
 800dacc:	d402      	bmi.n	800dad4 <_vfiprintf_r+0x220>
 800dace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dad0:	f000 fadd 	bl	800e08e <__retarget_lock_release_recursive>
 800dad4:	89ab      	ldrh	r3, [r5, #12]
 800dad6:	065b      	lsls	r3, r3, #25
 800dad8:	f53f af12 	bmi.w	800d900 <_vfiprintf_r+0x4c>
 800dadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dade:	e711      	b.n	800d904 <_vfiprintf_r+0x50>
 800dae0:	ab03      	add	r3, sp, #12
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	462a      	mov	r2, r5
 800dae6:	4b09      	ldr	r3, [pc, #36]	; (800db0c <_vfiprintf_r+0x258>)
 800dae8:	a904      	add	r1, sp, #16
 800daea:	4630      	mov	r0, r6
 800daec:	f7fc fcce 	bl	800a48c <_printf_i>
 800daf0:	e7e4      	b.n	800dabc <_vfiprintf_r+0x208>
 800daf2:	bf00      	nop
 800daf4:	0800ecb8 	.word	0x0800ecb8
 800daf8:	0800ecd8 	.word	0x0800ecd8
 800dafc:	0800ec98 	.word	0x0800ec98
 800db00:	0800ec84 	.word	0x0800ec84
 800db04:	0800ec8e 	.word	0x0800ec8e
 800db08:	08009f45 	.word	0x08009f45
 800db0c:	0800d88f 	.word	0x0800d88f
 800db10:	0800ec8a 	.word	0x0800ec8a
 800db14:	00000000 	.word	0x00000000

0800db18 <nan>:
 800db18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db20 <nan+0x8>
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	00000000 	.word	0x00000000
 800db24:	7ff80000 	.word	0x7ff80000

0800db28 <_sbrk_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d06      	ldr	r5, [pc, #24]	; (800db44 <_sbrk_r+0x1c>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	f7f4 fac6 	bl	80020c4 <_sbrk>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_sbrk_r+0x1a>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_sbrk_r+0x1a>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	200005f8 	.word	0x200005f8

0800db48 <strncmp>:
 800db48:	b510      	push	{r4, lr}
 800db4a:	b17a      	cbz	r2, 800db6c <strncmp+0x24>
 800db4c:	4603      	mov	r3, r0
 800db4e:	3901      	subs	r1, #1
 800db50:	1884      	adds	r4, r0, r2
 800db52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db5a:	4290      	cmp	r0, r2
 800db5c:	d101      	bne.n	800db62 <strncmp+0x1a>
 800db5e:	42a3      	cmp	r3, r4
 800db60:	d101      	bne.n	800db66 <strncmp+0x1e>
 800db62:	1a80      	subs	r0, r0, r2
 800db64:	bd10      	pop	{r4, pc}
 800db66:	2800      	cmp	r0, #0
 800db68:	d1f3      	bne.n	800db52 <strncmp+0xa>
 800db6a:	e7fa      	b.n	800db62 <strncmp+0x1a>
 800db6c:	4610      	mov	r0, r2
 800db6e:	e7f9      	b.n	800db64 <strncmp+0x1c>

0800db70 <__swbuf_r>:
 800db70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db72:	460e      	mov	r6, r1
 800db74:	4614      	mov	r4, r2
 800db76:	4605      	mov	r5, r0
 800db78:	b118      	cbz	r0, 800db82 <__swbuf_r+0x12>
 800db7a:	6983      	ldr	r3, [r0, #24]
 800db7c:	b90b      	cbnz	r3, 800db82 <__swbuf_r+0x12>
 800db7e:	f000 f9e7 	bl	800df50 <__sinit>
 800db82:	4b21      	ldr	r3, [pc, #132]	; (800dc08 <__swbuf_r+0x98>)
 800db84:	429c      	cmp	r4, r3
 800db86:	d12b      	bne.n	800dbe0 <__swbuf_r+0x70>
 800db88:	686c      	ldr	r4, [r5, #4]
 800db8a:	69a3      	ldr	r3, [r4, #24]
 800db8c:	60a3      	str	r3, [r4, #8]
 800db8e:	89a3      	ldrh	r3, [r4, #12]
 800db90:	071a      	lsls	r2, r3, #28
 800db92:	d52f      	bpl.n	800dbf4 <__swbuf_r+0x84>
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	b36b      	cbz	r3, 800dbf4 <__swbuf_r+0x84>
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	1ac0      	subs	r0, r0, r3
 800db9e:	6963      	ldr	r3, [r4, #20]
 800dba0:	b2f6      	uxtb	r6, r6
 800dba2:	4283      	cmp	r3, r0
 800dba4:	4637      	mov	r7, r6
 800dba6:	dc04      	bgt.n	800dbb2 <__swbuf_r+0x42>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4628      	mov	r0, r5
 800dbac:	f000 f93c 	bl	800de28 <_fflush_r>
 800dbb0:	bb30      	cbnz	r0, 800dc00 <__swbuf_r+0x90>
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	60a3      	str	r3, [r4, #8]
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	6022      	str	r2, [r4, #0]
 800dbbe:	701e      	strb	r6, [r3, #0]
 800dbc0:	6963      	ldr	r3, [r4, #20]
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	4283      	cmp	r3, r0
 800dbc6:	d004      	beq.n	800dbd2 <__swbuf_r+0x62>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	07db      	lsls	r3, r3, #31
 800dbcc:	d506      	bpl.n	800dbdc <__swbuf_r+0x6c>
 800dbce:	2e0a      	cmp	r6, #10
 800dbd0:	d104      	bne.n	800dbdc <__swbuf_r+0x6c>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	f000 f927 	bl	800de28 <_fflush_r>
 800dbda:	b988      	cbnz	r0, 800dc00 <__swbuf_r+0x90>
 800dbdc:	4638      	mov	r0, r7
 800dbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <__swbuf_r+0x9c>)
 800dbe2:	429c      	cmp	r4, r3
 800dbe4:	d101      	bne.n	800dbea <__swbuf_r+0x7a>
 800dbe6:	68ac      	ldr	r4, [r5, #8]
 800dbe8:	e7cf      	b.n	800db8a <__swbuf_r+0x1a>
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <__swbuf_r+0xa0>)
 800dbec:	429c      	cmp	r4, r3
 800dbee:	bf08      	it	eq
 800dbf0:	68ec      	ldreq	r4, [r5, #12]
 800dbf2:	e7ca      	b.n	800db8a <__swbuf_r+0x1a>
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f000 f81a 	bl	800dc30 <__swsetup_r>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d0cb      	beq.n	800db98 <__swbuf_r+0x28>
 800dc00:	f04f 37ff 	mov.w	r7, #4294967295
 800dc04:	e7ea      	b.n	800dbdc <__swbuf_r+0x6c>
 800dc06:	bf00      	nop
 800dc08:	0800ecb8 	.word	0x0800ecb8
 800dc0c:	0800ecd8 	.word	0x0800ecd8
 800dc10:	0800ec98 	.word	0x0800ec98

0800dc14 <__ascii_wctomb>:
 800dc14:	b149      	cbz	r1, 800dc2a <__ascii_wctomb+0x16>
 800dc16:	2aff      	cmp	r2, #255	; 0xff
 800dc18:	bf85      	ittet	hi
 800dc1a:	238a      	movhi	r3, #138	; 0x8a
 800dc1c:	6003      	strhi	r3, [r0, #0]
 800dc1e:	700a      	strbls	r2, [r1, #0]
 800dc20:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc24:	bf98      	it	ls
 800dc26:	2001      	movls	r0, #1
 800dc28:	4770      	bx	lr
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	4770      	bx	lr
	...

0800dc30 <__swsetup_r>:
 800dc30:	4b32      	ldr	r3, [pc, #200]	; (800dcfc <__swsetup_r+0xcc>)
 800dc32:	b570      	push	{r4, r5, r6, lr}
 800dc34:	681d      	ldr	r5, [r3, #0]
 800dc36:	4606      	mov	r6, r0
 800dc38:	460c      	mov	r4, r1
 800dc3a:	b125      	cbz	r5, 800dc46 <__swsetup_r+0x16>
 800dc3c:	69ab      	ldr	r3, [r5, #24]
 800dc3e:	b913      	cbnz	r3, 800dc46 <__swsetup_r+0x16>
 800dc40:	4628      	mov	r0, r5
 800dc42:	f000 f985 	bl	800df50 <__sinit>
 800dc46:	4b2e      	ldr	r3, [pc, #184]	; (800dd00 <__swsetup_r+0xd0>)
 800dc48:	429c      	cmp	r4, r3
 800dc4a:	d10f      	bne.n	800dc6c <__swsetup_r+0x3c>
 800dc4c:	686c      	ldr	r4, [r5, #4]
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc54:	0719      	lsls	r1, r3, #28
 800dc56:	d42c      	bmi.n	800dcb2 <__swsetup_r+0x82>
 800dc58:	06dd      	lsls	r5, r3, #27
 800dc5a:	d411      	bmi.n	800dc80 <__swsetup_r+0x50>
 800dc5c:	2309      	movs	r3, #9
 800dc5e:	6033      	str	r3, [r6, #0]
 800dc60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	e03e      	b.n	800dcea <__swsetup_r+0xba>
 800dc6c:	4b25      	ldr	r3, [pc, #148]	; (800dd04 <__swsetup_r+0xd4>)
 800dc6e:	429c      	cmp	r4, r3
 800dc70:	d101      	bne.n	800dc76 <__swsetup_r+0x46>
 800dc72:	68ac      	ldr	r4, [r5, #8]
 800dc74:	e7eb      	b.n	800dc4e <__swsetup_r+0x1e>
 800dc76:	4b24      	ldr	r3, [pc, #144]	; (800dd08 <__swsetup_r+0xd8>)
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	bf08      	it	eq
 800dc7c:	68ec      	ldreq	r4, [r5, #12]
 800dc7e:	e7e6      	b.n	800dc4e <__swsetup_r+0x1e>
 800dc80:	0758      	lsls	r0, r3, #29
 800dc82:	d512      	bpl.n	800dcaa <__swsetup_r+0x7a>
 800dc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc86:	b141      	cbz	r1, 800dc9a <__swsetup_r+0x6a>
 800dc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc8c:	4299      	cmp	r1, r3
 800dc8e:	d002      	beq.n	800dc96 <__swsetup_r+0x66>
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fba9 	bl	800d3e8 <_free_r>
 800dc96:	2300      	movs	r3, #0
 800dc98:	6363      	str	r3, [r4, #52]	; 0x34
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	2300      	movs	r3, #0
 800dca4:	6063      	str	r3, [r4, #4]
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	f043 0308 	orr.w	r3, r3, #8
 800dcb0:	81a3      	strh	r3, [r4, #12]
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	b94b      	cbnz	r3, 800dcca <__swsetup_r+0x9a>
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcc0:	d003      	beq.n	800dcca <__swsetup_r+0x9a>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f000 fa09 	bl	800e0dc <__smakebuf_r>
 800dcca:	89a0      	ldrh	r0, [r4, #12]
 800dccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcd0:	f010 0301 	ands.w	r3, r0, #1
 800dcd4:	d00a      	beq.n	800dcec <__swsetup_r+0xbc>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60a3      	str	r3, [r4, #8]
 800dcda:	6963      	ldr	r3, [r4, #20]
 800dcdc:	425b      	negs	r3, r3
 800dcde:	61a3      	str	r3, [r4, #24]
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	b943      	cbnz	r3, 800dcf6 <__swsetup_r+0xc6>
 800dce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dce8:	d1ba      	bne.n	800dc60 <__swsetup_r+0x30>
 800dcea:	bd70      	pop	{r4, r5, r6, pc}
 800dcec:	0781      	lsls	r1, r0, #30
 800dcee:	bf58      	it	pl
 800dcf0:	6963      	ldrpl	r3, [r4, #20]
 800dcf2:	60a3      	str	r3, [r4, #8]
 800dcf4:	e7f4      	b.n	800dce0 <__swsetup_r+0xb0>
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	e7f7      	b.n	800dcea <__swsetup_r+0xba>
 800dcfa:	bf00      	nop
 800dcfc:	20000014 	.word	0x20000014
 800dd00:	0800ecb8 	.word	0x0800ecb8
 800dd04:	0800ecd8 	.word	0x0800ecd8
 800dd08:	0800ec98 	.word	0x0800ec98

0800dd0c <abort>:
 800dd0c:	b508      	push	{r3, lr}
 800dd0e:	2006      	movs	r0, #6
 800dd10:	f000 faa2 	bl	800e258 <raise>
 800dd14:	2001      	movs	r0, #1
 800dd16:	f7f4 f95d 	bl	8001fd4 <_exit>
	...

0800dd1c <__sflush_r>:
 800dd1c:	898a      	ldrh	r2, [r1, #12]
 800dd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd22:	4605      	mov	r5, r0
 800dd24:	0710      	lsls	r0, r2, #28
 800dd26:	460c      	mov	r4, r1
 800dd28:	d458      	bmi.n	800dddc <__sflush_r+0xc0>
 800dd2a:	684b      	ldr	r3, [r1, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dc05      	bgt.n	800dd3c <__sflush_r+0x20>
 800dd30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dc02      	bgt.n	800dd3c <__sflush_r+0x20>
 800dd36:	2000      	movs	r0, #0
 800dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd3e:	2e00      	cmp	r6, #0
 800dd40:	d0f9      	beq.n	800dd36 <__sflush_r+0x1a>
 800dd42:	2300      	movs	r3, #0
 800dd44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd48:	682f      	ldr	r7, [r5, #0]
 800dd4a:	602b      	str	r3, [r5, #0]
 800dd4c:	d032      	beq.n	800ddb4 <__sflush_r+0x98>
 800dd4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd50:	89a3      	ldrh	r3, [r4, #12]
 800dd52:	075a      	lsls	r2, r3, #29
 800dd54:	d505      	bpl.n	800dd62 <__sflush_r+0x46>
 800dd56:	6863      	ldr	r3, [r4, #4]
 800dd58:	1ac0      	subs	r0, r0, r3
 800dd5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd5c:	b10b      	cbz	r3, 800dd62 <__sflush_r+0x46>
 800dd5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd60:	1ac0      	subs	r0, r0, r3
 800dd62:	2300      	movs	r3, #0
 800dd64:	4602      	mov	r2, r0
 800dd66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd68:	6a21      	ldr	r1, [r4, #32]
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b0      	blx	r6
 800dd6e:	1c43      	adds	r3, r0, #1
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	d106      	bne.n	800dd82 <__sflush_r+0x66>
 800dd74:	6829      	ldr	r1, [r5, #0]
 800dd76:	291d      	cmp	r1, #29
 800dd78:	d82c      	bhi.n	800ddd4 <__sflush_r+0xb8>
 800dd7a:	4a2a      	ldr	r2, [pc, #168]	; (800de24 <__sflush_r+0x108>)
 800dd7c:	40ca      	lsrs	r2, r1
 800dd7e:	07d6      	lsls	r6, r2, #31
 800dd80:	d528      	bpl.n	800ddd4 <__sflush_r+0xb8>
 800dd82:	2200      	movs	r2, #0
 800dd84:	6062      	str	r2, [r4, #4]
 800dd86:	04d9      	lsls	r1, r3, #19
 800dd88:	6922      	ldr	r2, [r4, #16]
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	d504      	bpl.n	800dd98 <__sflush_r+0x7c>
 800dd8e:	1c42      	adds	r2, r0, #1
 800dd90:	d101      	bne.n	800dd96 <__sflush_r+0x7a>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	b903      	cbnz	r3, 800dd98 <__sflush_r+0x7c>
 800dd96:	6560      	str	r0, [r4, #84]	; 0x54
 800dd98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd9a:	602f      	str	r7, [r5, #0]
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	d0ca      	beq.n	800dd36 <__sflush_r+0x1a>
 800dda0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dda4:	4299      	cmp	r1, r3
 800dda6:	d002      	beq.n	800ddae <__sflush_r+0x92>
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7ff fb1d 	bl	800d3e8 <_free_r>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	6360      	str	r0, [r4, #52]	; 0x34
 800ddb2:	e7c1      	b.n	800dd38 <__sflush_r+0x1c>
 800ddb4:	6a21      	ldr	r1, [r4, #32]
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47b0      	blx	r6
 800ddbc:	1c41      	adds	r1, r0, #1
 800ddbe:	d1c7      	bne.n	800dd50 <__sflush_r+0x34>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d0c4      	beq.n	800dd50 <__sflush_r+0x34>
 800ddc6:	2b1d      	cmp	r3, #29
 800ddc8:	d001      	beq.n	800ddce <__sflush_r+0xb2>
 800ddca:	2b16      	cmp	r3, #22
 800ddcc:	d101      	bne.n	800ddd2 <__sflush_r+0xb6>
 800ddce:	602f      	str	r7, [r5, #0]
 800ddd0:	e7b1      	b.n	800dd36 <__sflush_r+0x1a>
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	e7ad      	b.n	800dd38 <__sflush_r+0x1c>
 800dddc:	690f      	ldr	r7, [r1, #16]
 800ddde:	2f00      	cmp	r7, #0
 800dde0:	d0a9      	beq.n	800dd36 <__sflush_r+0x1a>
 800dde2:	0793      	lsls	r3, r2, #30
 800dde4:	680e      	ldr	r6, [r1, #0]
 800dde6:	bf08      	it	eq
 800dde8:	694b      	ldreq	r3, [r1, #20]
 800ddea:	600f      	str	r7, [r1, #0]
 800ddec:	bf18      	it	ne
 800ddee:	2300      	movne	r3, #0
 800ddf0:	eba6 0807 	sub.w	r8, r6, r7
 800ddf4:	608b      	str	r3, [r1, #8]
 800ddf6:	f1b8 0f00 	cmp.w	r8, #0
 800ddfa:	dd9c      	ble.n	800dd36 <__sflush_r+0x1a>
 800ddfc:	6a21      	ldr	r1, [r4, #32]
 800ddfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de00:	4643      	mov	r3, r8
 800de02:	463a      	mov	r2, r7
 800de04:	4628      	mov	r0, r5
 800de06:	47b0      	blx	r6
 800de08:	2800      	cmp	r0, #0
 800de0a:	dc06      	bgt.n	800de1a <__sflush_r+0xfe>
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de12:	81a3      	strh	r3, [r4, #12]
 800de14:	f04f 30ff 	mov.w	r0, #4294967295
 800de18:	e78e      	b.n	800dd38 <__sflush_r+0x1c>
 800de1a:	4407      	add	r7, r0
 800de1c:	eba8 0800 	sub.w	r8, r8, r0
 800de20:	e7e9      	b.n	800ddf6 <__sflush_r+0xda>
 800de22:	bf00      	nop
 800de24:	20400001 	.word	0x20400001

0800de28 <_fflush_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	690b      	ldr	r3, [r1, #16]
 800de2c:	4605      	mov	r5, r0
 800de2e:	460c      	mov	r4, r1
 800de30:	b913      	cbnz	r3, 800de38 <_fflush_r+0x10>
 800de32:	2500      	movs	r5, #0
 800de34:	4628      	mov	r0, r5
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	b118      	cbz	r0, 800de42 <_fflush_r+0x1a>
 800de3a:	6983      	ldr	r3, [r0, #24]
 800de3c:	b90b      	cbnz	r3, 800de42 <_fflush_r+0x1a>
 800de3e:	f000 f887 	bl	800df50 <__sinit>
 800de42:	4b14      	ldr	r3, [pc, #80]	; (800de94 <_fflush_r+0x6c>)
 800de44:	429c      	cmp	r4, r3
 800de46:	d11b      	bne.n	800de80 <_fflush_r+0x58>
 800de48:	686c      	ldr	r4, [r5, #4]
 800de4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d0ef      	beq.n	800de32 <_fflush_r+0xa>
 800de52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de54:	07d0      	lsls	r0, r2, #31
 800de56:	d404      	bmi.n	800de62 <_fflush_r+0x3a>
 800de58:	0599      	lsls	r1, r3, #22
 800de5a:	d402      	bmi.n	800de62 <_fflush_r+0x3a>
 800de5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de5e:	f000 f915 	bl	800e08c <__retarget_lock_acquire_recursive>
 800de62:	4628      	mov	r0, r5
 800de64:	4621      	mov	r1, r4
 800de66:	f7ff ff59 	bl	800dd1c <__sflush_r>
 800de6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de6c:	07da      	lsls	r2, r3, #31
 800de6e:	4605      	mov	r5, r0
 800de70:	d4e0      	bmi.n	800de34 <_fflush_r+0xc>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	059b      	lsls	r3, r3, #22
 800de76:	d4dd      	bmi.n	800de34 <_fflush_r+0xc>
 800de78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de7a:	f000 f908 	bl	800e08e <__retarget_lock_release_recursive>
 800de7e:	e7d9      	b.n	800de34 <_fflush_r+0xc>
 800de80:	4b05      	ldr	r3, [pc, #20]	; (800de98 <_fflush_r+0x70>)
 800de82:	429c      	cmp	r4, r3
 800de84:	d101      	bne.n	800de8a <_fflush_r+0x62>
 800de86:	68ac      	ldr	r4, [r5, #8]
 800de88:	e7df      	b.n	800de4a <_fflush_r+0x22>
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <_fflush_r+0x74>)
 800de8c:	429c      	cmp	r4, r3
 800de8e:	bf08      	it	eq
 800de90:	68ec      	ldreq	r4, [r5, #12]
 800de92:	e7da      	b.n	800de4a <_fflush_r+0x22>
 800de94:	0800ecb8 	.word	0x0800ecb8
 800de98:	0800ecd8 	.word	0x0800ecd8
 800de9c:	0800ec98 	.word	0x0800ec98

0800dea0 <std>:
 800dea0:	2300      	movs	r3, #0
 800dea2:	b510      	push	{r4, lr}
 800dea4:	4604      	mov	r4, r0
 800dea6:	e9c0 3300 	strd	r3, r3, [r0]
 800deaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800deae:	6083      	str	r3, [r0, #8]
 800deb0:	8181      	strh	r1, [r0, #12]
 800deb2:	6643      	str	r3, [r0, #100]	; 0x64
 800deb4:	81c2      	strh	r2, [r0, #14]
 800deb6:	6183      	str	r3, [r0, #24]
 800deb8:	4619      	mov	r1, r3
 800deba:	2208      	movs	r2, #8
 800debc:	305c      	adds	r0, #92	; 0x5c
 800debe:	f7fb ff99 	bl	8009df4 <memset>
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <std+0x38>)
 800dec4:	6263      	str	r3, [r4, #36]	; 0x24
 800dec6:	4b05      	ldr	r3, [pc, #20]	; (800dedc <std+0x3c>)
 800dec8:	62a3      	str	r3, [r4, #40]	; 0x28
 800deca:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <std+0x40>)
 800decc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dece:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <std+0x44>)
 800ded0:	6224      	str	r4, [r4, #32]
 800ded2:	6323      	str	r3, [r4, #48]	; 0x30
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	bf00      	nop
 800ded8:	0800e291 	.word	0x0800e291
 800dedc:	0800e2b3 	.word	0x0800e2b3
 800dee0:	0800e2eb 	.word	0x0800e2eb
 800dee4:	0800e30f 	.word	0x0800e30f

0800dee8 <_cleanup_r>:
 800dee8:	4901      	ldr	r1, [pc, #4]	; (800def0 <_cleanup_r+0x8>)
 800deea:	f000 b8af 	b.w	800e04c <_fwalk_reent>
 800deee:	bf00      	nop
 800def0:	0800de29 	.word	0x0800de29

0800def4 <__sfmoreglue>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	2268      	movs	r2, #104	; 0x68
 800def8:	1e4d      	subs	r5, r1, #1
 800defa:	4355      	muls	r5, r2
 800defc:	460e      	mov	r6, r1
 800defe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df02:	f7ff fadd 	bl	800d4c0 <_malloc_r>
 800df06:	4604      	mov	r4, r0
 800df08:	b140      	cbz	r0, 800df1c <__sfmoreglue+0x28>
 800df0a:	2100      	movs	r1, #0
 800df0c:	e9c0 1600 	strd	r1, r6, [r0]
 800df10:	300c      	adds	r0, #12
 800df12:	60a0      	str	r0, [r4, #8]
 800df14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df18:	f7fb ff6c 	bl	8009df4 <memset>
 800df1c:	4620      	mov	r0, r4
 800df1e:	bd70      	pop	{r4, r5, r6, pc}

0800df20 <__sfp_lock_acquire>:
 800df20:	4801      	ldr	r0, [pc, #4]	; (800df28 <__sfp_lock_acquire+0x8>)
 800df22:	f000 b8b3 	b.w	800e08c <__retarget_lock_acquire_recursive>
 800df26:	bf00      	nop
 800df28:	200005f5 	.word	0x200005f5

0800df2c <__sfp_lock_release>:
 800df2c:	4801      	ldr	r0, [pc, #4]	; (800df34 <__sfp_lock_release+0x8>)
 800df2e:	f000 b8ae 	b.w	800e08e <__retarget_lock_release_recursive>
 800df32:	bf00      	nop
 800df34:	200005f5 	.word	0x200005f5

0800df38 <__sinit_lock_acquire>:
 800df38:	4801      	ldr	r0, [pc, #4]	; (800df40 <__sinit_lock_acquire+0x8>)
 800df3a:	f000 b8a7 	b.w	800e08c <__retarget_lock_acquire_recursive>
 800df3e:	bf00      	nop
 800df40:	200005f6 	.word	0x200005f6

0800df44 <__sinit_lock_release>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__sinit_lock_release+0x8>)
 800df46:	f000 b8a2 	b.w	800e08e <__retarget_lock_release_recursive>
 800df4a:	bf00      	nop
 800df4c:	200005f6 	.word	0x200005f6

0800df50 <__sinit>:
 800df50:	b510      	push	{r4, lr}
 800df52:	4604      	mov	r4, r0
 800df54:	f7ff fff0 	bl	800df38 <__sinit_lock_acquire>
 800df58:	69a3      	ldr	r3, [r4, #24]
 800df5a:	b11b      	cbz	r3, 800df64 <__sinit+0x14>
 800df5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df60:	f7ff bff0 	b.w	800df44 <__sinit_lock_release>
 800df64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df68:	6523      	str	r3, [r4, #80]	; 0x50
 800df6a:	4b13      	ldr	r3, [pc, #76]	; (800dfb8 <__sinit+0x68>)
 800df6c:	4a13      	ldr	r2, [pc, #76]	; (800dfbc <__sinit+0x6c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	62a2      	str	r2, [r4, #40]	; 0x28
 800df72:	42a3      	cmp	r3, r4
 800df74:	bf04      	itt	eq
 800df76:	2301      	moveq	r3, #1
 800df78:	61a3      	streq	r3, [r4, #24]
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 f820 	bl	800dfc0 <__sfp>
 800df80:	6060      	str	r0, [r4, #4]
 800df82:	4620      	mov	r0, r4
 800df84:	f000 f81c 	bl	800dfc0 <__sfp>
 800df88:	60a0      	str	r0, [r4, #8]
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 f818 	bl	800dfc0 <__sfp>
 800df90:	2200      	movs	r2, #0
 800df92:	60e0      	str	r0, [r4, #12]
 800df94:	2104      	movs	r1, #4
 800df96:	6860      	ldr	r0, [r4, #4]
 800df98:	f7ff ff82 	bl	800dea0 <std>
 800df9c:	68a0      	ldr	r0, [r4, #8]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	2109      	movs	r1, #9
 800dfa2:	f7ff ff7d 	bl	800dea0 <std>
 800dfa6:	68e0      	ldr	r0, [r4, #12]
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	2112      	movs	r1, #18
 800dfac:	f7ff ff78 	bl	800dea0 <std>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	61a3      	str	r3, [r4, #24]
 800dfb4:	e7d2      	b.n	800df5c <__sinit+0xc>
 800dfb6:	bf00      	nop
 800dfb8:	0800e7fc 	.word	0x0800e7fc
 800dfbc:	0800dee9 	.word	0x0800dee9

0800dfc0 <__sfp>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	f7ff ffac 	bl	800df20 <__sfp_lock_acquire>
 800dfc8:	4b1e      	ldr	r3, [pc, #120]	; (800e044 <__sfp+0x84>)
 800dfca:	681e      	ldr	r6, [r3, #0]
 800dfcc:	69b3      	ldr	r3, [r6, #24]
 800dfce:	b913      	cbnz	r3, 800dfd6 <__sfp+0x16>
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f7ff ffbd 	bl	800df50 <__sinit>
 800dfd6:	3648      	adds	r6, #72	; 0x48
 800dfd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	d503      	bpl.n	800dfe8 <__sfp+0x28>
 800dfe0:	6833      	ldr	r3, [r6, #0]
 800dfe2:	b30b      	cbz	r3, 800e028 <__sfp+0x68>
 800dfe4:	6836      	ldr	r6, [r6, #0]
 800dfe6:	e7f7      	b.n	800dfd8 <__sfp+0x18>
 800dfe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfec:	b9d5      	cbnz	r5, 800e024 <__sfp+0x64>
 800dfee:	4b16      	ldr	r3, [pc, #88]	; (800e048 <__sfp+0x88>)
 800dff0:	60e3      	str	r3, [r4, #12]
 800dff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dff6:	6665      	str	r5, [r4, #100]	; 0x64
 800dff8:	f000 f847 	bl	800e08a <__retarget_lock_init_recursive>
 800dffc:	f7ff ff96 	bl	800df2c <__sfp_lock_release>
 800e000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e008:	6025      	str	r5, [r4, #0]
 800e00a:	61a5      	str	r5, [r4, #24]
 800e00c:	2208      	movs	r2, #8
 800e00e:	4629      	mov	r1, r5
 800e010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e014:	f7fb feee 	bl	8009df4 <memset>
 800e018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e01c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e020:	4620      	mov	r0, r4
 800e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e024:	3468      	adds	r4, #104	; 0x68
 800e026:	e7d9      	b.n	800dfdc <__sfp+0x1c>
 800e028:	2104      	movs	r1, #4
 800e02a:	4638      	mov	r0, r7
 800e02c:	f7ff ff62 	bl	800def4 <__sfmoreglue>
 800e030:	4604      	mov	r4, r0
 800e032:	6030      	str	r0, [r6, #0]
 800e034:	2800      	cmp	r0, #0
 800e036:	d1d5      	bne.n	800dfe4 <__sfp+0x24>
 800e038:	f7ff ff78 	bl	800df2c <__sfp_lock_release>
 800e03c:	230c      	movs	r3, #12
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	e7ee      	b.n	800e020 <__sfp+0x60>
 800e042:	bf00      	nop
 800e044:	0800e7fc 	.word	0x0800e7fc
 800e048:	ffff0001 	.word	0xffff0001

0800e04c <_fwalk_reent>:
 800e04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e050:	4606      	mov	r6, r0
 800e052:	4688      	mov	r8, r1
 800e054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e058:	2700      	movs	r7, #0
 800e05a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e05e:	f1b9 0901 	subs.w	r9, r9, #1
 800e062:	d505      	bpl.n	800e070 <_fwalk_reent+0x24>
 800e064:	6824      	ldr	r4, [r4, #0]
 800e066:	2c00      	cmp	r4, #0
 800e068:	d1f7      	bne.n	800e05a <_fwalk_reent+0xe>
 800e06a:	4638      	mov	r0, r7
 800e06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e070:	89ab      	ldrh	r3, [r5, #12]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d907      	bls.n	800e086 <_fwalk_reent+0x3a>
 800e076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e07a:	3301      	adds	r3, #1
 800e07c:	d003      	beq.n	800e086 <_fwalk_reent+0x3a>
 800e07e:	4629      	mov	r1, r5
 800e080:	4630      	mov	r0, r6
 800e082:	47c0      	blx	r8
 800e084:	4307      	orrs	r7, r0
 800e086:	3568      	adds	r5, #104	; 0x68
 800e088:	e7e9      	b.n	800e05e <_fwalk_reent+0x12>

0800e08a <__retarget_lock_init_recursive>:
 800e08a:	4770      	bx	lr

0800e08c <__retarget_lock_acquire_recursive>:
 800e08c:	4770      	bx	lr

0800e08e <__retarget_lock_release_recursive>:
 800e08e:	4770      	bx	lr

0800e090 <__swhatbuf_r>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	460e      	mov	r6, r1
 800e094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e098:	2900      	cmp	r1, #0
 800e09a:	b096      	sub	sp, #88	; 0x58
 800e09c:	4614      	mov	r4, r2
 800e09e:	461d      	mov	r5, r3
 800e0a0:	da08      	bge.n	800e0b4 <__swhatbuf_r+0x24>
 800e0a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	602a      	str	r2, [r5, #0]
 800e0aa:	061a      	lsls	r2, r3, #24
 800e0ac:	d410      	bmi.n	800e0d0 <__swhatbuf_r+0x40>
 800e0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0b2:	e00e      	b.n	800e0d2 <__swhatbuf_r+0x42>
 800e0b4:	466a      	mov	r2, sp
 800e0b6:	f000 f951 	bl	800e35c <_fstat_r>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	dbf1      	blt.n	800e0a2 <__swhatbuf_r+0x12>
 800e0be:	9a01      	ldr	r2, [sp, #4]
 800e0c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0c8:	425a      	negs	r2, r3
 800e0ca:	415a      	adcs	r2, r3
 800e0cc:	602a      	str	r2, [r5, #0]
 800e0ce:	e7ee      	b.n	800e0ae <__swhatbuf_r+0x1e>
 800e0d0:	2340      	movs	r3, #64	; 0x40
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	b016      	add	sp, #88	; 0x58
 800e0d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e0dc <__smakebuf_r>:
 800e0dc:	898b      	ldrh	r3, [r1, #12]
 800e0de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0e0:	079d      	lsls	r5, r3, #30
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	d507      	bpl.n	800e0f8 <__smakebuf_r+0x1c>
 800e0e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	6123      	str	r3, [r4, #16]
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	6163      	str	r3, [r4, #20]
 800e0f4:	b002      	add	sp, #8
 800e0f6:	bd70      	pop	{r4, r5, r6, pc}
 800e0f8:	ab01      	add	r3, sp, #4
 800e0fa:	466a      	mov	r2, sp
 800e0fc:	f7ff ffc8 	bl	800e090 <__swhatbuf_r>
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	4605      	mov	r5, r0
 800e104:	4630      	mov	r0, r6
 800e106:	f7ff f9db 	bl	800d4c0 <_malloc_r>
 800e10a:	b948      	cbnz	r0, 800e120 <__smakebuf_r+0x44>
 800e10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e110:	059a      	lsls	r2, r3, #22
 800e112:	d4ef      	bmi.n	800e0f4 <__smakebuf_r+0x18>
 800e114:	f023 0303 	bic.w	r3, r3, #3
 800e118:	f043 0302 	orr.w	r3, r3, #2
 800e11c:	81a3      	strh	r3, [r4, #12]
 800e11e:	e7e3      	b.n	800e0e8 <__smakebuf_r+0xc>
 800e120:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <__smakebuf_r+0x7c>)
 800e122:	62b3      	str	r3, [r6, #40]	; 0x28
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	6020      	str	r0, [r4, #0]
 800e128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e12c:	81a3      	strh	r3, [r4, #12]
 800e12e:	9b00      	ldr	r3, [sp, #0]
 800e130:	6163      	str	r3, [r4, #20]
 800e132:	9b01      	ldr	r3, [sp, #4]
 800e134:	6120      	str	r0, [r4, #16]
 800e136:	b15b      	cbz	r3, 800e150 <__smakebuf_r+0x74>
 800e138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e13c:	4630      	mov	r0, r6
 800e13e:	f000 f91f 	bl	800e380 <_isatty_r>
 800e142:	b128      	cbz	r0, 800e150 <__smakebuf_r+0x74>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	f023 0303 	bic.w	r3, r3, #3
 800e14a:	f043 0301 	orr.w	r3, r3, #1
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	89a0      	ldrh	r0, [r4, #12]
 800e152:	4305      	orrs	r5, r0
 800e154:	81a5      	strh	r5, [r4, #12]
 800e156:	e7cd      	b.n	800e0f4 <__smakebuf_r+0x18>
 800e158:	0800dee9 	.word	0x0800dee9

0800e15c <memmove>:
 800e15c:	4288      	cmp	r0, r1
 800e15e:	b510      	push	{r4, lr}
 800e160:	eb01 0402 	add.w	r4, r1, r2
 800e164:	d902      	bls.n	800e16c <memmove+0x10>
 800e166:	4284      	cmp	r4, r0
 800e168:	4623      	mov	r3, r4
 800e16a:	d807      	bhi.n	800e17c <memmove+0x20>
 800e16c:	1e43      	subs	r3, r0, #1
 800e16e:	42a1      	cmp	r1, r4
 800e170:	d008      	beq.n	800e184 <memmove+0x28>
 800e172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e17a:	e7f8      	b.n	800e16e <memmove+0x12>
 800e17c:	4402      	add	r2, r0
 800e17e:	4601      	mov	r1, r0
 800e180:	428a      	cmp	r2, r1
 800e182:	d100      	bne.n	800e186 <memmove+0x2a>
 800e184:	bd10      	pop	{r4, pc}
 800e186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e18a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e18e:	e7f7      	b.n	800e180 <memmove+0x24>

0800e190 <__malloc_lock>:
 800e190:	4801      	ldr	r0, [pc, #4]	; (800e198 <__malloc_lock+0x8>)
 800e192:	f7ff bf7b 	b.w	800e08c <__retarget_lock_acquire_recursive>
 800e196:	bf00      	nop
 800e198:	200005f4 	.word	0x200005f4

0800e19c <__malloc_unlock>:
 800e19c:	4801      	ldr	r0, [pc, #4]	; (800e1a4 <__malloc_unlock+0x8>)
 800e19e:	f7ff bf76 	b.w	800e08e <__retarget_lock_release_recursive>
 800e1a2:	bf00      	nop
 800e1a4:	200005f4 	.word	0x200005f4

0800e1a8 <_realloc_r>:
 800e1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ac:	4680      	mov	r8, r0
 800e1ae:	4614      	mov	r4, r2
 800e1b0:	460e      	mov	r6, r1
 800e1b2:	b921      	cbnz	r1, 800e1be <_realloc_r+0x16>
 800e1b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	f7ff b981 	b.w	800d4c0 <_malloc_r>
 800e1be:	b92a      	cbnz	r2, 800e1cc <_realloc_r+0x24>
 800e1c0:	f7ff f912 	bl	800d3e8 <_free_r>
 800e1c4:	4625      	mov	r5, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1cc:	f000 f8fa 	bl	800e3c4 <_malloc_usable_size_r>
 800e1d0:	4284      	cmp	r4, r0
 800e1d2:	4607      	mov	r7, r0
 800e1d4:	d802      	bhi.n	800e1dc <_realloc_r+0x34>
 800e1d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1da:	d812      	bhi.n	800e202 <_realloc_r+0x5a>
 800e1dc:	4621      	mov	r1, r4
 800e1de:	4640      	mov	r0, r8
 800e1e0:	f7ff f96e 	bl	800d4c0 <_malloc_r>
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d0ed      	beq.n	800e1c6 <_realloc_r+0x1e>
 800e1ea:	42bc      	cmp	r4, r7
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	bf28      	it	cs
 800e1f2:	463a      	movcs	r2, r7
 800e1f4:	f7fe fc12 	bl	800ca1c <memcpy>
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	f7ff f8f4 	bl	800d3e8 <_free_r>
 800e200:	e7e1      	b.n	800e1c6 <_realloc_r+0x1e>
 800e202:	4635      	mov	r5, r6
 800e204:	e7df      	b.n	800e1c6 <_realloc_r+0x1e>

0800e206 <_raise_r>:
 800e206:	291f      	cmp	r1, #31
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4604      	mov	r4, r0
 800e20c:	460d      	mov	r5, r1
 800e20e:	d904      	bls.n	800e21a <_raise_r+0x14>
 800e210:	2316      	movs	r3, #22
 800e212:	6003      	str	r3, [r0, #0]
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e21c:	b112      	cbz	r2, 800e224 <_raise_r+0x1e>
 800e21e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e222:	b94b      	cbnz	r3, 800e238 <_raise_r+0x32>
 800e224:	4620      	mov	r0, r4
 800e226:	f000 f831 	bl	800e28c <_getpid_r>
 800e22a:	462a      	mov	r2, r5
 800e22c:	4601      	mov	r1, r0
 800e22e:	4620      	mov	r0, r4
 800e230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e234:	f000 b818 	b.w	800e268 <_kill_r>
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d00a      	beq.n	800e252 <_raise_r+0x4c>
 800e23c:	1c59      	adds	r1, r3, #1
 800e23e:	d103      	bne.n	800e248 <_raise_r+0x42>
 800e240:	2316      	movs	r3, #22
 800e242:	6003      	str	r3, [r0, #0]
 800e244:	2001      	movs	r0, #1
 800e246:	e7e7      	b.n	800e218 <_raise_r+0x12>
 800e248:	2400      	movs	r4, #0
 800e24a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e24e:	4628      	mov	r0, r5
 800e250:	4798      	blx	r3
 800e252:	2000      	movs	r0, #0
 800e254:	e7e0      	b.n	800e218 <_raise_r+0x12>
	...

0800e258 <raise>:
 800e258:	4b02      	ldr	r3, [pc, #8]	; (800e264 <raise+0xc>)
 800e25a:	4601      	mov	r1, r0
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	f7ff bfd2 	b.w	800e206 <_raise_r>
 800e262:	bf00      	nop
 800e264:	20000014 	.word	0x20000014

0800e268 <_kill_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	; (800e288 <_kill_r+0x20>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f3 fe9d 	bl	8001fb4 <_kill>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d102      	bne.n	800e284 <_kill_r+0x1c>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	b103      	cbz	r3, 800e284 <_kill_r+0x1c>
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	200005f8 	.word	0x200005f8

0800e28c <_getpid_r>:
 800e28c:	f7f3 be8a 	b.w	8001fa4 <_getpid>

0800e290 <__sread>:
 800e290:	b510      	push	{r4, lr}
 800e292:	460c      	mov	r4, r1
 800e294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e298:	f000 f89c 	bl	800e3d4 <_read_r>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	bfab      	itete	ge
 800e2a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e2a4:	181b      	addge	r3, r3, r0
 800e2a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2aa:	bfac      	ite	ge
 800e2ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2ae:	81a3      	strhlt	r3, [r4, #12]
 800e2b0:	bd10      	pop	{r4, pc}

0800e2b2 <__swrite>:
 800e2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b6:	461f      	mov	r7, r3
 800e2b8:	898b      	ldrh	r3, [r1, #12]
 800e2ba:	05db      	lsls	r3, r3, #23
 800e2bc:	4605      	mov	r5, r0
 800e2be:	460c      	mov	r4, r1
 800e2c0:	4616      	mov	r6, r2
 800e2c2:	d505      	bpl.n	800e2d0 <__swrite+0x1e>
 800e2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f000 f868 	bl	800e3a0 <_lseek_r>
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2da:	81a3      	strh	r3, [r4, #12]
 800e2dc:	4632      	mov	r2, r6
 800e2de:	463b      	mov	r3, r7
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e6:	f000 b817 	b.w	800e318 <_write_r>

0800e2ea <__sseek>:
 800e2ea:	b510      	push	{r4, lr}
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f2:	f000 f855 	bl	800e3a0 <_lseek_r>
 800e2f6:	1c43      	adds	r3, r0, #1
 800e2f8:	89a3      	ldrh	r3, [r4, #12]
 800e2fa:	bf15      	itete	ne
 800e2fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e306:	81a3      	strheq	r3, [r4, #12]
 800e308:	bf18      	it	ne
 800e30a:	81a3      	strhne	r3, [r4, #12]
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <__sclose>:
 800e30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e312:	f000 b813 	b.w	800e33c <_close_r>
	...

0800e318 <_write_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	; (800e338 <_write_r+0x20>)
 800e31c:	4604      	mov	r4, r0
 800e31e:	4608      	mov	r0, r1
 800e320:	4611      	mov	r1, r2
 800e322:	2200      	movs	r2, #0
 800e324:	602a      	str	r2, [r5, #0]
 800e326:	461a      	mov	r2, r3
 800e328:	f7f3 fe7b 	bl	8002022 <_write>
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	d102      	bne.n	800e336 <_write_r+0x1e>
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	b103      	cbz	r3, 800e336 <_write_r+0x1e>
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	bd38      	pop	{r3, r4, r5, pc}
 800e338:	200005f8 	.word	0x200005f8

0800e33c <_close_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d06      	ldr	r5, [pc, #24]	; (800e358 <_close_r+0x1c>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	f7f3 fe87 	bl	800205a <_close>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_close_r+0x1a>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_close_r+0x1a>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	200005f8 	.word	0x200005f8

0800e35c <_fstat_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d07      	ldr	r5, [pc, #28]	; (800e37c <_fstat_r+0x20>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	4611      	mov	r1, r2
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	f7f3 fe82 	bl	8002072 <_fstat>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	d102      	bne.n	800e378 <_fstat_r+0x1c>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	b103      	cbz	r3, 800e378 <_fstat_r+0x1c>
 800e376:	6023      	str	r3, [r4, #0]
 800e378:	bd38      	pop	{r3, r4, r5, pc}
 800e37a:	bf00      	nop
 800e37c:	200005f8 	.word	0x200005f8

0800e380 <_isatty_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4d06      	ldr	r5, [pc, #24]	; (800e39c <_isatty_r+0x1c>)
 800e384:	2300      	movs	r3, #0
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	f7f3 fe81 	bl	8002092 <_isatty>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_isatty_r+0x1a>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_isatty_r+0x1a>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	200005f8 	.word	0x200005f8

0800e3a0 <_lseek_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	; (800e3c0 <_lseek_r+0x20>)
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f7f3 fe7a 	bl	80020a8 <_lseek>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_lseek_r+0x1e>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_lseek_r+0x1e>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	200005f8 	.word	0x200005f8

0800e3c4 <_malloc_usable_size_r>:
 800e3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3c8:	1f18      	subs	r0, r3, #4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bfbc      	itt	lt
 800e3ce:	580b      	ldrlt	r3, [r1, r0]
 800e3d0:	18c0      	addlt	r0, r0, r3
 800e3d2:	4770      	bx	lr

0800e3d4 <_read_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4d07      	ldr	r5, [pc, #28]	; (800e3f4 <_read_r+0x20>)
 800e3d8:	4604      	mov	r4, r0
 800e3da:	4608      	mov	r0, r1
 800e3dc:	4611      	mov	r1, r2
 800e3de:	2200      	movs	r2, #0
 800e3e0:	602a      	str	r2, [r5, #0]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	f7f3 fe00 	bl	8001fe8 <_read>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d102      	bne.n	800e3f2 <_read_r+0x1e>
 800e3ec:	682b      	ldr	r3, [r5, #0]
 800e3ee:	b103      	cbz	r3, 800e3f2 <_read_r+0x1e>
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	200005f8 	.word	0x200005f8

0800e3f8 <_init>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	bf00      	nop
 800e3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fe:	bc08      	pop	{r3}
 800e400:	469e      	mov	lr, r3
 800e402:	4770      	bx	lr

0800e404 <_fini>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr
